# name: benchmark/trainbenchmark/semaphoreneighbor.benchmark
# description: The Train Benchmark's SemaphoreNeighbor query
# group: [trainbenchmark]

load
CREATE TABLE Route          (id int NOT NULL, active int, entry int, exit int, PRIMARY KEY (id));
CREATE TABLE Region         (id int NOT NULL, PRIMARY KEY (id));
CREATE TABLE Segment        (id int NOT NULL, length int NOT NULL DEFAULT 1, PRIMARY KEY (id));
CREATE TABLE Sensor         (id int NOT NULL, region int NOT NULL, PRIMARY KEY (id));
CREATE TABLE Semaphore      (id int NOT NULL, segment int NOT NULL, signal int NOT NULL, PRIMARY KEY (id));
CREATE TABLE Switch         (id int NOT NULL, currentPosition int NOT NULL, PRIMARY KEY (id));
CREATE TABLE SwitchPosition (id int NOT NULL, route int, target int, position int NOT NULL, PRIMARY KEY (id));
CREATE TABLE TrackElement   (id int NOT NULL, region int NOT NULL, PRIMARY KEY (id));
CREATE TABLE connectsTo     (TrackElement1_id int NOT NULL, TrackElement2_id int NOT NULL, PRIMARY KEY (TrackElement1_id, TrackElement2_id));
CREATE TABLE monitoredBy    (TrackElement_id int NOT NULL, Sensor_id int NOT NULL, PRIMARY KEY (TrackElement_id, Sensor_id));
CREATE TABLE requires       (Route_id int NOT NULL, Sensor_id int NOT NULL, PRIMARY KEY (Route_id, Sensor_id));
COPY connectsTo     FROM 'benchmark/trainbenchmark/sf1/connectsTo.csv';
COPY monitoredBy    FROM 'benchmark/trainbenchmark/sf1/monitoredBy.csv';
COPY Region         FROM 'benchmark/trainbenchmark/sf1/Region.csv';
COPY requires       FROM 'benchmark/trainbenchmark/sf1/requires.csv';
COPY Route          FROM 'benchmark/trainbenchmark/sf1/Route.csv';
COPY Segment        FROM 'benchmark/trainbenchmark/sf1/Segment.csv';
COPY Semaphore      FROM 'benchmark/trainbenchmark/sf1/Semaphore.csv';
COPY Sensor         FROM 'benchmark/trainbenchmark/sf1/Sensor.csv';
COPY Switch         FROM 'benchmark/trainbenchmark/sf1/Switch.csv';
COPY SwitchPosition FROM 'benchmark/trainbenchmark/sf1/SwitchPosition.csv';
COPY TrackElement   FROM 'benchmark/trainbenchmark/sf1/TrackElement.csv';

run
SELECT
    Route1.exit AS semaphore,
    Route1.id AS route1,
    Route2.id AS route2,
    requires1.Sensor_id AS sensor1,
    requires2.Sensor_id AS sensor2,
    ct.TrackElement1_id AS te1,
    ct.TrackElement2_id AS te2
FROM Route AS Route1
INNER JOIN requires AS requires1
ON Route1.id = requires1.Route_id
INNER JOIN monitoredBy AS mb1
ON requires1.Sensor_id = mb1.Sensor_id
INNER JOIN connectsTo AS ct
ON mb1.TrackElement_id = ct.TrackElement1_id
INNER JOIN monitoredBy AS mb2
ON ct.TrackElement2_id = mb2.TrackElement_id
INNER JOIN requires AS requires2
ON mb2.Sensor_id = requires2.Sensor_id
INNER JOIN Route AS Route2
ON requires2.Route_id = Route2.id
WHERE Route1.id != Route2.id
  AND Route1.exit IS NOT NULL
  AND (Route2.entry IS NULL OR Route2.entry != Route1.exit);

result IIIIIII
67	68	213	205	264	210	215
67	68	213	205	258	210	215
67	68	213	205	252	210	215
67	68	213	205	246	210	215
67	68	213	205	234	210	215
67	68	213	205	228	210	215
67	68	213	205	222	210	215
67	68	213	205	216	210	215
