% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Connection.R
\docType{class}
\name{duckdb_connection}
\alias{duckdb_connection}
\alias{duckdb_register}
\alias{duckdb_unregister}
\alias{duckdb_connection-class}
\alias{show,duckdb_connection-method}
\alias{dbIsValid,duckdb_connection-method}
\alias{dbDisconnect,duckdb_connection-method}
\alias{dbSendQuery,duckdb_connection,character-method}
\alias{dbDataType,duckdb_connection-method}
\alias{dbWriteTable,duckdb_connection,character,data.frame-method}
\alias{dbListTables,duckdb_connection-method}
\alias{dbExistsTable,duckdb_connection,character-method}
\alias{dbListFields,duckdb_connection,character-method}
\alias{dbRemoveTable,duckdb_connection,character-method}
\alias{dbGetInfo,duckdb_connection-method}
\alias{dbBegin,duckdb_connection-method}
\alias{dbCommit,duckdb_connection-method}
\alias{dbRollback,duckdb_connection-method}
\alias{read_csv_duckdb}
\title{DuckDB Connection}
\usage{
duckdb_connection(duckdb_driver, debug)

duckdb_register(conn, name, df)

duckdb_unregister(conn, name)

\S4method{show}{duckdb_connection}(object)

\S4method{dbIsValid}{duckdb_connection}(dbObj, ...)

\S4method{dbDisconnect}{duckdb_connection}(conn, ..., shutdown = FALSE)

\S4method{dbSendQuery}{duckdb_connection,character}(conn, statement, ..., immediate = FALSE)

\S4method{dbDataType}{duckdb_connection}(dbObj, obj, ...)

\S4method{dbWriteTable}{duckdb_connection,character,data.frame}(
  conn,
  name,
  value,
  row.names = FALSE,
  overwrite = FALSE,
  append = FALSE,
  field.types = NULL,
  temporary = FALSE,
  ...
)

\S4method{dbListTables}{duckdb_connection}(conn, ...)

\S4method{dbExistsTable}{duckdb_connection,character}(conn, name, ...)

\S4method{dbListFields}{duckdb_connection,character}(conn, name, ...)

\S4method{dbRemoveTable}{duckdb_connection,character}(conn, name, ...)

\S4method{dbGetInfo}{duckdb_connection}(dbObj, ...)

\S4method{dbBegin}{duckdb_connection}(conn, ...)

\S4method{dbCommit}{duckdb_connection}(conn, ...)

\S4method{dbRollback}{duckdb_connection}(conn, ...)

read_csv_duckdb(
  conn,
  files,
  tablename,
  header = TRUE,
  na.strings = "",
  nrow.check = 500,
  delim = ",",
  quote = "\\"",
  col.names = NULL,
  lower.case.names = FALSE,
  sep = delim,
  transaction = TRUE,
  ...
)
}
\arguments{
\item{duckdb_driver}{FIXME}

\item{debug}{FIXME}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{name}{A character string specifying the unquoted DBMS table name,
or the result of a call to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{df}{FIXME}

\item{object}{Any R object}

\item{dbObj}{An object inheriting from \linkS4class{DBIObject},
i.e. \linkS4class{DBIDriver}, \linkS4class{DBIConnection},
or a \linkS4class{DBIResult}}

\item{...}{Other arguments to methods.}

\item{shutdown}{FIXME}

\item{statement}{a character string containing SQL.}

\item{immediate}{FIXME}

\item{obj}{An R object whose SQL type we want to determine.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{row.names}{FIXME}

\item{overwrite}{FIXME}

\item{append}{FIXME}

\item{field.types}{FIXME}

\item{temporary}{FIXME}

\item{files}{FIXME}

\item{tablename}{FIXME}

\item{header}{FIXME}

\item{na.strings}{FIXME}

\item{nrow.check}{FIXME}

\item{delim}{FIXME}

\item{quote}{FIXME}

\item{col.names}{FIXME}

\item{lower.case.names}{FIXME}

\item{sep}{FIXME}

\item{transaction}{FIXME}
}
\description{
TBD
}
