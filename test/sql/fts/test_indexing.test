# name: test/sql/fts/test_indexing.test
# description: Full text search indexing
# group: [fts]

require fts

statement ok
PRAGMA enable_verification

statement error
PRAGMA drop_fts_index('test')

statement ok
CREATE SCHEMA fts_main_test

statement ok
PRAGMA drop_fts_index('test')

statement ok
CREATE TABLE documents(id VARCHAR, body VARCHAR)

statement ok
INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING')

# non-existant parameters should yield an error
statement error
PRAGMA create_fts_index('documents', 'id', 'body', nonexistant_param='dummy')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', stemmer='turkish')

# cannot overwrite without supplying the 'overwrite' param
statement error
PRAGMA create_fts_index('documents', 'id', 'body')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', overwrite=1)

# drop and re-create
statement ok
PRAGMA drop_fts_index('documents')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body')

query III
SELECT termid, docid, pos FROM fts_main_documents.terms
----
1	1	1
1	1	2
1	1	3
2	2	1
2	2	2
2	2	3
2	2	4
3	3	1
3	3	2
3	3	3
3	3	4
3	3	5

query III
SELECT name, docid, len FROM fts_main_documents.docs
----
doc1	1	3
doc2	2	4
doc3	3	5

query III
SELECT termid, term, df FROM fts_main_documents.dict
----
1	quack	1
2	bark	1
3	meow	1

query T
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term)
SELECT * FROM qtermids
----
1
2

query II
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids))
SELECT * FROM qterms
----
1	1
1	1
1	1
2	2
2	2
2	2
2	2

# log((3 - df + 0.5) / (df + 0.5)) -- number of documents = 3
# (len / 4) -- average document length is 4
# HAVING COUNT(DISTINCT termid) = 3 -- commented this out because there is no document with all terms present
query II
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids)),
subscores AS (
SELECT docs.docid, len, term_tf.termid,
        tf, df, (log((3 - df + 0.5) / (df + 0.5))* ((tf * (1.2 + 1)/(tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) AS subscore
FROM (SELECT termid, docid, COUNT(*) AS tf FROM qterms
    GROUP BY docid, termid) AS term_tf
    JOIN (SELECT docid FROM qterms
        GROUP BY docid) -- HAVING COUNT(DISTINCT termid) = 3)
        AS cdocs ON term_tf.docid = cdocs.docid
    JOIN fts_main_documents.docs AS docs ON term_tf.docid = docs.docid
    JOIN fts_main_documents.dict AS dict ON term_tf.termid = dict.termid)
SELECT name, score FROM (SELECT docid, sum(subscore) AS score
    FROM subscores GROUP BY docid) AS scores JOIN fts_main_documents.docs AS docs ON
    scores.docid = docs.docid ORDER BY score DESC LIMIT 1000
----
doc1	0.443697
doc2	0.375436

# now test the actual match macro
query II
SELECT * FROM documents WHERE fts_main_documents.match_bm25(id, 'QUÁCKED BÁRKED')
----
doc1	 QUÁCKING+QUÁCKING+QUÁCKING
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING

# drop and re-create, but index both the 'body' and 'author' column this time
statement ok
PRAGMA drop_fts_index('documents')

statement ok
DROP TABLE documents

statement ok
CREATE TABLE documents(id VARCHAR, body VARCHAR, author VARCHAR)

statement ok
INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING', 'Hannes'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING', 'Mark'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING', 'Laurens')

statement ok
PRAGMA create_fts_index('main.documents', 'id', 'body', 'author')

query III
SELECT * FROM documents WHERE fts_main_documents.match_bm25(id, 'hannes')
----
doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes

query III
SELECT * FROM documents WHERE fts_main_documents.match_bm25(id, 'mark laurens')
----
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
doc3	 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING	Laurens
