# name: test/sql/copy/partitioned/partitioned_group_by.test
# description: Test partitioned aggregates
# group: [partitioned]

require parquet

# partitions
statement ok
CREATE TABLE tbl AS SELECT i%2 AS partition, i col1, i + 1 col2, i::VARCHAR col3 FROM range(10000) t(i)

statement ok
COPY tbl TO '__TEST_DIR__/partition_group_by' (FORMAT parquet, PARTITION_BY (partition))

query II
SELECT partition, SUM(col1)
FROM '__TEST_DIR__/partition_group_by/**/*.parquet'
GROUP BY partition
ORDER BY ALL
----
0	24995000
1	25000000

query II
SELECT SUM(col1), partition
FROM '__TEST_DIR__/partition_group_by/**/*.parquet'
GROUP BY partition
ORDER BY ALL
----
24995000	0
25000000	1

# filter
query II
SELECT partition, SUM(col1)
FROM '__TEST_DIR__/partition_group_by/**/*.parquet'
WHERE col2 > 100
GROUP BY partition
ORDER BY ALL
----
0	24992550
1	24997500

# partition on multiple columns
statement ok
CREATE OR REPLACE TABLE tbl AS SELECT i%2 AS partition1, i%3 AS partition2, i col1, i + 1 col2, i::VARCHAR col3 FROM range(10000) t(i)

statement ok
COPY tbl TO '__TEST_DIR__/partition_group_by_multiple' (FORMAT parquet, PARTITION_BY (partition1, partition2))

query III
SELECT partition1, partition2, SUM(col1)
FROM '__TEST_DIR__/partition_group_by_multiple/**/*.parquet'
GROUP BY partition1, partition2
ORDER BY ALL
----
0	0	8331666
0	1	8328334
0	2	8335000
1	0	8336667
1	1	8333333
1	2	8330000

# partition on a subset of the columns
query II
SELECT partition1, SUM(col1)
FROM '__TEST_DIR__/partition_group_by_multiple/**/*.parquet'
GROUP BY partition1
ORDER BY ALL
----
0	24995000
1	25000000

query II
SELECT partition2, SUM(col1)
FROM '__TEST_DIR__/partition_group_by_multiple/**/*.parquet'
GROUP BY partition2
ORDER BY ALL
----
0	16668333
1	16661667
2	16665000

# with a filter
query II
SELECT partition1, SUM(col1)
FROM '__TEST_DIR__/partition_group_by_multiple/**/*.parquet'
WHERE partition2=0
GROUP BY partition1
ORDER BY ALL
----
0	8331666
1	8336667
