# name: test/sql/storage/compression/compression_small_block_sizes.test
# description: Test compression on small blocks
# group: [compression]

# we revert to other compression functions or no compression for very small block sizes,
# as we cannot store, e.g., the bitpacking group data on a block
require block_size 16384

load __TEST_DIR__/test_compression_small_block.db

statement ok
PRAGMA force_compression='bitpacking'

foreach bitpacking_mode delta_for for constant_delta constant

statement ok
PRAGMA force_bitpacking_mode='${bitpacking_mode}'

statement ok
CREATE TABLE test (id VARCHAR, a HUGEINT);

# insert multiple ranges so that each method can be used on at least on the the ranges bit-width > 96

statement ok
INSERT INTO test SELECT i::VARCHAR, -i::HUGEINT + -1234567891011121314151617180000::HUGEINT FROM range(0, 10000) tbl(i);

statement ok
INSERT INTO test SELECT i::VARCHAR, 13371337 FROM range(0,10000) tbl(i);

statement ok
CHECKPOINT

query I
SELECT a FROM test LIMIT 5;
----
-1234567891011121314151617180000
-1234567891011121314151617180001
-1234567891011121314151617180002
-1234567891011121314151617180003
-1234567891011121314151617180004

query I
SELECT a FROM test LIMIT 5 OFFSET 12000;
----
13371337
13371337
13371337
13371337
13371337

# normally, we'd expect bitpacking here, but the small block size forces a different compression function

query I
SELECT compression FROM pragma_storage_info('test') WHERE segment_type ILIKE 'HUGEINT' GROUP BY compression;
----
RLE

statement ok
DROP TABLE test;

endloop