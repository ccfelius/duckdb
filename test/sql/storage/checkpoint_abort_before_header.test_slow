# name: test/sql/storage/checkpoint_abort_before_header.test_slow
# description: Test correct behavior if we unexpectedly abort after a checkpoint but before the WAL is successfully truncated
# group: [storage]

require skip_reload

load __TEST_DIR__/checkpoint_abort.db

statement ok
CREATE TABLE integers AS SELECT * FROM range(100000) tbl(i);

statement ok
CHECKPOINT;

statement ok
PRAGMA disable_checkpoint_on_shutdown;

statement ok
PRAGMA wal_autocheckpoint='1TB';

statement ok
PRAGMA debug_checkpoint_abort='before_header';

statement ok
INSERT INTO integers SELECT * FROM range(100000, 200000) tbl(i);

statement error
CHECKPOINT;
----
Checkpoint aborted before header write

restart

# verify that the change was correctly loaded from disk
query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers;
----
0	199999	200000

# now verify that empty blocks left by a checkpoint abort are re-used
# so that checkpoint aborts don't permanently leave holes in the file

# get the current database size
statement ok
CREATE TABLE start AS SELECT database_size FROM pragma_database_size();

loop i 0 100

statement ok
PRAGMA disable_checkpoint_on_shutdown;

statement ok
PRAGMA wal_autocheckpoint='1TB';

statement ok
PRAGMA debug_checkpoint_abort='before_header';

statement ok
UPDATE integers SET i=i;

statement error
CHECKPOINT;
----
Checkpoint aborted before header write

restart

# verify that the change was correctly loaded from disk
query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers;
----
0	199999	200000

# ensure that the expected total storage size is around the same as before the loop

query I
SELECT current.database_size = start.database_size FROM pragma_database_size() AS current, start;
----
true

endloop
