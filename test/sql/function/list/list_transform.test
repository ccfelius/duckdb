# name: test/sql/function/list/list_transform.test
# description: Test list_transform function
# group: [list]

# NOTE: some of these tests are directly taken from the Presto Array Function examples

# test erroneous behavior

statement error
SELECT list_transform(NULL, NULL)

statement error
SELECT list_transform(NULL, x)

statement error
SELECT list_transform(NULL, x -> y)

statement error
SELECT list_transform([1])

statement error
SELECT list_transform([1], NULL)

statement error
SELECT list_transform(1, x -> x + 1)

statement error
SELECT list_transform([[1]], x -> x + 1)

query I
SELECT list_transform(NULL, x -> x + 1)
----
NULL

query I
SELECT list_transform([1], x -> x)
----
[1]

statement ok
CREATE TABLE lists (l integer[])

statement ok
INSERT INTO lists VALUES ([1]), ([1, 2, 3]), (NULL), ([-1, NULL, 2])

query I
SELECT list_transform(l, x -> x) FROM lists
----
[1]
[1, 2, 3]
NULL
[-1, NULL, 2]

query I
SELECT list_transform([1, 2, 3], x -> 1)
----
[1, 1, 1]

query I
SELECT list_transform([1], x -> x + 1)
----
[2]

query I
SELECT list_transform([1, 2, 3], x -> x + 1)
----
[2, 3, 4]

query I
SELECT list_transform([1, NULL, -2, NULL], x -> x + 1)
----
[2, NULL, -1, NULL]

query I
SELECT list_transform(['x', 'abc', 'z'], x -> x || '0')
----
[x0, abc0, z0]

query I
SELECT list_transform([[1], [2, 3], [NULL], NULL], x -> list_transform(x, y -> y + 1))
----
[[2], [3, 4], [NULL], NULL]

query I
SELECT list_transform([[1], [2], [3]], x -> list_concat(x, x))
----
[[1, 1], [2, 2], [3, 3]]

query I
SELECT list_transform([5, NULL, 6], x -> POW(x, 2))
----
[25.000000, NULL, 36.000000]

query I
SELECT list_transform([5, NULL, 6], x -> COALESCE(x, 0) + 1)
----
[6, 1, 7]

query I
SELECT list_transform(list_value(list_unique(list_concat([1,2],[2,2]))), x -> x + 1);
----
[3.000000]

query I
SELECT list_sort(list_transform(list_distinct(list_concat([1,2],[2,2])), x -> x + 1));
----
[2, 3]

query I
SELECT list_transform([[1], [2], [3]], x -> list_concat(list_transform(x, y -> y + 1), list_transform(x, z -> z - 1)))
----
[[2, 0], [3, 1], [4, 2]]

query I
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x))
----
[[nay, 1], [yay, 4], NULL, [nay, 1], [yay, 8]]

# TODO: this test case requires the implementation of list_filter

mode skip

query I
SELECT list_transform([[1, NULL, 2], [3, NULL]], a -> list_filter(a, x -> x IS NOT NULL))
----
[[1, 2], [3]]

mode unskip

# TODO: add test cases where the lambda parameter(s) have the same name as columns