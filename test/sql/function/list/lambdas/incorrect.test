# name: test/sql/function/list/lambdas/incorrect.test
# description: Test incorrect usage of the lambda functions
# group: [lambdas]

statement ok
PRAGMA enable_verification

foreach func_name list_transform list_filter

# Error: Binder Error: Invalid lambda expression!
statement error
SELECT ${func_name}(NULL, NULL)

#Error: Binder Error: Invalid lambda expression!
statement error
SELECT ${func_name}(NULL, x)

# Error: Binder Error: Referenced column "y" not found in FROM clause!
statement error
SELECT ${func_name}(NULL, x -> y)

# Error: Binder Error: Invalid number of arguments, expected two (list, lambda expression)!
statement error
SELECT ${func_name}([1])

# Error: Binder Error: Invalid lambda expression!
statement error
SELECT ${func_name}([1], NULL)

# Error: Binder Error:  Invalid LIST argument to list_transform/list_filter!
statement error
SELECT ${func_name}(1, x -> x + 1)

# Error: Binder Error: No function matches the given name and argument types '+(INTEGER[], INTEGER)'.
statement error
SELECT ${func_name}([[1]], x -> x + 1)

endloop

# lambda parameter has the same name as a column
statement ok
CREATE TABLE l_test (l integer[])

# Error: Binder Error: Invalid parameter name 'l_test.l': must be unqualified
statement error
SELECT l, list_transform(l, l -> l + 1) FROM l_test

# Error: Binder Error: Referenced column "zz" not found in FROM clause!
statement error
select list_apply(i, x -> x * 3 + 2 / zz) from (values (list_value(1, 2, 3))) tbl(i);

# lambda cannot be the root of a plan
statement error
select x -> x + 1 from (values (list_value(1, 2, 3))) tbl(i);

# Error: Binder Error: No function matches the given name and argument types
statement error
select i -> i + 1 from (values (list_value(1, 2, 3))) tbl(i);

# lhs of lambda must be an unqualified column name
# Error: Binder Error: Parameter must be a column name.
statement error
select list_apply(i, y + 1 -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);

# Error: Binder Error: Invalid parameter name 'a.x': must be unqualified
statement error
select list_apply(i, a.x -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);

statement error
select list_apply(i, x -> x + 1 AND y + 1) from (values (list_value(1, 2, 3))) tbl(i);

statement ok
CREATE TABLE l_filter_test (l integer[])

statement error
SELECT l, list_filter(l, l -> l > 1) FROM l_filter_test