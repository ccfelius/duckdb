# name: test/sql/function/list/lambdas/expression_iterator_cases.test
# description: Test the different possible cases of the expression iterator
# group: [lambdas]

# these tests check the different cases of the expression iterator

# don't allow BOUND_AGGREGATE inside lambda expressions (binder error)

statement error
SELECT list_transform([10], x -> sum(1) + x)

# BOUND_BETWEEN

query I
SELECT list_transform([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022)
----
[NULL, False, True]

# BOUND_CASE

query I
SELECT list_transform(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END)
----
[e, other, e]

# BOUND_CAST

query I
SELECT list_transform([2], x -> x::DOUBLE)
----
[2.000000]

# BOUND_COMPARISON

query I
SELECT list_transform([2.4, NULL, -4.7], x -> x != 10.4)
----
[True, NULL, True]

# BOUND_CONJUNCTION

query I
SELECT list_transform([True, False, NULL], x -> x AND true)
----
[True, False, NULL]

# BOUND_FUNCTION

query I
SELECT list_transform([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x))
----
[20, 3, 17]

# BOUND_OPERATOR

query I
SELECT list_transform([2], x -> x + x)
----
[4]

# don't allow BOUND_SUBQUERY inside lambda expressions

statement error
SELECT list_transform([2], x -> (SELECT 1 - x) * x)

# BOUND_WINDOW

# TODO

mode skip

statement ok
CREATE TABLE window_lists (n integer, l integer[])

statement ok
INSERT INTO window_lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2])

query I
SELECT list_transform(l, x -> ROW_NUMBER * x) FROM window_lists
----
#

mode unskip

# BOUND_UNNEST

query I
SELECT list_transform([1], x -> x = UNNEST([1]));
----
[True]