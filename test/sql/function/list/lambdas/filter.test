# name: test/sql/function/list/lambdas/filter.test
# description: Test list_filter function
# group: [lambdas]

# NOTE: some of these tests are directly taken from the Presto Array Function examples

# test NULLs and simple cases

query II
SELECT [1] AS l, list_filter([1], l -> l > 1)
----
[1]	[]

query I
SELECT list_filter(NULL, x -> x > 1)
----
NULL

query I
SELECT list_filter([True], x -> x)
----
[True]

query I
SELECT list_filter(['duck', 'a', 'รถ'], duck -> contains(concat(duck, 'DB'), 'duck'))
----
[duck]

query I
SELECT list_filter([1, 2, 3], x -> x % 2 = 0)
----
[2]

query I
SELECT list_filter([], x -> x > 1)
----
[]

query I
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0)
----
[1]

query I
SELECT list_filter([5, -6, NULL, 7], x -> x > 0)
----
[5, 7]

query I
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL)
----
[5, 7]

# test on table with rows

statement ok
CREATE TABLE lists (n integer, l integer[])

statement ok
INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2])

query I
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists
----
[1]
[1]
NULL
[-1]

query I
SELECT list_filter(l, x -> x <= n) FROM lists
----
[1]
[1, 2]
NULL
[-1, 2]

query I
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists
----
[1]
[1, 2, 3]
NULL
[-1, 2]

# test other operators and more complex/nested functions

query I
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'))
----
[abc]

query I
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2))
----
[[1], [2, 1], [2, 2]]

query I
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0), list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'))
----
[42, 8, 2, enjoy, life, the, fullest]

# test aliases

query I
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4)
----
[1]