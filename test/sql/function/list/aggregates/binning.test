# name: test/sql/function/list/aggregates/binning.test
# description: Test binning functions
# group: [aggregates]

statement ok
PRAGMA enable_verification

query I
SELECT equi_width_bins(0, 10, 2, true)
----
[5, 10]

# we cannot have duplicate bin boundaries
query I
SELECT equi_width_bins(0, 5, 10, true)
----
[1, 2, 3, 4, 5]

query I
SELECT equi_width_bins(0, 10, 5, true)
----
[2, 4, 6, 8, 10]

query I
SELECT equi_width_bins(-10, 0, 5, true)
----
[-8, -6, -4, -2, 0]

query I
SELECT equi_width_bins(-10, 10, 5, true)
----
[-6, -2, 2, 6, 10]

query I
SELECT equi_width_bins(0, 9, 5, true)
----
[1, 3, 5, 7, 9]

query I
SELECT equi_width_bins(0, 1734, 10, true)
----
[180, 360, 540, 720, 900, 1080, 1260, 1440, 1620, 1800]

# not nice
query I
SELECT equi_width_bins(0, 1734, 10, false)
----
[173, 346, 520, 693, 867, 1040, 1213, 1387, 1560, 1734]

query I
SELECT equi_width_bins(0, 39343341, 10, true)
----
[4000000, 8000000, 12000000, 16000000, 20000000, 24000000, 28000000, 32000000, 36000000, 40000000]

query I
SELECT equi_width_bins(1, 6000000, 7, true)
----
[840000, 1700000, 2560000, 3420000, 4280000, 5140000, 6000000]

query I
SELECT equi_width_bins(1, 6000000, 7, false)
----
[857143, 1714286, 2571429, 3428571, 4285714, 5142857, 6000000]

# big numbers
query I
SELECT equi_width_bins(-9223372036854775808, 9223372036854775807, 5, true)
----
[-5200000000000000000, -1600000000000000000, 2000000000000000000, 5600000000000000000, 9200000000000000000]

# floating point numbers
query I
SELECT equi_width_bins(0.0, 9.0, 5, true);
----
[1.8, 3.6, 5.4, 7.2, 9.0]

query I
SELECT equi_width_bins(0.0, 9.0, 7, true);
----
[1.8, 3.0, 4.2, 5.4, 6.6, 7.8, 9.0]

query I
SELECT unnest(equi_width_bins(0.0, 9.0, 7, false));
----
1.2857142857142863
2.571428571428572
3.8571428571428577
5.142857142857143
6.428571428571429
7.714285714285714
9.0

query I
SELECT equi_width_bins(0.0, 90, 5, true);
----
[18.0, 36.0, 54.0, 72.0, 90.0]

query I
SELECT equi_width_bins(0.0, 1.0, 5, true);
----
[0.2, 0.4, 0.6, 0.8, 1.0]

query I
SELECT equi_width_bins(0.0, 1.0, 5, true);
----
[0.2, 0.4, 0.6, 0.8, 1.0]

query I
SELECT equi_width_bins(-1.0, 0.0, 5, true);
----
[-0.8, -0.6, -0.4, -0.2, 0.0]

query I
SELECT equi_width_bins(-1.0, 1.0, 5, true);
----
[-0.6, -0.2, 0.2, 0.6, 1.0]

# test giant numberss
query I
SELECT unnest(equi_width_bins(-1e308, 1e308, 5, true));
----
-6e+307
-2e+307
2e+307
6e+307
1e+308

statement error
SELECT equi_width_bins(-0.0, -1.0, 5, true);
----
max value is smaller than min value

statement error
SELECT equi_width_bins(0.0, 'inf'::double, 5, true);
----
does not support infinite or nan as min/max value

statement error
SELECT equi_width_bins(0.0, 'nan'::double, 5, true);
----
does not support infinite or nan as min/max value

statement error
SELECT equi_width_bins(0.0, 1.0, -1, true);
----
there must be > 0 bins

statement error
SELECT equi_width_bins(0.0, 1.0, 99999999, true);
----
max bin count
