# name: test/sql/json/json_nested_casts.test
# description: Casts to and from nested types with JSON
# group: [json]

require json

statement ok
PRAGMA enable_verification

# list with varchar to json
statement ok
create table t2(blobs json[])

statement ok
insert into t2 values(json('[1,2]'));

query I
SELECT * FROM t2
----
[1, 2]

# varchar to list of json
query I
select cast(json('[1,2]') as json[]);
----
[1, 2]

statement error
select cast(['boom'] as json[]);
----
Malformed JSON

query I
select cast(['[1, 2]', '[3, 4]'] as json[]);
----
[[1, 2], [3, 4]]

# struct with varchar to json
query I
SELECT {'a': '[1, 2]'}::ROW(a JSON)
----
{'a': [1, 2]}

query I
SELECT {'a': 42, 'b': '[1, 2]'}::ROW(a JSON, b JSON)
----
{'a': 42, 'b': [1, 2]}

query I
SELECT {'a': 42, 'b': '[1, 2]'}::ROW(a JSON, b INT[])
----
{'a': 42, 'b': [1, 2]}

statement error
SELECT {'a': 'boom', 'b': '[1, 2]'}::ROW(a JSON, b INT[])
----
Malformed JSON

# varchar to struct of json
query I
SELECT '{a: [1, 2]}'::ROW(a JSON)
----
{'a': [1, 2]}

# map with varchar to json
query I
SELECT MAP(['42'], ['88'])::MAP(JSON, JSON)
----
{42=88}

# varchar to map of json
query I
SELECT '{42=88}'::MAP(JSON, JSON)
----
{42=88}

# varchar to union with json
query I
SELECT '42'::UNION(u JSON)
----
42

# union with varchar to union with json
query I
SELECT '42'::UNION(u VARCHAR)::UNION(u JSON)
----
42

query I
SELECT ['42']::UNION(u JSON)[]
----
[42]

query I
SELECT '42'::UNION(u VARCHAR)::JSON
----
42

# we support our nested to and from JSON (just calls to_json and from_json - well tested)
query I
SELECT {duck: 42}::JSON
----
{"duck":42}

query I
SELECT '{"duck":42}'::JSON::STRUCT(duck INTEGER)
----
{'duck': 42}

query I
SELECT ['duck']::JSON
----
["duck"]

query I
SELECT '["duck"]'::JSON::VARCHAR[]
----
[duck]

query I
SELECT MAP(['duck'], [42])::JSON
----
{"duck":42}

query I
SELECT '{"duck":42}'::JSON::MAP(VARCHAR, INTEGER)
----
{duck=42}

# casting should be strict
statement error
SELECT '{"duck":42}'::JSON::STRUCT(goose INTEGER)
----
Conversion Error

statement error
SELECT '["a", "b", "c"]'::JSON::INT[]
----
Conversion Error

statement error
SELECT '{"duck":42}'::JSON::MAP(INTEGER, INTEGER)
----
Conversion Error

# however, when we encounter a conversion error in a nested type with TRY, only that becomes NULL
query I
SELECT TRY_CAST('{"duck":42}'::JSON AS STRUCT(goose INTEGER))
----
{'goose': NULL}

query I
SELECT TRY_CAST('["a", "b", "c"]'::JSON AS INT[])
----
[NULL, NULL, NULL]

# map keys cannot be NULL
statement error
SELECT TRY_CAST('{"duck":42}'::JSON AS MAP(INTEGER, INTEGER))
----
Conversion Error

# but values can
query I
SELECT TRY_CAST('{"42":"duck"}'::JSON AS MAP(INTEGER, INTEGER))
----
{42=NULL}

# we can also cast implicitly to our types
statement ok
CREATE TABLE structs (v STRUCT(duck INTEGER))

statement ok
CREATE TABLE lists (v VARCHAR[])

statement ok
CREATE table maps (v MAP(VARCHAR, INTEGER))

statement ok
INSERT INTO structs VALUES ('{"duck":42}'::JSON)

statement ok
INSERT INTO lists VALUES ('["duck"]'::JSON)

statement ok
INSERT INTO maps VALUES ('{"duck":42}'::JSON)

query I
SELECT * FROM structs
----
{'duck': 42}

query I
SELECT * FROM lists
----
[duck]

query I
SELECT * FROM maps
----
{duck=42}

# and back to JSON
statement ok
CREATE TABLE jsons (j JSON)

statement ok
INSERT INTO jsons SELECT * FROM structs

statement ok
INSERT INTO jsons SELECT * FROM lists

statement ok
INSERT INTO jsons SELECT * FROM maps

query I
SELECT * FROM jsons
----
{"duck":42}
["duck"]
{"duck":42}
