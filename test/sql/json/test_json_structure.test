# name: test/sql/json/test_json_structure.test
# description: Test json_structure() function
# group: [json]

require json

statement ok
pragma enable_verification

# singletons
query T
select json_structure('42')
----
"UBIGINT"

query T
select json_structure('4.2')
----
"DOUBLE"

query T
select json_structure('null')
----
"NULL"

query T
select json_structure('true')
----
"BOOLEAN"

query T
select json_structure('"duck"')
----
"VARCHAR"

# simple objects
query T
select json_structure('{"a": 42}')
----
{"a":"UBIGINT"}

query T
select json_structure('{"a": 4.2}')
----
{"a":"DOUBLE"}

query T
select json_structure('{"a": "42"}')
----
{"a":"VARCHAR"}

query T
select json_structure('{"a": "looooooooooooooooong"}')
----
{"a":"VARCHAR"}

query T
select json_structure('{"a": null}')
----
{"a":"NULL"}

query T
select json_structure('{"a": true}')
----
{"a":"BOOLEAN"}

query T
select json_structure('{"a": []}')
----
{"a":["NULL"]}

query T
select json_structure('{"a": [42]}')
----
{"a":["UBIGINT"]}

query T
select json_structure('{"a": {"b": 42}}')
----
{"a":{"b":"UBIGINT"}}

# now the hard part: JSON arrays
# we derive some kind of consistent structure from arrays, while not being too strict
# i.e., objects in arrays can have a different set of keys, null is a wildcard
# Same keys, however, must have the same type!
query T
select json_structure('[1,2,3]')
----
["UBIGINT"]

query T
select json_structure('[{"a": 42}, {"a": null}]')
----
[{"a":"UBIGINT"}]

query T
select json_structure('[{"a": 42}, {"b": 4.2}]')
----
[{"a":"UBIGINT","b":"DOUBLE"}]

query T
select json_structure('[{"a": [42, null]}, {"a": [7]}]')
----
[{"a":["UBIGINT"]}]

query T
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"b": 7}]}]')
----
[{"a":[{"b":"UBIGINT"}]}]

query T
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"c": 7}]}]')
----
[{"a":[{"b":"UBIGINT","c":"UBIGINT"}]}]

# real is supertype of integer
query T
select json_structure('[42, 4.2]')
----
["DOUBLE"]

# inconsistent types
statement error
select json_structure('[42, "4.2"]')

# from a table
statement ok
create table test (j json);

statement ok
insert into test values
    ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'),
    ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}')

query T
select json_structure(j) from test
----
{"family":"VARCHAR","species":["VARCHAR"],"coolness":"UBIGINT"}
{"family":"VARCHAR","species":["VARCHAR"],"hair":"BOOLEAN","coolness":"UBIGINT"}
