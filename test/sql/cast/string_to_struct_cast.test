# name: test/sql/cast/string_to_struct_cast.test
# description: cast strings into (nested) list structures
# group: [cast]

# statement ok
# PRAGMA enable_verification

# list_value() creates a list variable
query I
SELECT LEN( CAST(list_value(12.25, 13.45) AS INTEGER[]) );
----
2

# Same as above, alternative syntax for casting
query I
SELECT LEN( list_value(12.25)::INT[] );
----
1

# Casting string to int already works
statement ok
SELECT CAST('12' AS INTEGER);

# Casting list to string works
query I
SELECT list_value(1,2,4)::VARCHAR;
----
[1, 2, 4]


#               Basic tests:
# ---------------------------------------------------

query I
SELECT CAST('[12,13,14]' AS INT[]);
----
[12, 13, 14]

query I
SELECT CAST('["hello", "world", "!"]' AS VARCHAR[]);
----
["hello", "world", "!"]

query I
SELECT CAST('[Hello World!]' AS VARCHAR[]);
----
[Hello World!]

query I
SELECT CAST('[[Hello World!], hello, universe]' AS VARCHAR[]);
----
[[Hello World!], hello, universe]

query I
SELECT '[Cast like this]':: VARCHAR[];
----
[Cast like this]


#               Nested lists
# ---------------------------------------------------
query I
SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]);
----
[[12, 13, 14], [8, 9], [4], [2, 1, 0]]

query I
SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);
----
[[[12, 13, 14], [8, 9]], [[4]], [[2, 1, 0], [99]]]

query I
SELECT CAST('[ [12,13,14], [8, 9], [4], [2,  1,  0] ]' AS VARCHAR[]);
----
[[12,13,14], [8, 9], [4], [2,  1,  0] ]

query I
SELECT CAST('[[ [🦆, 🦆, 🦆]], [[duck, db, 🦆], [🦆]], [[🦆, duck, db]]]' AS VARCHAR[][][]);
----
[[[🦆, 🦆, 🦆]], [[duck, db, 🦆], [🦆]], [[🦆, duck, db]]]


#               Empty list
# ---------------------------------------------------
statement error
SELECT CAST('[]' AS INT[]);
#should prob not be an error, not sure...

statement ok
SELECT CAST('[]' AS VARCHAR[]);


#               NULL values
# ------------------------------67---------------------
statement ok
CREATE TABLE null_tbl(col1 VARCHAR);

statement ok
INSERT INTO null_tbl VALUES(NULL), (NULL), ('[NULL]');

query I
SELECT col1::INT[] FROM null_tbl;
----
NULL
NULL
[NULL]

query I
SELECT CAST(NULL AS INT[]);
----
NULL

query I
SELECT CAST('[NULL]' AS INT[]);
----
[NULL]

query I
SELECT CAST('[NULL]' AS INT[][]);
----
[NULL]

query I
SELECT CAST('[[12,13,14], [8, 9], NULL, [2, 1]]' AS INT[][]);
----
[[12, 13, 14], [8, 9], NULL, [2, 1]]

query I
SELECT CAST('[[12,13,14], [8, 9], [2, NULL, 1]]' AS INT[][]);
----
[[12, 13, 14], [8, 9], [2, NULL, 1]]

query I
SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, NULL, 1, 0], [99]] ]' AS INT[][][]);
----
[[[12, 13, 14], NULL], [[4]], NULL, [[2, NULL, 1, 0], [99]]]


#               Try Cast
# ---------------------------------------------------
query I
SELECT TRY_CAST('Hello World' AS INT[]);
----
NULL



#               Syntax error checking
# ---------------------------------------------------

statement error
SELECT CAST('{[3]}' AS INT[]);

statement error
SELECT CAST('Hello World' AS INT[]);

statement error
SELECT CAST('[3]]' AS INT[]);

statement error
SELECT CAST('[3],[[]' AS INT[][]);

statement error
SELECT CAST('[3], [[1]]' AS INT[][]);

statement error
SELECT CAST('[[3 1]]' AS INT[][]);

statement error
SELECT CAST('[[3,, 1]]' AS INT[][]);

statement error
SELECT CAST('[[3], [[5], [4]]' AS INT[][]);

statement error
SELECT CAST('][3]' AS INT[]);

statement error
SELECT CAST('[[[[[]][3][[]][][[[][]]]]]' AS INT[][][][]);



#               Quote escaping
# ---------------------------------------------------
query I
SELECT CAST('[''hello'',''world'', ''!'']' AS VARCHAR[]);
----
['hello', 'world', '!']

query I
SELECT CAST('[''''hello'''',''''world'''', ''''!'''']' AS VARCHAR[]);
----
[''hello'', ''world'', ''!'']

query I
SELECT CAST('[[ [''🦆, 🦆, 🦆'']], [[duck, db, ''🦆''] ]]' AS VARCHAR[][][]);
----
[[['🦆, 🦆, 🦆']], [[duck, db, '🦆']]]

# query I
# SELECT CAST('[can''t, you''re, i''m]' AS VARCHAR[]);
# ----
# [can't, you're, i'm]

query I
SELECT CAST('["can''t", "you''re", "i''m"]' AS VARCHAR[]);
----
["can't", "you're", "i'm"]


#               Test for whitespaces
# ---------------------------------------------------
query I
SELECT CAST('[ [12,     13,14], [8, 9         ], [ 4    ], [    2, 1,     0] ]  ' AS INT[][]);
----
[[12, 13, 14], [8, 9], [4], [2, 1, 0]]

query I
SELECT CAST('[          [ [12,     13,14], [8, 9         ]  ],[[ 4    ]   ],        [[    2, 1,     0 ]         ] ]  ' AS INT[][][]);
----
[[[12, 13, 14], [8, 9]], [[4]], [[2, 1, 0]]]

query I
SELECT CAST('["   hello","          ''  world", "!         "]' AS VARCHAR[]);
----
["   hello", "          '  world", "!         "]

query I
SELECT CAST('[   hello     ,   world      , !         ]' AS VARCHAR[]);     
----
[hello     , world      , !         ]

query I
SELECT CAST('[    [ "   hello"]  ,["            world"        ],[ "!        "           ]]' AS VARCHAR[][]);
----
[["   hello"], ["            world"        ], ["!        "           ]]



#               Cast from table
# ---------------------------------------------------
statement  ok
CREATE TABLE stringList (col1 VARCHAR)

statement ok
INSERT INTO stringList VALUES ('["hello","world","!"]'), ('["Amazing","text"]'), ('[Hello World!]');

query I
SELECT col1::VARCHAR[] FROM stringList;
----
["hello", "world", "!"]
["Amazing", "text"]
[Hello World!]

# ---------------------------------------------------
statement  ok
CREATE TABLE nestedStrings (col1 VARCHAR)

statement ok
INSERT INTO nestedStrings VALUES ('[["hello"], ["world"],["!"]]'), ('[["Amazing"],["text"]]'), ('[[Hello World!]]');

query I
SELECT col1::VARCHAR[][] FROM nestedStrings;
----
[["hello"], ["world"], ["!"]]
[["Amazing"], ["text"]]
[[Hello World!]]

# ---------------------------------------------------
statement  ok
CREATE TABLE superNestedStrings (col1 VARCHAR)

statement ok
INSERT INTO superNestedStrings VALUES ('[[[[["hello"]]], [[["world"],["!"]]]]]'), ('[[[[["Amazing"]],[["text"]]]]]'), ('[[[[[Hello World!]]]]]');

query I
SELECT col1::VARCHAR[][][][][] FROM superNestedStrings;
----
[[[[["hello"]]], [[["world"], ["!"]]]]]
[[[[["Amazing"]], [["text"]]]]]
[[[[[Hello World!]]]]]

# ---------------------------------------------------
statement ok
CREATE TABLE tbl (col1 VARCHAR);

statement ok
INSERT INTO tbl VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');

query I
SELECT col1::INT[] FROM tbl;
----
[1, 2, 2]
[345, 67865, 44, 4]
[5, 6, 7]


# ---------------------------------------------------
statement ok
CREATE TABLE doubleNested (col1 VARCHAR);

statement ok
INSERT INTO doubleNested VALUES ('[[1,2],[2]]'), ('[[345],[67865,44,4]]'), ('[[5],[6,7]]');

query I
SELECT col1::INT[][] FROM doubleNested;
----
[[1, 2], [2]]
[[345], [67865, 44, 4]]
[[5], [6, 7]]


# ---------------------------------------------------
statement  ok
CREATE TABLE tripleNested (col1 VARCHAR)

statement ok
INSERT INTO tripleNested VALUES ('[[[1,2],[3]]]'), ('[[[4]]]');

query I
SELECT col1::INT[][][] FROM tripleNested;
----
[[[1, 2], [3]]]
[[[4]]]

# ---------------------------------------------------
statement  ok
CREATE TABLE crazyNested (col1 VARCHAR)

statement ok
INSERT INTO crazyNested VALUES ('[[[[[[1]],[[3,4,9]]],[[[0,1]]]]]]'), ('[[[[[[4]]]]]]');

query I
SELECT col1::INT[][][][][][] FROM crazyNested;
----
[[[[[[1]], [[3, 4, 9]]], [[[0, 1]]]]]]
[[[[[[4]]]]]]


#               Test WHERE clause
# ---------------------------------------------------
query I
SELECT * FROM tbl WHERE cast(col1 as int[]) = [1, 2, 2];
----
[1,2,2]

query I
SELECT col1 FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
----
[1,2,2]
[5,6,7]

query I
SELECT cast(col1 as int[]) FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
----
[1, 2, 2]
[5, 6, 7]


#               All types:
# ---------------------------------------------------

query I
SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOL[][]);
----
[[true, false], [true], [false], [false, true]]

foreach type TINYINT SMALLINT INTEGER BIGINT HUGEINT UTINYINT USMALLINT UINTEGER UBIGINT 

query I
SELECT CAST('[1,2,3]' AS ${type}[]);
----
[1, 2, 3]

endloop

foreach type DOUBLE[] FLOAT[]

query I
SELECT CAST('[[1,2,3], [3.333, 2.2, 1.1], [0]]' AS ${type}[]);
----
[[1.0, 2.0, 3.0], [3.333, 2.2, 1.1], [0.0]]

endloop

statement ok
CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');

query I
SELECT '[ok,happy]'::MOOD[]
----
[ok, happy]

statement error
SELECT '[nothappy]'::MOOD[]

query I
SELECT CAST(list_value(date)::VARCHAR AS DATE[]) FROM test_all_types();
----
[5877642-06-25 (BC)]
[5881580-07-10]
[NULL]

query I
SELECT CAST(list_value(time)::VARCHAR AS TIME[]) FROM test_all_types();
----
[00:00:00]
[23:59:59.999999]
[NULL]

query I
SELECT CAST(list_value(timestamp)::VARCHAR AS TIME[]) FROM test_all_types();
----
[00:00:00]
[04:00:54.775806]
[NULL]

query I
SELECT CAST(list_value(timestamp_s)::VARCHAR AS TIME[]) FROM test_all_types();
----
[00:00:00]
[04:00:54]
[NULL]

query I
SELECT CAST(list_value(timestamp_ms)::VARCHAR AS TIME[]) FROM test_all_types();
----
[00:00:00]
[04:00:54.775]
[NULL]

query I
SELECT CAST(list_value(timestamp_ns)::VARCHAR AS TIME[]) FROM test_all_types();
----
[00:12:43.145225]
[23:47:16.854775]
[NULL]

query I
SELECT CAST(list_value(blob)::VARCHAR AS BLOB[]) FROM test_all_types();
----
[thisisalongblob\x00withnullbytes]
[\x00\x00\x00a]
[NULL]

query I
SELECT CAST(list_value(interval)::VARCHAR AS INTERVAL[]) FROM test_all_types();
----
[00:00:00]
[83 years 3 months 999 days 00:16:39.999999]
[NULL]


#               Larger input test
# ---------------------------------------------------

statement ok
CREATE TABLE varchars AS SELECT [i, NULL]::VARCHAR col FROM range(0, 10000) tbl(i);

query I
SELECT MAX(CAST(col AS INT[])[1]) FROM varchars;
----
9999
