# name: test/sql/cast/string_to_struct_cast.test
# description: cast strings into (nested) list structures
# group: [cast]

# statement ok
# PRAGMA enable_verification

# This already works. Casting to list makes LEN() and other list functions possible
# https://duckdb.org/docs/sql/functions/nested
# list_value() creates a list variable
query I
SELECT LEN( CAST(list_value(12.25, 13.45) AS INTEGER[]) );
----
2

# Same as above, alternative syntax for casting
query I
SELECT LEN( list_value(12.25)::INT[] );
----
1   

# Casting string to int already works
statement ok
SELECT CAST('12' AS INTEGER);

# Casting list to string works
query I
SELECT list_value(1,2,4)::VARCHAR;
----
[1, 2, 4]


#               Basic tests:
# ---------------------------------------------------

query I
SELECT CAST('[12,13,14]' AS VARCHAR[]);
----
[12, 13, 14]

# statement ok
# SELECT CAST('["hello", "world", "!"]' AS VARCHAR[]);

# statement ok
# SELECT CAST('[hello, world, !]' AS VARCHAR[]);



#               Nested lists
# ---------------------------------------------------
# statement ok
# SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]);

# statement ok
# SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);

# statement ok
# SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS VARCHAR[]);



#               Empty list
# ---------------------------------------------------
# statement ok
# SELECT CAST('[]' AS INT[]);



#               NULL values
# ---------------------------------------------------
# statement ok
# SELECT CAST('[ [12,13,14], [8, 9], NULL, [2, 1, NULL] ]' AS INT[][]);

# statement ok
# SELECT CAST('[ NULL ]' AS INT[][]);

# statement ok
# SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, 1, 0], [99]] ]' AS INT[][]);

# statement ok
# SELECT CAST('[ NULL ]' AS INT[][]);



#               Try Cast
# ---------------------------------------------------
# query I
# SELECT TRY_CAST('Hello World' AS INT[]);
# ----
# NULL



#               Syntax error checking
# ---------------------------------------------------

# statement error
# SELECT CAST('[3]]'::INT[]);

# statement error
# SELECT CAST('[3], [[1]]'::INT[][]);

# statement error
# SELECT CAST('[[3 1]]'::INT[][]);

# statement error
# SELECT CAST('[[3], [[5], [4]]'::INT[][]);

# statement error
# SELECT CAST('][3]'::INT[]);



#               Quote escaping
# ---------------------------------------------------
# statement ok
# SELECT CAST('['hello','world', '!']' AS VARCHAR[]);

# statement ok
# SELECT CAST("["hello","world", "!"]" AS VARCHAR[]);



#               Test for whitespaces
# ---------------------------------------------------
# statement ok
# SELECT CAST('['   hello','            world', '!         ']' AS VARCHAR[]);

# statement ok
# SELECT CAST('[ [12,     13,14], [8, 9]     , [ 4    ], [2, 1,     0] ]' AS INT[][]);



#               Test with tables
# ---------------------------------------------------
statement ok
CREATE TABLE tbl (col1 VARCHAR)

statement ok
INSERT INTO tbl VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');

statement ok
SELECT col1::INT[] FROM tbl;

# statement ok
# CREATE TABLE nested (col1 VARCHAR)

# statement ok
# INSERT INTO nested VALUES ('[[1,2], [2]]'), ('[[345], [67865,44,4]]'), ('[[5], [6,7]]');

# statement ok
# SELECT col1::INT[][] FROM nested;



#               Test WHERE clause
# ---------------------------------------------------
# statement ok
# SELECT col1::INT[] FROM tbl WHERE > 3;

# statement ok
# SELECT * FROM tbl WHERE CAST(col1 AS INTEGER);
