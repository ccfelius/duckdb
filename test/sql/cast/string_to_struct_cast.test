# name: test/sql/cast/string_to_struct_cast.test
# description: cast strings into (nested) list structures
# group: [cast]

# statement ok
# PRAGMA enable_verification

# This already works. Casting to list makes LEN() and other list functions possible
# https://duckdb.org/docs/sql/functions/nested
# list_value() creates a list variable
query I
SELECT LEN( CAST(list_value(12.25, 13.45) AS INTEGER[]) );
----
2

# Same as above, alternative syntax for casting
query I
SELECT LEN( list_value(12.25)::INT[] );
----
1   

# Casting string to int already works
statement ok
SELECT CAST('12' AS INTEGER);

# Casting list to string works
query I
SELECT list_value(1,2,4)::VARCHAR;
----
[1, 2, 4]


#               Basic tests:
# ---------------------------------------------------

query I
SELECT CAST('[12,13,14]' AS VARCHAR[]);
----
[12, 13, 14]

statement ok
SELECT CAST('["hello", "world", "!"]' AS VARCHAR[]);

statement ok
SELECT CAST('[hello, world, !]' AS VARCHAR[]);



#               Nested lists
# ---------------------------------------------------
statement ok
SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]);

# statement ok
# SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);

# statement ok
# SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS VARCHAR[]);



#               Empty list
# ---------------------------------------------------
# statement ok
# SELECT CAST('[]' AS INT[]);



#               NULL values
# ------------------------------67---------------------
# statement ok
# SELECT CAST('[ [12,13,14], [8, 9], NULL, [2, 1, NULL] ]' AS INT[][]);

# statement ok
# SELECT CAST('[ NULL ]' AS INT[][]);

# statement ok
# SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, 1, 0], [99]] ]' AS INT[][]);



#               Try Cast
# ---------------------------------------------------
# query I
# SELECT TRY_CAST('Hello World' AS INT[]);
# ----
# NULL



#               Syntax error checking
# ---------------------------------------------------

statement error
SELECT CAST('{[3]}' AS INT[]);

# statement error
# SELECT CAST('[3]]' AS INT[]);

# statement error
# SELECT CAST('[3], [[1]]' AS INT[][]);

# statement error
# SELECT CAST('[[3 1]]' AS INT[][]);

# statement error
# SELECT CAST('[[3], [[5], [4]]' AS INT[][]);

# statement error
# SELECT CAST('][3]' AS INT[]);



#               Quote escaping
# ---------------------------------------------------
# statement ok
# SELECT CAST('['hello','world', '!']' AS VARCHAR[]);

# statement ok
# SELECT CAST("["hello","world", "!"]" AS VARCHAR[]);



#               Test for whitespaces
# ---------------------------------------------------
statement ok
SELECT CAST('[ [12,     13,14], [8, 9], [ 4    ], [    2, 1,     0] ]  ' AS INT[][]);

# SELECT CAST('[ [12,     13,14], [8, 9]     , [ 4    ], [    2, 1,     0]]' AS INT[][]);

# statement ok
# SELECT CAST('['   hello','            world', '!         ']' AS VARCHAR[]);



#               Test with tables
# ---------------------------------------------------
statement  ok
CREATE TABLE stringList (str VARCHAR)

statement ok
INSERT INTO stringList VALUES ('["hello","world","!"]'), ('["Amazing","text"]');

query I
SELECT str::VARCHAR[] FROM stringList;
----
["hello", "world", "!"]
["Amazing", "text"]


# ---------------------------------------------------
statement ok
CREATE TABLE tbl (col1 VARCHAR);

statement ok
INSERT INTO tbl VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');

statement ok
SELECT col1::INT[] FROM tbl;

# ---------------------------------------------------
statement ok
CREATE TABLE doubleNested (col1 VARCHAR);

statement ok
INSERT INTO doubleNested VALUES ('[[1,2],[2]]'), ('[[345],[67865,44,4]]'), ('[[5],[6,7]]');

statement ok
SELECT col1::INT[][] FROM doubleNested;


# ---------------------------------------------------
statement  ok
CREATE TABLE tripleNested (col1 VARCHAR)

statement ok
INSERT INTO tripleNested VALUES ('[[[1,2],[3]]]'), ('[[[4]]]');

query I
SELECT col1::INT[][][] FROM tripleNested;
----
[[[1, 2], [3]]]
[[[4]]]

# ---------------------------------------------------
statement  ok
CREATE TABLE crazyNested (col1 VARCHAR)

statement ok
INSERT INTO crazyNested VALUES ('[[[[1],[3,4,9],[0,1]]]]'), ('[[[[4]]]]');

statement ok
SELECT col1::INT[][][][] FROM crazyNested;



#               Test WHERE clause
# ---------------------------------------------------
query I
SELECT * FROM tbl WHERE cast(col1 as int[]) = [1, 2, 2];
----
[1,2,2]

query I
SELECT col1 FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
----
[1,2,2]
[5,6,7]

query I
SELECT cast(col1 as int[]) FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
----
[1, 2, 2]
[5, 6, 7]

# statement ok
# CREATE TABLE tbl2 (col1 VARCHAR[]);

# statement ok
# INSERT INTO tbl2 VALUES ('[2, 3, 8, 1]'), ('[9]'), ('[4]');

# query I
# SELECT CAST(col1 AS INT[]) FROM tbl2 WHERE LEN(col1 AS int[]) > 3;
# ----
# [2, 3, 8, 1]
