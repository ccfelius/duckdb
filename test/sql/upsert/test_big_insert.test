# name: test/sql/upsert/test_big_insert.test
# description: Test insert into statements
# group: [upsert]

# TODO: remove this, behavior should be consistent at all vector sizes
require vector_size 2048

statement ok
pragma enable_verification;

statement ok
SET preserve_insertion_order=false;

# big insert
statement ok
CREATE TABLE integers(
	i INTEGER unique,
	j INTEGER DEFAULT 0,
	k INTEGER DEFAULT 0
);

statement ok
INSERT INTO integers(i) SELECT i from range(5000) tbl(i);

query I
SELECT COUNT(*) FROM integers
----
5000

# All tuples hit a conflict - Do nothing
statement ok
INSERT INTO integers SELECT * FROM integers on conflict do nothing;

# All tuples hit a conflict - Do Update
statement ok
INSERT INTO integers SELECT * FROM integers on conflict do update set j = 10;

# All 'j' entries are changed to 10
query I
SELECT COUNT(*) FILTER (WHERE j = 10) FROM integers
----
5000

# This test does not have result checking, because the behavior
# for multiple insert tuples updating the same existing tuple is currently not well defined

# All insert tuples cause a conflict, but all of them are on first existing rows
statement ok
INSERT INTO integers(i,j) select i%5,i from range(5000) tbl(i) on conflict do update set j = excluded.j, k = excluded.i;

# 'excluded.i' is the same value for every conflict, so this is consistent
query I
select k from integers limit 5;
----
0
1
2
3
4

# The results of the last upsert operation are inconsistent, this behavior has to be fixed
# TODO: disable parallel execution of insert when DO UPDATE is provided

statement ok
INSERT INTO integers(i,j) select i%5,i from range(4995, 5000) tbl(i) on conflict do update set j = excluded.j, k = excluded.i;

# This is what we might expect the previous result to look like as well
query I
select j from integers limit 5;
----
4995
4996
4997
4998
4999

# This is the worst conflicting rowid pattern we could have
# Every odd-indexed insert tuple conflicts with a row at the start of the existing tuples
# And every even-indexed insert tuple conflicts with a row at the end of the existing tuples
statement ok
insert into integers(i,j)
	select
		CASE WHEN i % 2 = 0
			THEN
				4999 - (i/2)
			ELSE
				i - ((i/2)+1)
		END,
		i
	from range(5000) tbl(i)
on conflict do update set j = excluded.j;

# This shows that the odd-indexed insert tuples conflicted with the first rows
query I
select j from integers limit 5;
----
1
3
5
7
9

# This shows that the even-indexed insert tuples conflicted with the last rows
query I
select j from integers limit 5 offset 4995;
----
8
6
4
2
0

# Reset j
statement ok
update integers set j = 0;

# Only set j if both the existing tuple and the insert tuple are even
statement ok
insert into integers(i,j)
	select
		CASE WHEN i % 2 = 0
			THEN
				4999 - (i/2)
			ELSE
				i - ((i/2)+1)
		END,
		i
	from range(5000) tbl(i)
on conflict do update set j = excluded.j where i % 2 = 0 AND excluded.j % 2 = 0;

# The DO UPDATE where clause is only true for a quarter of the cases
query I
select COUNT(j) filter (where j != 0) from integers;
----
1250

# Every insert tuple conflicts with the same existing tuple (the first one)
statement ok
insert into integers(i,j) select 0,i from range(5000) tbl(i) on conflict do update set j = excluded.j;

# Only the first value of the chunk got to update the value
# 0 is the first index of the first chunk
# 2048 is the first index of the second chunk
# 4096 is the first index of the last chunk
query I
select j from integers limit 1;
----
4096
