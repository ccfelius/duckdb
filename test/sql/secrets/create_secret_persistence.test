# name: test/sql/secrets/create_secret_persistence.test
# description: Test secret persistence
# group: [secrets]

statement ok
PRAGMA enable_verification;

load __TEST_DIR__/persistent_secrets.db

require httpfs

# Create some s3 secret, the normally the default is TEMPORARY
statement ok
CREATE SECRET my_tmp_secret (
	TYPE S3,
    SCOPE 's3://bucket1'
)

# Explicitly stating
statement ok
CREATE TEMPORARY SECRET my_tmp_secret_2 (
	TYPE S3,
    SCOPE 's3://bucket2'
)

# TODO customizable path
statement ok
CREATE OR REPLACE PERMANENT SECRET my_tmp_secret_3 (
	TYPE S3,
    SCOPE 's3://bucket3'
)

query III
SELECT name, storage, scope FROM duckdb_secrets() where storage='in-memory';
----
my_tmp_secret	in-memory	[s3://bucket1]
my_tmp_secret_2	in-memory	[s3://bucket2]

query II
SELECT name, scope FROM duckdb_secrets() where storage like '%stored_secrets%';
----
my_tmp_secret_3	[s3://bucket3]

restart

# Permanent secrets are restored automatically
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_3	[s3://bucket3]

restart

# Trying to create same name TMP secret fails
statement error
CREATE PERMANENT SECRET my_tmp_secret_3 (
    TYPE S3,
    SCOPE ['s3://bucket3_not_used']
)
----
Secret with name 'my_tmp_secret_3' already exists!

restart

# Trying to create same name PERMANENT secret fails
statement error
CREATE PERMANENT SECRET my_tmp_secret_3 (
    TYPE S3,
    SCOPE ['s3://bucket3_not_used']
)
----
Secret with name 'my_tmp_secret_3' already exists!

restart

# Ignoring already existing permanent secret is fine
statement ok
CREATE SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Secret is unmodified
query II
SELECT name, scope FROM duckdb_secrets() where name='my_tmp_secret_3';
----
my_tmp_secret_3	[s3://bucket3]

restart

# Ignoring already existing permanent secret is fine
statement ok
CREATE PERMANENT SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Running second time, code path slightly different as the secret is lazy loaded in previous step
statement ok
CREATE PERMANENT SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Secret is unmodified
query II
SELECT name, scope FROM duckdb_secrets() where name='my_tmp_secret_3';
----
my_tmp_secret_3	[s3://bucket3]

restart

# Secret is still unmodified after restart
query II
SELECT name, scope FROM duckdb_secrets() where name='my_tmp_secret_3';
----
my_tmp_secret_3	[s3://bucket3]

# Now we do actually update the permanent secret
statement ok
CREATE OR REPLACE PERMANENT SECRET my_tmp_secret_3 (
	TYPE S3,
    SCOPE 's3://bucket3_updated'
)

# Its updated!
query II
SELECT name, scope FROM duckdb_secrets() where name='my_tmp_secret_3';
----
my_tmp_secret_3	[s3://bucket3_updated]

restart

# Survives restart!
query II
SELECT name, scope FROM duckdb_secrets() where name='my_tmp_secret_3';
----
my_tmp_secret_3	[s3://bucket3_updated]
