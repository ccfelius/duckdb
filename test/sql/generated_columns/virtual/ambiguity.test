# name: test/sql/generated_columns/virtual/ambiguity.test
# description: Test if the columnrefs in a generated-column expression can result in ambiguity
# group: [virtual]

statement ok
CREATE TABLE unit (price INTEGER, amount_sold INTEGER);

statement ok
CREATE TABLE unit2 (price INTEGER, amount_sold INTEGER);

statement ok
INSERT INTO unit VALUES (5,4)

statement ok
ALTER TABLE unit ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS(price * amount_sold) VIRTUAL;

# Because the table name is baked into the ColumnRefs of the generated-column expression, this doesnt result in ambiguity
# Otherwise 'price' and 'amount_sold' would be ambiguous because they are also present in 'unit2'
statement ok
SELECT total_profit FROM unit, unit2

statement ok
INSERT INTO unit2 VALUES (100, 4)

statement ok
ALTER TABLE unit2 ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS (price / amount_sold) VIRTUAL;

# When using the table name, we avoid ambiguity
statement ok
SELECT unit.total_profit FROM unit, unit2

# When using aliases for tables, this should still work
query I
SELECT unit.total_profit FROM unit AS unit2, unit2 AS unit
----
25

statement ok
ALTER TABLE unit2 ADD COLUMN profit_total INTEGER GENERATED ALWAYS AS (unit2.price / unit2.amount_sold) VIRTUAL;

# No ambiguity here
statement ok
SELECT profit_total FROM unit2

# Aliasing the table name shouldn't break the generated expression
statement ok
SELECT profit_total FROM unit2 as unit