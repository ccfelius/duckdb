# name: test/sql/inet/test_inet_escape.test
# description: Test inet escape function
# group: [inet]

require inet

statement ok
PRAGMA enable_verification

# html_escape
query T
SELECT * FROM (VALUES (html_escape('&')), (html_escape('&#')), (html_escape('&#x')), (html_escape('&#X')), (html_escape('&#y')), (html_escape('&#xy')), (html_escape('&#Xy;'))) tbl(i);
----
&amp;
&amp;#
&amp;#x
&amp;#X
&amp;#y
&amp;#xy
&amp;#Xy;

query I
SELECT html_escape('''<script>"&foo;"</script>''');
----
&#x27;&lt;script&gt;&quot;&amp;foo;&quot;&lt;/script&gt;&#x27;

query I
SELECT html_escape('''<script>"&foo;"</script>''', false);
----
'&lt;script&gt;"&amp;foo;"&lt;/script&gt;'

# check & followed by invalid chars
query I
SELECT html_escape('&\n&\t& &&');
----
&amp;\n&amp;\t&amp; &amp;&amp;

# check & followed by numbers and letters
query I
SELECT html_escape('&0 &9 &a &0; &9; &a;');
----
&amp;0 &amp;9 &amp;a &amp;0; &amp;9; &amp;a;

query I
SELECT html_escape('duckdb');
----
duckdb

# escape values from table
statement ok
CREATE TABLE escapes(esc VARCHAR, quote BOOL);

statement ok
INSERT INTO escapes VALUES ('&', true), ('&', false), ('&&&&&&&&&&&&&&&&&&&&&', true), ('&&&&&&&&&&&&&&&&&&&&&', false);

query I
SELECT html_escape(esc, quote) FROM escapes;
----
&amp;
&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

query I
SELECT html_escape(esc, true) FROM escapes;
----
&amp;
&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

query I
SELECT html_escape(esc, false) FROM escapes;
----
&amp;
&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

# test incorrect usage
query I
SELECT html_escape(NULL);
----
NULL

query I
SELECT html_escape(NULL, NULL);
----
NULL

query I
SELECT html_escape(NULL, true);
----
NULL

query I
SELECT html_escape('<script>', NULL);
----
NULL

query I
SELECT html_escape('');
----
(empty)

query I
SELECT html_escape('', false);
----
(empty)

statement error
SELECT html_escape();
----
Binder Error: No function matches the given name and argument types

statement error
SELECT html_escape('<script>', 'false', true);
----
Binder Error: No function matches the given name and argument types


# html_unescape
query I
SELECT html_unescape('I&heartsuit;duckdb');
----
I♥duckdb

query I
SELECT html_unescape('no character references');
----
no character references

query I
SELECT html_unescape('hey &no character &no reference');
----
hey &no character &no reference

# check & followed by invalid chars
query I
SELECT html_unescape('&\n&\t& &&');
----
&\n&\t& &&

# check & followed by numbers and letters
query I
SELECT html_unescape('&0 &9 &a &0; &9; &a;');
----
&0 &9 &a &0; &9; &a;

query I
SELECT html_unescape('&#xD800');
----
�

query I
SELECT html_unescape('&#D800');
----
&#D800

query I
SELECT html_unescape('&#x0');
----
�

# check invalid_charref map
query T
SELECT * FROM (VALUES (html_unescape('&#x80')), (html_unescape('&#x95')), (html_unescape('&#x82')), (html_unescape('&#x8b')), (html_unescape('&#x99')), (html_unescape('&#x9f'))) tbl(i);
----
€
•
‚
‹
™
Ÿ

# numeric character reference
query I
SELECT html_unescape('&#42');
----
*

# numeric character reference followed by a character
query I
SELECT html_unescape('&#8b');
----
b

# check code control points from the invalid charref map
query T
SELECT * FROM (VALUES (html_unescape('&#x81')), (html_unescape('&#x8d;')), (html_unescape('&#x8f')), (html_unescape('&#x90')), (html_unescape('&#x9d;'))) tbl(i);
----
\x81
\x8D
\x8F
\x90
\x9D

# check incomplete entities at the end of the string
query T
SELECT * FROM (VALUES (html_unescape('&')), (html_unescape('&#')), (html_unescape('&#x')), (html_unescape('&#X;')), (html_unescape('&#y')), (html_unescape('&#xy')), (html_unescape('&#Xy;'))) tbl(i);
----
&
&#
&#x
&#X;
&#y
&#xy
&#Xy;

# check invalid code points
query T
SELECT * FROM (VALUES (html_unescape('&#xD800;')), (html_unescape('&#xD801;')), (html_unescape('&#xDB00')), (html_unescape('&#xDC00')), (html_unescape('&#xDFFF')), (html_unescape('&#x110000')), (html_unescape('&#x1')), (html_unescape('&#xb')), (html_unescape('&#xe')), (html_unescape('&#x7f')), (html_unescape('&#xfffe')), (html_unescape('&#xffff')), (html_unescape('&#x10fffe')), (html_unescape('&#x10ffff'))) tbl(i);
----
�
�
�
�
�
�
(empty)
(empty)
(empty)
(empty)
(empty)
(empty)
(empty)
(empty)

# check that multiple trailing semicolons are handled correctly
query T
SELECT * FROM (VALUES (html_unescape('&quot;;')), (html_unescape('&#34;;')), (html_unescape('&#x22;;')), (html_unescape('&#34;;&#x22;;')), (html_unescape('&#x22;quot;'))) tbl(i);
----
";
";
";
";";
"quot;

query T
SELECT * FROM (VALUES (html_unescape('&amp')), (html_unescape('&AMP;'))) tbl(i);
----
&
&

query I
SELECT html_unescape('&not');
----
¬

query I
SELECT html_unescape('&not&not;');
----
¬¬

query I
SELECT html_unescape('&notin');
----
¬in

query I
SELECT html_unescape('&notin;');
----
∉

# longest valid name
query I
SELECT html_unescape('&CounterClockwiseContourIntegral;');
----
∳

# check a charref that maps to two unicode chars
query T
SELECT * FROM (VALUES (html_unescape('&acE;')), (html_unescape('&acE')), (html_unescape('&#123;'))) tbl(i);
----
∾
&acE
{

query I
SELECT html_unescape('&Eacuteric&Eacute;ric&alphacentauri&alpha;centauri');
----
ÉricÉric&alphacentauriαcentauri

# unescape values from table
statement ok
CREATE TABLE unescapes(unesc VARCHAR);

statement ok
INSERT INTO unescapes VALUES ('&#34;'), ('&#x82'), ('&#x9d'), ('&szlig;'),('&lambda;&lambda;&lambda;&lambda;&lambda;&lambda;&lambda;');

query I
SELECT html_unescape(unesc) FROM unescapes;
----
"
‚
\x9D
ß
λλλλλλλ

# test incorrect usage
query I
SELECT html_unescape(NULL);
----
NULL

query I
SELECT html_unescape('');
----
(empty)

# check a big number
query I
SELECT html_unescape('&#x1000000000000000000');
----
�

# INT_MAX
query I
SELECT html_unescape('&#x7FFFFFFF');
----
�

# INT_MAX + 0x00000001
query I
SELECT html_unescape('&#x80000000');
----
�

# UINT_MAX
query I
SELECT html_unescape('&#xffffffff');
----
�

statement error
SELECT html_unescape();
----
Binder Error: No function matches the given name and argument types

statement error
SELECT html_unescape('&notin', '&notin;');
----
Binder Error: No function matches the given name and argument types