/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 157,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 181,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 182,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 183,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 184,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 185,                  /* HANDLER  */
  YYSYMBOL_HAVING = 186,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 187,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 188,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 189,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 190,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 191,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 192,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 193,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 194,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 195,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 196,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 197,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 198,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 199,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 200,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 201,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 202,                /* INCREMENT  */
  YYSYMBOL_INDEX = 203,                    /* INDEX  */
  YYSYMBOL_INDEXES = 204,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 205,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 206,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 207,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 208,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 209,                  /* INNER_P  */
  YYSYMBOL_INOUT = 210,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 211,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 212,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 213,                   /* INSERT  */
  YYSYMBOL_INSTALL = 214,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 215,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 216,                    /* INT_P  */
  YYSYMBOL_INTEGER = 217,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 218,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 219,                 /* INTERVAL  */
  YYSYMBOL_INTO = 220,                     /* INTO  */
  YYSYMBOL_INVOKER = 221,                  /* INVOKER  */
  YYSYMBOL_IS = 222,                       /* IS  */
  YYSYMBOL_ISNULL = 223,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 224,                /* ISOLATION  */
  YYSYMBOL_JOIN = 225,                     /* JOIN  */
  YYSYMBOL_JSON = 226,                     /* JSON  */
  YYSYMBOL_KEY = 227,                      /* KEY  */
  YYSYMBOL_LABEL = 228,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 229,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 230,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 231,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 232,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 233,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 234,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 235,                     /* LEFT  */
  YYSYMBOL_LEVEL = 236,                    /* LEVEL  */
  YYSYMBOL_LIKE = 237,                     /* LIKE  */
  YYSYMBOL_LIMIT = 238,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 239,                   /* LISTEN  */
  YYSYMBOL_LOAD = 240,                     /* LOAD  */
  YYSYMBOL_LOCAL = 241,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 242,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 243,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 244,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 245,                   /* LOGGED  */
  YYSYMBOL_MACRO = 246,                    /* MACRO  */
  YYSYMBOL_MAP = 247,                      /* MAP  */
  YYSYMBOL_MAPPING = 248,                  /* MAPPING  */
  YYSYMBOL_MATCH = 249,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 250,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 251,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 252,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 253,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 254,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 255,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 256,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 257,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 258,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 259,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 260,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 261,                 /* MINVALUE  */
  YYSYMBOL_MODE = 262,                     /* MODE  */
  YYSYMBOL_MONTH_P = 263,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 264,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 265,                     /* MOVE  */
  YYSYMBOL_NAME_P = 266,                   /* NAME_P  */
  YYSYMBOL_NAMES = 267,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 268,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 269,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 270,                    /* NCHAR  */
  YYSYMBOL_NEW = 271,                      /* NEW  */
  YYSYMBOL_NEXT = 272,                     /* NEXT  */
  YYSYMBOL_NO = 273,                       /* NO  */
  YYSYMBOL_NONE = 274,                     /* NONE  */
  YYSYMBOL_NOT = 275,                      /* NOT  */
  YYSYMBOL_NOTHING = 276,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 277,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 278,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 279,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 280,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 281,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 282,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 283,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 284,                 /* OBJECT_P  */
  YYSYMBOL_OF = 285,                       /* OF  */
  YYSYMBOL_OFF = 286,                      /* OFF  */
  YYSYMBOL_OFFSET = 287,                   /* OFFSET  */
  YYSYMBOL_OIDS = 288,                     /* OIDS  */
  YYSYMBOL_OLD = 289,                      /* OLD  */
  YYSYMBOL_ON = 290,                       /* ON  */
  YYSYMBOL_ONLY = 291,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 292,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 293,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 294,                  /* OPTIONS  */
  YYSYMBOL_OR = 295,                       /* OR  */
  YYSYMBOL_ORDER = 296,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 297,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 298,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 299,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 300,                  /* OUTER_P  */
  YYSYMBOL_OVER = 301,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 302,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 303,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 304,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 305,                    /* OWNED  */
  YYSYMBOL_OWNER = 306,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 307,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 308,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 309,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 310,                /* PARTITION  */
  YYSYMBOL_PASSING = 311,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 312,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 313,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 314,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 315,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 316,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 317,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 318,                  /* PLACING  */
  YYSYMBOL_PLANS = 319,                    /* PLANS  */
  YYSYMBOL_POLICY = 320,                   /* POLICY  */
  YYSYMBOL_POSITION = 321,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 322,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 323,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 324,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 325,                /* PRECISION  */
  YYSYMBOL_PREPARE = 326,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 327,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 328,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 329,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 330,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 331,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 332,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 333,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 334,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 335,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 336,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 337,                    /* QUOTE  */
  YYSYMBOL_RANGE = 338,                    /* RANGE  */
  YYSYMBOL_READ_P = 339,                   /* READ_P  */
  YYSYMBOL_REAL = 340,                     /* REAL  */
  YYSYMBOL_REASSIGN = 341,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 342,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 343,                /* RECURSIVE  */
  YYSYMBOL_REF = 344,                      /* REF  */
  YYSYMBOL_REFERENCES = 345,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 346,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 347,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 348,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 349,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 350,                  /* RELEASE  */
  YYSYMBOL_RENAME = 351,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 352,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 353,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 354,                  /* REPLICA  */
  YYSYMBOL_RESET = 355,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 356,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 357,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 358,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 359,                /* RETURNING  */
  YYSYMBOL_RETURNS = 360,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 361,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 362,                    /* RIGHT  */
  YYSYMBOL_ROLE = 363,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 364,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 365,                   /* ROLLUP  */
  YYSYMBOL_ROW = 366,                      /* ROW  */
  YYSYMBOL_ROWS = 367,                     /* ROWS  */
  YYSYMBOL_RULE = 368,                     /* RULE  */
  YYSYMBOL_SAMPLE = 369,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 370,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 371,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 372,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 373,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 374,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 375,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 376,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 377,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 378,                   /* SECRET  */
  YYSYMBOL_SECURITY = 379,                 /* SECURITY  */
  YYSYMBOL_SELECT = 380,                   /* SELECT  */
  YYSYMBOL_SEMI = 381,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 382,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 383,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 384,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 385,                   /* SERVER  */
  YYSYMBOL_SESSION = 386,                  /* SESSION  */
  YYSYMBOL_SET = 387,                      /* SET  */
  YYSYMBOL_SETOF = 388,                    /* SETOF  */
  YYSYMBOL_SETS = 389,                     /* SETS  */
  YYSYMBOL_SHARE = 390,                    /* SHARE  */
  YYSYMBOL_SHOW = 391,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 392,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 393,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 394,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 395,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 396,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 397,                     /* SOME  */
  YYSYMBOL_SQL_P = 398,                    /* SQL_P  */
  YYSYMBOL_STABLE = 399,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 400,             /* STANDALONE_P  */
  YYSYMBOL_START = 401,                    /* START  */
  YYSYMBOL_STATEMENT = 402,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 403,               /* STATISTICS  */
  YYSYMBOL_STDIN = 404,                    /* STDIN  */
  YYSYMBOL_STDOUT = 405,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 406,                  /* STORAGE  */
  YYSYMBOL_STORED = 407,                   /* STORED  */
  YYSYMBOL_STRICT_P = 408,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 409,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 410,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 411,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 412,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 413,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 414,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 415,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 416,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 417,                    /* TABLE  */
  YYSYMBOL_TABLES = 418,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 419,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 420,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 421,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 422,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 423,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 424,                   /* TEXT_P  */
  YYSYMBOL_THEN = 425,                     /* THEN  */
  YYSYMBOL_TIES = 426,                     /* TIES  */
  YYSYMBOL_TIME = 427,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 428,                /* TIMESTAMP  */
  YYSYMBOL_TO = 429,                       /* TO  */
  YYSYMBOL_TRAILING = 430,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 431,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 432,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 433,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 434,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 435,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 436,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 437,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 438,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 439,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 440,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 441,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 442,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 443,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 444,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 445,                    /* UNION  */
  YYSYMBOL_UNIQUE = 446,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 447,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 448,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 449,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 450,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 451,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 452,                   /* UPDATE  */
  YYSYMBOL_USE_P = 453,                    /* USE_P  */
  YYSYMBOL_USER = 454,                     /* USER  */
  YYSYMBOL_USING = 455,                    /* USING  */
  YYSYMBOL_VACUUM = 456,                   /* VACUUM  */
  YYSYMBOL_VALID = 457,                    /* VALID  */
  YYSYMBOL_VALIDATE = 458,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 459,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 460,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 461,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 462,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 463,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 464,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 465,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 466,                /* VERSION_P  */
  YYSYMBOL_VIEW = 467,                     /* VIEW  */
  YYSYMBOL_VIEWS = 468,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 469,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 470,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 471,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 472,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 473,                     /* WHEN  */
  YYSYMBOL_WHERE = 474,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 475,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 476,                   /* WINDOW  */
  YYSYMBOL_WITH = 477,                     /* WITH  */
  YYSYMBOL_WITHIN = 478,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 479,                  /* WITHOUT  */
  YYSYMBOL_WORK = 480,                     /* WORK  */
  YYSYMBOL_WRAPPER = 481,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 482,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 483,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 484,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 485,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 486,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 487,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 488,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 489,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 490,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 491,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 492,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 493,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 494,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 495,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 496,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 497,                    /* YES_P  */
  YYSYMBOL_ZONE = 498,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 499,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 500,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 501,                  /* WITH_LA  */
  YYSYMBOL_502_ = 502,                     /* '<'  */
  YYSYMBOL_503_ = 503,                     /* '>'  */
  YYSYMBOL_504_ = 504,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 505,                /* POSTFIXOP  */
  YYSYMBOL_506_ = 506,                     /* '+'  */
  YYSYMBOL_507_ = 507,                     /* '-'  */
  YYSYMBOL_508_ = 508,                     /* '*'  */
  YYSYMBOL_509_ = 509,                     /* '/'  */
  YYSYMBOL_510_ = 510,                     /* '%'  */
  YYSYMBOL_511_ = 511,                     /* '^'  */
  YYSYMBOL_UMINUS = 512,                   /* UMINUS  */
  YYSYMBOL_513_ = 513,                     /* '['  */
  YYSYMBOL_514_ = 514,                     /* ']'  */
  YYSYMBOL_515_ = 515,                     /* '('  */
  YYSYMBOL_516_ = 516,                     /* ')'  */
  YYSYMBOL_517_ = 517,                     /* '.'  */
  YYSYMBOL_518_ = 518,                     /* ';'  */
  YYSYMBOL_519_ = 519,                     /* ','  */
  YYSYMBOL_520_ = 520,                     /* '?'  */
  YYSYMBOL_521_ = 521,                     /* '{'  */
  YYSYMBOL_522_ = 522,                     /* '}'  */
  YYSYMBOL_523_ = 523,                     /* '#'  */
  YYSYMBOL_524_ = 524,                     /* '$'  */
  YYSYMBOL_525_ = 525,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 526,                 /* $accept  */
  YYSYMBOL_stmtblock = 527,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 528,                /* stmtmulti  */
  YYSYMBOL_stmt = 529,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 530,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 531,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 532,               /* SeqOptList  */
  YYSYMBOL_opt_with = 533,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 534,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 535,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 536,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 537,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 538,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 539, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 540,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 541, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 542, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 543,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 544,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 545, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 546,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 547,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 548,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 549,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 550,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 551,               /* DetachStmt  */
  YYSYMBOL_opt_database = 552,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 553,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 554,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 555,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 556,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 557,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 558,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 559, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 560,           /* qualified_name  */
  YYSYMBOL_ColId = 561,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 562,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 563,                   /* Sconst  */
  YYSYMBOL_indirection = 564,              /* indirection  */
  YYSYMBOL_indirection_el = 565,           /* indirection_el  */
  YYSYMBOL_attr_name = 566,                /* attr_name  */
  YYSYMBOL_ColLabel = 567,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 568,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 569,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 570,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 571,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 572, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 573,                /* opt_using  */
  YYSYMBOL_opt_as = 574,                   /* opt_as  */
  YYSYMBOL_opt_program = 575,              /* opt_program  */
  YYSYMBOL_copy_options = 576,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 577,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 578,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 579,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 580,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 581,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 582,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 583, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 584,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 585,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 586,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 587,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 588,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 589, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 590,       /* generic_option_arg  */
  YYSYMBOL_key_action = 591,               /* key_action  */
  YYSYMBOL_ColConstraint = 592,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 593,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 594,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 595,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 596,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 597,      /* generic_option_elem  */
  YYSYMBOL_key_update = 598,               /* key_update  */
  YYSYMBOL_key_actions = 599,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 600,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 601,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 602,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 603,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 604,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 605,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 606,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 607,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 608,                  /* OptWith  */
  YYSYMBOL_definition = 609,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 610,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 611,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 612,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 613,                /* columnDef  */
  YYSYMBOL_def_list = 614,                 /* def_list  */
  YYSYMBOL_index_name = 615,               /* index_name  */
  YYSYMBOL_TableElement = 616,             /* TableElement  */
  YYSYMBOL_def_elem = 617,                 /* def_elem  */
  YYSYMBOL_opt_definition = 618,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 619,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 620,               /* columnElem  */
  YYSYMBOL_opt_column_list = 621,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 622,              /* ColQualList  */
  YYSYMBOL_key_delete = 623,               /* key_delete  */
  YYSYMBOL_reloption_elem = 624,           /* reloption_elem  */
  YYSYMBOL_columnList = 625,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 626,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 627,                /* func_type  */
  YYSYMBOL_ConstraintElem = 628,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 629,         /* TableElementList  */
  YYSYMBOL_key_match = 630,                /* key_match  */
  YYSYMBOL_TableLikeClause = 631,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 632,                  /* OptTemp  */
  YYSYMBOL_generated_when = 633,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 634,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 635,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 636,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 637,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 638,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 639,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 640,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 641,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 642,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 643,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 644,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 645,              /* macro_alias  */
  YYSYMBOL_param_list = 646,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 647,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 648,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 649,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 650,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 651,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 652,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 653,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 654,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 655,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 656,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 657,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 658,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 659,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 660,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 661,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 662,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 663,             /* using_clause  */
  YYSYMBOL_DropStmt = 664,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 665,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 666,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 667,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 668,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 669, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 670,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 671, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 672,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 673,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 674,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 675,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 676,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 677,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 678,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 679,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 680,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 681, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 682,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 683,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 684,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 685,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 686,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 687,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 688,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 689,                /* IndexStmt  */
  YYSYMBOL_access_method = 690,            /* access_method  */
  YYSYMBOL_access_method_clause = 691,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 692,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 693,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 694,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 695,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 696,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 697,              /* insert_rest  */
  YYSYMBOL_insert_target = 698,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 699,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 700,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 701,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 702,       /* insert_column_item  */
  YYSYMBOL_set_clause = 703,               /* set_clause  */
  YYSYMBOL_opt_or_action = 704,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 705,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 706,               /* index_elem  */
  YYSYMBOL_returning_clause = 707,         /* returning_clause  */
  YYSYMBOL_override_kind = 708,            /* override_kind  */
  YYSYMBOL_set_target_list = 709,          /* set_target_list  */
  YYSYMBOL_opt_collate = 710,              /* opt_collate  */
  YYSYMBOL_opt_class = 711,                /* opt_class  */
  YYSYMBOL_insert_column_list = 712,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 713,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 714, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 715,             /* index_params  */
  YYSYMBOL_set_target = 716,               /* set_target  */
  YYSYMBOL_LoadStmt = 717,                 /* LoadStmt  */
  YYSYMBOL_file_name = 718,                /* file_name  */
  YYSYMBOL_opt_from_repo = 719,            /* opt_from_repo  */
  YYSYMBOL_opt_ext_version = 720,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 721,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 722,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 723,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 724,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 725,               /* RenameStmt  */
  YYSYMBOL_opt_column = 726,               /* opt_column  */
  YYSYMBOL_SelectStmt = 727,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 728,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 729,         /* select_no_parens  */
  YYSYMBOL_select_clause = 730,            /* select_clause  */
  YYSYMBOL_opt_select = 731,               /* opt_select  */
  YYSYMBOL_simple_select = 732,            /* simple_select  */
  YYSYMBOL_value_or_values = 733,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 734,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 735,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 736,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 737, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 738,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 739,              /* with_clause  */
  YYSYMBOL_cte_list = 740,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 741,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 742,         /* opt_materialized  */
  YYSYMBOL_into_clause = 743,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 744,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 745,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 746,          /* all_or_distinct  */
  YYSYMBOL_by_name = 747,                  /* by_name  */
  YYSYMBOL_distinct_clause = 748,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 749,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 750,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 751,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 752,              /* sort_clause  */
  YYSYMBOL_sortby_list = 753,              /* sortby_list  */
  YYSYMBOL_sortby = 754,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 755,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 756,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 757,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 758,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 759,             /* limit_clause  */
  YYSYMBOL_offset_clause = 760,            /* offset_clause  */
  YYSYMBOL_sample_count = 761,             /* sample_count  */
  YYSYMBOL_sample_clause = 762,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 763,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 764,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 765,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 766,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 767,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 768,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 769,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 770, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 771,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 772,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 773,            /* first_or_next  */
  YYSYMBOL_group_clause = 774,             /* group_clause  */
  YYSYMBOL_group_by_list = 775,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 776,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 777,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 778,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 779,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 780,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 781,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 782,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 783,            /* having_clause  */
  YYSYMBOL_qualify_clause = 784,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 785,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 786,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 787,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 788,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 789,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 790,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 791,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 792,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 793,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 794,              /* from_clause  */
  YYSYMBOL_from_list = 795,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 796,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 797,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 798,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 799,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 800,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 801,             /* pivot_header  */
  YYSYMBOL_pivot_value = 802,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 803,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 804,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 805,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 806,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 807,             /* joined_table  */
  YYSYMBOL_alias_clause = 808,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 809,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 810,        /* func_alias_clause  */
  YYSYMBOL_join_type = 811,                /* join_type  */
  YYSYMBOL_join_outer = 812,               /* join_outer  */
  YYSYMBOL_join_qual = 813,                /* join_qual  */
  YYSYMBOL_relation_expr = 814,            /* relation_expr  */
  YYSYMBOL_func_table = 815,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 816,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 817,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 818,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 819,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 820,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 821,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 822,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 823,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 824,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 825,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 826,             /* opt_Typename  */
  YYSYMBOL_Typename = 827,                 /* Typename  */
  YYSYMBOL_qualified_typename = 828,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 829,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 830,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 831,            /* ConstTypename  */
  YYSYMBOL_GenericType = 832,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 833,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 834,                  /* Numeric  */
  YYSYMBOL_opt_float = 835,                /* opt_float  */
  YYSYMBOL_Bit = 836,                      /* Bit  */
  YYSYMBOL_ConstBit = 837,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 838,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 839,         /* BitWithoutLength  */
  YYSYMBOL_Character = 840,                /* Character  */
  YYSYMBOL_ConstCharacter = 841,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 842,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 843,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 844,                /* character  */
  YYSYMBOL_opt_varying = 845,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 846,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 847,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 848,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 849,             /* year_keyword  */
  YYSYMBOL_month_keyword = 850,            /* month_keyword  */
  YYSYMBOL_day_keyword = 851,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 852,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 853,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 854,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 855,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 856,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 857,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 858,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 859,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 860,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 861,             /* opt_interval  */
  YYSYMBOL_a_expr = 862,                   /* a_expr  */
  YYSYMBOL_b_expr = 863,                   /* b_expr  */
  YYSYMBOL_c_expr = 864,                   /* c_expr  */
  YYSYMBOL_d_expr = 865,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 866, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 867,         /* indirection_expr  */
  YYSYMBOL_list_expr = 868,                /* list_expr  */
  YYSYMBOL_struct_expr = 869,              /* struct_expr  */
  YYSYMBOL_func_application = 870,         /* func_application  */
  YYSYMBOL_func_expr = 871,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 872,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 873, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 874,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 875,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 876,            /* filter_clause  */
  YYSYMBOL_export_clause = 877,            /* export_clause  */
  YYSYMBOL_window_clause = 878,            /* window_clause  */
  YYSYMBOL_window_definition_list = 879,   /* window_definition_list  */
  YYSYMBOL_window_definition = 880,        /* window_definition  */
  YYSYMBOL_over_clause = 881,              /* over_clause  */
  YYSYMBOL_window_specification = 882,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 883, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 884,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 885,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 886,             /* frame_extent  */
  YYSYMBOL_frame_bound = 887,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 888, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 889,            /* qualified_row  */
  YYSYMBOL_row = 890,                      /* row  */
  YYSYMBOL_dict_arg = 891,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 892,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 893, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 894,                  /* map_arg  */
  YYSYMBOL_map_arguments = 895,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 896,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 897, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 898,                 /* sub_type  */
  YYSYMBOL_all_Op = 899,                   /* all_Op  */
  YYSYMBOL_MathOp = 900,                   /* MathOp  */
  YYSYMBOL_qual_Op = 901,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 902,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 903,              /* subquery_Op  */
  YYSYMBOL_any_operator = 904,             /* any_operator  */
  YYSYMBOL_c_expr_list = 905,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 906,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 907,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 908,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 909,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 910,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 911,            /* func_arg_expr  */
  YYSYMBOL_type_list = 912,                /* type_list  */
  YYSYMBOL_extract_list = 913,             /* extract_list  */
  YYSYMBOL_extract_arg = 914,              /* extract_arg  */
  YYSYMBOL_overlay_list = 915,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 916,          /* overlay_placing  */
  YYSYMBOL_position_list = 917,            /* position_list  */
  YYSYMBOL_substr_list = 918,              /* substr_list  */
  YYSYMBOL_substr_from = 919,              /* substr_from  */
  YYSYMBOL_substr_for = 920,               /* substr_for  */
  YYSYMBOL_trim_list = 921,                /* trim_list  */
  YYSYMBOL_in_expr = 922,                  /* in_expr  */
  YYSYMBOL_case_expr = 923,                /* case_expr  */
  YYSYMBOL_when_clause_list = 924,         /* when_clause_list  */
  YYSYMBOL_when_clause = 925,              /* when_clause  */
  YYSYMBOL_case_default = 926,             /* case_default  */
  YYSYMBOL_case_arg = 927,                 /* case_arg  */
  YYSYMBOL_columnref = 928,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 929,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 930,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 931,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 932,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 933, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 934,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 935, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 936,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 937,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 938,                /* target_el  */
  YYSYMBOL_except_list = 939,              /* except_list  */
  YYSYMBOL_opt_except_list = 940,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 941,          /* replace_list_el  */
  YYSYMBOL_replace_list = 942,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 943,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 944,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 945,      /* qualified_name_list  */
  YYSYMBOL_name_list = 946,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 947,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 948, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 949,                     /* name  */
  YYSYMBOL_func_name = 950,                /* func_name  */
  YYSYMBOL_AexprConst = 951,               /* AexprConst  */
  YYSYMBOL_Iconst = 952,                   /* Iconst  */
  YYSYMBOL_type_function_name = 953,       /* type_function_name  */
  YYSYMBOL_function_name_token = 954,      /* function_name_token  */
  YYSYMBOL_type_name_token = 955,          /* type_name_token  */
  YYSYMBOL_any_name = 956,                 /* any_name  */
  YYSYMBOL_attrs = 957,                    /* attrs  */
  YYSYMBOL_opt_name_list = 958,            /* opt_name_list  */
  YYSYMBOL_param_name = 959,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 960,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 961,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 962,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 963,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 964,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 965,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 966,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 967,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 968,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 969,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 970,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 971,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 972,            /* generic_reset  */
  YYSYMBOL_reset_rest = 973,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 974,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 975,                 /* set_rest  */
  YYSYMBOL_generic_set = 976,              /* generic_set  */
  YYSYMBOL_var_value = 977,                /* var_value  */
  YYSYMBOL_zone_value = 978,               /* zone_value  */
  YYSYMBOL_var_list = 979,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 980,         /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 981,         /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 982,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 983,               /* opt_tables  */
  YYSYMBOL_var_name = 984,                 /* var_name  */
  YYSYMBOL_table_id = 985,                 /* table_id  */
  YYSYMBOL_ViewStmt = 986,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 987          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  870
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73178

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  526
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  462
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2126
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3534

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   758


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   523,   524,   510,     2,     2,
     515,   516,   508,   506,   519,   507,   517,   509,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   525,   518,
     502,   504,   503,   520,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   513,     2,   514,   511,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   521,     2,   522,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   505,   512
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   505,   505,   521,   533,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   584,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       9,    13,    44,    45,    46,    50,    51,    55,    59,    60,
      64,    70,    75,    76,    77,    78,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     9,    23,    29,    36,    42,    49,    59,    63,    71,
      72,    73,    77,    86,    95,   102,   103,   108,   120,   125,
     150,   155,   160,   166,   176,   186,   192,   203,   214,   229,
     230,   236,   237,   242,   243,   249,   250,   254,   255,   260,
     262,   268,   269,   273,   274,   277,   278,   283,     7,    16,
      25,    46,    47,    50,    54,     7,    14,    22,     9,    19,
      29,    42,    43,     7,    17,    27,    40,    41,    45,    46,
      47,    51,    52,     7,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     7,    16,    28,    29,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      95,    96,    97,    98,    99,   100,   105,   106,   111,   112,
     113,   118,   119,   120,     8,    20,    33,    46,    58,    70,
      86,    87,    91,    95,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   122,   127,   135,   139,   144,   145,   150,   154,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   199,
     203,   207,   211,   215,   219,   227,   232,   233,   234,   235,
     236,   242,   246,    47,    48,    52,    53,    54,    72,    73,
      80,    88,    96,   104,   112,   120,   131,   132,   159,   164,
     172,   188,   205,   222,   239,   240,   259,   263,   267,   271,
     275,   285,   296,   306,   315,   326,   337,   349,   364,   382,
     382,   386,   386,   390,   390,   394,   400,   407,   411,   412,
     416,   417,   431,   438,   445,   455,   456,   459,   472,   473,
     474,   478,   489,   497,   502,   507,   512,   517,   525,   533,
     538,   543,   550,   551,   555,   556,   557,   561,   568,   569,
     573,   574,   578,   579,   580,   584,   585,   589,   590,   606,
     607,   610,   619,   630,   631,   632,   635,   636,   637,   641,
     642,   643,   644,   648,   649,   653,   655,   671,   673,   678,
     681,   689,   693,   697,   701,   705,   709,   716,   721,   728,
     729,   733,   738,   742,   746,   754,   761,   762,   767,   768,
     772,   773,   778,   780,   782,   787,   807,   808,   810,   815,
     816,   820,   821,   824,   825,   850,   851,   856,   860,   861,
     865,   866,   870,   871,   872,   873,   874,   878,   891,   898,
     905,   912,   913,   917,   918,   922,   923,   927,   928,   932,
     933,   937,   938,   942,   953,   954,   955,   956,   960,   961,
     966,   967,   968,   977,   983,   992,   993,  1006,  1007,  1011,
    1012,  1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,
    1076,  1081,  1092,  1106,  1107,  1110,  1111,  1112,  1115,  1123,
    1132,  1133,  1134,  1135,  1138,  1146,  1155,  1159,  1166,  1167,
    1171,  1180,  1184,  1209,  1213,  1226,  1240,  1255,  1267,  1280,
    1294,  1308,  1321,  1336,  1355,  1361,  1366,  1372,  1379,  1380,
    1388,  1392,  1396,  1402,  1409,  1414,  1415,  1416,  1417,  1418,
    1419,  1423,  1424,  1436,  1437,  1442,  1449,  1456,  1463,  1495,
    1506,  1519,  1524,  1525,  1528,  1529,  1532,  1533,  1538,  1539,
    1544,  1548,  1554,  1575,  1583,  1596,  1599,  1603,  1603,  1606,
    1607,  1609,  1614,  1621,  1626,  1632,  1637,  1643,  1647,  1654,
    1661,  1671,  1672,  1676,  1678,  1681,  1685,  1686,  1687,  1688,
    1689,  1690,  1695,  1715,  1716,  1717,  1718,  1729,  1743,  1744,
    1750,  1755,  1760,  1765,  1770,  1775,  1780,  1785,  1791,  1797,
    1803,  1810,  1832,  1841,  1845,  1853,  1857,  1865,  1877,  1898,
    1902,  1908,  1912,  1925,  1933,  1943,  1945,  1947,  1949,  1951,
    1953,  1958,  1959,  1966,  1975,  1983,  1992,  2003,  2011,  2012,
    2013,  2017,  2017,  2020,  2020,  2023,  2023,  2026,  2026,  2029,
    2029,  2032,  2032,  2035,  2035,  2038,  2038,  2041,  2041,  2044,
    2044,  2047,  2047,  2050,  2050,  2053,  2055,  2057,  2059,  2061,
    2063,  2065,  2067,  2069,  2071,  2073,  2075,  2077,  2082,  2087,
    2093,  2100,  2105,  2111,  2117,  2148,  2150,  2152,  2160,  2175,
    2177,  2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2195,
    2197,  2199,  2201,  2203,  2205,  2208,  2210,  2212,  2215,  2217,
    2219,  2221,  2223,  2228,  2233,  2240,  2245,  2252,  2257,  2264,
    2269,  2277,  2285,  2293,  2301,  2319,  2327,  2335,  2343,  2351,
    2359,  2367,  2371,  2387,  2395,  2403,  2411,  2419,  2427,  2435,
    2439,  2443,  2447,  2451,  2459,  2467,  2475,  2483,  2503,  2525,
    2536,  2543,  2557,  2565,  2573,  2593,  2595,  2597,  2599,  2601,
    2603,  2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,
    2623,  2625,  2627,  2629,  2631,  2633,  2635,  2639,  2643,  2647,
    2661,  2662,  2676,  2677,  2678,  2689,  2713,  2724,  2734,  2738,
    2742,  2749,  2753,  2760,  2764,  2781,  2785,  2787,  2790,  2793,
    2804,  2809,  2816,  2822,  2828,  2837,  2841,  2848,  2856,  2864,
    2875,  2895,  2931,  2942,  2943,  2950,  2956,  2958,  2960,  2964,
    2973,  2978,  2985,  3000,  3007,  3011,  3015,  3019,  3023,  3033,
    3042,  3064,  3065,  3069,  3070,  3071,  3075,  3076,  3083,  3084,
    3088,  3089,  3094,  3102,  3104,  3118,  3121,  3148,  3149,  3152,
    3153,  3161,  3169,  3177,  3186,  3196,  3214,  3260,  3269,  3278,
    3287,  3296,  3308,  3309,  3310,  3311,  3312,  3326,  3327,  3330,
    3331,  3335,  3345,  3346,  3350,  3351,  3355,  3362,  3363,  3368,
    3369,  3374,  3375,  3378,  3379,  3380,  3383,  3384,  3387,  3388,
    3389,  3390,  3391,  3392,  3393,  3394,  3395,  3396,  3397,  3398,
    3399,  3400,  3403,  3405,  3410,  3412,  3417,  3419,  3421,  3423,
    3425,  3427,  3429,  3431,  3445,  3447,  3452,  3456,  3463,  3468,
    3474,  3478,  3485,  3490,  3497,  3502,  3510,  3514,  3520,  3524,
    3533,  3544,  3545,  3549,  3553,  3560,  3561,  3562,  3563,  3564,
    3565,  3566,  3567,  3568,  3569,  3570,  3571,  3572,  3573,  3583,
    3587,  3594,  3601,  3602,  3618,  3622,  3627,  3631,  3646,  3651,
    3655,  3658,  3661,  3662,  3663,  3666,  3673,  3683,  3697,  3698,
    3702,  3713,  3714,  3717,  3718,  3721,  3725,  3732,  3740,  3748,
    3756,  3766,  3767,  3772,  3773,  3777,  3778,  3779,  3783,  3792,
    3800,  3808,  3817,  3832,  3833,  3838,  3839,  3849,  3850,  3854,
    3855,  3859,  3860,  3863,  3879,  3887,  3897,  3898,  3901,  3902,
    3905,  3909,  3910,  3914,  3915,  3918,  3919,  3920,  3930,  3931,
    3935,  3937,  3943,  3944,  3948,  3949,  3952,  3963,  3966,  3977,
    3981,  3985,  3997,  4001,  4010,  4017,  4055,  4059,  4063,  4067,
    4071,  4075,  4079,  4085,  4102,  4103,  4104,  4107,  4108,  4109,
    4112,  4113,  4114,  4117,  4118,  4121,  4123,  4128,  4129,  4132,
    4136,  4137,     7,    18,    19,    23,    24,    25,    26,    27,
      28,     7,    26,    50,    73,    80,    85,    86,    87,    88,
       8,    33,    62,    66,    67,    72,    73,    78,    79,    83,
      84,    89,    90,     7,    16,    25,    34,    43,    52,     5,
      12,    22,    23,     7,    15,    26,    27,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,     7,    19,    33,
       9,    16,    26,    33,    44,    45,    50,    51,    52,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      91,    92,    93,    98,    99,   104,   108,   116,   117,   122,
     123,   124,   130,   135,   143,   144,    10,    16,    22,    28,
      38,    39,    47,    58,    70,    78,    89,    95,    99,   103,
     118,   125,   126,   127,   131,   132,     7,    16,    24,    34,
      35,    41,    42,    43,    46,    47,    48,     8,    22,    36,
      48,    56,    70,    71,    72,    73,    74,    87,    88,    93,
      94,    98,    99,     7,    18,    31,    35,    42,    53,    54,
      60,    61,     9,    19,     7,    16,    28,    35,    42,    51,
      52,    56,    57,     2,     7,    12,    17,    26,    33,    43,
      44,    51,     3,    10,    17,    24,    31,    38,    45,    52,
      61,    61,    63,    63,    65,    65,    67,    68,    72,    73,
       6,     8,    21,    34,    47,    65,    87,    88,    89,    90,
      11,    24,    37,    54,    55,    56,    61,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD",
  "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
  "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET", "SECURITY",
  "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'?'", "'{'", "'}'", "'#'",
  "'$'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "opt_from_repo",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt",
  "UpdateExtensionsStmt", "UseStmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "VariableShowStmt",
  "describe_or_desc", "show_or_describe", "opt_tables", "var_name",
  "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3081)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2052)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6807,   -12,   917, -3081, -3081,   283,   -12, 49892, 65253,   319,
     -12,   112,  2471, 51876, -3081, -3081, 46420, 72640,   -12, 55348,
   72604,   304,   260, 31830,   370, 55844, 55844, -3081, -3081, -3081,
   65253, 55348, 56340,   -12,   329, 65749, -3081,   -12, 34310, 52372,
     -57, -3081, 55348,    51,   348, 56836, 55348,  3455,   870,   422,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081,   465, -3081, -3081, -3081, -3081,   116,
   -3081, -3081, -3081, -3081, -3081,   147, -3081,   181,   154, 31830,
   31830,   760,   435, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, 33814, -3081, -3081, -3081, -3081, 57332, 55348,
   57828, 52868, 58324, -3081,   721,  1000, -3081,   186, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
     191, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081,   499, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081,   199, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,   699,   204,
   -3081, -3081, -3081,   508, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081,  2019, -3081, -3081,   957,  2900, 55348,   222,   466,
     695, -3081, 58820, -3081,   704, 55348, -3081, -3081,   886,   713,
     939, -3081, -3081, 53364, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   46916, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,   899,
   -3081, -3081,   726, -3081,   163, -3081, -3081,   755,   724, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,   830, -3081,
   -3081, -3081,   831, 66245, 59316, 59812, -3081,   709,  2472, 72711,
   72622, 30836, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,   465,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, 55844, 65253, 55844,   769,   799,
    1112,   803, 32326,   842, 34807,   849,   884,  1173,   888,   892,
     918,   932,   348, 31333,   943,   699, -3081, 60308, 60308,     1,
    4077, -3081, 60308, 60804, -3081,   955, -3081,  1000, -3081, -3081,
   -3081,  1289, -3081,   -73,   956, -3081, 61300, 61300, 61300,   989,
    1268, -3081, -3081, -3081,   981, -3081, -3081,  1216, 20485, 20485,
   66741, 66741,  1000, 66741,  1015, -3081, -3081,   412, -3081, -3081,
   -3081,   760,  1006,   699, -3081, -3081, 52372, -3081, -3081,   237,
    1380, 20485, 55348,  1017, -3081,  1023,  1017,  1037,  1043,  1050,
   -3081,  6807, -3081, 55348,  1398,  1281, 53860,   340,   340,  1519,
     340,   952,   994,  1504,  2591, -3081,   940, -3081,  1083,  1190,
    1128,  1405, -3081,  1006,  1501,  1025,  1305,  1509,  3524,  1516,
    1121,  1520,  1205,  1524,  1638, 20485, 47412,   699, -3081, 11611,
   20485, -3081, -3081, -3081,  1263, -3081, -3081, -3081, -3081, -3081,
   55348, 65253,  1168,  1174, -3081, -3081, -3081, -3081,  1172,  1418,
   -3081,  1655, -3081, -3081,  1233, 61796, 62292, 62788, 63284, 67237,
    1618, -3081, -3081,  1560, -3081, -3081, -3081,  1239, -3081, -3081,
   -3081,   132, 67733,  1583,  1211,   239, -3081,  1597,   257, -3081,
    1602,  1451, 15265, -3081,  1411, -3081, -3081, -3081,   348, -3081,
   -3081, -3081,   585, -3081, -3081, 43410, 72622,  1340,  1255, -3081,
    1289, 20485, 20485,  1256,  6561, 60308, 60804, 20485, 55348, -3081,
   20485, 25183,  1260, 20485, 20485, 12655, 20485, 29844, 60308,  4077,
    1262, -3081,   -85, 55348,  1261, -3081,  1361,  1361,   329, 31830,
    1562, -3081,   248,  1563,  1485, -3081, 31830,  1485,   924,  1275,
    1567,  1485, -3081,   667,  1568,  1361, 35303,  1292, -3081,  1361,
    1499, -3081, -3081, 55844,  1334, 20485, 15265, 70213,  1764, -3081,
   -3081, -3081, -3081,  1572, 65253,  1294, -3081, -3081, -3081, -3081,
   -3081, -3081,   451,  1805,   190,  1806, 20485,   190,   190,  1300,
     207,   207, -3081,  1491,  1302, -3081,   208,  1308,  1309,  1822,
    1823,   180,   161,  1058,   190, 20485, -3081,   207,  1316,  1827,
    1318,  1829,   158,   176, -3081,   211, 20485, 20485, 20485,  1687,
   20485, 10567, -3081, 55348,  1828, 47412,   717, -3081,   699,  1324,
    1000, -3081, -3081, -3081, -3081, -3081, -3081, -3081,  1330, -3081,
     196,  7019, -3081, -3081, -3081, -3081, -3081, -3081,  1368, -3081,
   -3081, -3081, -3081,  1545, 20485, -3081, -3081,  1332,  1562, -3081,
     212, -3081, -3081,  1562, -3081, -3081, -3081, -3081, -3081,   226,
    1745, 20485, 20485, 65253,   699, -3081, 68229, -3081, -3081, -3081,
   -3081, -3081, -3081,   741, -3081,   465, 45052,  1333,  1337,  1017,
   55348, 55348,  1814, -3081, -3081, -3081, -3081,  1023, 52372,   134,
    1637,   146,  1469, -3081, -3081,   760,   760, 15787,  1271,   516,
      81, 16309, 21007,  1691,  1573,   215,   684,  1694, -3081,  1574,
    1808, 25183, 20485, 20485,   952,   994, 20485, -3081, -3081, -3081,
    1628, 55348, 50388,   778,   824,  1353,  1440,  1357,    73,  1780,
   -3081,  1355, -3081,  1446, 55348, 72152,   206, -3081,  1817,   206,
     206,   225,  1818,  1449,   151,  1613,   497,   313,  3075, -3081,
    1355, 52372,   141,   651,  1355, 55348,  1452,   682,  1355,  1774,
   65253,  1255, 41038,  1369, -3081, -3081, -3081,   174, 15265, -3081,
    1201,  1259,  1326,   379,   194,  1358,  1365, 15265,  1413,  1426,
     179,  1466,  1571,  1576,  1589,  1593,  1606,  1611,  1634,   145,
    1636,  1646,  1653,  1657,  1661,  1673, -3081,  1678,   185,  1685,
     223, 15265,  1689, -3081,   189, -3081, 45052,   -16, -3081, -3081,
    1692, 45099, -3081,  1664,  1460,  1468, 65253,  1419, 55348,   935,
    1521,  1746,  1807, 70694, 55348,  1633,  3075,  1644,  1407,  1883,
    1652,  1174,  1656,  1417,  1658, -3081,  1735, -3081, 68725, 47412,
   -3081, -3081, -3081, -3081, -3081,  1784,  1766, 65253, 47412,  1422,
   -3081, -3081, 65253, -3081, 55348, 55348, -3081, 55348, 65253, -3081,
     764, 45052,  1930,   914, 72622, 48900, -3081, -3081, -3081, -3081,
    1189,  1242, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081,  1000, 47412, -3081,  3560,  1334, 44028,  1428, 20485, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081,  1429,  1775, -3081,
   -3081,  6483,  1430, 44075,  1432, 25183, 25183,   699,   295, -3081,
   -3081, 25183,  1433, 49396, 43942,  1431,  1437, 44418, 16831, 20485,
   16831, 16831, 44544, -3081,  1439, 44583, 60308,  1441, 55348, 54356,
   -3081, -3081, -3081, 20485, 20485,  4077, 54852,  1484, -3081, 31830,
   -3081,  1736, 31830, -3081, -3081,  3911, -3081, 31830,  1738, 20485,
   31830, -3081,  1683,  1686,  1454, 31830, -3081, 55348,  1459, 55348,
   -3081, -3081, -3081, -3081, 55844, -3081, 45052, -3081,  1456,   773,
    1465, -3081, -3081, -3081, -3081, -3081,  1512, -3081,  1512,  1512,
   -3081, -3081, -3081, -3081,  1471,  1471,  1472, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
    1473,  1058, -3081,  1512, -3081,  1471, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, 72152, -3081, -3081, -3081, -3081,   312,   315,
   -3081,  1478, -3081, -3081, -3081, -3081,  1479, -3081,  1482,  1956,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,  7356,
     774,  1471,  1715, -3081, -3081, 20485, 20485, -3081, -3081,  1481,
   45052,  1527, -3081, -3081, 20485, 20485, -3081, -3081, -3081, -3081,
    1994, -3081, 20485,  1512,  1512, -3081,  8420, -3081, 39769, 17353,
    1577,  1581,  1994, -3081,  1994, -3081,  8420,  2002,  2002, 37783,
   -3081,  1662, 44665, -3081,  1502,  1534,  7733,  1498,  1500, -3081,
    1505,  1507, -3081, -3081, 41922,   175,   699,   699, 20485, -3081,
    1994, 20485,  8348,  8348, -3081,   252, 70213, 20485, 20485, 20485,
   20485, 20485, 20485, 20485, 20485, 45924,  1612,   182, 65253, 20485,
   20485,  1523,   926, -3081, 20485,  1763, -3081,  1533, 20485,  1620,
     167, 20485, 20485, 20485, 20485, 20485, 20485, 20485, 20485, 20485,
   -3081, -3081, 28837,   259,   732,  1871,  1890,    63,   510, 20485,
    1882, 11611, -3081,  1882, -3081, -3081, -3081, -3081, -3081,   214,
   -3081, -3081,  1456,  1456, -3081, 65253, -3081, 55348,   237, 51380,
   20485, -3081, -3081,  1536,  1540,   599, -3081,  1603, -3081, -3081,
   55348, -3081, 38279,  1839, -3081,   321,  1542, -3081, 43903,  1796,
    1839,   760, -3081, -3081, 26227,  1677,  1841,  1778, -3081, -3081,
    1757,  1758, -3081,  1553, 45299, 21529, 21529, -3081,  1344, 45052,
    1351, -3081, -3081, -3081, -3081, -3081, -3081,   845, -3081, 55348,
     372, 35799, -3081,  1554,   120, -3081,  2025,  1893,  1856,  1691,
     684,  1565, -3081,  1364,  1569, 69221, 55348,  1860,  1813,  1864,
     -55, 70213, -3081, -3081, -3081, -3081, 55348, 65253, 63780, 69717,
   47908, 55348, 47412, -3081, -3081, -3081, -3081, 55348,   353, 55348,
    5154, -3081, -3081, -3081, -3081,   206, -3081, -3081, -3081, -3081,
   -3081, 65253, 55348, -3081, -3081,   206, 65253, 55348,   206, -3081,
    1463, 55348, 55348, 55348, 55348,  1493, 55348, 55348,  1000, -3081,
   -3081, -3081, 22051,    -5,    -5,  1787, 13177,   258, -3081, 20485,
   20485,   953,   250, 65253,  1759, -3081, -3081,   775,  1804,    70,
   -3081,  1629, 55348, 55348, 55348, 55348, 65253, 55348,  1588, -3081,
   -3081, -3081, -3081, -3081,  1584, -3081,  1585,  1946,  3075, -3081,
    1951, 50884,   785,  2101,  1955,  1632,  1958, 13699,  2072,  1962,
    2112,  1601,  1842, -3081, -3081,  1830, -3081, 65253,  2115, -3081,
     239, -3081, 47412, -3081,   257, -3081,  1831,   213, -3081, 15265,
   20485, -3081, -3081, -3081, -3081, -3081, -3081,  1255, 29344, -3081,
     779, -3081, -3081,  2079,  1000,  2079,   543, -3081, -3081,  2079,
   -3081,  2063,  2079, -3081, -3081, 70213, -3081,  7985, -3081, 20485,
   20485, -3081, 20485,  1952, -3081,  2114,  2114, 70213, 25183, 25183,
   25183, 25183, 25183, 25183,   331,  1316, 25183, 25183, 25183, 25183,
   25183, 25183, 25183, 25183, 25183, 26749,   536, -3081, -3081,   790,
    2083, 20485, 20485,  1964,  1952, 20485, -3081, 70213,  1617, -3081,
    1619,  1621, 20485, -3081, 70213, -3081, 55348,  1626,     0,    -9,
   -3081,  1630,  1635, -3081,  1562, -3081,   928,   996, 55348,  3782,
    4183,  5814, -3081, -3081, 20485,  1953,  3911, 31830, -3081, 20485,
    1639, -3081, -3081, 31830,  1974, -3081, -3081, -3081, 36295,  3911,
   70213,   808, -3081, 55348, 70213,   817, -3081, -3081, 20485, -3081,
   15265,  2141, 70213,  2109, 65253, 65253,  2148,  1645,  1649,  1994,
    1734, -3081,  1737,  1744,  1749, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, 70213, -3081, -3081, -3081, -3081,   143,
   -3081, -3081, -3081, -3081,  1651,  1660, 20485, 20485,   100, -3081,
    8129,  1659,  1663,  4298, -3081,  1665, -3081,  1667, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081,  1666, -3081,  1682, -3081,  1688,
    1704,  1708,  1693,  1695, 55348, -3081, 22573, -3081, 65253, -3081,
   -3081, 20485, 20485, 55348, -3081,  1687, -3081,  1696,  1697,  8177,
   -3081, -3081, -3081,   246,   390, 45347,   510,  2920,  2920,  2920,
    8420, -3081, -3081, -3081,  1709, -3081, 25183, 25183, -3081,  1790,
    4742, 10567, -3081, -3081,  2008, -3081,   718, -3081,  1700, -3081,
   -3081,  5670, -3081, 39769, 45394, 20485,   188, -3081, 20485,  1523,
   20485,  1752,  2920,  2920,  2920,   253,   253,   246,   246,   246,
     390,   510, -3081, -3081, -3081,  1705, 20485, 47412, -3081,  1706,
    1710,  2055,  1318, 20485, -3081, -3081, 31830,  1484,   -16,  1484,
    1994,  8348, -3081,  1023, -3081, -3081,  1023, 45052, 55348, -3081,
   -3081,  1969,  1713, 31830,  1761,  2183,  2172, 65253, -3081, -3081,
    1717,  1882,  1733, -3081, -3081,  1739, 20485,  2365,  1739, -3081,
    1839,     9,  1947,  1243,  1243,  1344,  1949, -3081, -3081,  1789,
   -3081, -3081, -3081, 20485, 14221,  1359, -3081,  1367, -3081, -3081,
   -3081, -3081, -3081,  1726, -3081,  2004, -3081, 55348, -3081, -3081,
   25183,  2191, 20485, 36791,  2192,  1989, -3081, -3081, -3081,  1832,
    1355, 20485,  1981, -3081,   140,  1747,  2111,   -22,  2061, 65253,
   -3081,   332,   445, -3081,   812,  2116,   213,  2117,   213, 47412,
   47412, 47412,   825, -3081, -3081, -3081,  1000, -3081,   276,   867,
   -3081, -3081, -3081, -3081,  1837,   692,  3075,  1355, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081,   170,   805,  1355,  1838, -3081,
    1843, -3081,  1846,   833,  1355, -3081, -3081,  1638,  8999, 45052,
     409,   258,   258,   258, 15265, -3081,  1988,  1996,  1760, 45052,
   45052,   149, -3081, -3081, -3081, -3081,  1765, -3081,   366, -3081,
   65253, -3081, -3081, -3081,  1759,  1807, 55348,  3075,  1767,  2239,
    1174,  1417,  1735, -3081,  1931,   756,  1266, -3081, 65253, 55348,
   55348, 55348, 64276, -3081, -3081, -3081,  1769,  1772, -3081,   -10,
    1995,  1998, 55348,  1809, 55348,  1357,  2252, 55348, -3081,   872,
   17875, 65253, -3081, 47412,  2142, 55348,  1766, -3081, -3081, -3081,
   -3081, 65253, -3081, -3081, 45052, -3081, -3081, 20485, 48404, -3081,
   -3081, -3081, -3081, -3081, -3081, 47412, -3081,  1000, -3081,  1000,
    2015, 65253, 42418,  1000, 42914,  1000,  1786, -3081, 45052,  8283,
   45052,  1964, -3081,   230,  2114,   529,   529,   529,  3658,  2133,
     244,  1793,   529,   529,   529,   402,   402,   230,   230,   230,
    2114,   536,   955, 49396,  1794, -3081, 45052, 45052, -3081, -3081,
    1795, -3081, -3081, -3081, -3081,  1798,  1810, -3081, -3081, -3081,
   -3081, -3081, -3081, 65253,  1244,  1484,   -57,   -57,   -57,   -57,
   -3081, 55348, 55348, 55348, 45052,  2261,  2135, -3081,  3911, 45052,
   55348, -3081, 27793, 55348, -3081,  2161, -3081,  2255, -3081, 55348,
     878, -3081, -3081, -3081,   879,  1826,  1649, 70213,   885,   909,
   -3081,  1994,   148,  1824,  1467,  1087,   866,  1360, -3081, 52372,
   -3081, -3081,  1833, 44712, 20485, -3081,  2199, -3081, -3081, -3081,
   20485, 20485, -3081, 39769, -3081, -3081, -3081, -3081,   382,   382,
    1836, 10567, 44962, -3081,  2144, 40273, 45052, -3081,  1662, -3081,
   -3081,  8348, 20485,  2238,  3038, 20485,  1840, 20485,  2175, -3081,
   -3081,  1844, -3081, -3081, 70213, 20485,  1845,  5948, 25183, 25183,
    6341, -3081,  6417, 20485, 10567, -3081, 41306,  1835,  1848,  1787,
   18397, -3081,  2052,  1847, -3081,  1953,   258,  1953,  1849, -3081,
   -3081, -3081, -3081,  1715, -3081, 20485,  2005, 65253,   513,  1625,
     925, -3081,   699, 38279,  1761, 20485,   605, -3081, -3081,  1852,
   -3081,  1739, -3081, -3081, -3081,  2064, -3081, -3081, -3081, 55348,
   -3081,  1853, -3081, 35799,  2173, 11089, -3081, 35799, 55348, 55348,
   40312,  2205, -3081, 65253, 65253, 65253, -3081, 65253,  1851,  1855,
     820,  1867,   355, -3081,  2521,   820,  2198,   234,  1357,   151,
    4732,   397, -3081, -3081, -3081,  1935, 55348, -3081, 65253, -3081,
   -3081, -3081, -3081, -3081, 47908, -3081, -3081, 39272, 47412, -3081,
   47412, 55348, 55348, 55348, 55348, 55348, 55348, 55348, 55348, 55348,
   55348,  1255, 20485, -3081, 20485,  1875,  1876,  1877,  1787, -3081,
   -3081, -3081,   198, -3081,  1866, -3081, -3081, -3081,   313, -3081,
     366,  1872, -3081, 50884,  2900,  1632,  2354,  1884,  1807,   603,
   64757, -3081,  1881,  1879,   950,  3075,  1888,  2364, -3081,   785,
   50884, -3081, -3081, -3081,  2319, -3081,   709,   218, -3081,  1174,
   -3081,  2900,  1417, -3081,  2900, 45052,  1735,   954, 65253,  1957,
   -3081,   213,   959, -3081, -3081, -3081, -3081, -3081, 65253,  1887,
   -3081,  1887, -3081, -3081,  1887, -3081, -3081, -3081, -3081, 25183,
    2241,  1899, 70213, -3081, -3081, 55348, -3081, -3081, -3081,   965,
    1903,  1953, 55348, 55348, 55348, 55348, -3081, -3081, -3081, 18919,
   20485,  1939, -3081,  1904, 12133,  2222, -3081, 27271, -3081, -3081,
    1906, 36295, 65253, -3081, -3081, -3081, -3081,  1994, -3081, -3081,
   65253, -3081,  1909, -3081,  1910, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, 20485, 45052, -3081, 45052, -3081, -3081,
   -3081, -3081, -3081,  7544, -3081,  1907,  1911, 65253, 20485, -3081,
   -3081, -3081,   687, 20485, 20485,  1790, -3081, 45434, 20485, 70213,
     972,  1790,   356, 20485,  3284,  3507, 20485, 20485,  7184, 40351,
   -3081, 23095, 14743, -3081,  1913, 20485, 40398, 38775, -3081, 31830,
    2135,  1915,  2135,  1000,  1916, 45052, 20485, -3081, -3081, -3081,
   -3081,  1972,   -19, 33318,  2147, -3081,  1937, 65253, -3081,  2005,
   45052, -3081, -3081, 39769, -3081, -3081, -3081, -3081, -3081,  2375,
    1859,  1923,  1926, -3081,  1285, -3081, -3081, 65253,  1928, -3081,
    1929,   820, -3081, 65253,  1970, -3081,   515,  2244,    59, -3081,
   20485, -3081,  2334,  2412,  2521,  1938, 65253, 55348, 25183, -3081,
     583,   256, -3081,  2227, 55348,  1970,  2367, -3081, -3081, -3081,
     355, -3081,  2265,  2181, -3081,   206, -3081, 20485,   355,  2182,
     240, 65253, -3081, -3081,  2897, -3081, 70213,   213,   213, -3081,
    1465,  1954,  1959,  1965,  1966,  1968,  1971,  1973,  1977,  1979,
    1980, -3081,  1982,  1984,  1985,  1986,  1987,  1992,  1997,  2003,
    1473,  2007, -3081,  2009,  1852,  2020,  2022,  2024,  2026,  2027,
   71175,  2029,  2030,  2032,  2033,  1478,  2035,  1189,  1242, -3081,
   -3081, -3081, -3081,  2038, -3081, -3081, -3081,  1211,  1960, -3081,
   -3081, -3081,  2034, -3081,  2037, -3081, -3081, -3081, -3081, -3081,
   -3081,  1961,  1991, -3081, -3081, -3081,   258,  1963,  1990, 65253,
    1255,   108, 65253,  1999,  1809,  2429, 19441, 47412,   844,  2195,
    2006, -3081,  1000,  1632, -3081, 50884,  2176,   671,  1998, -3081,
     200,  1809, -3081,  2380,  1632,  2036,  2432, -3081,  2010, -3081,
    2229, 65253,  2042, -3081, -3081, 48404,  1887,  3922, 25183, 70213,
     977,   984, -3081,  2513,  2190,  2135, -3081, -3081, -3081, -3081,
   -3081,  2044,    66,  2048, 10045,  2050, -3081, -3081, -3081, -3081,
   -3081, -3081, 45052, 45052, 65253,  2231, -3081, -3081,  2060,  2054,
   37287,  2531,  2075, -3081, -3081,  2393, -3081, 30340, -3081,  1649,
    2080,  1649, 70213,  1649, -3081, -3081, 45052, 20485, -3081, -3081,
   41389,  2404,  1790,  1790, 45434,   998, -3081,  1790, 20485, 20485,
    1790,  1790, 20485, -3081,  9522,   411, -3081,  1002, -3081, 40437,
   -3081, 71656, -3081, -3081,  1939,  1000,  1939, -3081, -3081,  2078,
   -3081, -3081, -3081,  2138, -3081, -3081,  1021,  2508,  2005, 20485,
   -3081, -3081,  2084, 35799, -3081, -3081, -3081, -3081, 35799,   820,
   -3081,  2258,  1970,  2089, -3081, -3081, -3081, -3081, -3081, -3081,
   40788, -3081,    52, 20485, -3081,   109,  3658, -3081, -3081, -3081,
   -3081,  1970,  1174, -3081, 55348,  2565,  2454, -3081, -3081, 45052,
   -3081, -3081,  1994,  1994, -3081, -3081,  2255, -3081, -3081,  2091,
   -3081, -3081,  1211,   323, 39272, 55348, 55348, -3081, -3081,  2093,
   -3081, -3081, -3081, -3081, -3081,   313,  2488,  1026,   785, -3081,
    2900,  2900, 45052,  1028, 55348,  2463, 50884, -3081,  2578,  2103,
   55348,  1809,   293,   293, -3081,  2253, -3081,  2262, -3081, -3081,
    2582,   341, -3081, 19963, 47412, 55348, -3081, -3081, 32822, -3081,
    3922,  1036, -3081, -3081,  2118,  2120, -3081,  1939, 20485,  2121,
   20485, -3081, 23617,  2590,  2113, -3081, 20485,  2184, 28315, -3081,
   20485, -3081, 55348, 60308,  2126, 60308, -3081, -3081, -3081, -3081,
   -3081, 20485, -3081,  1790,  1790,  1790, 20485, -3081, 20485, -3081,
   -3081, -3081,  2321,  2231, -3081,  2231, 20485,  2900,   699,  3137,
   65253,     4, -3081, 45052, -3081, -3081, -3081, 55348, -3081, 47412,
   -3081,   820,    -4,  2127, 20485, 40874,  2363, -3081, -3081,  2395,
   -3081,  2455, -3081,  2196,   611,  2207, -3081, -3081, -3081, -3081,
    1255,  1000,  1632,  1998,  2036, -3081, -3081,  2130, 55348,  2900,
     785,   709, -3081, -3081, -3081, -3081, -3081, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081, -3081,  2900,  2580,  2359,  2581,  2900,
   45052,  1045,  1957, 20485,    94, -3081,  1052,  2576, -3081, -3081,
    2649,  2231,  2143, 23617,  2145, -3081,  2149, 65253, 45052,  2291,
   -3081, -3081,  2146, -3081, -3081, 20485, -3081, 41429,  2151,  2159,
    2619,  1787,  2184,  2184, -3081,   -19, -3081, -3081,  2586, 32822,
    2547,  1174,   820,  2177,  1061, -3081, -3081, -3081, -3081, -3081,
    3075, -3081, 40913,  2411,   172,  2397,  2127, 20485, -3081,  2245,
   -3081, -3081, -3081,  2650, -3081, -3081, 50884,  2174,  2036,  1998,
    1809,  2036,  2400, -3081,  2403, -3081, -3081,  2185, 40952, 65253,
   65253,  1632, 32822, 65253,  2188,  2184, -3081,  2193, -3081, -3081,
   -3081, 54356, -3081,  2194, -3081, -3081, -3081, 20485,   164, -3081,
   -3081,  2228, 55348,  1075,    43,  2395, 39272, -3081, 47412,   122,
      -4,  2492, -3081, -3081, -3081, -3081,   153,  2408, -3081,  2417,
   -3081, 45052, -3081,  2900, 50884, -3081, -3081, -3081, -3081, -3081,
   -3081, 32822,  2576, -3081,   321, -3081,  1484, -3081,   321, -3081,
   -3081, -3081, -3081, -3081,  1431, 24139, 24139, 24139,  2200,  2900,
   -3081,  1484, -3081,  2314,  2397, -3081, -3081, -3081, -3081, -3081,
     254,   254,  2589, -3081,  2256, -3081,  2036,  1080, 65253,  1739,
   -3081,  1739, 25705,  2348,   168, 43981,  2567, -3081,  2567,  2567,
   -3081, -3081, -3081, 38279, -3081, -3081,  2692, -3081,   324, -3081,
   -3081, -3081,  1632,   321, -3081, -3081,  2682, -3081, -3081, -3081,
   -3081, -3081,   117, -3081, -3081, -3081,  1484,   820, -3081, -3081,
   -3081,  1484,  1739, 24661,  2353, -3081,  2422, -3081, -3081, -3081,
   -3081, -3081, -3081, -3081
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     156,   265,     0,  1388,  1387,  1460,   265,     0,  1322,     0,
     265,   488,   403,     0,  1481,  1480,     0,   208,   265,     0,
     156,     0,     0,     0,     0,     0,     0,   551,   554,   552,
       0,     0,     0,   265,   591,     0,  1482,   265,     0,     0,
     583,   553,     0,  1438,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    23,    10,    11,    12,
      13,    19,    14,    15,    16,    17,    18,    20,    21,    22,
      25,    24,    26,    27,  1345,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,   527,   513,   596,   526,     0,
       0,   155,   695,   534,    37,    39,    38,    40,    41,    42,
      43,    44,  1483,  1479,    45,   264,   263,   257,     0,     0,
       0,     0,     0,  1459,     0,     0,   258,   112,  1507,  1508,
    1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,  1882,
    1518,  1519,  1520,  1521,  1522,  1883,  1523,  1524,  1525,  1828,
    1829,  1884,  1830,  1831,  1526,  1527,  1528,  1529,  1530,  1531,
    1532,  1533,  1534,  1535,  1832,  1833,  1536,  1537,  1538,  1539,
    1540,  1834,  1885,  1835,  1541,  1542,  1543,  1544,  1545,  1886,
    1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1554,  1887,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,
    1836,  1565,  1566,  1837,  1567,  1568,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
    1593,  1838,  1594,  1595,  1596,  1597,  1598,  1599,  1839,  1600,
    1601,  1602,  1840,  1603,  1604,  1605,  1888,  1889,  1606,  1607,
    1841,  1891,  1608,  1609,  1842,  1843,  1610,  1611,  1612,  1613,
    1614,  1615,  1616,  1617,  1618,  1892,  1619,  1620,  1621,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1893,  1844,
    1631,  1632,  1633,  1634,  1635,  1845,  1846,  1847,  1636,  1894,
    1895,  1637,  1896,  1638,  1639,  1640,  1641,  1642,  1643,  1644,
    1897,  1645,  1898,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1848,  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,
    1672,  1673,  1849,  1900,  1850,  1674,  1675,  1676,  1851,  1677,
    1678,  1901,  1679,  1852,  1680,  1853,  1681,  1682,  1683,  1684,
    1685,  1686,  1687,  1688,  1689,  1690,  1854,  1902,  1691,  1903,
    1855,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1856,  1904,  1705,  1706,  1857,  1707,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
    1718,  1858,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,
    1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,
    1737,  1905,  1738,  1739,  1740,  1859,  1741,  1742,  1743,  1744,
    1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,  1759,  1860,  1760,  1761,  1906,  1762,
    1763,  1861,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1774,  1775,  1776,  1862,  1777,  1863,  1778,  1779,
    1780,  1908,  1781,  1782,  1783,  1784,  1785,  1786,  1864,  1865,
    1787,  1788,  1866,  1789,  1867,  1790,  1791,  1868,  1792,  1793,
    1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,
    1804,  1805,  1806,  1807,  1808,  1869,  1870,  1809,  1909,  1810,
    1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,  1820,
    1821,  1822,  1823,  1871,  1872,  1873,  1874,  1875,  1876,  1877,
    1878,  1879,  1880,  1881,  1824,  1825,  1826,  1827,     0,   113,
     114,  1269,  1490,     0,  1247,   112,  1841,  1848,  1862,  1320,
    1321,   113,     0,   260,   487,     0,     0,     0,     0,     0,
       0,   210,     0,   397,   396,     0,  1311,   402,     0,     0,
       0,   116,   108,  1707,   115,  1246,   106,   122,  2052,  2053,
    2054,  2055,  1939,  2056,  2057,  2058,  2059,  1940,  2060,  1941,
    1942,  1943,  1944,  1945,  1946,  2061,  2062,  2063,  1948,  1947,
    2064,  1949,  2065,  1950,  2066,  1951,  1952,  2067,  2068,  1953,
    1561,  1954,  1955,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  1956,  1957,  2078,  2079,  1958,  2080,  2081,  1959,
    2082,  1960,  1961,  1962,  2083,  2084,  1963,  1964,  2085,  1965,
    2086,  2087,  1966,  1967,  1970,  1968,  2088,  1969,  2089,  1971,
    1972,  1973,  2090,  2091,  1974,  1975,  2092,  1976,  1977,  1978,
    1979,  1980,  2093,  1981,  2094,  1982,  1983,  2095,  2096,  2097,
    2098,  2099,  1985,  1984,  1986,  1987,  2100,  2101,  2102,  2103,
    1988,  1989,  1990,  2104,  2105,  1991,  2106,  2107,  1992,  1993,
    2108,  1994,  1995,  2109,  1996,  1997,  2110,  1998,  1999,  2111,
    2112,  2113,  2000,  2114,  2001,  2002,  2115,  2116,  2003,  2004,
    2117,  2005,  2118,  2119,  2120,  2121,  2006,  2007,  2122,  2008,
    2123,  2124,  2125,  2126,  2009,  2010,  2011,  2012,  2013,  2014,
    2015,  2016,  2017,  2018,  2019,  1456,   124,   123,   125,     0,
     421,   422,     0,   432,     0,   414,   419,   415,     0,   441,
     434,   442,   423,   413,   435,   424,   412,   209,     0,   443,
     429,   417,     0,     0,     0,     0,   261,   222,   403,     0,
     156,     0,  1349,  1350,  1351,  1352,  1353,  1354,  1359,  1355,
    1356,  1357,  1358,  1360,  1361,  1362,  1363,  1364,  1340,  1345,
    1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,  1374,
    1375,  1376,  1377,  1378,  1379,     0,  1322,     0,     0,  1834,
    1885,  1839,     0,  1852,     0,  1855,  1856,  1741,  1863,  1866,
    1867,  1868,  1869,     0,   765,   115,   110,   749,     0,   529,
     699,   709,   749,   754,  1033,   777,  1034,     0,   117,  1420,
    1419,  1421,  1416,   195,  1284,  1468,  1608,  1648,  1758,  1864,
    1787,  1486,  1469,  1463,  1467,   262,   590,   588,     0,  1218,
    1608,  1648,  1745,  1758,  1864,  1396,  1400,     0,   259,  1488,
    1473,     0,  1474,   115,   535,   582,     0,   266,  1437,     0,
    1442,     0,  1721,   562,   565,  1278,   563,   527,     0,     0,
       1,   156,  1344,  1452,     0,   162,     0,   586,   586,     0,
     586,     0,   519,     0,     0,   527,   522,   526,   696,  1485,
    1864,  1787,  1472,  1475,  1617,     0,     0,  1617,     0,  1617,
       0,  1617,     0,     0,  1462,  1202,     0,  1248,   118,     0,
       0,  1333,  1329,  1334,  1330,  1335,  1328,  1327,  1336,  1332,
       0,     0,     0,   368,   401,   400,   399,   398,   403,  1617,
    1295,     0,   450,   451,     0,     0,     0,     0,     0,   206,
    1306,   109,   107,  1617,  1457,   430,   431,     0,   420,   416,
     418,     0,     0,  1617,  1273,   440,   436,  1617,   440,  1240,
    1617,     0,     0,   214,     0,   396,  1342,  1380,  2006,  1381,
    1382,  1394,     0,  1395,  1385,  1348,   156,     0,   486,  1319,
    1421,     0,     0,     0,  1154,   749,   754,     0,     0,   767,
       0,  1173,     0,  1179,     0,     0,     0,   749,   534,     0,
     709,   766,   111,     0,   747,   748,   637,   637,   591,     0,
     572,   759,     0,     0,   762,   760,     0,   762,     0,     0,
       0,   762,   758,   717,     0,   637,     0,   747,   750,   637,
       0,   769,  1339,     0,  1424,     0,     0,     0,     0,  1466,
    1464,  1465,  1470,     0,     0,     0,  1250,  1252,  1253,  1122,
    1263,  1012,     0,  1829,  1830,  1831,  1194,  1832,  1833,  1835,
    1836,  1837,   971,  1581,  1838,  1261,  1840,  1842,  1843,  1845,
    1846,  1847,  1848,  1849,  1850,     0,  1262,  1853,  1686,  1858,
    1859,  1861,  1864,  1865,  1260,  1870,     0,     0,     0,  1229,
    1145,     0,  1011,     0,     0,     0,  1195,  1203,  1004,     0,
       0,   813,   814,   835,   836,   815,   841,   842,   844,   816,
       0,  1225,   905,  1000,  1213,  1009,  1017,  1013,  1052,  1015,
    1032,  1018,  1089,  1010,     0,  1016,  1002,  1221,   572,  1219,
       0,  1003,  1249,   572,  1217,  1399,  1397,  1403,  1398,     0,
       0,     0,     0,     0,   111,  1444,  1445,  1436,  1434,  1435,
    1433,  1432,  1439,     0,  1441,  1345,  1140,  1142,     0,   564,
       0,     0,     0,   516,   515,   517,     3,  1278,     0,     0,
       0,  1598,     0,   584,   585,     0,     0,     0,     0,     0,
       0,     0,     0,   680,   611,   612,   614,   677,   681,   689,
       0,     0,     0,     0,     0,   523,     0,  1484,  1478,  1476,
       0,     0,     0,   140,   140,     0,     0,     0,     0,     0,
     100,    49,    93,     0,     0,     0,     0,   236,   249,     0,
       0,     0,     0,     0,   246,     0,     0,   229,   223,   225,
      51,     0,   140,     0,    47,     0,     0,     0,    53,  1460,
       0,   486,  1201,     0,   120,   121,   119,   112,     0,  2020,
    1882,  1883,  1884,  1885,  1835,  1886,  1887,     0,  1888,  1889,
    1841,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1848,
    1900,  1901,  1902,  1903,  1904,  1905,  2046,  1906,  1862,  1908,
    1868,     0,  1909,  1025,   113,  1266,  1148,   596,  1146,  1279,
       0,     0,  1331,     0,     0,     0,     0,   484,     0,     0,
       0,     0,  1291,     0,     0,  1617,   202,  1617,   368,     0,
    1617,   368,  1617,     0,  1617,   207,   211,  1305,  1308,     0,
     433,   428,   426,   425,   427,  1617,   255,     0,     0,  1274,
     438,   439,     0,   407,     0,     0,   409,     0,     0,   219,
       0,   217,     0,   403,   156,     0,   230,  1390,  1391,  1389,
       0,     0,  1347,   233,  1384,  1393,  1383,  1392,  1346,   250,
    1341,     0,     0,  1337,   473,  1424,     0,     0,     0,  1155,
     882,   881,   865,   866,   879,   880,   867,   868,   875,   876,
     884,   883,   873,   874,   869,   870,   863,   864,   871,   872,
     877,   878,   861,   862,  1168,  1156,  1157,  1158,  1159,  1160,
    1161,  1162,  1163,  1164,  1165,  1166,  1167,     0,     0,   708,
     706,     0,     0,     0,     0,     0,     0,  1195,     0,   975,
    1010,     0,     0,     0,  1140,  1178,     0,     0,     0,     0,
       0,     0,  1140,  1184,     0,     0,   733,   745,     0,   630,
     636,   707,   705,     0,  1218,   700,     0,   779,   759,     0,
     758,     0,     0,   761,   755,     0,   756,     0,     0,     0,
       0,   757,     0,     0,     0,     0,   703,     0,   745,     0,
     704,   776,  1423,  1422,     0,  1417,  1406,  1414,   196,     0,
    1270,  1910,  1911,  1912,   823,  1913,   852,   830,   852,   852,
    1914,  1915,  1916,  1917,   819,   819,   832,  1918,  1919,  1920,
    1921,  1922,   820,   821,   857,  1923,  1924,  1925,  1926,  1927,
       0,     0,  1928,   852,  1929,   819,  1930,  1931,  1932,   824,
    1933,   787,  1934,     0,  1935,   822,   788,  1936,   860,   860,
    1937,     0,   847,  1938,  1271,  1272,     0,  1151,   797,   805,
     806,   807,   808,   833,   834,   809,   839,   840,   810,   904,
       0,   819,   156,  1471,  1487,     0,  1145,  1019,   851,   838,
    1193,     0,   846,   845,     0,  1145,   828,   827,   826,  1006,
       0,   825,  1102,   852,   852,   850,   930,   829,     0,     0,
       0,     0,     0,   856,     0,   854,   931,   909,   910,     0,
    1228,  1237,  1140,  1144,     0,  1004,  1140,     0,     0,  1092,
    1094,     0,  1021,  1022,     0,  1196,  1251,  1005,     0,  1256,
       0,     0,   904,   904,  1224,  1122,     0,  1112,  1115,     0,
       0,  1119,  1120,  1121,     0,     0,     0,  1216,     0,  1130,
    1132,     0,     0,   946,  1128,     0,   949,     0,     0,     0,
       0,  1116,  1117,  1118,  1108,  1109,  1110,  1111,  1113,  1114,
    1126,  1107,   927,     0,  1001,     0,  1055,     0,   926,  1222,
     698,     0,  1254,   698,  1408,  1412,  1413,  1411,  1407,     0,
    1402,  1401,  1404,  1405,  1489,     0,  1446,  1430,     0,  1427,
    1143,   693,   566,  1242,     0,   570,  1453,  1451,   161,   160,
       0,   213,     0,   539,   538,   605,   597,   599,   605,     0,
     537,     0,   653,   654,     0,     0,     0,     0,   686,   684,
    1250,  1263,   641,   615,   640,     0,     0,   619,     0,   645,
     905,   679,   521,   609,   610,   613,   520,     0,   682,     0,
     692,     0,   558,   560,   543,   557,   555,   540,   548,   680,
     614,     0,  1477,     0,     0,     0,     0,     0,  1617,     0,
       0,   790,    84,    65,   320,   139,     0,     0,     0,     0,
       0,     0,     0,    92,    89,    90,    91,     0,     0,     0,
       0,  1270,   234,   235,   248,     0,   239,   240,   237,   241,
     242,     0,     0,   227,   228,     0,     0,     0,     0,   226,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1461,
    1454,  1197,  1202,   596,   596,   596,     0,   594,   595,     0,
       0,     0,     0,     0,   472,   366,   376,     0,     0,     0,
    1295,     0,     0,     0,     0,     0,   206,     0,   403,  1296,
    1294,  1298,  1297,  1299,  1587,   190,     0,     0,   201,   198,
       0,   365,   339,     0,     0,  1310,     0,     0,     0,     0,
       0,     0,  1617,   355,  1307,     0,  1458,     0,     0,   253,
     440,  1275,     0,   437,   440,  1241,     0,   440,   221,     0,
       0,  1343,  1386,   231,   251,   232,   252,   486,   481,   511,
       0,   489,   494,   470,     0,   470,     0,   491,   495,   470,
     490,     0,   470,   485,  1418,     0,  1048,     0,  1038,     0,
       0,   768,     0,     0,  1039,   977,   978,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   995,   994,  1040,   772,     0,
     775,     0,     0,  1176,  1177,     0,  1041,     0,     0,  1183,
       0,     0,     0,  1046,     0,   710,     0,     0,     0,   625,
     629,   632,     0,   635,   572,   528,  1608,  1648,     0,   583,
     583,   583,   581,   571,     0,   657,     0,     0,   734,     0,
       0,   736,   738,     0,     0,   741,   716,   715,     0,     0,
       0,     0,   780,     0,  1246,     0,  1426,  1425,     0,   197,
       0,     0,     0,   805,     0,     0,     0,   795,   791,     0,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   811,  1283,     0,   817,  1288,  1289,  1286,     0,
    1282,  1285,  1287,  1290,     0,     0,     0,     0,  1192,  1188,
       0,     0,     0,     0,  1097,  1099,  1101,     0,   849,   848,
    1106,  1112,  1115,  1119,  1120,  1121,  1116,  1117,  1118,  1108,
    1109,  1110,  1111,  1113,  1114,     0,  1134,     0,  1088,     0,
       0,     0,     0,     0,     0,  1227,     0,   973,     0,  1023,
    1008,     0,     0,  1095,  1024,  1229,  1204,     0,     0,     0,
    1259,  1258,   906,   915,   918,   950,   951,   922,   923,   924,
     928,  1281,  1280,  1223,     0,  1215,     0,     0,   907,   932,
     937,     0,  1185,   967,     0,   955,     0,   945,     0,   953,
     957,   933,   948,     0,   929,     0,  1216,  1131,  1133,     0,
    1129,     0,   919,   920,   921,   911,   912,   913,   914,   916,
     917,   925,  1105,  1103,  1104,     0,  1202,     0,  1214,     0,
       0,  1057,     0,     0,   952,  1220,     0,   779,   596,   779,
       0,   904,  1447,  1278,  1440,  1429,  1278,  1141,  1243,  1277,
     568,     0,     0,     0,  1449,   147,   151,     0,  1203,   181,
     183,   698,     0,   603,   604,   608,     0,     0,   608,   587,
     536,  1859,  1741,     0,     0,     0,     0,   646,   687,     0,
     678,   643,   644,     0,   642,  1250,   647,  1249,   648,   651,
     652,   620,  1238,   688,   690,     0,   683,     0,  1244,   542,
     561,     0,     0,     0,     0,     0,   525,   524,   694,     0,
      50,     0,  1617,    67,     0,     0,     0,     0,     0,     0,
     270,     0,   370,   270,   105,  1617,   440,  1617,   440,  1511,
    1582,  1759,     0,    63,   344,    96,     0,   133,   373,     0,
     329,    86,   101,   126,     0,     0,   224,    52,   238,   243,
     129,   247,   244,  1315,   245,   140,     0,    48,     0,   127,
       0,  1313,     0,     0,    54,   131,  1317,  1462,     0,  1201,
       0,   594,   594,   594,     0,  1147,     0,     0,     0,  1149,
    1150,   945,  1324,  1325,  1326,  1323,   458,   471,     0,   367,
       0,   483,   461,   462,   472,  1293,     0,   202,   368,     0,
     368,     0,   211,  1295,     0,     0,   192,   188,     0,     0,
       0,     0,   366,   358,   356,   389,     0,   363,   357,     0,
       0,   315,     0,  1505,     0,     0,     0,     0,   452,     0,
       0,   206,   212,     0,     0,     0,   255,   256,   406,  1276,
     408,     0,   410,   220,   218,  1338,   478,  1145,     0,   476,
     482,   475,   477,   480,   474,     0,   469,     0,   504,     0,
       0,     0,     0,     0,     0,     0,     0,  1035,  1153,     0,
    1171,  1170,   976,   983,   986,   990,   991,   992,  1172,     0,
       0,     0,   987,   988,   989,   979,   980,   981,   982,   984,
     985,   993,   777,     0,     0,   771,  1181,  1180,  1174,  1175,
       0,  1043,  1044,  1045,  1182,     0,     0,   746,   623,   621,
     624,   626,   622,     0,     0,   779,   583,   583,   583,   583,
     580,     0,     0,     0,   778,     0,   674,   740,     0,   764,
       0,   737,   720,     0,   728,     0,   735,   784,   751,     0,
       0,   753,  1415,   801,     0,   796,   792,     0,     0,     0,
     802,     0,     0,     0,     0,     0,     0,     0,  1152,     0,
     589,  1020,     0,     0,     0,  1189,     0,   972,   818,   831,
       0,  1100,  1014,     0,  1123,  1087,   859,   858,   860,   860,
       0,     0,     0,  1236,     0,  1141,  1091,  1093,  1237,  1007,
     843,   904,     0,     0,     0,     0,     0,     0,     0,   956,
     947,     0,   954,   958,     0,     0,     0,   941,     0,     0,
     939,   968,   935,     0,     0,   969,  1201,     0,  1205,     0,
       0,  1056,  1065,   701,   697,   657,   594,   657,     0,  1409,
    1431,  1428,   569,   156,  1450,     0,   170,     0,     0,     0,
       0,   173,   187,   184,  1449,     0,     0,   598,   600,     0,
    1124,   608,   602,   650,   649,     0,   618,   685,   616,     0,
     691,     0,   559,     0,   545,     0,   719,     0,     0,     0,
       0,     0,   319,     0,     0,     0,   270,     0,   378,     0,
     385,     0,     0,   370,   351,    85,     0,     0,     0,    59,
     104,    77,    69,    55,    83,     0,     0,    88,     0,    81,
      98,    99,    97,   102,     0,   280,   305,     0,     0,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   486,  1202,  1198,  1202,     0,     0,     0,   596,   592,
     593,  1026,     0,   457,   510,   507,   508,   506,   229,   377,
       0,     0,   200,   365,     0,  1310,     0,     0,  1292,   403,
       0,   193,     0,   191,     0,   202,   368,     0,   343,   339,
     364,   337,   336,   338,     0,  1506,   222,     0,  1500,   368,
    1309,     0,     0,   453,     0,   447,   211,     0,     0,  1304,
     254,   440,     0,   465,   505,   512,   492,   497,     0,   503,
     499,   498,   493,   501,   500,   496,  1036,  1047,  1169,     0,
       0,     0,     0,   770,   773,     0,  1042,  1037,   744,     0,
       0,   657,     0,     0,     0,     0,   574,   573,   579,     0,
       0,  1059,   739,     0,     0,     0,   726,   714,   721,   722,
       0,     0,     0,   782,   781,   752,   805,     0,   785,   805,
       0,   805,     0,   803,     0,   812,   897,   898,   899,   900,
     901,   902,   903,   837,     0,  1191,  1187,  1096,  1098,  1135,
     855,   853,  1226,  1140,  1231,  1233,     0,     0,     0,  1090,
     974,  1257,   908,     0,     0,   938,  1186,   959,     0,     0,
       0,   934,  1123,     0,     0,     0,     0,     0,   943,     0,
    1209,  1202,     0,  1208,     0,     0,     0,     0,  1031,   702,
     674,     0,   674,     0,     0,  1448,     0,  1443,   148,   149,
     150,     0,     0,     0,   165,   142,     0,     0,   182,   170,
     158,   606,   607,     0,   601,   617,  1239,  1245,   544,     0,
    1004,     0,     0,   541,     0,   134,   270,     0,     0,    66,
       0,   387,   331,   379,   362,   346,     0,     0,     0,   271,
       0,   404,     0,     0,   352,     0,     0,     0,     0,   332,
       0,     0,   291,     0,     0,   362,     0,   369,   287,   288,
       0,    58,    78,     0,    74,     0,   103,     0,     0,     0,
       0,     0,    61,    73,     0,    56,     0,   440,   440,    64,
    1270,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1919,  2030,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,
    2039,  1928,   277,  1929,  1686,  1930,  1931,  1932,  1933,  1934,
       0,  1935,   788,  1936,  1937,  2118,  1938,  1108,  1109,   275,
     276,   372,   272,  1271,   273,   380,   274,     0,   375,   330,
     130,  1316,     0,   128,     0,  1314,   137,   135,   132,  1318,
    1455,     0,     0,  1029,  1030,  1027,   594,     0,     0,     0,
     486,   464,     0,     0,  1505,     0,     0,     0,     0,  1617,
       0,   189,     0,  1310,   199,   365,     0,   395,   315,   390,
       0,  1505,  1503,     0,  1310,  1499,     0,   444,     0,   203,
       0,     0,     0,   411,   479,     0,   502,   996,     0,     0,
       0,     0,   633,     0,   639,   674,   578,   577,   576,   575,
     656,  1556,  1842,  1740,     0,   660,   655,   658,   663,   665,
     664,   666,   662,   673,     0,   676,   763,  1136,  1138,     0,
       0,     0,     0,   727,   729,     0,   731,     0,   783,   799,
       0,   800,     0,   798,   793,   804,  1190,  1234,  1235,  1230,
       0,   905,   965,   963,   960,     0,   961,   942,     0,     0,
     940,   936,     0,   970,     0,     0,  1206,     0,  1051,     0,
    1054,  1068,  1064,  1063,  1059,  1026,  1059,  1410,   567,   169,
     146,   172,   171,     0,  1203,   179,     0,     0,   170,     0,
     174,   454,     0,     0,   556,   718,   549,   550,     0,   383,
      68,     0,   362,     0,   270,   348,   347,   350,   345,   349,
       0,   405,     0,     0,   289,     0,   296,   334,   335,   333,
     290,   362,   368,   292,     0,     0,     0,    70,    60,    57,
      62,    71,     0,     0,    72,    75,   784,    87,    80,  1270,
    2039,  2048,     0,     0,     0,     0,     0,  1200,  1199,     0,
     460,   459,   509,   456,   467,   229,     0,     0,   339,  1502,
       0,     0,   449,     0,     0,     0,   365,   194,     0,     0,
       0,  1505,     0,     0,   267,     0,   312,     0,   215,  1504,
       0,     0,  1491,     0,     0,     0,  1302,  1303,     0,   466,
     997,     0,   998,   774,     0,     0,   631,  1059,     0,     0,
       0,   667,   661,     0,  1058,  1060,     0,   628,  1139,   723,
       0,   725,     0,   749,     0,   749,   732,   794,   786,  1232,
    1049,     0,   962,   966,   964,   944,  1202,  1210,  1202,  1207,
    1053,  1067,  1070,   676,  1255,   676,     0,     0,   157,     0,
       0,   154,   141,   159,  1125,   546,   547,     0,   270,     0,
     361,   384,   301,   279,     0,     0,     0,   286,   293,   394,
     295,     0,    79,    95,     0,     0,   374,   138,   136,  1028,
     486,     0,  1310,   315,  1499,   446,   205,     0,     0,     0,
     339,   222,  1501,   328,   321,   322,   323,   324,   325,   326,
     327,   342,   341,   313,   314,     0,     0,     0,     0,     0,
     448,     0,  1304,     0,   176,   185,     0,   176,   999,   634,
       0,   676,     0,     0,     0,   659,     0,     0,   675,     0,
     532,  1137,     0,   713,   711,     0,   712,     0,     0,     0,
       0,   596,   628,   628,   143,     0,   144,   180,     0,     0,
       0,   368,   386,   360,     0,   353,   299,   298,   300,   304,
       0,   302,     0,   318,     0,   311,   279,     0,    82,     0,
     381,   455,   463,     0,   269,  1493,   365,     0,  1499,   315,
    1505,  1499,     0,  1496,     0,   445,   204,     0,     0,     0,
     178,  1310,     0,   178,     0,   628,   669,     0,   668,  1062,
    1061,   630,   724,     0,  1050,  1212,  1211,     0,  1074,   531,
     530,     0,     0,     0,     0,   394,     0,   340,     0,     0,
     301,     0,   294,   391,   392,   393,     0,   307,   297,   308,
      76,    94,   382,     0,   365,  1494,   268,   216,  1492,  1497,
    1498,     0,   176,   175,   605,   177,   779,   186,   605,   638,
     533,   670,   627,   730,  1069,     0,     0,     0,     0,     0,
     153,   779,   164,     0,   311,   359,   354,   278,   303,   317,
       0,     0,     0,   309,     0,   310,  1499,     0,   178,   608,
    1300,   608,  1828,  1557,  1794,     0,  1086,  1075,  1086,  1086,
    1066,   145,   152,     0,   270,   283,     0,   282,     0,   371,
     306,  1495,  1310,   605,   166,   167,     0,  1079,  1078,  1077,
    1081,  1080,     0,  1073,  1071,  1072,   779,   388,   281,   285,
     284,   779,   608,     0,     0,  1083,     0,  1084,   163,  1301,
     168,  1076,  1082,  1085
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3081, -3081, -3081,  1850,    77,    79,  -895, -1193,  -933, -1190,
   -3081,  -166,    80, -3081, -3081,   124, -3081,   961, -3081,   118,
    -805,   500, -3081,  1054, -3081, -3081,  1492,   459,    91,    92,
    1967, -3081,   931, -3081,  3613,  2299,  3443,  1193,  -517,  -870,
   -1223,     3,     2, -3081, -3081, -3081, -3081, -3081,  -721,   446,
   -1202, -3081,   387, -3081, -3081, -3081, -3081,  -251,   105, -2270,
       5, -2162, -2877,  -610, -3081,  -713, -3081,  -366, -3081,  -658,
   -3081,  -883,  -666,  -699, -2817, -1133, -3081,  1566,  -414, -3081,
     545, -3081, -2551, -3081, -3081,   530, -3081, -1153, -3081, -2249,
     103,  -644, -2357, -2533, -2160,  -905,   187,  -652,   159, -2121,
   -1151, -3081,   554, -3081,  -632, -3081,  -897, -1960,    96, -2628,
   -1667,    -7, -3081, -3081, -3081,  -715, -3081, -2508,    98,  1488,
   -2093,    99, -1564, -3081, -3081, -1673,    48, -2101,     8, -2131,
     101, -3081, -3081,   102,    10,  -608,   238, -3081,   107, -3081,
   -3081,  1457,  -907, -3081, -3081,   447,   110,   922, -3081, -2548,
   -3081,  -594, -3081,  -626,  -630, -3081, -3081,    36,  -899,  1458,
   -3081, -3081, -3081,    11, -3081,  -513, -3081, -3081, -2487, -3081,
      17, -3081, -3081, -3081, -3081, -1488,  -446,   255, -3081, -3081,
    -587, -2556,  -538, -3081, -2910, -3019, -3081, -3081,  -683, -2985,
   -2055,   111,    90,  1834,  1447,   123,   126, -3081,   268,   129,
   -1142,    22,  2648,   -35,   -39, -3081,   -32, -3081, -3081, -3081,
     607, -3081, -3081,    15,    35,  1668, -3081, -1039, -3081, -1619,
     644, -3081,  1811,  1812, -2140,  -861,   -61, -3081,   637, -1665,
   -2111,  -656,  1078,  1640,  1631,   398, -2560, -3081,  -580, -3081,
      87, -3081, -3081,   630,  1120, -1551, -1545, -3081, -2180, -3081,
    -496,  -383, -3081, -3081, -3081, -3081, -3081, -2480, -2863,  -637,
    1091, -3081,  1648, -3081, -3081, -3081, -3081,    55, -1502,  2808,
     669,   -83, -3081, -3081, -3081, -3081,   114, -3081,   855,  -210,
   -3081,  2043,  -691,  -785,  1854,   -77,   242, -1802,   -11,  2046,
     436, -3081, -3081,   443, -2086, -1411,   399,  -299,   860, -3081,
   -3081, -1263, -3081, -1887, -1174, -3081, -3081,  -765,  2051, -3081,
   -3081, -3081,  2167,  3204, -3081, -3081,  3351,  3374, -3081,  -888,
    3379,  -792, -1029,  1873,  -929,  1874,  -931,  -937,  -934,  1886,
    1894,  1895,  1898,  1900,  1901, -1509,  4580,   664,  1942, -2163,
   -3081, -2161,   978,   985,    -3, -3081, -1378,    45, -3081, -3081,
   -3081, -3081, -2604, -3081,  -468, -3081,  -461, -3081, -3081, -3081,
   -1709, -3080, -1730, -3081,  3878,   804, -3081, -3081,   405, -3081,
   -3081, -3081, -3081, -1490, -3081,  5588,   706, -3081, -1994, -3081,
   -3081,  -964,  -831,  -709,  -990, -1215, -1920, -3081, -3081, -3081,
   -3081, -3081, -3081, -1081, -1761,  -248,   768, -3081, -3081,   862,
   -3081, -3081, -3081, -1727, -2099, -3081, -3081, -3081,   772,  1453,
      75,  -825, -1602, -3081,   821, -2360, -3081, -3081,   400, -3081,
    -606, -1117, -2425,   403,    25, -3081,  -460, -2532, -3081, -3081,
    -719, -2654, -1083,  -892, -3081,   130,  1207,    21,   133, -3081,
     136,  1221, -3081, -3081, -3081,   137, -3081,   474,   139,   426,
   -3081,   912, -3081,   619,    23, -3081, -3081, -3081,    78,  2798,
      14, -2273
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   752,   753,  1838,  1785,  2939,  1229,
    1775,  1353,   754,  2601,  2602,  2603,  2242,  1210,  3368,  2243,
    1211,  1212,  2605,    54,    55,    56,   115,  1241,   755,   756,
     529,    59,  2292,   920,   804,  1096,   806,  1097,  1607,   908,
    1244,  1245,   757,  2643,  2304,  3165,  2692,  3166,  2367,  2298,
    1363,  2360,  1879,  1819,  1364,   537,  1893,  2693,  2648,  1880,
     758,  2590,  2941,  3361,  2616,  3499,  2877,  2878,  3358,  3359,
    2593,  2245,  3427,  3428,  2675,  1766,  3422,  2323,  3301,  2249,
    2230,  2879,  2331,  3260,  2987,  2246,  2859,  2324,  3354,  1854,
    2325,  3355,  3114,  2326,  1816,  1842,  2594,  3429,  2250,  1817,
    2589,  2942,  1754,  2327,  3365,  2328,   548,  2863,   759,  2678,
    1309,   531,   520,   521,  1535,   717,  1285,   718,   760,   938,
    1848,   761,  1302,  1830,    65,  1316,   549,  1851,   762,  1839,
     763,  2662,  2663,   764,   765,  1172,  2546,  2164,   766,   743,
     744,   955,  1333,   745,    71,  1859,   767,  1339,  1340,   963,
      73,   873,  1355,   768,  1356,  1357,   972,    74,  2694,   974,
     975,    75,    76,   770,  3197,  3002,  1318,  1855,  2336,   550,
     771,  2824,  2166,  2549,  3350,    79,  3095,  2169,  1170,  3098,
    3315,  2817,  3093,  2550,  3390,  3444,  3096,  2170,  2171,  3316,
    2172,   772,   821,  1034,  1475,   773,   774,  1038,  2020,   775,
    1757,   776,  1098,    86,    87,  1010,    88,  3108,    89,    90,
    1732,  1733,  1734,   851,   863,   864,  2162,  1447,  1963,   856,
    1175,  1701,   838,   839,  2288,   881,  1808,  1696,  1697,  2175,
    2557,  1725,  1726,  1184,  1185,  1951,  3330,  1952,  1953,  1440,
    1441,  3206,  1713,  1717,  1718,  2196,  2186,  1704,  2436,  3025,
    3026,  3027,  3028,  3029,  3030,  3031,  1099,  2731,  3217,  1721,
    1722,  1187,  1188,  1189,  1730,  2206,    92,    93,  2147,  2533,
    2534,   810,  3042,  1464,  1735,  2735,  2736,  2737,  3045,  3046,
    3047,   811,  1005,  1006,  1029,  1024,  1454,  1971,   812,   813,
    1928,  1929,  2405,  1031,  1965,  1981,  1982,  2743,  2458,  1536,
    2231,  1537,  1538,  1998,  1539,  1100,  1540,  1566,  1101,  1571,
    1542,  1102,  1103,  1104,  1545,  1105,  1106,  1107,  1108,  1559,
    1109,  1110,  1583,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  1156,  1736,  1112,  1113,
    1114,  1115,  1116,  1117,  1118,  1119,   815,  1120,  1121,  1656,
    2141,  2532,  3035,  3214,  3215,  2808,  3083,  3242,  3341,  3458,
    3486,  3487,  3513,  1122,  1123,  1599,  1600,  1601,  2034,  2035,
    2036,  2037,  2135,  1650,  1651,  1124,  2946,  1653,  2057,  3038,
    3039,  1157,  1433,  1594,  1287,  1288,  1550,  1407,  1408,  1414,
    1903,  1422,  1426,  1933,  1934,  1434,  2103,  1125,  2028,  2029,
    2476,  1561,  1126,  1243,  1606,  2803,  2138,  1654,  2097,  1133,
    1127,  1134,  1129,  1590,  1591,  2493,  2775,  2776,  2067,  2203,
    1683,  2208,  2209,   959,  1130,  1131,  1132,  1289,   524,  1551,
    3445,  1329,  1162,  1290,  2093,   777,   107,   778,   779,    97,
     780,  1152,   860,  1153,  1155,   781,   832,   833,   782,   845,
     846,  1477,  1670,  1478,   869,   102,   103,  1198,   834,   852,
     784,  3192
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     519,   907,    60,  1228,   522,    61,   883,   884,    66,   716,
      69,    77,   868,  1128,   104,    91,   519,    78,  1297,   715,
     814,    95,    84,   101,   956,  1194,   882,  1025,   854,  1425,
    1158,  1299,   523,  2178,  1788,    91,   970,  1246,  1789,  1800,
    1835,  1772,  1352,   783,  1684,  1930,  1479,  1399,   523,  1753,
    1400,  1336,   886,  1398,  1585,  1396,   769,  2145,  1985,   887,
     850,  2535,  1759,  2537,  2019,   742,  1805,  2562,   816,  2552,
    1342,  2595,  2454,  2687,  1763,  2280,  1358,    51,   808,    52,
      53,   866,   519,   519,  1686,  2947,   814,   814,  2056,  1660,
    1793,    57,    58,  1230,  1663,  1234,    62,  1238,    63,    64,
     900,    67,    68,  2080,  2081,  1861,  2456,    70,  2588,  2944,
      72,    80,  2551,   847,   523,   523,   822,  1007,  2988,  2516,
    2973,   971,  1028,    81,   966,   892,    82,  1597,  2991,    83,
      94,  2774,  1246,    96,   816,   816,    98,    99,   958,   100,
    2649,  2635,  2636,  2637,   808,   808,  -368,  -514,  2838, -1326,
   -1899,  1367,  2843,  2312,  -518,  -229,  2309,  1050, -2039, -2039,
    -229,  2149,  1215,  -860,  2437,  2198, -1899,   534,  2975,  1562,
    1563,  3184,  2408,  2201,  3389,   976,  2652,  2446,  3118, -1267,
   -1248,  -860,  1216,  2865, -1890,  -857,  1575, -1264, -1264,  -857,
   -1907, -1267, -2030, -2030, -1268,  -852, -1890,  2664, -2048, -2048,
    1409,   818, -1265, -1265, -1907,  1050,  1667, -2025, -2025, -1268,
    1346,  2657,  -819,  -832,  1744,  1050,  -847,   818,  2656,   818,
    2116,  3524,  1321,  1755,   858,  1183,  2868,  2095,  1217,  1664,
    1346,   818,  -468,  2095,  1791,  1050, -2050, -2050,   874,  2474,
    1147,  1907,  2302,  3263,  1186,  1549,  1909,  -514,  1145,  1050,
    2699,  2701,  1755,  2704,  -518,   818,  2305,  1616,  1803,  1593,
     970,  1322,  1618,  2623,  1616,   874,  1691,  1804,  1617,  1618,
     947,     3,     4,  3101,  1246,  3470,  1330,  3276,  2671,  2738,
     879,  2739, -1106,  1773,   535,  1448,  1776,  1777,  1002,  2132,
   -1106,   879,  1626,  3153,  3348,  1028,  1567,  2133,  3525,  1626,
    -651,  2211,  1330,  1049,  2420,  2967,  1907,  1007,  1705,  1747,
    1908,  1909,  1577,  2418,  1910,  1911,  1912,  3495,  1764,  3462,
    1330,  1947,  3185,  3293,  1218,  2992,  1628,  1688,   877,   875,
    3084,  1778,  3086,  1628,  3508,   786,  1144,  3186,  2852,  2721,
    2431,  2432,  2433,  1665,  2117,  3423,  3169,  1669,  3455,  1993,
    1360,  2881,  1947,  2082,  1706,  2810,   875,  2812,  2421,   836,
     855,  2118,  2173,  3188,  3413,  1741,  2119,  1737,  1738,  2644,
    1173,   818,  2591,  1219,  3448,  3129,  2710,  1179,  3294,  1202,
    3342,  1008,  3343,  1220,  3266,  1203, -1127,  3295,  2861,  2872,
    3526,   113, -2024, -2024, -1127,  1221,  2811,  3091,  3152,   878,
    2228,  1616,  3506,  3356,  2120,  3306,  1845,  3393,  1148,  2527,
    1149,  3296,   785,  1907,  2862,  3307,   556,  1908,  1909,   105,
    1707,  1014,   747,  1549,  2851,  2882,  1807,  1222,   905,  2142,
   -1248,  1035,   906,  2228,   824,  3092,  1626,  -514,  2873,  3000,
    1323,  3519,  1036,  3531,  -518,  1504,  1299,  2174,   865,   865,
    2834,  2286,  3179,  1181,  2874,  3209,  3477,  1015,  3395,  3503,
    2229,   837,  2588,  2389,  2588,  3357,  3374,  1666,   106,  1749,
    1628,  1708,  1174,  1449,   787,   114,  1779,   879,   817,  1224,
    3243,  3424,  3245,  1017,  3297,  -789,  1780,  1689,  2232,  2769,
    1204,  2993,  3509,  2585,  1913,  3463,  3178,  3298,  3274,  2303,
    1585,  2422,  3456,  1806,  1225,  1762,  -514,  3190,  2592,  2883,
    2419,  1549,   896,  -518,  1990,  1359,  3119,  1914,  3133,  3349,
    1009,  1616,  1765,  1227,  1579,  1617,  1618,  3496,  3187,  2711,
    2294,  3457,  3478,  1709,  2984,  3207,  3130,  1049,  1739,  3465,
    1907,  3015,  3252,  3527,  1908,  1909,   983,  1907, -2052, -2052,
   -2052,  1908,  1909,  3292,  1324,  2875,  1626,  1740,   922,  2121,
    1687,  1679,  3436,  3164,  2876,  3425,   859,  3264,   876,  2968,
    1792,  1331,  2450,  2027,  2738,  2212,  2739,  3006,  2143,  1605,
     948,  -671,  3308,   716,  1140,  2998,  1750,  1915,  1762,  2996,
    1628,  2285,  2223,   944,  2790,  2469,  2096,  1331,  1939,  2624,
    1562,  1563,  2518,  3321,  3520,  3471,  2390,   905,   956,   532,
    1021,   906,  3497,  1863,  2287,  1331,  2391,  3283,  1954,  1867,
    2708,  -789,  2947,  2056,  -514,  1575,   880,   536,  1783,  1450,
     970,  -518,  2376,  2198,  1974,  3115,  2732,  1580,  3467,  2349,
    2565,  3498,  2539,   924,  2382,   925,  2944,  1205,  1789, -1106,
    1613,  2204,  1784,  2667,  1558,  1580,  2134,  -229,  -229,  1581,
   -1899,  1296,  2753,  -514,  -368,  -514,  1572, -1326,  2686,  2554,
    -518,  2148,  -518,  1582,  2410,  2355, -1899,  1581,  3255,  1359,
    1702,  2415,  1572,  3256,  3109,  2038,  2039,  2560,   905, -1267,
   -1248,  1584,   906,  2649, -1890,  -857,  3299,  3229,  1616,  3300,
   -1907, -1267,  1150,  3127, -1268,  -852, -1890,  3173,  1207,  1564,
    3116,  1611,  1350,  1351, -1907,   971,   868,  2447,  1871, -1268,
     999,  2447,  1565,  1570,  2024,  1593,  -847,  1661,  1864,  2150,
    1567,  1549,  1350,  1351,  1593,  1246,  2076,  1246,   996,  3379,
    1208,  1924,  1764,  3380,   969,  1945,  3142,  3143,  2059,  2658,
    1577,  2468,  3437, -1127,  2599,  3258,  1359,  1649,  1332,  1359,
    1359,  1646,  1647,  1648,  1649,    91,  2205,  1628,   868,  2831,
    2645,  2646,  3100,   783,  3268,  2285,  1335,  2077,  3128,  2819,
    2617,   538,  3409,  3410,  2894,   519,  2015,   973,  1703,   814,
    1783,  1580,  3010,  2618,  1580,  3373,   519,  1916,  1917,  1918,
     814,  1919,  1920,  1921,  1922,  1923,  1924,  2722,  2723,  2724,
    2725,  1209,   886,  1581,  1784,  1462,  1581,   523,  2370,   887,
    3182,  1915,  2381,  2371,  1549,  1195,  3159,  1582,   523,  2416,
    1584,   519,   519,  3275,  2820,  3450,  2832,   816,  2596,  3102,
    1862,  1141,  2258,  2973,   539,  1146,  1179,  2025,   816,  2160,
    2508,  3167,  2261,  2409,   519,  2264,  2031,  2339,   998,  3049,
    1755,  1580,  3051,   861,  3053,  1146,  2416,  1463,  1787,  3065,
     870,  1756,  3183,    60,  2161,  2256,    61,   980,  2509,    66,
    2372,    69,    77,  1581,  2947,   104,    91,   926,    78,   927,
    1874,  1876,    95,    84,   101,  1151,  1764,  1159,   519,   716,
    1605,  3179,  1284,   519,  3446,  2961,  1755,  2962,  2944,  2098,
    1921,  1922,  1923,  1924,  2528,  2425,  1142,  1758,   847,   847,
    3135,   847,  1181,  2633,  3311,  3237,  1445,  1764,  3140,  1044,
     872,  2315,    23,  1455,  2634,  1451,  3238,  1764,  2220,  2855,
     871,  1458,  2281,  2282,  2283,  2359,  1765,  2490,    51,  2597,
      52,    53,  3261,  2348,   888,  1284,   942,  2350,   818,  1549,
    2352,  1448,    57,    58,  1556,  2257,    47,    62,   969,    63,
      64,  1182,    67,    68,   519,   519,  1300,  1342,    70,  2361,
     519,    72,    80,   519,   519,  2267,   519,   519,   519,   519,
    2274,    91,  2781,  2056,    81,  3248,   903,    82,  2510,   783,
      83,    94,   519,  2511,    96,   818,   814,    98,    99,   519,
     100,  3375,  1762,   814, -1899,  3521,  1644,  1645,  1646,  1647,
    1648,  1649,  1794,   909,   543,  1930,   965,  2856,   519,  1284,
    1534, -2052, -2052, -2052,   523,  1919,  1920,  1921,  1922,  1923,
    1924,   523,  1919,  1920,  1921,  1922,  1923,  1924,   928,   519,
    1764,  1202,   547,  1797,   816,  2019,   868,  1203,  2104,  2232,
     932,   816,  2259,  2622,   808,   921,  1789,  2262,   519,  2638,
    2540,   808,  1705,  2541,  3075,    27,    28,    29,  1764,   519,
     519,   519,  -209,   519,   519,  2104,  2105,   877,   716,  3201,
    2571,   939,   538,  2857,  1442,  2858,  3352,  1014,  1603,   934,
    1765,  1344,  -596,  1549,  1345,  3435,  1205,  -596,  3438,   932,
    2032,  2414,  1466,  2105,  1179,  1549,  1470,   519,  1706,  1180,
     108,  3369,  2062,  2625,  2063,  1384,  1385,  2560,  1862,  1573,
    1574,  1765,   933,  1015,   519,   519,  1693,  1694,   935,  1700,
      34,  1765,   940,   887,   887,  1549,   887,  1202,   961,  1457,
    2078,   945,  1549,  1203,  2512,   539,  -595,  1146,   878,  1017,
     946,  -595,  1204,   970,  2369,  2513,  1762,  2598,  2373,  2599,
     519,  2375,   949,  2660,   519,   519,  2626,    39,  -596,  1597,
    1938,   933,  1940,  1941,   519,   519,   519,  1821,  1549,   519,
    1181,   950,  1549,  1873,  2748,  2472,  2672,  1762,  1050,  2600,
    1549,  2106,  2680,  3501,  2630,   951,  2107,  1762,  1534,   952,
      41,  2108,   905,   116, -2021, -2021,   906,   533,   820,   820,
    1790,    44,  1549,   937,   962,   746,  1822,  -596,  2106,   934,
     905,  1202,  -595,  2291,  1604,  1708,   879,  1203,  2108,  1182,
     835,  1284,  1388,  1389,   848,  2136,  1875,  2563,  1948,  2137,
    1284,  1050,  1050,  1949,  1765,  2197,  2197,  1677,  1204,  1456,
    1678,  3174,  2329,  1461,  2330,   865,  1135,  1136,   935,  1138,
    2506,   818, -2022, -2022,  1284,    47,  1376,  1377,  1821,   983,
    1868,  -595,  1765,  1869,   981,  1298,  1021,  2536,   109,  1989,
    2013,  2299,  1990,  2014,  2300,  2364,  1534,  1709,  2365,   110,
    1039,  1040,  1041,   936,  3011,  1450,  2402,  1829,   904,  2403,
    1831,  1824,   716,  1832,   982,  1359,  1833,  1822,   984,  1205,
    1762,   716,  1856,  2733,  2448,  1359,  2740,  2449,  1359,  2607,
    1699,  2609,  3517,  2451,   111,   543,  2449,   965,   969, -2023,
   -2023,  2613,  1204,  2056,  2614,   992,  1384,  1385,  1762,  2426,
     538,  2427,  1823,   937,  2945,   716,  2610,   987,  2612,    91,
    3480,   519,  2109,   547,   990,  1878,  1966,   783,  3504,  1968,
    3505, -2026, -2026,  2110,  1972,  3492,  1206,  1975, -2027, -2027,
    1207,   973,  1979,  2619,   112,   880,  2620,  2574,  2683,  2109,
    1202,  1990,    14,    15,  2745,  2746,  1203,  2449,  2014,   991,
    2110,  2749,  1824,   993,  2750,  2655,  2885,   994,   519,   519,
    2892,  3530,  1208,   539,   519,  1205,   519,  2428,  1359,  2429,
     814,   519,   519,   519,   519,  2751, -2028, -2028,  2750,  2960,
    3528,  2849,  2848,   995,  2850,  3529,   519,   519,    23, -2029,
   -2029,  2826,   519,    23,  2827,   519,   814,   996,   523,   814,
     519,  1001,   519,   519,   814,  2970,  1030,   814,   519,  2770,
    2771,  1033,   814,  1388,  1389,  2884,  2983,  2893,   816,  2300,
    2999,  1037,  1232,  2365,   523,  3004,  1207,   523,  3005, -2031,
   -2031,  3012,   523,  1209,  3013,   523,   541,  1042,  3066,  1202,
     523,  2014,  1043,  3202,   816,  1203,  2014,   816,  1044,  1205,
    3203,  1204,   816,  2449,   808,   816,  1045,   808,  1233,  3338,
     816,  3339,   808,  1139,  3232,   808,  1534,  2014,  3239,  1202,
     808,  1990,  1176,  1143,  1178,  1203,  1593,  1597,  2758,  2760,
    1549,  2759,  2761,  2762,  2757,  2756,  1160,  3249,  1161,  2463,
    3250,  1011,  3282,  1298,  3286,  2300,  1012,  2365,   519,   519,
    -208,  1154,  3318,  1163,  2016,  2014,  1236,   519,   519,  1164,
    1207,  3386,  2017,   865,  2365,   519,  1165,    91,  3391,  2018,
    1168,  3392,   519,  2022,  2021,  2023,  1169,  3417,  1177,  1209,
    3418,    27,    28,    29, -2032, -2032,    27,    28,    29, -2033,
   -2033,  3461,  1237,   543,  3392,   544,  3502,   716,  1196,  3392,
    1204,   519, -2034, -2034,   519,  1013, -2035, -2035,  1197,  1534,
     519,   519,   519,   519,   519,   519,   519,   519,   716, -2036,
   -2036,   547,   519,   519, -2037, -2037,  1199,   519,  2092,  1200,
    1204,   519,  2691,  3146,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   970,  2145,   519,    34, -2038, -2038, -2040,
   -2040,    34,   519,  1201,  1284,  1418,  1213,    36,  1205, -2041,
   -2041,  1214,  2180,  1209,  2560,  1549, -2042, -2042,  1231,   887,
   -2043, -2043,  1235,   519, -2044, -2044,  1239,  1014,  1240,    38,
    1292,  -527,  2076,    39,  1295,  1190, -2045, -2045,    39,  1296,
    2538, -2047, -2047,  1301,  3110,  1303,  -527,   519, -2049, -2049,
    1304,  -527, -2051, -2051,  2892,  1809,  1810,  1317,   519,   519,
    2199,  2200,  1319,  1015,  1151,  2219,    41,  -646,  -646,  1207,
    1320,    41,  1549,  2564,  2564,  -650,  -650,    44,  1328,  1016,
    1386,  1387,    44,  -649,  -649,  1327,  1388,  1389,  1865,  1017,
    1866,  1338,  2821,    45,  1534,  3106,  3107,  3488,  3489,  1334,
    2842,  1208,  -527,   716,  1337,   716,  1993,  1205,  3514,  3515,
    1672,  1673,  2978,  2244,  1343,  2248,   538,    46,  3163,  1361,
    1362,  1368,  -527,  1018,  2994,  1423,  1438,  2966,  1436,  3479,
    1439,    47,  1446,  3481,  3003,  1453,    47,  1205,  1452,  3228,
    1459, -1312,  1460,  1465,  1191,   519,  1471,    23,  1615,  1284,
    1474,  1616,   519,   519,  1552,  1617,  1618,  1469,  1553,  1555,
    -823,  -830,  3077,    11,  2265,  1564,  1568,    47,  1207,  1019,
    3317,  -527,  1209,  -671,  -672,  1549,  1020,  -820,  -821,   539,
    -527,  1578,  -824,  1579,  -822,  1589,  1626,  1602,  3522,  1608,
    1284,    14,    15, -2052,  2272,  1610,  1655,  1657,  1207,  1671,
    2266,  1659,  1680,  1681,  1685,   716,  1692,  1690,  1180,  1729,
    1182,  1727,  1284,   519,  1742,  2333,  1021,  1731,  1760,  1761,
    1628,   969,  1762,  1767,  1768,  1769,  1774,  1781,  1782,  1786,
    2273,  1796,   113,  2314,  2438,  1022,  1812,    23,  1534,  1813,
    2441,  2945,   519,   519,  1802,   519,  1818,  1814,  1827,  1826,
    1534,   519,   519,   519,   519,   519,   519,  1828,  1837,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,  1840,
    1549,  1209,  1841,  1843,   519,   519,  2560,  1844,   519,  2822,
    1534,  1846,  1847,  1849,  1850,   519,  1857,  1534,  1858,  1862,
      27,    28,    29,  1870,  1896,  1898,  1901,  1899,  1904,  1927,
    1935,  1209,  3138,  1936,  1023,  1943,  1946,   519,  1964,  1192,
     519,  1967,   519,  1973,   814,  1976,   519, -2052,  1977,  1978,
     814,  3317,  3280,  1534,  1983,  1988,  1558,  1534,   978,  -527,
     820,   519,  1991,  1284, -2052,  1534,  1565,  1570,  1992, -2052,
    3147,  3148,   523,  1994,  1995,  1997,  2026,  1549,   523,  1996,
    2027,  2752,  2754,  1050,  2060,    34,  -527,  1534,  2061,   543,
    1032,   965,   816,  1616,  3317,  2066,  2069,  2071,   816,   519,
     519,  -527,   808,  3048,  2073,  2072,  -527, -2052,   808,  2074,
      27,    28,    29,  1049,   546,  1137,  1907,   547,  2101,  2094,
    1908,  1909,    39,  2112,  1910,  1911,  1912,   905,  2113,  2115,
    1163,   906,  2139,  2140,  2146,  2158,  2159,   878,  2163,   519,
    1597,  2176,  2179,  3317,   519,   519,   868,  2188,  2189,  2190,
    2191,  2192,  2193,  2210,  2214,    41,  2215,  -527,  3371,  1905,
    1906,  2218,  1637,   879,  2221,  1926,    44,  2225,  2226,   519,
     519,  2227,  2301,  2297,   519,    34,  2306,  -527,  2319,  2316,
    2318,   910,    45,  2320,  1549,  3333,    36,  2334,   519,  2335,
    2337,   519,  2340,   519,  2341,  2342,  2343,  2344,  2347,  2366,
    2345,  2351,  2374,  2404,  1932,  1907,    46,   911,    38,   519,
     716,  1931,    39,  2411,  2435,  2412,   519,  2413,  1549,   519,
    2823,  2442,  2417,   814,  2453,  2423,  -527,  3124,  2455,  2224,
    2424,  2460,    40,  2945,  2440,  -527,   519,  1359,  2461,  2233,
     814,  2236,  2462,  2464,  2247,    41,  2465,  2470,  1354,   519,
    2251,   523,  2253,  2466,  2471,  2478,    44,  1394,  2467,  2479,
    2507,  2523, -2052,  2483,  2481,  2260,   519,   519,   523,  2482,
    2263,   816,    45,   912,  2268,  2269,  2270,  2271,  2484,  2275,
    2276,   808,  2486,   519,  2485,   519,  2487,  2502,   816,  2488,
    2531,  2489,  2499,  2500,   519,  2514,    46,  1549,   808,  2542,
    2524,  2529,   913,  2547,  2213,  2530,  1473,  3269,  2543,  1789,
      47,  2548,   716,   716,   716,  2545,  2553,  2555,  -652,  2556,
    2566,  2567,  2244,  2244,  2244,  2569,  1049,  1914,  2570,  1907,
    2573,  2577,  2332,  1908,  1909,  2578,  2581,  1910,  1911,  1912,
    1549,  2579,  2583,  2584,  2587,   914,  2621,  2627,  2606,  2608,
    2639,   519,  2628,    23,  2783,  2629,  2641,  1284,  2640,  2654,
    2642,   868,  2653,  2673,  2659,  2669,  2677,  3050,  2674, -2052,
     970,  2670,  2681,  1609,  2688,  2698,  1644,  1645,  1646,  1647,
    1648,  1649,  2706,  1612,  -527,  2709,   518,   530,  2712,  2715,
    1829,  2716,   554,  1831,  2717,  1534,  1832,  1915,   554,  1833,
    2729,  2730,   805,  1662,   819,   819,  2718,  3180,  2741,   823,
     554,   831,  1668,   519,   831,  2742,   716,   849,   853,  2747,
    2755,   853,  2766,  2778,   554,   554,  1878,  2788,    23,  2763,
     519,   969,  2772,  2807,  2839,  2835,  2786,  2847,   716,  2789,
    2801,  2792,  1549,  2802,  2816,  2813,  2809,  2833,  1878,  2837,
    2853,  2854,   905,  2040,  2880,  2896,   906,  3322,  2076,  3324,
    2041,  2042,  2860,  2969,  2043,  2044,  2045,  2972,   805,   805,
     915,  2963,  2964,  2965,  2976,  3332,   519,  2981,  2982,  2977,
     814,   916,   849,  2985,  2986,  2990,  2300,   853,   554,   853,
     853,   853,  3001,  3008,  3009,  3034,    27,    28,    29,  3014,
    3036,  3040,  3044,  3054,  3055,  1359,  3057,  3058,   523,  3078,
    1359,  3085,  3088,  3090,  3103,   519,   917,  3097,  3334,  3104,
    3336,  3099,  3105,  3454,  3111,  3112,  3415,  3113,   816,  3117,
    1534,  3121,  3122,  3123,  3131,  3134,   868,  3136,  1146,   918,
    1914,  3137,  3141,  3155,  3154,  3419,  3156,   519,  2804,  3170,
    3175, -2020,  3193,   519,   519,  3157, -2021,  1874,  1876,  3160,
    3408,    34, -2022, -2023,   519, -2024,   919,  3189, -2025,   868,
   -2026,    27,    28,    29, -2027,   519, -2028, -2029,   519, -2031,
     519, -2032, -2033, -2034, -2035,  3158,  3161,  1534,   519, -2036,
    3403,   519,   519,  3191, -2037,  3168,   519,   519,    39,  3195,
   -2038,  3176,  3204,   519, -2040,  3194, -2041,  1916,  1917,  1918,
    1915,  1919,  1920,  1921,  1922,  1923,  1924, -2042,   519, -2043,
    2841, -2044,  3205, -2045, -2046,  2016, -2047, -2048,   519, -2049,
   -2050,    41, -2051,  2017,  1877, -1265,    34,  3198,    91,  3208,
    2018,  1865,    44,  3210,  2022,  2021,  2023,  3216,   519,  3212,
    3219,  2825,  2383,  2384,  2385,  2386,  2387,  2388,    45,  3218,
    2392,  2393,  2394,  2395,  2396,  2397,  2398,  2399,  2400,  2401,
    3222,  3223,  3224,    39,  3227,  2865,  3231,  3246,  3247,  3251,
    3254,  2866,    46,  3257,  3259,  3271,  3272,   716, -1264,  3279,
    2943,   716,  3281,   716,  2867,  3288,    47,  2244,  3289,  3290,
    3303,  2948,  3305,  2248,  1549,   519,    41,   519,  1011,  3304,
    3326,  3340,  3327,  1012,  3319,  3320,  3323,    44,  2868,  3329,
    2869,  3335,  3360,  3130,  3364,  3376,  3366,  3370,    85,   538,
     538,  3367,  3383,    45,  3382,  3384,  3389,  2559,  3394,  3396,
    3401,  3398,  3402,  1829,  3081,  3405,  1831,  1987,    85,  1832,
    3443,   807,  1833,  3406, -1312, -1312,  2974,    46,  3407,  3412,
    3414,  3416,  1874,  1876,  3421,  3432,    85,  3426,  3459,  3434,
    3433,    47,  1013,  3439,  1359,   867,  3440,  3469,  3472,   868,
    3441,  3493,   519,  2995,  3449,  1534,  2997,  3474,  3471,  3451,
    3453,  3470,   539,   539,  3507,  3512,  3490,  3518,  3523,  3532,
    3533,  1166,   519,   519,  3144,  2895,  1445,   519,  2870,  2252,
     519,  1798,  2899,  2155,  2604,  2676,  2631,   807,   807,   885,
    1916,  1917,  1918,  2295,  1919,  1920,  1921,  1922,  1923,  1924,
    2650,    85,  2695,   979,  3199,  2971,  3430,   519,  3500,  3267,
    2503,  2504,  3468,  3475,  1014,  3494,   540,   964,  1752,  3302,
    2611,   519,  2586,  2989,  3466,  3473,   519,   519,  2582,  2949,
    2864,   519,  1534,  3464,  1860,   541,   519,  1825,   868,   519,
     519,  2353,  2829,  2690,   519,  1284,  2871,   907,   519,  3387,
    1015,  2872,   519,  1872,  3347,  3447,   814,  3411,  2828,   519,
    3516,  2814,  1894,  2558,  1365,  1723,  1016,  2572,  2217,  1443,
    1444,  3452,  2720,  2568,  2185,  1724,  1017,  3397,  1682,  3325,
    2216,   809,  2544,  2445,   523,  1728,   853,  3226,   986,  2714,
    1410,   853,   542,   542,   853,  2713,  1000,  3273,  2744,  -208,
    2873,  3043,   554,   519,   816,  2459,  2362,  1395,  1397,  3400,
    1018,   519,  2151,  2363,   808,  3399,  2874,  2046,  2047,  2048,
    1401,  2049,  2050,  2051,  2052,  2053,  2054,  2497,  1402,  1403,
     519,  1193,  1404,  2561,  1405,  1406,  2768,  2521,  2519,  1534,
    2475,  3089,   543,   543,   544,   965,  2498,  1955,  2780,  2154,
    2452,   893,     0,     0,     0,     0,  1019,     0,     0,     0,
       0,   545,   545,  1020,     0,     0,     0,   546,   546,     0,
     547,   547,     0,  2943,     0,     0,     0,     0,  1615,     0,
       0,  1616,     0,  1419,     0,  1617,  1618,  1215,     0, -2052,
   -2052, -2052,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1021,     0,     0,  1359,  1216,     0,     0,
       0,     0,     0,     0,     0,     0,  1626,  2875,     0,   519,
     716,     0,  1022,  1627,     0,     0,  2876,     0,     0,     0,
    1878,  2844,  2845,     0,     0,     0,     0,     0,     0,   868,
       0,  2277,     0,     0,     0,     0,     0,     0,   969,     0,
    1628,   519,  1534,  1217,  2293,  2293,     0,     0,  3181,  2897,
       0,     0,     0,     0,     0,     0,     0,   519,     0,     0,
       0,     0,     0,     0,  2950,  2951,  2952,  2953,  2954,  2955,
    2956,  2957,  2958,  2959,     0,     0,     0,     0,     0,     0,
       0,  1023,   954,   554,   554,  1534,  1049,     0,     0,  1907,
     519,     0,     0,  1908,  1909,     0,     0,  1910,  1911,  1912,
       0,   519,   519,     0,     0,   519,     0,   519,     0,     0,
       0,  1354,    23,  2888,  2784,     0,     0,  2368,     0,     0,
       0,     0,     0,     0,   977,   530,   819,     0,  1541,     0,
       0,   518,   519,   853,     0,     0,     0,  1629,     0,  1218,
       0,     0,   805,     0,     0,     0,  1004,  1004,     0,     0,
       0,  1004,  1027,     0,  1630,  1215,   519,     0,     0,  1631,
       0,     0,     0,     0,  1720,   831,   831,   831,     0,     0,
       0,     0,     0,  1419,     0,  1216,     0,     0,     0,   831,
     831,     0,   831,     0,     0,     0,     0,  2943,  1219,     0,
       0,     0,     0,     0,     0,   853,     0,  1634,  1220,     0,
       0,   554,     0,     0,     0,     0,     0,     0,     0,     0,
    1221,     0,   853,     0,     0,   853,     0,     0,     0,     0,
       0,  1217,  2794,  2795,    85,     0,   519,   716,     0,     0,
       0,   519,  3284,  3285,     0,   814,     0,  1878,     0,     0,
       0,   519,  1222,   519,  1543,   519,     0,     0,     0,   519,
       0,   519,  1637,   519,     0,    27,    28,    29,     0,   853,
    1294,     0,     0,   523,   519,     0,     0,     0,     0,   519,
       0,   519,     0,     0,   853,   853,   853,   853,  1315,   519,
       0,     0,     0,   816,     0,     0,     0,     0,     0,     0,
       0,  1326,   716,     0,  1224,     0,     0,   519,     0,     0,
    1914,     0,  3353,     0,     0,     0,  1541,     0,     0,  3344,
    3125,  3346,     0,     0,     0,     0,     0,  1218,     0,  1225,
      34,     0,     0,     0,  1004,  1027,     0,   853,     0,     0,
    1417,     0,  1049,     0,     0,  1907,  1004,  1004,  1227,  1908,
    1909,     0,   554,  1910,  1911,  1912,   519,     0,   805,    23,
       0,  3378,  1639,     0,     0,   805,   519,    39,     0,     0,
    3068,     0,     0,     0,     0,   554,  1219,  3381,   519,     0,
    1915,  3385,  1472,     0,     0,     0,  1220,     0,     0,     0,
       0,     0,   519,  1554,     0,     0,   814,     0,  1221,     0,
      41,     0,     0,     0,  1541,     0,     0,  1419,  1419,     0,
     519,    44,     0,  1419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3007,   523,     0,     0,    45,     0,     0,
    1222,     0,  1543,     0,     0,   519,     0,     0,     0,   814,
       0,     0,   554,     0,   816,     0,     0,     0,    85,   867,
     519,    46,     0,     0,     0,     0,     0,     0,     0,  2943,
       0,   716,     0,     0,     0,    47,     0,   523,     0,  1640,
       0,  3353, -2052, -2052, -2052,     0,  1644,  1645,  1646,  1647,
    1648,  1649,  1224,     0,   519,     0,     0,   816,   814,  2615,
     985,  3345,  1674,     0,     0,  1676,     0,     0,   519,   519,
     519,   997,    27,    28,    29,  3476,   555,  1225,     0,   554,
     554,     0,   555,     0,     0,     0,   523,   853,     0,     0,
    1543,     0,     0,     0,   555,   519,  1227,     0,     0,     0,
       0,  3491,     0,     0,     0,     0,   816,     0,   555,   555,
    1417,  2647,     0,     0,     0,     0,     0,     0,     0,   885,
     853,  1751,     0,     0,     0,     0,  1914,     0,     0,  2661,
       0,     0,     0,   853,     0,  1049,   519,    34,  1907,    85,
       0,     0,  1908,  1909,     0,     0,  1910,  1911,  1912,     0,
     853,     0,  3126,     0,   853,     0,     0,  3270,     0,  1799,
    1916,  1917,  1918,  3069,  1919,  1920,  1921,  1922,  1923,  1924,
    1202,  1354,   555,     0,    39,     0,  1203,     0,  3277,  3278,
    2696,     0,  2697,     0,  1215,     0,  2702,     0,  2705,     0,
       0,     0,     0,     0,  1541,     0,  1915,     0,     0,     0,
       0,    14,    15,  3291,  1216,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,  1815,     0,   853,    44,     0,
       0,     0,     0,   853,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,  1881,     0,  1853,     0,     0,
       0,     0,     0,     0,    85,     0,   954,    23,     0,     0,
    1217,   954,     0,   554,   554,     0,   554,   954,    46,     0,
       0,     0,     0,     0,     0,     0,  2187,     0,     0,     0,
       0,     0,    47,     0,     0,   857,     0,   807,     0,     0,
       0,  1204,  1882,     0,   807,     0,  1049,  1541,     0,  1907,
       0,     0,  3200,  1908,  1909,     0,     0,  1910,  1911,  1912,
       0,     0,     0,  1883,     0,     0,     0,     0,     0,     0,
    1543,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1557,  1884,     0,     0,     0,  1885,     0,     0,     0,     0,
       0,     0,  1569,     0,  1417,  1417,     0,     0,     0,     0,
    1417,   895,   518,   898,     0,   902,  1218,     0,  1886,  1914,
       0,  1887,     0,     0,     0,  1004,     0,   554,  1950,  1595,
       0,     0,     0,     0,     0,   853,     0,  1888,   805,     0,
       0,   805,     0,     0,     0,     0,   805,     0,     0,   805,
       0,     0,     0,     0,   805,     0,   554,     0,   554,     0,
      27,    28,    29,  1986,     0,  1219,     0,     0,     0,     0,
       0,     0, -1782,  1543,     0,  1220,  1916,  1917,  1918,     0,
    1919,  1920,  1921,  1922,  1923,  1924,     0,  1221,     0,  1915,
       0,     0,  1541,     0,     0,     0,     0,     0,     0,     0,
    2940,     0,     0,     0,     0,  3460,     0,     0,  1205,     0,
       0,     0,     0,   885,   885,     0,   885,     0,     0,  1222,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
    1889,     0,     0,  2647,     0,     0,    36,     0,  1890,     0,
    1419,  1419,  1419,  1419,  1419,  1419,     0,     0,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,    38,     0,
    1891,     0,    39,     0,     0,  1223,     0,  2055,     0,  1207,
    1914,  1224, -1782,     0,     0,     0,     0,     0,  2065,     0,
       0,     0,     0,     0,     0,     0,     0,  1892,     0,     0,
       0,     0,     0,     0,     0,    41,  1225,     0,     0,     0,
       0,  1226,     0,     0,     0,     0,    44,     0,  1543,     0,
       0,     0,     0,     0,     0,  1227,     0,   954,     0, -1782,
    1049,     0,    45,  1907,     0,     0,     0,  1908,  1909,     0,
       0,  1910,  1911,  1912, -1782,     0,  1541,     0,  1011, -1782,
    1915,     0,     0,  1012, -1782,     0,    46,     0,  1541,     0,
       0,     0,     0, -1782,     0,     0,     0,     0, -1782,     0,
      47,     0,     0,     0,  2152,     0,   853,     0,   853,     0,
       0,     0,  1209,     0,     0,     0,     0,     0,  1541,   853,
       0,  2168,    85,     0,     0,  1541,   555,     0,     0,     0,
   -1782,     0,     0,  1417,     0,     0,  3087,     0,     0,  1916,
    1917,  1918,  1013,  1919,  1920,  1921,  1922,  1923,  1924,     0,
   -1782,     0,     0,     0,     0,     0,     0,     0,   853,     0,
     554,  1541,     0,     0,     0,  1541,     0,     0,  1419,  1419,
       0,     0,     0,  1541,  1751,   554,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   554,  2234,   554,  2238,     0,
     554,     0,  1543,     0,     0,  1541,   554,     0,   554, -1782,
       0,     0, -1782,     0,  1543,     0,     0,     0, -1782,     0,
     954,   554,     0,     0,  1014,   954,   554,     0,     0,     0,
     554,   554,   554,   554,     0,   554,   554,   807,     0,     0,
     807,     0,     0,     0,  1543,   807,     0,     0,   807,     0,
       0,  1543,  2296,   807,  1011,     0,     0,     0, -1782,  1012,
    1015,   853,   853,   853,   853,  1315,   853,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1016,     0,     0,     0,
    2322, -1782,     0,     0, -2052,     0,  1017,  1543,     0,     0,
     923,  1543,  1419,     0,     0,   930,  2346,     0,   931,  1543,
    1916,  1917,  1918,     0,  1919,  1920,  1921,  1922,  1923,  1924,
       0,     0,     0,     0,     0,  3177,     0,     0,  1013,     0,
    1018,  1543,     0, -1784,     0,     0,     0,   555,   555,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1354,   855,
      85,  1969,     0,     0,     0,     0,     0,  1417,  1417,  1417,
    1417,  1417,  1417,     0,  1915,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,     0,  1019, -1782,     0,     0,
       0,     0,     0,  1020,     0,     0,     0, -1782,     0,     0,
       0,  1544,     0,     0,     0,   554,     0,     0,     0,     0,
    1014,     0,     0,     0,     0,     0, -1782,   853, -1782, -1782,
       0,     0,     0,     0,     0,     0,   805,     0,     0,     0,
       0,     0,   805,  1021,     0,     0,     0,   554,  3244,  2102,
       0,     0,   554, -1784,     0,     0,  1015,     0,     0,     0,
       0,     0,  1022,  2457,  2457, -1782,     0,     0, -1782, -1782,
   -1782,     0,  1016,     0,     0,   555,  1615,     0,     0,  1616,
       0,     0,  1017,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1784,     0,     0,     0,  1624,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1626, -1784,  1018,  2940,     0,   885,
   -1784,  1627,     0,     0,     0, -1784,     0,     0,     0,     0,
       0,  1023,     0,   554, -1784,     0,  1970,  2494,     0, -1784,
       0,     0,   554,  1541,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1546,     0,
       0,     0,  1019,     0,     0,  1417,  1417,     0,     0,  1020,
       0, -1784,     0,     0,     0,     0,     0,   989,     0,     0,
       0,  1547,  2055,     0,     0,     0,  1548,     0,     0,  1544,
       0, -1784,     0,     0,  1916,  1917,  1918,     0,  1919,  1920,
    1921,  1922,  1923,  1924,     0,     0,     0,     0,     0,  1021,
       0,     0,     0,     0,     0,   805,  1437,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,  1022,     0,
    1419,  1419,   805,     0,     0,     0,  2168,     0,     0,  1468,
   -1784,     0,     0, -1784,  3372,  1629,     0,     0,     0, -1784,
       0,     0,  2317,     0,     0,     0,  1167,     0,     0,  1543,
       0,    85,  1630,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,     0,     0,   554,  1544,  1541,  1417,
       0,     0,   554,     0,     0,     0,     0,     0,     0, -1784,
    1632,  1633,     0,     0,     0,     0,     0,  1023,  1815,     0,
       0,     0,     0,  1293,     0,  1634,  1598,     0,     0,     0,
       0,     0, -1784,     0,     0,     0,     0,     0,  1306,  1308,
    1311,  1313,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1541,  1546,     0,     0,     0,
       0,     0,     0,  1635,     0,     0,  1636,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1547,
    1637,     0,     0,  1638,  1548,     0,     0,     0,     0,  1815,
     855,  1412,     0,   555,   555,   853,     0,     0,     0,  2940,
       0,     0,     0,     0,     0,   807,     0,  1815,   853,   853,
     853,   807,     0,     0,  1543,     0,     0,     0, -1784,     0,
       0,   554,     0,   853,     0,     0,   853,     0, -1784,     0,
    1315,     0,     0,     0,   853,     0,     0,     0,     0,     0,
     954,  1419,     0,     0,  1546,     0,     0, -1784,     0, -1784,
   -1784,     0,     0,     0,     0,     0,     0,     0,  1541,     0,
    1815,  1815,     0,  1815,     0,     0,  3037,  1547,     0,     0,
       0,  1543,  1548,     0,     0,     0,     0,     0,     0,     0,
    1639,     0,     0,     0,     0,     0, -1784,     0,     0, -1784,
   -1784, -1784,   518,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3061,     0,  2719,     0,     0,     0,     0,  1544,     0,     0,
     853,   853,   853,     0,     0,     0,     0,     0,     0,   554,
       0,  1417,   554,     0,     0,     0,     0,     0,   554,  1595,
    1615,     0,     0,  1616,     0,     0,     0,  1617,  1618,     0,
       0,     0,     0,  1541,     0,     0,     0,  2102,   853,     0,
       0,     0,  1215,     0,     0,     0,     0,   555,   555,     0,
     555,     0,  2055,  2525,  1543,     0,     0,     0,  1626,     0,
       0,     0,  1216,     0,   807, -2052,     0,  1640,     0,     0,
    1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,
    1419,   807,     0,     0,  1743,     0,     0,  1417,  1417,     0,
    1544,     0,  1628,  2480,     0,     0,     0,  1770,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1217,  2886,
    1541,     0,     0,     0,     0,     0,  2818,     0,  1795,  2887,
       0,     0,  2168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   853,  1420,
       0,     0,   554,     0,  1546,     0,   554,   554,   554,  1543,
       0,   555,  1815,  1751,  1815,     0,  1853,  2505,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1547,     0,     0,
       0,     0,  1548,     0,     0,   554,     0,  2898,  2888,     0,
    1980,  1820,  1984,     0,     0,     0,     0,  1836,     0, -2052,
     554,   554,   554,   554,   554,   554,   554,   554,   554,   554,
       0,     0,     0,     0,  1218,     0, -2052,     0,     0,     0,
       0, -2052,     0,     0,     0,     0,     0,  1541,     0,     0,
    1419,     0,  2322,     0,     0,  1544,  1543,     0,     0,   853,
       0,     0,     0,     0,   867,     0,     0,  1546,     0,  1751,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2052,
       0,  1541,     0,  1219,     0,     0,     0,  1853,     0,     0,
    1547,     0,     0,  1220,     0,  1548,     0,  1815,     0,     0,
       0,     0,     0,     0,     0,  1221,     0,  2889,  1417,     0,
       0,     0,     0,     0,   554,     0,     0,     0,     0,     0,
       0,   853,   853,   853,   853,     0,     0,     0,     0,     0,
       0,     0,     0,  1417,  1637,     0,  1417,  1222,     0,     0,
     554,   954,     0,     0,     0,     0,     0,     0,     0,  3052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1962,
    1541,     0,     0,  1543,     0,     0,     0,     0,     0,  1420,
       0,     0,     0,     0,     0,     0,  3059,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1224,
       0,     0,     0,     0,     0,     0,     0,  1543,     0,  1544,
       0,     0,  1546,  1541,     0,     0,  3082,     0,   805,     0,
       0,  1544,     0,     0,  1225,     0,     0,     0,     0,     0,
       0,     0,  3094,     0,     0,  1547,  2168,     0,     0,     0,
    1548,     0,  2055,  1227, -2052,  2890,     0,     0,  2891,  1595,
       0,  1544,     0,     0,     0,     0,  1751,     0,  1544,     0,
       0,     0,  1815,     0,     0,     0,     0,     0,     0,     0,
    3331,     0,     0,     0,     0,   954,   554,  1417,     0,     0,
       0,     0,  1595,   853,   555,     0,  1543,     0,     0,     0,
    1202,     0,     0,     0,  1544,     0,  1203,     0,  1544,   555,
    3145,    85,     0,     0,  1215,     0,  1544,    85,     0,   555,
       0,   555,     0,     0,   555,  1541,     0,     0,     0,     0,
     555,     0,   555,     0,  1216,     0,     0,     0,  1544,  1543,
       0,     0,     0,  2840,     0,   555,     0,     0,     0,     0,
     555,     0,     0,     0,   555,   555,   555,   555,     0,   555,
     555, -2052,     0,     0,     0,     0,  1546,  1762,  1644,  1645,
    1646,  1647,  1648,  1649,     0,     0,     0,     0,  1546,     0,
    1217,     0,     0,     0,     0,     0,     0,     0,  3162,  1547,
       0,  1815,     0,     0,  1548,     0,     0,     0,     0,     0,
       0,  1547,     0,     0,  2322,     0,  1548,     0,  1546,     0,
    2153,  1204,  2156,  1420,  1420,  1546,     0,     0,     0,  1420,
    3196,     0,    85,  2165,     0,     0,     0,  1417,     0,     0,
       0,  1547,     0,     0,     0,     0,  1548,     0,  1547,     0,
       0,  1543,     0,  1548,     0,     0,     0,     0,     0,    85,
       0,  1546,    85,  3213,     0,  1546,     0,     0,     0,   554,
       0,     0,  2202,  1546,     0,     0,   554,     0,     0,     0,
       0,     0,     0,     0,  1547,     0,  1218,     0,  1547,  1548,
       0,     0,     0,  1548,     0,  1546,  1547,     0,     0,     0,
       0,  1548,     0,     0,     0,     0,     0,     0,     0,     0,
    3241,     0,  1595,     0,     0,     0,     0,     0,  1547,   555,
       0,     0,     0,  1548,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,  1219,     0,   554,     0,     0,
       0,     0,     0,     0,     0,  1220,     0,     0,  1111,  1111,
       0,  2444,     0,     0,     0,     0,  1984,  1221,     0,     0,
       0,     0,     0,   554,     0,  2307,  2308,  2310,  2311,     0,
    2313,     0,     0,     0,     0,     0,     0,     0,  1205,     0,
       0,     0,     0,     0,   554,   554,     0,   807,     0,  1222,
       0,     0,     0,     0,     0,     0,     0,  1541,     0,     0,
       0,   867,     0,   853,     0,  1751,     0,     0,     0,   554,
       0,     0,     0,     0,     0,  1242,     0,     0,     0,  1286,
    1291,     0,     0,     0,   853,     0,     0,  3314,     0,     0,
       0,     0,     0,     0,     0,  2254,     0,   555,     0,  1207,
       0,  1224,     0,     0,     0,     0,  1598,  1417,     0,     0,
       0,   554,  1004,     0,  1004,     0,  1544,     0,     0,     0,
       0,     0,     0,     0,     0,  2144,  1225,     0,     0,     0,
       0,  2255,  1341,     0,     0,     0,     0,     0,     0,  3094,
       0,     0,     0,     0,     0,  1227,   853,     0,     0,     0,
       0,  1366,     0,     0,     0,     0,     0,  1411,     0,     0,
    1413,  2430,     0,  1424,  1427,  1432,  1435,     0,     0,     0,
       0,     0,  1420,  1543,     0,     0,     0,   853,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1209,     0,     0,  1476,  1286,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3213,     0,     0,     0,
       0,     0,     0,     0,    85,     0,  1560,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3314,     0,
     555,     0,     0,     0,     0,  1576,  2576,     0,     0,     0,
       0,  1544,     0,     0,     0,     0,  1586,  1587,  1588,     0,
    1592,  1596,  1595,  1546,     0,  1751,     0,     0,  1615,     0,
       0,  1616,     0,     0,     0,  1617,  1618,     0,   954,   954,
       0,  3314,   954,     0,     0,     0,  1547,     0,     0,     0,
    1950,  1548,     0,     0,  1658,     0,     0,     0,     0,     0,
       0,   554,     0,     0,     0,     0,  1626,     0,  1544,     0,
       0,  1476,  1476, -2052,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1751,     0,     0,     0,     0,     0,     0,
    3314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1628,     0,     0,     0,     0,     0,     0,  1698,     0,     0,
       0,  1714,  1719,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1111,  1111,     0,   555,     0,   954,     0,     0,
       0,     0,     0,     0,     0,     0,  1420,  1420,  1420,  1420,
    1420,  1420,  2168,     0,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,     0,     0,     0,     0,  1546,     0,
       0,     0,     0,     0, -1799,  2515,     0,     0,    85,    85,
       0,  1544,     0,     0,     0,     0,     0,     0,  1286,     0,
       0,  1547,     0,     0,     0,     0,  1548,  1286,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2052,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1286,     0,     0, -2052,  1546,     0,     0,     0, -2052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   555,     0,     0,   555,     0,  1547,     0,
       0,     0,  1980,  1548,     0,    85,     0,    85,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2052,     0,     0,
       0,     0,     0,     0, -1799,     0,  1544,     0,     0,  2651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2665,  2666,  2668,     0,     0,    85,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2679,  1897,     0,
    2682,     0,     0,    85,     0,     0,  1615,    85,  2689,  1616,
       0, -1799,  1637,  1617,  1618,     0,     0,     0,  1546,     0,
       0,     0,     0,     0,  1420,  1420, -1799,     0,     0,     0,
       0, -1799,     0,     0,     0,     0, -1799,     0,     0,     0,
       0,  1547,     0,  1544,  1626, -1799,  1548,     0,     0,     0,
   -1799, -2052,     0,     0,     0,     0,     0,     0,  1432,     0,
    1432,  1432,     0,     0,     0,     0,   555,     0,     0,     0,
     555,   555,   555,  1111,  1111,     0,     0,     0,  1628,     0,
       0,     0, -1799,     0,     0,     0,     0,     0,     0,  1111,
       0,     0,     0,     0,  2726,  2727,  2728,     0,     0,   555,
       0,     0, -1799,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2052,  1546,   555,   555,   555,   555,   555,   555,
     555,   555,   555,   555,     0,     0,     0,     0,     0,     0,
       0,    85,     0,     0,     0,     0,  1547,     0,  1420,     0,
       0,  1548,     0,  2793,     0,     0,     0,     0,     0,     0,
    1544, -1799,     0,     0, -1799,     0,     0,    85,     0,     0,
   -1799,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2052,     0,     0,     0,     0,
       0,     0,     0,     0,  1544,     0,     0,     0,     0,     0,
    1546,     0, -2052,     0,  2030,     0,     0, -2052,     0,     0,
   -1799,     0,  2033,     0,     0,     0,     0,     0,  1980,     0,
       0,     0,     0,  1547,     0,     0,     0,     0,  1548, -2052,
       0,     0,     0, -1799,     0,     0,  1644,  1645,  1646,  1647,
    1648,  1649,  2836,     0,  2444, -2052,     0,     0,     0,     0,
       0,  2079,     0,     0,     0,     0,     0,  2083,  2084,  2085,
    2086,  2087,  2088,  2089,  2090,     0,     0,     0,     0,  2099,
    2100,     0,     0,  1544,  2111,     0,     0,     0,  2114,     0,
       0,  2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,
       0,   855,  2131,     0,     0,     0,     0,     0,     0,  1111,
    1637,  1286,     0,     0,     0,     0,     0,  1546,     0,     0,
       0,     0,     0,     0,     0,     0,  1544,     0,     0, -1799,
    2157,     0,     0,     0,     0,     0,     0,     0,     0, -1799,
    1547,     0,     0,  2980,     0,  1548,     0,     0,     0,     0,
       0,  1546,     0,     0,     0,     0,     0,     0, -1799,     0,
   -1799, -1799,     0,     0,     0,  1587,  1588,     0,     0,     0,
       0,     0,     0,     0,  1547,     0,     0,     0,     0,  1548,
     555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1799,     0,     0,
   -1799, -1799, -1799,     0,     0,  3016,  3017,  3018,  3019,     0,
   -2052,     0,     0,     0,     0,     0,     0,     0,     0,  1615,
       0,     0,  1616,     0,     0,     0,  1617,  1618,  1544,     0,
    1546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2279,  1547,     0,     0,  1286,  1626,  1548,  2289,
    2290,     0,     0,     0, -2052,     0,  1420,  1420,     0,     0,
       0,     0,     0,  1546,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,     0,  1615,  1547,  1286,  1616,     0,
       0,  1548,  1617,  1618,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2052,     0,  1341,
    2354,     0,     0,     0,  1644,  1645,  1646,  1647,  1648,  1649,
       0,     0,     0,  1626,     0,     0,     0,     0,     0,     0,
   -2052,     0,     0,     0,     0,     0,     0,     0,     0,  2378,
    2379,     0,  2380,  3221,     0,     0,  2796,  3132,     0,     0,
    2444,  1615,     0,     0,  1616,     0,     0,  1628,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,  1546,     0,     0,     0,     0,
       0,  2406,  2407,     0,     0,  2157,     0,     0, -2052,  1624,
       0,     0,     0,     0,     0,     0,     0,     0,  1547,  1626,
       0,     0,     0,  1548,     0, -2052,  1627,     0,     0,     0,
   -2052,     0,     0,     0,  2434,     0,   555,     0,     0,  2439,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2797,  1628,  1369,     0,   818,     0,  1476,     0,
    1286,     0,     0,     0,     0,     0,     0,   555, -2052,  1421,
       0,     0,     0,     0,     0,     0,     0,  1420,     0,     0,
       0,     0,     0,     0, -2052,     0,     0,     0,   555,   555,
       0,     0,     0,     0,     0,     0,     0,  2473,     0,     0,
       0, -2052,  1420,     0,     0,     0, -2052,     0,     0,     0,
    1544,     0,     0,   555,     0,     0,     0,     0,     0,  1370,
    1371,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2492,     0,     0,     0,
       0,  2495,  2496,     0, -2052,     0,     0,     0,     0,     0,
    1629,     0,     0,     0,     0,   555,     0,     0,     0,     0,
    1372,  1373,     0,     0,  1374,  1375,     0,  1630,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2517,     0,     0,  2520,  1652,
    2522,     0,     0,     0,     0,  1632,  1633,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,  2526,     0,     0,     0,
    1634,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2052,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1652,     0,  1420,     0,     0,     0,
    1376,  1377,     0,     0,     0,     0,  1698,     0,  1635,     0,
       0,  1636,     0,     0,     0,     0,     0,  1546,     0,     0,
       0,     0,     0,  1719,  2129,  1637,     0,     0,  1638,  1421,
       0,     0,     0,     0,     0,     0,     0,  3287,     0,     0,
    1547,     0,  1111,     0,     0,  1548,     0,     0,     0,     0,
       0,  2580,     0,     0,     0,     0,     0,   -46,  3312, -2052,
       0,     0,     0,     0,  1378,  1379,  1380,  1381,  1382,  1383,
    1384,  1385,     0,     0,  1386,  1387,     0,     0,     0,     1,
    1652,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -2052,     3,     4,     0,     0,     0,     0,  1644,  1645,  1646,
    1647,  1648,  1649,     0,     5,   555,     0,     0,  1588,     6,
       0,     0,     0,     0,  1286,     0,     0,     0,     7,     0,
    3351,     0,     0,     0,  1652,  1639,     0,     0,     0,  1652,
       0,     0,     8,     0,     0,     0,  1420,     0,     0,     0,
       0,     9,     0,    10,     0,     0,     0,     0,     0,     0,
       0,  3377,     0,     0,     0,    11,     0,    12,     0,     0,
       0,     0,     0,     0,     0,     0, -2052,     0,    13,     0,
    2685,     0,     0,  1644,  1645,  1646,  1647,  1648,  1649,  1652,
       0,     0,     0,    14,    15,    16,     0,  1388,  1389,     0,
       0,     0,     0,     0,    17,     0,     0,     0,     0,     0,
      18,     0,     0,     0,  1652,     0,     0,     0,    19,     0,
      20,    21,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    22,     0,     0,     0,    23,
       0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,  1652,
       0,  1652,  1900,  1421,  1421,    24,  1925,     0,     0,  1421,
       0,     0,  1652,     0,     0,  1652,     0,     0,     0,     0,
    1652,    25,  1614,  1652,     0,     0,     0,  1615,     0,     0,
    1616,     0,  1390,  1391,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,     0,     0,     0,     0,     0,     0,    26,     0,     0,
       0,     0,     0,     0,  2765,  1624,  1392,  1393,     0,  1625,
    2767,  2033,     0,     0,  1652,  1626,     0,     0,     0,     0,
       0,  2773,  1627,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2782,     0,     0,  2785,     0,  2787,     0,     0,
       0,     0,     0,     0,     0,  2791,  1420,     0,     0,  1628,
       0,     0,     0,  2798,  2799,     0,     0,     0,     0,     0,
    2806,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,    28,    29,  2815,     0,     0,     0,     0,
      30,     0,     0,    31,     0,  2830,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,     0,     0,  1111,     0,     0,     0,     0,
       0,     0,    32,     0,  1652,     0,     0,     0,     0,     0,
       0,    33,     0,     0,  1652,  1652,  1652,     0,     0,     0,
    1652,     0,     0,     0,  1652,     0,     0,    34,     0,     0,
       0,     0,  1615,     0,    35,  1616,  1629,     0,    36,  1617,
    1618,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,  2279,  1630,  2279,     0,     0,     0,  1631,     0,
      38,     0,     0,     0,    39,     0,     0,     0,     0,     0,
    1626,     0,     0,     0,     0,     0,     0, -2052,     0,     0,
       0,  1632,  1633,     0,    40,     0,  1652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1634,    41,     0,     0,
      42,     0,     0,    43,  1628,     0,     0,     0,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,  1652,     0,     0,     0,
       0,     0,     0,     0,  1635,     0,     0,  1636,     0,     0,
       0,     0,  1652,     0,     0,     0,     0,  1652,    46,  3032,
    3033,  1637,     0,     0,  1638,     0,     0,     0,     0,     0,
       0,     0,    47,     0,  1925,   -46,     0,     0,     0,  3072,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3056,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3060,     0,
       0, -2052,     0,  3062,  3063,     0,     0,     0,  3064,     0,
       0,     0,     0,  3067,     0,     0,  3070,  3071, -2052,     0,
       0,  2279,  1286, -2052,     0,  3079,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1111,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2052,     0,     0,  1370,  1371,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1372,  1373,  3139,     0,  1374,
    1375,     0,     0,     0,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,  1652,     0,     0,     0,     0,
       0,     0,     0,  1925,  1925,     0,  1421,  1421,  1421,  1421,
    1421,  1421,     0,     0,  1421,  1421,  1421,  1421,  1421,  1421,
    1421,  1421,  1421,  1421,  1925,     0,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,
    1649,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1376,  1377,     0,     0,     0,
       0,     0,  1615,     0,     0,  1616,  3172,     0,     0,  1617,
    1618,  1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2052,     0,     0,     0,
    1624,     0,     0,     0,  2777,     0,     0,     0,     0,     0,
    1626,     0,     0,     0,     0,     0,     0,  1627,     0,     0,
       0,     0,     0,     0,  1596,     0,     0,     0,     0,  1378,
    1379,  1380,  1381,  1382,  1383,  1384,  1385,     0,  1652,  1386,
    1387,  1652,     0,     0,  1628,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2492,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3233,  3234,
       0,     0,  3235,     0,  1588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,  1652,  1652,  1652,  1652,  1652,  1652,  1652,  1652,  3253,
       0,     0,     0, -2052,  1421,  1421,     0,  1652,  1652,     0,
    1644,  1645,  1646,  1647,  1648,  1649,     0,     0,     0,  1652,
       0,     0,  1652,  3265,     0,     0,     0,     0,     0,     0,
    1652,  1652,  1652,  1652,  1652,  1652,  1652,  1652,  1652,  1652,
       0,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1388,  1389,     0,     0,     0,     0,  1630,     0,
       0,  1615,     0,  1631,  1616,  1652,     0,     0,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1632,  1633,     0,  1624,
       0,     0,     0,  3310,     0,     0,     0,     0,     0,  1626,
       0,  1634,     0,     0,     0,     0,  1627,     0,     0,     0,
       0,     0,  3032,     0,     0,     0,  3328,     0,  1421,     0,
    1111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3337,     0,  1628,     0,     0,  2279,     0,  2279,  1635,
       0,     0,  1636,     0,     0,     0,  1111,  1390,  1391,     0,
       0,     0,     0,     0,     0,     0,  1637,     0,     0,  1638,
       0,     0,     0,     0,  3362,     0,     0,     0,     0,     0,
       0,  1392,  1393,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,  1999,     0,     0,     0,     0,     0,  1652,  1652,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3388,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3032,     0,     0,     0,     0,     0,     0,
    1629,     0,     0,     0,     0,  1111,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,  1631,     0,     0,     0,  1639,     0,     0,     0,
       0,     0,  1652,     0,     0,     0,     0,  3431,     0,     0,
       0,     0,     0,     0,     0,  1632,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1652,  1652,  1652,     0,
    1634,  1925,  1925,  1925,  1925,  1925,  1925,     0,     0,     0,
    1925,  1925,  1925,  1925,  1925,  1925,  1925,  1925,  1925,  1925,
       0,     0,     0,  1615,  1652,  1652,  1616,     0,     0,     0,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,     0,  1635,     0,
       0,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1624,  1652,     0,     0,  1637,     0,  1652,  1638,     0,
       0,  1626,     0,     0,     0,  3485,  3485,  3485,  1627,     0,
       0,     0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,
    2070,  1652,  3485,     0,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,  1652,  1652,     0,     0,     0,     0,     0,
       0,  1925,  1925,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3485,     0,  1652,  1421,  1421,  1652,     0,
    1652,     0,     0,     0,  1652,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1615,     0,     0,
    1616,     0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,  1624,     0,     0,  1652,     0,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,  1630,
       0,     0,  1627,     0,  1631,  1615,     0,     0,  1616,     0,
       0,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,     0,
       0,     0,     0,     0,     0,     0,     0,  1632,  1633,  1628,
       0,     0,     0,  1624,     0,     0,     0,     0,     0,     0,
       0,     0,  1634,  1626,     0,     0,     0,     0,     0,     0,
    1627,     0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,  2070,
       0,     0,     0,     0,     0,     0,     0,  1628,     0,     0,
    1635,     0,     0,  1636,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,  1637,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1615,     0,     0,  1616,     0,     0,  1421,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1624,
       0,     0,     0,  1630,     0,     0,     0,     0,  1631,  1626,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1632,  1633,  1652,  1629,  1652,     0,     0,     0,     0,
       0,  1652,     0,  1628,     0,     0,  1634,     0,     0,     0,
    1652,  1630,     0,  1652,     0,  1652,  1631,  1639,     0,  1652,
       0,     0,  1925,  1925,     0,     0,  1652,  1652,     0,     0,
       0,     0,     0,     0,  1652,     0,     0,     0,     0,  1632,
    1633,     0,     0,  1652,  1635,     0,     0,  1636,     0,     0,
       0,     0,     0,     0,  1634,     0,  1370,  1371,  1652,     0,
       0,  1637,     0,     0,  1638,     0,     0,     0,  1615,     0,
       0,  1616,     0,     0,     0,  1617,  1618,     0,     0,  1621,
    1622,  1623,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1635,     0,     0,  1636,  1421,  1372,  1373,     0,
    1629,  1374,  1375,     0,     0,     0,  1626,     0,     0,  1637,
       0,     0,  1638,  1627,     0,     0,     0,  1630,     0,     0,
       0,     0,  1631,     0,  1640,     0,     0,  1641,  1642,  1643,
       0,  1644,  1645,  1646,  1647,  1648,  1649,     0,     0,     0,
    1628,  2377,     0,     0,     0,  1632,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1634,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1376,  1377,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,     0,
       0,  1636,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,  1637,     0,     0,  1638,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1925,  1421,  1629,     0,     0,
       0,  1378,  1379,  1380,  1381,  1382,  1383,  1384,  1385,     0,
       0,  1386,  1387,     0,  1630,     0,     0,     0,     0,  1631,
    1652,  1652,     0,     0,     0,     0,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,
    1649,     0,  1632,  1633,  1652,  2477,     0,     0,  1652,     0,
    1652,  1652,  1652,     0,     0,  1652,     0,  1634,  1652,  1652,
       0,     0,     0,     0,     0,     0,     0,  1652,     0,     0,
       0,     0,     0,     0,     0,  1639,  1640,     0,     0,  1641,
    1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,     0,
       0,     0,     0,  2501,     0,  1635,     0,     0,  1636,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,  1637,     0,  1925,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1388,  1389,     0,  1652,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,  1641,  1642,  1643,  1925,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,  2707,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1639,     0,     0,     0,     0,     0,     0,  1390,
    1391,  1652,  1652,  1652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1652,     0,  1392,  1393,     0,     0,     0,     0,     0,
       0,     0,     0,  1652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1652,     0,     0,  1640,
       0,     0,  1641,  1642,  1643,  1652,  1644,  1645,  1646,  1647,
    1648,  1649,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1652,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,  1652,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,  2632,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,  3236,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,    14,    15,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,    23,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
    1075,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      27,    28,    29,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    34,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    36,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,    38,     0,
     448,   449,    39,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,    41,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   802,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,    45,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,    46,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,  3211,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,    14,    15,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,    23,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,  1075,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    27,    28,    29,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    34,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    36,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
      38,     0,   448,   449,    39,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,    41,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   802,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,    45,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,    46,     0,
       0,     0,     0,  1087,  1088,  1089,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,    23,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    27,    28,    29,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    34,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,    39,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,    41,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     802,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,    45,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
      46,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,  1247,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,  1248,   126,   127,   128,     0,     0,     0,  1249,     0,
    1052,     0,     0,  1250,   130,   131,     0,   132,   133,   134,
    1251,   136,   137,   138,   139,  1053,  1252,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,  1253,     0,  1254,   164,   165,   166,   167,   168,
    1255,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,  1256,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,  1257,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,  1258,     0,  1259,   238,   239,  1260,  1261,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,  1262,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
    1263,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,  1264,  1265,   281,  1266,   283,   284,   285,
     286,   287,   288,     0,     0,   289,  1267,   291,  1268,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1269,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
    1270,  1074,   325,   326,   327,   328,  1075,   329,   330,  1271,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,  1272,   348,  1273,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,  1274,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  1275,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,  1276,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,  1277,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,  1278,   446,   798,     0,     0,   448,   449,     0,   450,
    1279,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
    1280,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,  1281,   487,  1282,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  1088,  1089,
       0,     0,     0,     0,  1090,     0,  1091,  1283,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,     0,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,    14,
      15,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,    23,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    27,    28,
      29,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    34,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    36,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,    38,     0,   448,   449,
      39,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,    41,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   802,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
      45,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1090,     0,  1091,     0,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,  1428,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,  1429,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,  1430,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
    1075,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,  1431,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,     0,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
    1247,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,  1249,     0,  1052,     0,     0,  1250,
     130,   131,     0,   132,   133,   134,  1251,   136,   137,   138,
     139,  1053,  1252,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,  1253,     0,
    1254,   164,   165,   166,   167,   168,  1255,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,  1256,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,  1258,     0,
    1259,   238,   239,  1260,  1261,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,  1262,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,  1263,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,  1264,
    1265,   281,  1266,   283,   284,   285,   286,   287,   288,     0,
       0,   289,  1267,   291,  1268,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1269,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,  1270,  1074,   325,   326,
     327,   328,  1075,   329,   330,  1271,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,  1272,   348,  1273,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,  1274,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,  1275,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,  1276,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,  1277,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,  1278,   446,   798,
       0,     0,   448,   449,     0,   450,  1279,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,  1280,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
    2284,   487,  1282,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,     0,     0,
       0,     0,     0,  1087,  1088,  1089,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,  1247,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,  1249,     0,  1052,     0,
       0,  1250,   130,   131,     0,   132,   133,   134,  1251,   136,
     137,   138,   139,  1053,  1252,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
    1253,     0,  1254,   164,   165,   166,   167,   168,  1255,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
    1256,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
    1258,     0,  1259,   238,   239,  1260,  1261,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,  1262,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,  1263,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,  1264,  1265,   281,  1266,   283,   284,   285,   286,   287,
     288,     0,     0,   289,  1267,   291,  1268,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1269,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,  1270,  1074,
     325,   326,   327,   328,  1075,   329,   330,  1271,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,  1272,
     348,  1273,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,  1274,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,  1275,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
    1276,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,  1277,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,  1278,
     446,   798,     0,     0,   448,   449,     0,   450,  1279,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,  1280,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,  1282,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,  2338,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125, -1113,   126,   127,   128,     0,     0,     0,     0, -1113,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,  1059,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,  1075,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432, -1113,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  1088,  1089,
       0,     0,     0,     0,  1090,     0,  1091,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,  1247,  1046,   818,  1047,
    1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
    1249,     0,  1052,     0,     0,  1250,   130,   131,     0,   132,
     133,   134,  1251,   136,   137,   138,   139,  1053,  1252,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,  1253,     0,  1254,   164,   165,   166,
     167,   168,  1255,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,  1256,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
    1062,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,  1258,     0,  1259,   238,   239,  1260,
    1261,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,  1262,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,  1263,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,  1264,  1265,   281,  1266,   283,
     284,   285,   286,   287,   288,     0,     0,   289,  1267,   291,
    1268,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1269,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,  1270,  1074,   325,   326,   327,   328,  1075,   329,
     330,  1271,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,  1078,   342,   343,     0,     0,
     344,   345,   346,  1272,   348,  1273,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,  1274,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,  1275,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,  1276,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,  1277,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,  1278,   446,   798,     0,     0,   448,   449,
       0,   450,  1279,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,  1280,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,  1282,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,  1086,     0,     0,     0,     0,     0,     0,  1087,
    1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,  3076,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,  1247,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,  1249,     0,  1052,     0,     0,  1250,   130,   131,
       0,   132,   133,   134,  1251,   136,   137,   138,   139,  1053,
    1252,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,  1253,     0,  1254,   164,
     165,   166,   167,   168,  1255,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,  1256,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,  1258,     0,  1259,   238,
     239,  1260,  1261,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,  1262,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,  1263,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,  1264,  1265,   281,
    1266,   283,   284,   285,   286,   287,   288,     0,     0,   289,
    1267,   291,  1268,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1269,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,  1270,  1074,   325,   326,   327,   328,
    1075,   329,   330,  1271,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,  1272,   348,  1273,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,  1274,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,  1275,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,  1276,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,  1277,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1278,   446,   798,     0,     0,
     448,   449,     0,   450,  1279,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,  1280,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
    1282,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,     0,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,  1695,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,  1075,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,     0,     0,
       0,     0,     0,  1087,  1088,  1089,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  1710,   818,  1047,  1048,  1049,  1711,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  1712,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,  1059,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,  1429,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,  1075,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  1088,  1089,
       0,     0,     0,     0,  1090,     0,  1091,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,  1059,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
    1062,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,  1075,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,  1078,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,  1086,     0,     0,     0,     0,     0,     0,  1087,
    1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,  2058,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
    1075,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,  2684,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,     0,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,  1075,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,  2805,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,     0,     0,
       0,     0,     0,  1087,  1088,  1089,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  3020,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,  3021,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  3022,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,  3023,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  3024,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,  1059,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,  1075,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,  3171,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  1088,  1089,
       0,     0,     0,     0,  1090,     0,  1091,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,  1059,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
    1062,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,  1075,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,  1078,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
    3309,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,  1086,     0,     0,     0,     0,     0,     0,  1087,
    1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,     0,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
    1075,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,     0,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,  1075,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,     0,     0,
       0,     0,     0,  1715,  1716,  1089,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  2195,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,  1059,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,  1075,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  2278,  1089,
       0,     0,     0,     0,  1090,     0,  1091,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,  1059,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
    1062,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,  1075,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,  1078,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,  1086,     0,     0,     0,     0,     0,     0,  1087,
    1088,  1089,     0,     0,     0,     0,  1090,     0,  2491,     0,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
    1075,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1086,     0,     0,     0,     0,     0,
       0,  1087,  3074,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
    3021,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  3022,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,  1075,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,  3023,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1086,     0,     0,     0,
       0,     0,     0,  1087,  1088,  1089,     0,     0,     0,     0,
    1090,     0,  3024,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,  3482,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,  3483,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,  3484,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,  1059,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,  3483,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,  1062,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,  1075,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,  1078,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,  1080,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,  3484,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
    1086,     0,     0,     0,     0,     0,     0,  1087,  1088,  1089,
       0,     0,     0,     0,  1090,     0,  1091,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,  1078,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,  1080,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,     0,     0,     0,     0,     0,     0,     0,  1415,
    1416,     0,     0,     0,     0,     0,  1090,     0,  1091,     0,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138, -2052,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,  1059,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,  3483,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,  1062,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240, -2052,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254, -2052,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291, -2052,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
       0,   329,   330,     0,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,  1078,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0, -2052,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,  3484,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517, -2052,     0,     0,     0,     0,     0,
       0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,     0,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,     0,   329,   330,   331,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  2181,  2182,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,     0,     0,     0,     0,
       0,     0,     0,  2183,  2184,     0,     0,     0,     0,     0,
    1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,     0,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,     0,     0,
       0,     0,     0,     0,     0,  1415,  1416,     0,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,     0,
    1050,  1051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1052,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1053,   141,  1054,  1055,     0,
     144,   145,   146,   147,   148,   149,  1056,   788,   150,   151,
     152,   153,  1057,  1058,   156,     0,   157,   158,   159,   160,
     789,     0,   790,     0,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1060,   191,   192,  1061,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1064,   222,   223,   224,   225,   226,   227,
     791,  1065,   229,     0,   230,   231,  1066,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,  3041,  1067,  1068,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
    -720,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1069,  1070,     0,
    1071,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1072,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1073,
     323,  1074,   325,   326,   327,   328,     0,   329,   330,   331,
     332,  1076,   793,   334,  1077,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   795,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   796,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1079,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,  1081,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   798,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,  1082,  1083,
       0,     0,   460,   461,   799,   463,   800,  1084,   465,   466,
     801,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,  1085,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1090,     0,  2734,     0,     0,     0,
       0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,
    1048,     0,  1050,  1051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1052,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1053,   141,  1054,
    1055,     0,   144,   145,   146,   147,   148,   149,  1056,   788,
     150,   151,   152,   153,  1057,  1058,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1060,   191,   192,  1061,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1064,   222,   223,   224,   225,
     226,   227,   791,  1065,   229,     0,   230,   231,  1066,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1067,  1068,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1069,
    1070,     0,  1071,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1072,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1073,   323,  1074,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1076,   793,   334,  1077,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1079,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,  1081,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
    1082,  1083,     0,     0,   460,   461,   799,   463,   800,  1084,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,  1085,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1090,     0,  2734,     0,
       0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,
     818,  1047,  1048,     0,  1050,  1051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1052,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1053,
     141,  1054,  1055,     0,   144,   145,   146,   147,   148,   149,
    1056,   788,   150,   151,   152,   153,  1057,  1058,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1060,   191,   192,
    1061,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1064,   222,   223,
     224,   225,   226,   227,   791,  1065,   229,     0,   230,   231,
    1066,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1067,  1068,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1069,  1070,     0,  1071,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1072,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1073,   323,  1074,   325,   326,   327,   328,
       0,   329,   330,   331,   332,  1076,   793,   334,  1077,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1079,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,  1080,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
    1081,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,  1082,  1083,     0,     0,   460,   461,   799,   463,
     800,  1084,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,  1085,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1090,     0,
    1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,
     117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1052,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
       0,  1053,   141,  1054,  1055,     0,   144,   145,   146,   147,
     148,   149,  1056,   788,   150,   151,   152,   153,  1057,  1058,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
    1059,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1060,
     191,   192,  1061,   194,  1062,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1063,   209,   210,     0,   211,   212,   213,
       0,   214,     0,   216,     0,   217,   218,   219,   220,  1064,
     222,   223,   224,   225,   226,   227,   791,  1065,   229,     0,
     230,   231,  1066,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,     0,   242,     0,   243,     0,  1067,
    1068,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1069,  1070,     0,  1071,     0,   278,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1072,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1073,   323,  1074,   325,   326,
     327,   328,     0,   329,   330,     0,   332,  1076,   793,   334,
    1077,   336,   337,   338,     0,   339,   340,     0,     0,  1078,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1079,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,  1080,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,  1081,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,  1082,  1083,     0,     0,   460,   461,
     799,   463,   800,  1084,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,  1085,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,     0,     0,     0,     0,
       0,     0,     0,  1087,  1088,  1089,     0,   967,  1346,   818,
    1090,     0,  1091,  1050,     0,     0,     0,  1092,  1093,     0,
    1094,  1095,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,   562,     0,     0,     0,     0,   567,   130,   131,     0,
     132,   133,   134,   569,   136,   137,   138,   570,   571,   572,
     573,   574,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   578,   579,   156,     0,   157,
     158,   159,   160,   581,     0,   583,     0,   585,   164,   165,
     166,   167,   168,   586,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   589,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   591,   191,   192,   592,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   602,   222,   223,   224,
     225,   226,   227,   603,  1347,   229,     0,   230,   231,   606,
     233,     0,   234,     0,   235,   609,     0,   611,   238,   239,
     612,   613,   242,     0,   243,     0,   616,   617,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   619,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   622,   623,   270,   271,   272,   273,   274,
     624,   625,     0,   627,     0,   278,   629,   630,   281,   631,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   634,
     291,   635,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   637,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   638,   639,   640,   325,   326,   327,   641,     0,
     329,   330,   643,   332,     0,   645,   334,   646,   336,   337,
     338,     0,   339,   340,  1348,     0,   341,   342,   343,     0,
       0,   344,   345,   652,   653,   348,   654,   655,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   660,   661,   366,   367,   662,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   665,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   668,   402,   403,   404,
     669,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,   671,   419,   420,   421,   422,
     423,   424,   672,   426,   427,     0,   674,   429,   430,   675,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   677,   446,   678,     0,     0,   448,
     449,     0,   450,   682,   452,   453,   454,   455,   456,     0,
     457,   684,   685,     0,     0,   460,   461,   688,   463,   689,
    1349,   465,   466,   691,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   696,   697,     0,   487,   699,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   704,   705,
     706,   707,   708,   709,   710,   711,   712,   713,   714,   514,
     515,   516,   517,     0,     0,     0,     0,   525,     0,     0,
    1350,  1351,  2356,     0,     0,     0,     0,  2357,     0,  2358,
       0,     0,     0,     0,     0,  1093,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,  1003,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,  -527,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,  -527,   230,   231,   232,
     233,  -527,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  -527,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,  -527,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,  -527,   339,   340,     0,     0,   341,   342,   343,     0,
    -527,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,  -527,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1163,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   967,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2443,  3225,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       3,     4,     0,   562,     0,     0,     0,     0,   567,   130,
     131,     0,   132,   133,   134,   569,   136,   137,   138,   570,
     571,   572,   573,   574,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   578,   579,   156,
       0,   157,   158,   159,   160,   581,     0,   583,     0,   585,
     164,   165,   166,   167,   168,   586,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   589,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   591,   191,
     192,   592,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,    14,    15,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   602,   222,
     223,   224,   225,   226,   227,   603,     0,   229,     0,   230,
     231,   606,   233,     0,   234,     0,   235,   609,    23,   611,
     238,   239,   612,   613,   242,     0,   243,     0,   616,   617,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     619,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   622,   623,   270,   271,   272,
     273,   274,   624,   625,     0,   627,     0,   278,   629,   630,
     281,   631,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   634,   291,   635,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   637,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   638,   639,   640,   325,   326,   327,
     641,     0,   329,   330,   643,   332,     0,   645,   334,   646,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   652,   653,   348,   654,   655,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    27,    28,    29,     0,   362,   363,   660,   661,   366,
     367,   662,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   665,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   668,   402,
     403,   404,   669,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    34,   671,   419,   420,
     421,   422,   423,   424,   672,   426,   427,    36,   674,   429,
     430,   675,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   677,   446,   678,    38,
       0,   448,   449,    39,   450,   682,   452,   453,   454,   455,
     456,     0,   457,   684,   685,     0,     0,   460,   461,   688,
     463,   689,     0,   465,   466,   691,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,    41,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   968,   697,     0,
     487,   699,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,    45,   497,   498,   499,   500,   501,   502,
     704,   705,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   514,   515,   516,   517,     0,   117,    46,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,   788,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,    14,
      15,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   791,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,   236,    23,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   792,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,     0,   793,   334,   335,   336,   337,   338,
       0,   339,   340,     0,   794,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    27,    28,
      29,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     797,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    34,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    36,   428,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,    38,     0,   448,   449,
      39,   450,   451,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   799,   463,   800,     0,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,    41,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   802,   486,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
      45,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,     0,   117,    46,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   803,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,   788,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   791,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   792,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
       0,   793,   334,   335,   336,   337,   338,     0,   339,   340,
       0,   794,   341,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   797,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   799,   463,   800,     0,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   802,   486,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,   788,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   791,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,     0,   793,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   797,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   799,
     463,   800,     0,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,   788,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   791,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,     0,   793,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   799,   463,   800,     0,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3313,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,    14,    15,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
      23,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    27,    28,    29,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    34,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    36,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,    38,     0,   448,   449,    39,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,    41,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   802,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,    45,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,    46,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    47,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   889,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,    23,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    27,
      28,    29,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    34,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,    39,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   890,   459,     0,     0,   891,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,    41,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   802,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,    45,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,    23,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    27,    28,    29,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      34,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,    39,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
      41,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   802,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,    45,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,     0,
     525,    46,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   988,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1467,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2207,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2443,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2575,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3220,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2064,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2167,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,     0,  2900,  1346,   818,     0,     0,
    2040,  1050,     0,     0,     0,     0,     0,  2041,  2042,     0,
    3081,  2043,  2044,  2045,   118,   119,   120,   121,   122,   123,
     124,   125,   558,   126,   127,   128,   559,   560,   561,  2901,
     563,   564,   565,   566,  2902,   130,   131,   568,   132,   133,
     134,  2903,   136,   137,   138,     0,  1484,  2904,  1486,  1487,
     575,   144,   145,   146,   147,   148,   149,   576,   577,   150,
     151,   152,   153,  1488,  1489,   156,   580,   157,   158,   159,
     160,     0,   582,  2905,   584,  2906,   164,   165,   166,   167,
     168,  2907,   170,   171,   172,   587,   173,   174,   175,   176,
     177,   178,   588,  2908,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1494,   191,   192,  1495,   194,   593,
     195,   594,   196,   197,   198,   199,   200,   201,   595,   596,
     202,   203,   204,   205,   597,   598,   206,   207,  1063,   209,
     210,   599,   211,   212,   213,   600,   214,   215,   216,   601,
     217,   218,   219,   220,     0,   222,   223,   224,   225,   226,
     227,     0,   604,   229,   605,   230,   231,  1496,   233,   607,
     234,   608,   235,  2909,   610,  2910,   238,   239,  2911,  2912,
     242,   614,   243,   615,     0,     0,   246,   247,   618,   248,
     249,   250,   251,   252,   253,   254,  2913,   256,   257,   258,
     259,   620,   260,   261,   262,   263,   264,   265,   266,   621,
     267,  2914,     0,   270,   271,   272,   273,   274,  1502,  1503,
     626,  1504,   628,   278,  2915,  2916,   281,  2917,   283,   284,
     285,   286,   287,   288,   632,   633,   289,  2918,   291,  2919,
     636,   293,   294,   295,   296,   297,   298,   299,   300,  2920,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1511,  2921,  1513,   325,   326,   327,  2922,   642,   329,   330,
    2923,   332,   644,     0,   334,  1515,   336,   337,   338,   647,
     339,   340,   648,   649,  2924,   342,   343,   650,   651,   344,
     345,     0,  2925,   348,  2926,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   656,   657,   658,
     659,   362,   363,     0,  2927,   366,   367,     0,   369,   370,
     371,   663,   372,   373,   374,   375,   376,   377,   664,   378,
     379,   380,  1519,   382,   383,   384,   385,   666,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   667,   399,   400,  2928,   402,   403,   404,  1521,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   670,  2929,   419,   420,   421,   422,   423,   424,
    2930,   426,   427,   673,  2931,   429,   430,  1525,   432,   676,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,  2932,   446,     0,   679,   680,   448,   449,   681,
     450,  2933,   452,   453,   454,   455,   456,   683,   457,  1528,
    1529,   686,   687,   460,   461,     0,   463,     0,   690,   465,
     466,  2934,   468,   469,   470,   471,   472,  2935,   693,   473,
     474,   475,   694,   476,   477,   478,   479,   695,   480,   481,
     482,   483,   484,     0,  1532,   698,   487,  2936,   489,   490,
     491,   492,   493,   494,   495,   700,   701,   496,   702,   703,
     497,   498,   499,   500,   501,   502,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,   515,   516,
     517,     0,   525,     0,  2046,  2047,  2048,  2040,  2937,  2938,
    2051,  2052,  2053,  2054,  2041,  2042,     0,     0,  2043,  2044,
    2045,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,     0,     0,
       0,  2046,  2047,  2048,     0,  2049,  2050,  2051,  2052,  2053,
    2054,  1615,     0,     0,  1616,     0,     0,     0,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1624,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1626,
    1615,     0,     0,  1616,     0,     0,  1627,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1624,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,  1626,  1615,
       0,     0,  1616,     0,     0,  1627,  1617,  1618,  1619,  1620,
    1621,  1622,  1623,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1624,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,  1626,     0,     0,
       0,     0,     0,     0,  1627,     0,  1615,     0,     0,  1616,
       0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,  1624,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1626,  1615,     0,     0,  1616,     0,
    1629,  1627,  1617,  1618,  1619,  1620,  1621,  1622,  1623,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,  1631,  1624,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,  1626,     0,     0,     0,     0,     0,  1629,
    1627,     0,     0,     0,     0,  1632,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1630,     0,     0,     0,
    1634,  1631,     0,     0,     0,     0,     0,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1629,     0,
       0,     0,     0,     0,  1632,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,  1635,  1634,
    1631,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,  1638,     0,
       0,     0,     0,  1632,  1633,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,  1634,     0,
    1636,     0,  1630,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,  1637,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,  1629,     0,     0,     0,     0,     0,
    1632,  1633,     0,     0,     0,     0,  1635,     0,     0,  1636,
       0,  1630,     0,     0,     0,  1634,  1631,     0,     0,     0,
       0,     0,     0,  1637,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1632,
    1633,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
       0,     0,     0,  1635,  1634,     0,  1636,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,  1635,     0,     0,  1636,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1637,
       0,     0,  1638,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,  2779,
    1639,     0,     0,     0,     0,     0,  1615,     0,     0,  1616,
       0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,  1624,     0,     0,     0,  2846,  1639,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     0,
       0,  1627,     0,     0,     0,     0,     0,     0,     0,     0,
    1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,  1646,
    1647,  1648,  1649,     0,     0,     0,     0,  3073,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1615,     0,     0,  1616,     0,     0,     0,  1617,
    1618,  1619,  1620,  1621,  1622,  1623,     0,  1640,     0,     0,
    1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,
    1624,     0,     0,     0,  3080,     0,     0,     0,     0,     0,
    1626,  1615,     0,     0,  1616,     0,     0,  1627,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,  1640,     0,     0,  1641,
    1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,  1624,
       0,     0,     0,  3240,  1628,     0,     0,     0,     0,  1626,
    1615,     0,     0,  1616,     0,  1629,  1627,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,     0,
       0,     0,  1630,     0,     0,     0,     0,  1631,  1624,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,  1626,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
    1632,  1633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1615,     0,     0,  1616,
       0,  1629,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,     0,     0,  1635,     0,     0,  1636,     0,  1630,     0,
       0,     0,     0,  1631,  1624,     0,     0,     0,     0,     0,
    1637,     0,     0,  1638,  1626,     0,     0,     0,     0,     0,
    1629,  1627,     0,     0,     0,     0,  1632,  1633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,  1634,  1631,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,     0,  1632,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1630,     0,     0,  1635,
    1634,  1631,  1636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1637,     0,     0,  1638,
       0,     0,     0,     0,  1632,  1633,     0,     0,     0,     0,
    1639,     0,     0,     0,     0,     0,     0,     0,  1635,  1634,
       0,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,  1638,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,     0,     0,
    1636,     0,  1630,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,  1637,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1632,  1633,     0,     0,     0,     0,  1639,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1640,     0,     0,
    1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,
       0,     0,     0,     0,  3262,  1639,     0,     0,     0,     0,
       0,     0,     0,  1635,  1615,     0,  1636,  1616,     0,     0,
       0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,     0,     0,
    1637,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,  1624,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,  1628,     0,     0,     0,
    3363,     0,     0,     0,     0,     0,     0,  1615,     0,     0,
    1616,     0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,     0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,
    1645,  1646,  1647,  1648,  1649,  1624,     0,     0,     0,  3420,
    1639,     0,     0,     0,     0,  1626,     0,  1615,     0,     0,
    1616,     0,  1627,     0,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,     0,  1624,     0,     0,  3442,  1628,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,     0,
       0,     0,  1627,  1629,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1630,     0,     0,     0,     0,  1631,     0,     0,     0,  1628,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1632,  1633,
       0,     0,     0,     0,     0,     0,     0,  1640,     0,     0,
    1641,  1642,  1643,  1634,  1644,  1645,  1646,  1647,  1648,  1649,
       0,     0,  1801,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1635,     0,  1630,  1636,     0,     0,     0,  1631,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,     0,
       0,  1638,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,  1632,  1633,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1630,     0,     0,  1634,     0,  1631,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1632,  1633,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1635,     0,  1634,  1636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1637,     0,     0,  1638,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,     0,     0,     0,  1635,     0,     0,  1636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1637,     0,     0,  1638,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1640,     0,     0,  1641,  1642,
    1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,     0,     0,
    2800,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,
    1649,     0,     0,  3230,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,
    1649,     0,     0,  3404,   118,   119,   120,   121,   122,   123,
     124,   125,   558,   126,   127,   128,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   130,   131,   568,   132,   133,
     134,   569,   136,   137,   138,   570,   571,   572,   573,   574,
     575,   144,   145,   146,   147,   148,   149,   576,   577,   150,
     151,   152,   153,   578,   579,   156,   580,   157,   158,   159,
     160,   581,   582,   583,   584,   585,   164,   165,   166,   167,
     168,   586,   170,   171,   172,   587,   173,   174,   175,   176,
     177,   178,   588,   589,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   591,   191,   192,   592,   194,   593,
     195,   594,   196,   197,   198,   199,   200,   201,   595,   596,
     202,   203,   204,   205,   597,   598,   206,   207,   208,   209,
     210,   599,   211,   212,   213,   600,   214,   215,   216,   601,
     217,   218,   219,   220,   602,   222,   223,   224,   225,   226,
     227,   603,   604,   229,   605,   230,   231,   606,   233,   607,
     234,   608,   235,   609,   610,   611,   238,   239,   612,   613,
     242,   614,   243,   615,   616,   617,   246,   247,   618,   248,
     249,   250,   251,   252,   253,   254,   619,   256,   257,   258,
     259,   620,   260,   261,   262,   263,   264,   265,   266,   621,
     267,   622,   623,   270,   271,   272,   273,   274,   624,   625,
     626,   627,   628,   278,   629,   630,   281,   631,   283,   284,
     285,   286,   287,   288,   632,   633,   289,   634,   291,   635,
     636,   293,   294,   295,   296,   297,   298,   299,   300,   637,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     638,   639,   640,   325,   326,   327,   641,   642,   329,   330,
     643,   332,   644,   645,   334,   646,   336,   337,   338,   647,
     339,   340,   648,   649,   341,   342,   343,   650,   651,   344,
     345,   652,   653,   348,   654,   655,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   656,   657,   658,
     659,   362,   363,   660,   661,   366,   367,   662,   369,   370,
     371,   663,   372,   373,   374,   375,   376,   377,   664,   378,
     379,   380,   665,   382,   383,   384,   385,   666,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   667,   399,   400,   668,   402,   403,   404,   669,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   670,   671,   419,   420,   421,   422,   423,   424,
     672,   426,   427,   673,   674,   429,   430,   675,   432,   676,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   677,   446,   678,   679,   680,   448,   449,   681,
     450,   682,   452,   453,   454,   455,   456,   683,   457,   684,
     685,   686,   687,   460,   461,   688,   463,   689,   690,   465,
     466,   691,   468,   469,   470,   471,   472,   692,   693,   473,
     474,   475,   694,   476,   477,   478,   479,   695,   480,   481,
     482,   483,   484,   696,   697,   698,   487,   699,   489,   490,
     491,   492,   493,   494,   495,   700,   701,   496,   702,   703,
     497,   498,   499,   500,   501,   502,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
    2075,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,  2700,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   967,  1346,   818,     0,     0,     0,  1050,
       0,     0,  2703,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,   562,     0,     0,
       0,     0,   567,   130,   131,     0,   132,   133,   134,   569,
     136,   137,   138,   570,   571,   572,   573,   574,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   578,   579,   156,     0,   157,   158,   159,   160,   581,
       0,   583,     0,   585,   164,   165,   166,   167,   168,   586,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   589,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   591,   191,   192,   592,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   602,   222,   223,   224,   225,   226,   227,   603,
    1347,   229,     0,   230,   231,   606,   233,     0,   234,     0,
     235,   609,     0,   611,   238,   239,   612,   613,   242,     0,
     243,     0,   616,   617,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   619,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   622,
     623,   270,   271,   272,   273,   274,   624,   625,     0,   627,
       0,   278,   629,   630,   281,   631,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   634,   291,   635,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   637,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   638,   639,
     640,   325,   326,   327,   641,     0,   329,   330,   643,   332,
       0,   645,   334,   646,   336,   337,   338,     0,   339,   340,
    1348,     0,   341,   342,   343,     0,     0,   344,   345,   652,
     653,   348,   654,   655,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   660,   661,   366,   367,   662,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     665,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   668,   402,   403,   404,   669,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,   671,   419,   420,   421,   422,   423,   424,   672,   426,
     427,     0,   674,   429,   430,   675,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     677,   446,   678,     0,     0,   448,   449,     0,   450,   682,
     452,   453,   454,   455,   456,     0,   457,   684,   685,     0,
       0,   460,   461,   688,   463,   689,  1349,   465,   466,   691,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   696,   697,     0,   487,   699,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   514,   515,   516,   517,     0,
       0,  1615,     0,     0,  1616,     0,  1350,  1351,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1624,
       0,     0,     0,     0,  2173,     0,     0,     0,     0,  1626,
    1615,     0,     0,  1616,     0,     0,  1627,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1624,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,  1626,  1615,
       0,     0,  1616,     0,     0,  1627,  1617,  1618,  1619,  1620,
    1621,  1622,  1623,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1624,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,  1626,     0,  2174,
       0,     0,     0,     0,  1627,     0,  1615,     0,     0,  1616,
       0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,  1624,     0,     0,     0,  1895,     0,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     0,
    1629,  1627,     0,  1615,     0,     0,  1616,     0,     0,     0,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1630,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,     0,  1628,  1931,
       0,  1624,     0,     0,  1932,     0,     0,     0,     0,  1629,
       0,  1626,     0,     0,     0,  1632,  1633,     0,  1627,     0,
       0,     0,     0,     0,     0,     0,  1630,     0,     0,     0,
    1634,  1631,     0,     0,     0,     0,     0,  3510,     0,     0,
       0,     0,     0,     0,     0,  1628,     0,     0,  1629,     0,
       0,     0,     0,     0,  1632,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,  1635,  1634,
    1631,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,  1638,     0,
       0,     0,     0,  1632,  1633,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,  1634,     0,
    1636,     0,  1630,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,  1637,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1632,  1633,  1629,     0,     0,     0,  1635,     0,     0,  1636,
       0,     0,     0,     0,     0,  1634,     0,     0,     0,  1630,
       0,     0,     0,  1637,  1631,     0,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,  1632,  1633,     0,
       0,     0,     0,  1635,     0,  3511,  1636,     0,     0,     0,
       0,     0,  1634,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1635,     0,     0,  1636,     0,     0,     0,     0,  2177,     0,
       0,     0,     0,     0,     0,     0,     0,  1637,     0,     0,
    1638,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1902,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,     0,
    1639,     0,     0,     0,     0,     0,  1615,     0,     0,  1616,
       0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
       0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,  1624,     0,     0,     0,  1937,     0,
       0,     0,     0,     0,  1626,     0,     0,  1639,     0,     0,
       0,  1627,     0,     0,     0,     0,     0,     0,     0,     0,
    1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,  1646,
    1647,  1648,  1649,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1640,     0,     0,
    1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1615,     0,     0,  1616,     0,     0,     0,  1617,
    1618,  1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,
       0,     0,     0,     0,  1640,     0,     0,  1641,  1642,  1643,
    1624,  1644,  1645,  1646,  1647,  1648,  1649,     0,     0,     0,
    1626,  1615,     0,     0,  1616,  1629,     0,  1627,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,
       0,     0,  1630,     0,     0,     0,     0,  1631,     0,  1624,
       0,     0,     0,  1944,  1628,     0,     0,     0,     0,  1626,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,     0,
    1632,  1633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,     0,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1615,     0,     0,  1616,     0,     0,     0,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,     0,     0,     0,
       0,     0,     0,  1635,     0,     0,  1636,     0,     0,     0,
       0,  1624,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,  1626,     0,  1638,     0,     0,  1942,     0,  1627,     0,
    1615,  1629,     0,  1616,     0,     0,     0,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,     0,  1630,     0,
       0,     0,     0,  1631,     0,  1628,     0,     0,  1624,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1626,     0,
    1629,     0,     0,     0,     0,  1627,  1632,  1633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1630,     0,     0,
       0,  1634,  1631,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1632,  1633,     0,     0,     0,
    1639,     0,     0,     0,     0,     0,     0,     0,     0,  1635,
    1634,     0,  1636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2068,     0,     0,     0,  1637,     0,     0,  1638,
       0,     0,  1629,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,  1630,
       0,  1636,     0,     0,  1631,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,     0,     0,  1638,     0,
       0,     0,     0,     0,     0,     0,     0,  1632,  1633,  1629,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1634,     0,     0,     0,  1630,     0,     0,     0,
       0,  1631,     0,     0,     0,     0,     0,  1640,     0,     0,
    1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,
       0,     0,     0,     0,  1632,  1633,  1639,     0,     0,     0,
    1635,     0,     0,  1636,     0,     0,     0,     0,     0,  1634,
       0,     0,     0,     0,     0,     0,     0,  1637,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1615,     0,     0,  1616,     0,  1639,     0,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,  1635,     0,     0,
    1636,     0,     0,     0,     0,     0,     0,     0,  1624,     0,
       0,     0,  2777,     0,  1637,     0,     0,  1638,  1626,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,  1640,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,     0,  1639,     0,     0,
    1615,     0,     0,  1616,     0,     0,     0,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,  1641,  1642,  1643,  1624,  1644,
    1645,  1646,  1647,  1648,  1649,     0,     0,     0,  1626,     0,
       0,     0,     0,     0,  1639,  1627,     0,  1615,     0,     0,
    1616,     0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,  1624,     0,  2764,     0,  1629,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,     0,  1630,     0,     0,     0,
       0,  1631,     0,     0,  1640,     0,     0,  1641,  1642,  1643,
       0,  1644,  1645,  1646,  1647,  1648,  1649,     0,     0,  1628,
       0,     0,     0,     0,  1632,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,     0,     0,     0,  1635,     0,     0,
    1636,     0,     0,     0,     0,     0,  1630,     0,     0,     0,
       0,  1631,     0,     0,  1637,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1632,  1633,  1629,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,     0,  1630,     0,     0,     0,     0,  1631,     0,
       0,     0,     0,     0,     0,     0,     0,  1615,     0,     0,
    1616,     0,     0,     0,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,  1811,  1633,     0,     0,     0,     0,  1635,     0,     0,
    1636,     0,     0,     0,     0,  1624,  1634,     0,     0,     0,
       0,     0,     0,     0,  1637,  1626,     0,  1638,     0,     0,
       0,     0,  1627,     0,  1639,  1615,     0,     0,  1616,     0,
       0,     0,  1617,  1618,     0,     0,  1621,  1622,  1623,     0,
       0,     0,     0,     0,  1635,     0,     0,  1636,     0,  1628,
       0,     0,     0,  1624,     0,     0,     0,     0,     0,     0,
       0,  1637,     0,  1626,  1638,     0,     0,     0,     0,     0,
    1627,     0,  1615,     0,     0,  1616,     0,     0,     0,  1617,
    1618,     0,     0,  1621,  1622,  1623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1628,     0,     0,
    1624,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1626,     0,  1615,     0,  1639,  1616,     0,  1627,     0,  1617,
    1618,     0,     0,  1621,  1622,  1623,     0,     0,     0,     0,
       0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,  1628,     0,  1629,     0,     0,     0,
    1626,     0,     0,     0,     0,     0,     0,  1627,     0,     0,
       0,  1639,     0,  1630,     0,     0,     0,     0,  1631,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1628,     0,     0,     0,     0,     0,
       0,  1632,  1633,     0,  1629,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1634,     0,     0,     0,
       0,  1630,     0,     0,     0,     0,  1631,     0,     0,     0,
       0,  1640,     0,     0,  1641,  1642,  1643,     0,  1644,  1645,
    1646,  1647,  1648,  1649,     0,     0,     0,     0,     0,  1632,
    1633,  1629,     0,     0,  1635,     0,     0,  1636,     0,     0,
       0,     0,     0,     0,  1634,     0,     0,     0,  1630,     0,
       0,  1637,     0,  1631,  1638,     0,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,
    1649,  1629,     0,     0,     0,     0,  1632,  1633,     0,     0,
       0,     0,  1635,     0,     0,  1636,     0,     0,  1630,     0,
       0,  1634,     0,  1631,     0,     0,     0,     0,     0,  1637,
       0,     0,  1638,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2052, -2052,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1635,
       0,  1634,  1636,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1637,     0,     0,     0,
       0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2052,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1640,     0,
       0,  1641,  1642,  1643,     0,  1644,  1645,  1646,  1647,  2194,
    1649,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1640,     0,     0,  1641,
    1642,  1643,     0,  1644,  1645,  1646,  1647,  1648,  1649,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,  2091,
       0,     0,     0,  1640,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,   118,   119,   120,   121,
     122,   123,   124,   125,   558,   126,   127,   128,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   130,   131,   568,
     132,   133,   134,   569,   136,   137,   138,   570,   571,   572,
     573,   574,   575,   144,   145,   146,   147,   148,   149,   576,
     577,   150,   151,   152,   153,   578,   579,   156,   580,   157,
     158,   159,   160,   581,   582,   583,   584,   585,   164,   165,
     166,   167,   168,   586,   170,   171,   172,   587,   173,   174,
     175,   176,   177,   178,   588,   589,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   591,   191,   192,   592,
     194,   593,   195,   594,   196,   197,   198,   199,   200,   201,
     595,   596,   202,   203,   204,   205,   597,   598,   206,   207,
     208,   209,   210,   599,   211,   212,   213,   600,   214,   215,
     216,   601,   217,   218,   219,   220,   602,   222,   223,   224,
     225,   226,   227,   603,   604,   229,   605,   230,   231,   606,
     233,   607,   234,   608,   235,   609,   610,   611,   238,   239,
     612,   613,   242,   614,   243,   615,   616,   617,   246,   247,
     618,   248,   249,   250,   251,   252,   253,   254,   619,   256,
     257,   258,   259,   620,   260,   261,   262,   263,   264,   265,
     266,   621,   267,   622,   623,   270,   271,   272,   273,   274,
     624,   625,   626,   627,   628,   278,   629,   630,   281,   631,
     283,   284,   285,   286,   287,   288,   632,   633,   289,   634,
     291,   635,   636,   293,   294,   295,   296,   297,   298,   299,
     300,   637,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   638,   639,   640,   325,   326,   327,   641,   642,
     329,   330,   643,   332,   644,   645,   334,   646,   336,   337,
     338,   647,   339,   340,   648,   649,   341,   342,   343,   650,
     651,   344,   345,   652,   653,   348,   654,   655,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   656,
     657,   658,   659,   362,   363,   660,   661,   366,   367,   662,
     369,   370,   371,   663,   372,   373,   374,   375,   376,   377,
     664,   378,   379,   380,   665,   382,   383,   384,   385,   666,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   667,   399,   400,   668,   402,   403,   404,
     669,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   670,   671,   419,   420,   421,   422,
     423,   424,   672,   426,   427,   673,   674,   429,   430,   675,
     432,   676,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   677,   446,   678,   679,   680,   448,
     449,   681,   450,   682,   452,   453,   454,   455,   456,   683,
     457,   684,   685,   686,   687,   460,   461,   688,   463,   689,
     690,   465,   466,   691,   468,   469,   470,   471,   472,   692,
     693,   473,   474,   475,   694,   476,   477,   478,   479,   695,
     480,   481,   482,   483,   484,   696,   697,   698,   487,   699,
     489,   490,   491,   492,   493,   494,   495,   700,   701,   496,
     702,   703,   497,   498,   499,   500,   501,   502,   704,   705,
     706,   707,   708,   709,   710,   711,   712,   713,   714,   514,
     515,   516,   517,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     558,   126,   127,   128,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   130,   131,   568,   132,   133,   134,   569,
     136,   137,   138,   570,   571,   572,   573,   574,   575,   144,
     145,   146,   147,   148,   149,   576,   577,   150,   151,   152,
     153,   578,   579,   156,   580,   157,   158,   159,   160,   581,
     582,   583,   584,   585,   164,   165,   166,   167,   168,   586,
     170,   171,   172,   587,   173,   174,   175,   176,   177,   178,
     588,   589,   180,   181,   182,   183,   184,   185,   590,   187,
     188,   189,   591,   191,   192,   592,   194,   593,   195,   594,
     196,   197,   198,   199,   200,   201,   595,   596,   202,   203,
     204,   205,   597,   598,   206,   207,   208,   209,   210,   599,
     211,   212,   213,   600,   214,   215,   216,   601,   217,   218,
     219,   220,   602,   222,   223,   224,   225,   226,   227,   603,
     604,   229,   605,   230,   231,   606,   233,   607,   234,   608,
     235,   609,   610,   611,   238,   239,   612,   613,   242,   614,
     243,   615,   616,   617,   246,   247,   618,   248,   249,   250,
     251,   252,   253,   254,   619,   256,   257,   258,   259,   620,
     260,   261,   262,   263,   264,   265,   266,   621,   267,   622,
     623,   270,   271,   272,   273,   274,   624,   625,   626,   627,
     628,   278,   629,   630,   281,   631,   283,   284,   285,   286,
     287,   288,   632,   633,   289,   634,   291,   635,   636,   293,
     294,   295,   296,   297,   298,   299,   300,   637,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   638,   639,
     640,   325,   326,   327,   641,   642,   329,   330,   643,   332,
     644,   645,   334,   646,   336,   337,   338,   647,   339,   340,
     648,   649,   341,   342,   343,   650,   651,   344,   345,   652,
     653,   348,   654,   655,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   656,   657,   658,   659,   362,
     363,   660,   661,   366,   367,   662,   369,   370,   371,   663,
     372,   373,   374,   375,   376,   377,   664,   378,   379,   380,
     665,   382,   383,   384,   385,   666,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   667,
     399,   400,   668,   402,   403,   404,   669,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     670,   671,   419,   420,   421,   422,   423,   424,   672,   426,
     427,   673,   674,   429,   430,   675,   432,   676,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     677,   446,   678,   679,   680,   448,   449,   681,   450,   682,
     452,   453,   454,   455,   456,   683,   457,   684,   685,   686,
     687,   460,   461,   688,   463,   689,   690,   465,   466,   691,
     468,   469,   470,   471,   472,   692,   693,   473,   474,   475,
     694,   476,   477,   478,   479,   695,   480,   481,   482,   483,
     484,   696,   697,   698,   487,   699,   489,   490,   491,   492,
     493,   494,   495,   700,   701,   496,   702,   703,   497,   498,
     499,   500,   501,   502,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   514,   515,   516,   517,   557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   558,   126,   127,   128,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   130,
     131,   568,   132,   133,   134,   569,   136,   137,   138,   570,
     571,   572,   573,   574,   575,   144,   145,   146,   147,   148,
     149,   576,   577,   150,   151,   152,   153,   578,   579,   156,
     580,   157,   158,   159,   160,   581,   582,   583,   584,   585,
     164,   165,   166,   167,   168,   586,   170,   171,   172,   587,
     173,   174,   175,   176,   177,   178,   588,   589,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   591,   191,
     192,   592,   194,   593,   195,   594,   196,   197,   198,   199,
     200,   201,   595,   596,   202,   203,   204,   205,   597,   598,
     206,   207,   208,   209,   210,   599,   211,   212,   213,   600,
     214,   215,   216,   601,   217,   218,   219,   220,   602,   222,
     223,   224,   225,   226,   227,   603,   604,   229,   605,   230,
     231,   606,   233,   607,   234,   608,   235,   609,   610,   611,
     238,   239,   612,   613,   242,   614,   243,   615,   616,   617,
     246,   247,   618,   248,   249,   250,   251,   252,   943,   254,
     619,   256,   257,   258,   259,   620,   260,   261,   262,   263,
     264,   265,   266,   621,   267,   622,   623,   270,   271,   272,
     273,   274,   624,   625,   626,   627,   628,   278,   629,   630,
     281,   631,   283,   284,   285,   286,   287,   288,   632,   633,
     289,   634,   291,   635,   636,   293,   294,   295,   296,   297,
     298,   299,   300,   637,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   638,   639,   640,   325,   326,   327,
     641,   642,   329,   330,   643,   332,   644,   645,   334,   646,
     336,   337,   338,   647,   339,   340,   648,   649,   341,   342,
     343,   650,   651,   344,   345,   652,   653,   348,   654,   655,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   656,   657,   658,   659,   362,   363,   660,   661,   366,
     367,   662,   369,   370,   371,   663,   372,   373,   374,   375,
     376,   377,   664,   378,   379,   380,   665,   382,   383,   384,
     385,   666,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   667,   399,   400,   668,   402,
     403,   404,   669,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   670,   671,   419,   420,
     421,   422,   423,   424,   672,   426,   427,   673,   674,   429,
     430,   675,   432,   676,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   677,   446,   678,   679,
     680,   448,   449,   681,   450,   682,   452,   453,   454,   455,
     456,   683,   457,   684,   685,   686,   687,   460,   461,   688,
     463,   689,   690,   465,   466,   691,   468,   469,   470,   471,
     472,   692,   693,   473,   474,   475,   694,   476,   477,   478,
     479,   695,   480,   481,   482,   483,   484,   696,   697,   698,
     487,   699,   489,   490,   491,   492,   493,   494,   495,   700,
     701,   496,   702,   703,   497,   498,   499,   500,   501,   502,
     704,   705,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   514,   515,   516,   517,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   558,   126,   127,   128,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   130,   131,   568,   132,   133,
     134,   569,   136,   137,   138,   570,   571,   572,   573,   574,
     575,   144,   145,   146,   147,   148,   149,   576,   577,   150,
     151,   152,   153,   578,   579,   156,   580,   157,   158,   159,
     160,   581,   582,   583,   584,   585,   164,   165,   166,   167,
     168,   586,   170,   171,   172,   587,   173,   174,   175,   176,
     177,   178,   588,   589,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   591,   191,   192,   592,   194,   593,
     195,   594,   196,   197,   198,   199,   200,   201,   595,   596,
     202,   203,   204,   205,   597,   598,   206,   207,   208,   209,
     210,   599,   211,   212,   213,   600,   214,   215,   216,   601,
     217,   218,   219,   220,   602,   222,   223,   224,   225,   226,
     227,   603,   604,   229,   605,   230,   231,   606,   233,   607,
     234,   608,   235,   609,   610,   611,   238,   239,   612,   613,
     242,   614,   243,   615,   616,   617,   246,   247,   618,   248,
     249,   250,   251,   252,   253,   254,   619,   256,   257,   258,
     259,   620,   260,   261,   262,   263,   264,   265,   266,   621,
     267,   622,   623,   270,   271,   272,   273,   274,   624,   625,
     626,   627,   628,   278,   629,   630,   281,   631,   283,   284,
     285,   286,   287,   288,   632,   633,   289,   634,   291,   635,
     636,   293,   294,   295,   296,   297,   298,   299,   300,   637,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     638,   639,   640,   325,   326,   327,   641,   642,   329,   330,
     643,   332,   644,   645,   334,   646,   336,   337,   338,   647,
     339,   340,   648,   649,   341,   342,   343,   650,   651,   344,
     345,   652,   653,   348,   654,   655,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   656,   657,   658,
     659,   362,   363,   660,   661,   366,   367,   662,   369,   370,
     371,   663,   372,   373,   374,   375,   376,   377,   664,   378,
     379,   380,   665,   382,   383,   384,   385,   666,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   667,   399,   400,   668,   402,   403,   404,   669,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   670,   671,   419,   420,   421,   422,   423,   424,
     672,   426,   427,   673,   674,   429,   430,   675,   432,   676,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   677,   446,   678,   679,   680,   448,   449,   681,
     450,   682,   452,   453,   454,   455,   456,   683,   457,   684,
     685,   686,   687,   460,   461,   688,   463,   689,   690,   465,
     466,   691,   468,   469,   470,   471,   472,   692,   693,   473,
     474,   475,   694,   476,   477,   478,   479,   695,   480,   481,
     482,   483,   484,   696,   697,   698,   487,   699,   489,   490,
     491,   492,   493,   494,   495,   700,   701,   496,   702,   703,
     497,   498,   499,   500,   501,   502,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   514,   515,   516,
     517,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,  2239,   123,   124,   125,   558,   126,
     127,   128,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   130,   131,   568,   132,   133,   134,   569,   136,   137,
     138,   570,   571,   572,   573,   574,   575,   144,   145,   146,
     147,   148,   149,   576,   577,   150,   151,   152,   153,   578,
     579,   156,   580,   157,   158,   159,   160,   581,   582,   583,
     584,   585,   164,   165,   166,   167,   168,   586,   170,   171,
     172,   587,   173,   174,   175,   176,   177,   178,   588,   589,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     591,   191,   192,   592,   194,   593,   195,   594,   196,   197,
     198,   199,   200,   201,   595,   596,   202,   203,   204,   205,
     597,   598,   206,   207,   208,  2240,   210,   599,   211,   212,
     213,   600,   214,   215,   216,   601,   217,   218,   219,   220,
     602,   222,   223,   224,   225,   226,   227,   603,   604,   229,
     605,   230,   231,   606,   233,   607,   234,   608,   235,   609,
     610,   611,   238,   239,   612,   613,   242,   614,   243,   615,
     616,   617,   246,   247,   618,   248,   249,   250,   251,   252,
     253,   254,   619,   256,   257,   258,   259,   620,   260,   261,
     262,   263,   264,   265,   266,   621,   267,   622,   623,   270,
     271,   272,   273,   274,   624,   625,   626,   627,   628,   278,
     629,   630,   281,   631,   283,   284,   285,   286,   287,   288,
     632,   633,   289,   634,   291,   635,   636,   293,   294,   295,
     296,   297,   298,   299,   300,   637,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   638,   639,   640,   325,
     326,   327,   641,   642,   329,   330,   643,   332,   644,   645,
     334,   646,   336,   337,   338,   647,   339,   340,   648,   649,
     341,   342,   343,   650,   651,   344,   345,   652,   653,   348,
     654,   655,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   656,   657,   658,   659,   362,   363,   660,
     661,   366,   367,   662,   369,   370,   371,   663,   372,   373,
     374,   375,   376,   377,   664,   378,   379,   380,   665,   382,
     383,   384,   385,   666,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   667,   399,   400,
     668,   402,   403,   404,   669,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   670,   671,
     419,   420,   421,   422,   423,  2241,   672,   426,   427,   673,
     674,   429,   430,   675,   432,   676,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   677,   446,
     678,   679,   680,   448,   449,   681,   450,   682,   452,   453,
     454,   455,   456,   683,   457,   684,   685,   686,   687,   460,
     461,   688,   463,   689,   690,   465,   466,   691,   468,   469,
     470,   471,   472,   692,   693,   473,   474,   475,   694,   476,
     477,   478,   479,   695,   480,   481,   482,   483,   484,   696,
     697,   698,   487,   699,   489,   490,   491,   492,   493,   494,
     495,   700,   701,   496,   702,   703,   497,   498,   499,   500,
     501,   502,   704,   705,   706,   707,   708,   709,   710,   711,
     712,   713,   714,   514,   515,   516,   517,   967,     0,   818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,   562,     0,     0,     0,     0,   567,   130,   131,     0,
     132,   133,   134,   569,   136,   137,   138,   570,   571,   572,
     573,   574,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   578,   579,   156,     0,   157,
     158,   159,   160,   581,     0,   583,     0,   585,   164,   165,
     166,   167,   168,   586,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   589,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   591,   191,   192,   592,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   602,   222,   223,   224,
     225,   226,   227,   603,  1347,   229,     0,   230,   231,   606,
     233,     0,   234,     0,   235,   609,     0,   611,   238,   239,
     612,   613,   242,     0,   243,     0,   616,   617,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   619,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   622,   623,   270,   271,   272,   273,   274,
     624,   625,     0,   627,     0,   278,   629,   630,   281,   631,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   634,
     291,   635,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   637,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   638,   639,   640,   325,   326,   327,   641,     0,
     329,   330,   643,   332,     0,   645,   334,   646,   336,   337,
     338,     0,   339,   340,  1348,     0,   341,   342,   343,     0,
       0,   344,   345,   652,   653,   348,   654,   655,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   660,   661,   366,   367,   662,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   665,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   668,   402,   403,   404,
     669,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,   671,   419,   420,   421,   422,
     423,   424,   672,   426,   427,     0,   674,   429,   430,   675,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   677,   446,   678,     0,     0,   448,
     449,     0,   450,   682,   452,   453,   454,   455,   456,     0,
     457,   684,   685,     0,     0,   460,   461,   688,   463,   689,
    1349,   465,   466,   691,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   696,   697,     0,   487,   699,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   704,   705,
     706,   707,   708,   709,   710,   711,   712,   713,   714,   514,
     515,   516,   517,   967,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     3,     4,     0,   562,     0,     0,
       0,     0,   567,   130,   131,     0,   132,   133,   134,   569,
     136,   137,   138,   570,   571,   572,   573,   574,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   578,   579,   156,     0,   157,   158,   159,   160,   581,
       0,   583,     0,   585,   164,   165,   166,   167,   168,   586,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   589,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   591,   191,   192,   592,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   602,   222,   223,   224,   225,   226,   227,   603,
       0,   229,     0,   230,   231,   606,   233,     0,   234,     0,
     235,   609,     0,   611,   238,   239,   612,   613,   242,     0,
     243,     0,   616,   617,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   619,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   622,
     623,   270,   271,   272,   273,   274,   624,   625,     0,   627,
       0,   278,   629,   630,   281,   631,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   634,   291,   635,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   637,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   638,   639,
     640,   325,   326,   327,   641,     0,   329,   330,   643,   332,
       0,   645,   334,   646,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   652,
     653,   348,   654,   655,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   660,   661,   366,   367,   662,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     665,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   668,   402,   403,   404,   669,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,   671,   419,   420,   421,   422,   423,   424,   672,   426,
     427,     0,   674,   429,   430,   675,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     677,   446,   678,     0,     0,   448,   449,     0,   450,   682,
     452,   453,   454,   455,   456,     0,   457,   684,   685,     0,
       0,   460,   461,   688,   463,   689,     0,   465,   466,   691,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   696,   697,     0,   487,   699,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   514,   515,   516,   517,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,   788,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   791,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,     0,   793,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   799,
     463,   800,     0,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,   162,     0,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,  1744,   157,   158,   159,   160,   161,     0,     0,
    1745,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,  1746,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,  1747,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
    1748,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,  1749,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,  1750,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,  1744,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,  1746,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,  1747,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,  2321,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,  1749,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
    1750,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     3,     4,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   552,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   553,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,   794,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     899,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,   794,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   941,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,  1171,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,   794,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
    1948,     0,     0,     0,     0,  1949,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
    1956,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,  1957,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,  1958,
     450,     0,   452,  1959,   454,  1960,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,  1961,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,   818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     825,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   826,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   827,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   828,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   829,   459,     0,
       0,   830,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   862,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   894,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     897,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   901,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   929,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   957,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   960,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,  1003,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,  1026,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     825,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   829,   459,     0,
       0,   830,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  1305,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,  1307,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
    1310,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,  1312,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,  2235,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,  1480,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,  1481,     0,     0,  -790,     0,  1482,   130,
     131,     0,   132,   133,   134,  1483,   136,   137,   138,     0,
    1484,  1485,  1486,  1487,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,  1488,  1489,   156,
       0,   157,   158,   159,   160,     0,     0,  1490,     0,  1491,
     164,   165,   166,   167,   168,  1492,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,  1493,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1494,   191,
     192,  1495,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   229,     0,   230,
     231,  1496,   233,     0,   234,     0,   235,  1497,     0,  1498,
     238,   239,  -790,  1499,   242,     0,   243,     0,     0,     0,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
    1500,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,  1501,     0,   270,   271,   272,
     273,   274,  1502,  1503,     0,  1504,     0,   278,  1505,  1506,
     281,  1507,   283,   284,   285,   286,   287,   288,     0,     0,
     289,  1508,   291,  1509,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1510,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1511,  1512,  1513,   325,   326,   327,
       0,     0,   329,   330,  1514,   332,     0,     0,   334,  1515,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,     0,  1516,   348,  1517,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,     0,  1518,   366,
     367,     0,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1519,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,  1520,   402,
     403,   404,  1521,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,  1522,   419,   420,
     421,   422,   423,   424,  1523,   426,   427,     0,  1524,   429,
     430,  1525,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,  1526,   446,     0,     0,
       0,   448,   449,     0,   450,  1527,   452,   453,   454,   455,
     456,     0,   457,  1528,  1529,     0,     0,   460,   461,     0,
     463,     0,     0,   465,   466,  1530,   468,   469,   470,   471,
     472,  1531,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,     0,  1532,     0,
     487,  1533,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,   514,   515,   516,   517,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  2979,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   840,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     841,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     842,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   843,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   844,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   953,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   842,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   844,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  1314,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,  1325,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,  1675,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,     0,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,  1852,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,  2222,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  2237,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,  1480,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
    1481,     0,     0,     0,     0,  1482,   130,   131,     0,   132,
     133,   134,  1483,   136,   137,   138,     0,  1484,  1485,  1486,
    1487,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,  1488,  1489,   156,     0,   157,   158,
     159,   160,     0,     0,  1490,     0,  1491,   164,   165,   166,
     167,   168,  1492,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,  1493,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1494,   191,   192,  1495,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   229,     0,   230,   231,  1496,   233,
       0,   234,     0,   235,  1497,     0,  1498,   238,   239,     0,
    1499,   242,     0,   243,     0,     0,     0,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,  1500,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,  1501,     0,   270,   271,   272,   273,   274,  1502,
    1503,     0,  1504,     0,   278,  1505,  1506,   281,  1507,   283,
     284,   285,   286,   287,   288,     0,     0,   289,  1508,   291,
    1509,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1510,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1511,  1512,  1513,   325,   326,   327,     0,     0,   329,
     330,  1514,   332,     0,     0,   334,  1515,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,     0,  1516,   348,  1517,     0,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,     0,  1518,   366,   367,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1519,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,  1520,   402,   403,   404,  1521,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,  1522,   419,   420,   421,   422,   423,
     424,  1523,   426,   427,     0,  1524,   429,   430,  1525,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,  1526,   446,     0,     0,     0,   448,   449,
       0,   450,  1527,   452,   453,   454,   455,   456,     0,   457,
    1528,  1529,     0,     0,   460,   461,     0,   463,     0,     0,
     465,   466,  1530,   468,   469,   470,   471,   472,  1531,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,     0,  1532,     0,   487,  1533,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,  1480,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   514,   515,
     516,   517,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,  1481,     0,     0,     0,     0,  1482,   130,   131,     0,
     132,   133,   134,  1483,   136,   137,   138,     0,  1484,  1485,
    1486,  1487,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,  1488,  1489,   156,     0,   157,
     158,   159,   160,     0,     0,  1490,     0,  1491,   164,   165,
     166,   167,   168,  1492,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,  1493,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1494,   191,   192,  1495,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,  1834,   215,
     216,     0,   217,   218,   219,   220,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   229,     0,   230,   231,  1496,
     233,     0,   234,     0,   235,  1497,     0,  1498,   238,   239,
       0,  1499,   242,     0,   243,     0,     0,     0,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,  1500,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,  1501,     0,   270,   271,   272,   273,   274,
    1502,  1503,     0,  1504,     0,   278,  1505,  1506,   281,  1507,
     283,   284,   285,   286,   287,   288,     0,     0,   289,  1508,
     291,  1509,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1510,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1511,  1512,  1513,   325,   326,   327,     0,     0,
     329,   330,  1514,   332,     0,     0,   334,  1515,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,     0,  1516,   348,  1517,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,     0,  1518,   366,   367,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1519,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,  1520,   402,   403,   404,
    1521,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,  1522,   419,   420,   421,   422,
     423,   424,  1523,   426,   427,     0,  1524,   429,   430,  1525,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  1526,   446,     0,     0,     0,   448,
     449,     0,   450,  1527,   452,   453,   454,   455,   456,     0,
     457,  1528,  1529,     0,     0,   460,   461,     0,   463,     0,
       0,   465,   466,  1530,   468,   469,   470,   471,   472,  1531,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,     0,  1532,     0,   487,  1533,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,  3149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   514,
     515,   516,   517,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,  2901,     0,     0,     0,     0,  2902,   130,   131,
       0,   132,   133,   134,  2903,   136,   137,   138,     0,  1484,
    2904,  1486,  1487,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,  1488,  1489,   156,     0,
     157,   158,   159,   160,     0,     0,  2905,     0,  2906,   164,
     165,   166,   167,   168,  2907,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,  2908,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1494,   191,   192,
    1495,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   229,     0,   230,   231,
    1496,   233,     0,   234,     0,   235,  2909,     0,  2910,   238,
     239,  2911,  2912,   242,     0,   243,     0,     0,     0,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,  2913,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,  2914,     0,   270,   271,   272,   273,
     274,  1502,  1503,     0,  1504,     0,   278,  2915,  2916,   281,
    2917,   283,   284,   285,   286,   287,   288,     0,     0,   289,
    2918,   291,  2919,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  3150,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1511,  2921,  1513,   325,   326,   327,     0,
       0,   329,   330,  2923,   332,     0,     0,   334,  1515,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,     0,  2925,   348,  2926,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,     0,  2927,   366,   367,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1519,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,  2928,   402,   403,
     404,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,  2929,   419,   420,   421,
     422,   423,   424,     0,   426,   427,     0,  2931,   429,   430,
    1525,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  3151,   446,     0,     0,     0,
     448,   449,     0,   450,  2933,   452,   453,   454,   455,   456,
       0,   457,  1528,  1529,     0,     0,   460,   461,     0,   463,
       0,     0,   465,   466,  2934,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,     0,  1532,     0,   487,
    2936,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   525,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     514,   515,   516,   517,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
       0,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,     0,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1771,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,  1481,
       0,     0,     0,     0,  1482,   130,   131,     0,   132,   133,
     134,  1483,   136,   137,   138,     0,  1484,  1485,  1486,  1487,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,  1488,  1489,   156,     0,   157,   158,   159,
     160,     0,     0,  1490,     0,  1491,   164,   165,   166,   167,
     168,  1492,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,  1493,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1494,   191,   192,  1495,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   229,     0,   230,   231,  1496,   233,     0,
     234,     0,   235,  1497,     0,  1498,   238,   239,     0,  1499,
     242,     0,   243,     0,     0,     0,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,  1500,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,  1501,     0,   270,   271,   272,   273,   274,  1502,  1503,
       0,  1504,     0,   278,  1505,  1506,   281,  1507,   283,   284,
     285,   286,   287,   288,     0,     0,   289,  1508,   291,  1509,
       0,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1511,  1512,  1513,   325,   326,   327,     0,     0,   329,   330,
    1514,   332,     0,     0,   334,  1515,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,     0,  1516,   348,  1517,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,     0,  1518,   366,   367,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1519,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,  1520,   402,   403,   404,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,  1522,   419,   420,   421,   422,   423,   424,
       0,   426,   427,     0,  1524,   429,   430,  1525,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,     0,   446,     0,     0,     0,   448,   449,     0,
     450,  1527,   452,   453,   454,   455,   456,     0,   457,  1528,
    1529,     0,     0,   460,   461,     0,   463,     0,     0,   465,
     466,  1530,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,     0,  1532,     0,   487,  1533,   489,   490,
     491,   492,   493,   494,   495,     0,     1,   496,     0,     0,
     497,   498,   499,   500,   501,   502,     2,     0,     3,     4,
       0,     0,     0,     0,     1,     0,     0,   514,   515,   516,
     517,     0,     0,     0,     2,     0,     6,     0,     0,     0,
       0,     0,     0,     0,   719,     7,     0,     0,     0,     0,
       0,     0,     0,     0,     6,     0,     0,     0,     0,     8,
       0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
      10,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,     0,    11,     0,   748,     0,     0,     0,    10,     0,
       0,     0,     0,     0,     0,    13,     0,     0,     0,     0,
      11,   720,   748,     0,     0,     0,     0,     0,     0,     0,
      14,    15,     0,    13,     0,   719,     0,   721,     0,     0,
       0,   749,     0,     0,     0,     0,     0,    18,    14,    15,
       0,     0,     0,     0,     0,    19,     0,     0,     0,   749,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,    22,    19,     0,     0,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   722,     0,     0,     0,
      22,     0,   720,     0,    23,     0,   723,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   721,   724,
       0,     0,     0,     0,   725,     0,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
       0,     0,     0,   726,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   722,     0,     0,
       0,     0,    26,     0,     0,     0,     0,   723,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     724,     0,     0,     0,     0,   725,   727,     0,     0,     0,
     728,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   726,     0,     0,     0,     0,    27,
      28,    29,     0,     0,     0,     0,     0,    30,     0,     0,
      31,     0,     0,     0,     0,     0,     0,    27,    28,    29,
       0,     0,     0,     0,     0,    30,     0,     0,    31,     0,
       0,     0,     0,     0,   541,     0,     0,   727,     0,    32,
     729,   728,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,   730,     0,    32,     0,     0,
       0,     0,     0,     0,    34,     0,    33,     0,     0,     0,
       0,    35,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,    34,     0,     0,    37,     0,     0,   731,    35,
       0,   732,     0,    36,     0,     0,     0,    38,     0,     0,
       0,    39,   733,    37,     0,   734,     0,     0,     0,     0,
       0,   729,     0,     0,     0,    38,     0,     0,     0,    39,
       0,    40,     0,   735,     0,     0,   730,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,   736,     0,    40,
      43,     0,     0,   737,   738,    44,     0,     0,     0,   750,
       0,     0,    41,     0,   739,     0,     0,     0,    43,   731,
     740,    45,   732,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   733,     0,     0,   734,     0,     0,    45,
       0,     0,     0,     0,     0,    46,     0,   741,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,   751,
       0,     0,     0,    46,     0,     0,     0,     0,   736,     0,
       0,     0,     0,     0,     0,   738,     0,    47,     0,     0,
       0,     0,     0,     0,     0,   739,     0,     0,     0,     0,
       0,   740,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   741
};

static const yytype_int16 yycheck[] =
{
       7,   518,     0,   898,     7,     0,    89,    90,     0,    16,
       0,     0,    47,   838,     0,     0,    23,     0,   923,    16,
      23,     0,     0,     0,   743,   886,    87,   812,    39,   993,
     861,   928,     7,  1698,  1227,    20,   751,   907,  1228,  1241,
    1303,  1215,   975,    20,  1161,  1423,  1036,   984,    23,  1202,
     984,   958,    91,   984,  1083,   984,    20,  1659,  1469,    91,
      38,  2147,  1204,  2149,  1552,    17,  1281,  2178,    23,  2168,
     962,  2233,  1992,  2343,  1207,  1802,   975,     0,    23,     0,
       0,    46,    89,    90,  1167,  2617,    89,    90,  1578,  1128,
    1232,     0,     0,   898,  1133,   900,     0,   902,     0,     0,
     111,     0,     0,  1612,  1613,  1328,  1993,     0,  2229,  2617,
       0,     0,  2167,    35,    89,    90,    26,   808,  2669,  2113,
    2653,   751,   813,     0,   750,   103,     0,  1091,  2676,     0,
       0,  2491,  1002,     0,    89,    90,     0,     0,   744,     0,
    2300,  2281,  2282,  2283,    89,    90,     0,     0,  2573,     0,
       5,   982,  2577,  1826,     0,     4,  1823,     9,    13,    14,
       9,  1663,    40,     5,  1966,  1716,     5,    55,  2655,  1057,
    1058,  2988,  1933,  1718,    80,   769,  2307,  1979,   119,     5,
       5,     5,    60,    74,     5,     5,  1074,    13,    14,     9,
       5,     5,    13,    14,     5,     5,     5,  2318,    13,    14,
     985,     5,    13,    14,     5,     9,  1139,    13,    14,     5,
       4,  2312,     5,     5,    74,     9,     5,     5,  2311,     5,
      53,   104,    90,    82,   173,   881,   117,    45,   106,     3,
       4,     5,   124,    45,    93,     9,    13,    14,   122,   139,
       3,    11,   172,   191,   881,  1037,    16,   100,   856,     9,
    2371,  2372,    82,  2374,   100,     5,  1820,    11,  1248,  1090,
     975,   129,    16,    93,    11,   122,  1171,  1257,    15,    16,
     107,    34,    35,  2829,  1144,   122,    63,  3154,   288,  2442,
     296,  2442,    30,  1216,   172,    37,  1219,  1220,   805,    30,
      38,   296,    46,  2947,   290,   986,  1061,    38,   181,    46,
     291,   181,    63,     8,   313,   107,    11,   998,   227,   169,
      15,    16,  1077,   313,    19,    20,    21,    63,   245,   276,
      63,  1438,   122,    30,   202,   107,    80,   193,   147,   213,
    2810,   106,  2812,    80,   166,    75,   853,   137,  2587,  2425,
    1959,  1960,  1961,   117,   177,   173,  2974,  1139,   184,  1523,
     976,   117,  1469,  1616,   273,  2535,   213,  2537,   367,    30,
     417,   194,    41,  2991,  3349,  1196,   199,  1192,  1193,     3,
      30,     5,    40,   251,  3393,   119,   132,   162,    85,    26,
    3243,   380,  3245,   261,   275,    32,    30,    94,    33,   280,
     273,   108,    13,    14,    38,   273,  2536,   416,  2930,   218,
     455,    11,  3482,   407,   237,    64,  1311,  3317,   171,  2136,
     173,   118,   108,    11,    59,    74,    13,    15,    16,   431,
     339,   173,    19,  1215,  2586,   191,  1287,   305,   513,   366,
     515,   504,   517,   455,    31,   454,    46,   290,   329,  2688,
     308,   117,   515,  3523,   290,   219,  1343,   126,    45,    46,
    2561,   193,  2985,   238,   345,   389,  3441,   209,  3321,  3478,
     515,   132,  2583,   132,  2585,   469,  3283,   241,   480,   329,
      80,   390,   132,   225,   214,   192,   251,   296,   108,   357,
    3084,   309,  3086,   235,   191,    40,   261,   353,  1751,  2483,
     137,   273,   324,   515,   199,   452,  2983,   204,  3152,   429,
    1529,   510,   338,   519,   382,   515,   359,  2994,   176,   275,
     510,  1303,   109,   359,   519,   975,   457,   222,  2875,   515,
     519,    11,   449,   401,   515,    15,    16,   273,   328,   285,
     280,   367,  3442,   452,  2665,  3015,   280,     8,  1194,  3416,
      11,  2721,  3098,   426,    15,    16,   167,    11,    19,    20,
      21,    15,    16,  3181,   422,   446,    46,  1194,   536,   392,
    1168,  1155,  3379,   455,   455,   393,   515,   515,   452,   371,
     429,   358,  1983,   473,  2737,   455,  2737,  2698,   515,  1096,
     417,   515,   241,   590,   172,  2686,   446,   292,   515,  2682,
      80,  1806,  1745,   590,  2514,   452,   414,   358,  1429,   429,
    1488,  1489,   414,  3207,   280,   452,   275,   513,  1327,   290,
     362,   517,   358,  1332,   356,   358,   285,  3168,  1443,  1338,
    2381,   176,  3154,  2113,   477,  1513,   445,   515,   477,   381,
    1345,   477,  1895,  2184,  1459,   120,  2438,   479,   516,  1862,
    2185,   387,  2151,   421,  1907,   423,  3154,   294,  1838,   397,
    1110,   279,   501,  2320,   464,   479,   397,   506,   507,   501,
     515,   515,   514,   516,   518,   518,   521,   518,  2341,  2171,
     516,  1661,   518,   515,  1937,  1877,   515,   501,  3103,  1139,
     164,  1944,   521,  3108,  2846,  1573,  1574,  2177,   513,   515,
     515,   515,   517,  2853,   515,   515,   403,  3057,    11,   406,
     515,   515,   465,   120,   515,   515,   515,  2977,   355,   515,
     195,   515,   506,   507,   515,  1345,   751,  1980,  1344,   515,
     803,  1984,   515,   515,  1555,  1556,   515,   515,  1334,   515,
    1495,  1523,   506,   507,  1565,  1605,  1606,  1607,   515,  3290,
     387,   511,   245,  3291,   751,  1436,   506,   507,  1579,  2313,
    1515,  2014,  3380,   397,   357,  3112,  1216,   511,   519,  1219,
    1220,   508,   509,   510,   511,   750,   394,    80,   803,   164,
     404,   405,  2827,   750,  3131,  1990,   519,  1608,   195,   266,
     504,   178,  3342,  3343,   387,   792,  1551,   751,   272,   792,
     477,   479,  2712,   517,   479,  3282,   803,   502,   503,   504,
     803,   506,   507,   508,   509,   510,   511,  2426,  2427,  2428,
    2429,   458,   851,   501,   501,   148,   501,   792,   275,   851,
     149,   292,  1903,   280,  1616,   886,  2966,   515,   803,  1946,
     515,   838,   839,   510,   321,  3395,   231,   792,    26,  2833,
     517,   429,  1775,  3376,   241,   856,   162,  1556,   803,   250,
     132,  2972,  1785,  1934,   861,  1788,  1565,  1847,   803,  2746,
      82,   479,  2749,   515,  2751,   876,  1983,   200,   371,  2789,
       0,    93,   201,   871,   275,  1770,   871,   787,   160,   871,
     337,   871,   871,   501,  3416,   871,   871,   421,   871,   423,
    1350,  1351,   871,   871,   871,   859,   245,   862,   905,   906,
    1417,  3434,   909,   910,  3391,  2632,    82,  2634,  3416,  1628,
     508,   509,   510,   511,  2137,  1954,   504,    93,   840,   841,
    2880,   843,   238,   514,  3194,   514,  1009,   245,  2888,   517,
     465,  1828,   172,  1016,   525,  1012,   525,   245,  1743,   119,
     518,  1018,  1803,  1804,  1805,  1878,   449,  2064,   871,   137,
     871,   871,  3114,  1860,   519,   962,   553,  1864,     5,  1751,
    1867,    37,   871,   871,   513,  1770,   515,   871,   975,   871,
     871,   287,   871,   871,   981,   982,   928,  1869,   871,  1878,
     987,   871,   871,   990,   991,  1790,   993,   994,   995,   996,
    1795,   976,  2501,  2483,   871,  3094,   275,   871,   280,   976,
     871,   871,  1009,   285,   871,     5,  1009,   871,   871,  1016,
     871,  3284,   515,  1016,   515,  3502,   506,   507,   508,   509,
     510,   511,   371,   515,   421,  2403,   423,   207,  1035,  1036,
    1037,   502,   503,   504,  1009,   506,   507,   508,   509,   510,
     511,  1016,   506,   507,   508,   509,   510,   511,   353,  1056,
     245,    26,   449,   371,  1009,  2543,  1091,    32,   132,  2322,
     174,  1016,  1781,   371,  1009,   108,  2256,  1786,  1075,  2284,
    2153,  1016,   227,  2156,  2801,   315,   316,   317,   245,  1086,
    1087,  1088,   378,  1090,  1091,   132,   160,   147,  1095,  3009,
    2207,   378,   178,   273,  1007,   275,  3258,   173,  1095,   343,
     449,   516,   162,  1895,   519,  3378,   294,   167,  3381,   174,
    1570,  1942,  1025,   160,   162,  1907,  1029,  1124,   273,   167,
     203,   510,  1582,  2265,  1584,   259,   260,  2617,   517,    71,
      72,   449,   246,   209,  1141,  1142,  1175,  1176,   382,  1178,
     380,   449,   203,  1175,  1176,  1937,  1178,    26,   745,   225,
    1610,   252,  1944,    32,   436,   241,   162,  1168,   218,   235,
     434,   167,   137,  1878,  1885,   447,   515,   355,  1889,   357,
    1177,  1892,   417,   417,  1181,  1182,   371,   417,   238,  2143,
    1428,   246,  1430,  1431,  1191,  1192,  1193,   343,  1980,  1196,
     238,   467,  1984,     4,  2457,  2026,  2329,   515,     9,   387,
    1992,   275,  2335,  3476,   371,   375,   280,   515,  1215,   378,
     450,   285,   513,     6,    13,    14,   517,    10,    25,    26,
    1231,   461,  2014,   467,   515,    18,   382,   287,   275,   343,
     513,    26,   238,   280,   517,   390,   296,    32,   285,   287,
      33,  1248,   376,   377,    37,   513,     4,     4,     4,   517,
    1257,     9,     9,     9,   449,  1715,  1716,   516,   137,  1017,
     519,   417,   477,  1021,   479,   862,   840,   841,   382,   843,
    2101,     5,    13,    14,  1281,   515,   189,   190,   343,   167,
     516,   287,   449,   519,   515,   371,   362,  2148,   371,   516,
     516,   516,   519,   519,   519,   516,  1303,   452,   519,   382,
     826,   827,   828,   417,  2715,   381,   516,  1302,   115,   519,
    1302,   467,  1319,  1302,   515,  1775,  1302,   382,   515,   294,
     515,  1328,  1319,  2440,   516,  1785,  2443,   519,  1788,  2236,
      59,  2238,  3494,   516,   417,   421,   519,   423,  1345,    13,
      14,   516,   137,  2833,   519,   172,   259,   260,   515,   421,
     178,   423,   417,   467,  2617,  1362,  2239,   515,  2241,  1344,
    3446,  1368,   436,   449,   515,  1362,  1449,  1344,  3479,  1452,
    3481,    13,    14,   447,  1457,  3461,   351,  1460,    13,    14,
     355,  1345,  1465,   516,   467,   445,   519,  2212,   516,   436,
      26,   519,   126,   127,   516,   516,    32,   519,   519,   515,
     447,   516,   467,   515,   519,  2310,  2599,   515,  1415,  1416,
    2600,  3522,   387,   241,  1421,   294,  1423,   421,  1878,   423,
    1423,  1428,  1429,  1430,  1431,   516,    13,    14,   519,  2631,
    3516,  2584,  2583,   515,  2585,  3521,  1443,  1444,   172,    13,
      14,   516,  1449,   172,   519,  1452,  1449,   515,  1423,  1452,
    1457,   508,  1459,  1460,  1457,  2648,   501,  1460,  1465,  2488,
    2489,   172,  1465,   376,   377,  2598,   516,  2600,  1423,   519,
     516,   515,   351,   519,  1449,   516,   355,  1452,   519,    13,
      14,   516,  1457,   458,   519,  1460,   314,   498,   516,    26,
    1465,   519,   224,   516,  1449,    32,   519,  1452,   517,   294,
     516,   137,  1457,   519,  1449,  1460,   290,  1452,   387,  3236,
    1465,  3238,  1457,   498,   516,  1460,  1523,   519,   516,    26,
    1465,   519,   878,   517,   880,    32,  2357,  2491,  2465,  2466,
    2322,  2465,  2466,  2467,  2465,  2464,   519,   516,   515,  1999,
     519,    37,   516,   371,   516,   519,    42,   519,  1555,  1556,
     378,   171,   516,   516,  1552,   519,   351,  1564,  1565,   516,
     355,   516,  1552,  1160,   519,  1572,   516,  1552,   516,  1552,
     172,   519,  1579,  1552,  1552,  1552,   295,   516,    59,   458,
     519,   315,   316,   317,    13,    14,   315,   316,   317,    13,
      14,   516,   387,   421,   519,   423,   516,  1604,   515,   519,
     137,  1608,    13,    14,  1611,   101,    13,    14,   418,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,    13,
      14,   449,  1629,  1630,    13,    14,   498,  1634,  1625,   224,
     137,  1638,  2351,  2896,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  1649,  2358,  3246,  1652,   380,    13,    14,    13,
      14,   380,  1659,   152,  1661,   991,   351,   391,   294,    13,
      14,   152,  1701,   458,  3154,  2457,    13,    14,   152,  1701,
      13,    14,   152,  1680,    13,    14,   152,   173,    40,   413,
     417,   147,  2552,   417,   516,   181,    13,    14,   417,   515,
    2150,    13,    14,   275,  2847,    40,   162,  1704,    13,    14,
     467,   167,    13,    14,  2894,    13,    14,    89,  1715,  1716,
     366,   367,   152,   209,  1678,   351,   450,   366,   367,   355,
     481,   450,  2514,  2183,  2184,   366,   367,   461,   517,   225,
     263,   264,   461,   366,   367,   152,   376,   377,  1335,   235,
    1337,   290,   117,   477,  1751,   460,   461,  3456,  3457,   152,
    2575,   387,   218,  1760,   152,  1762,  2930,   294,  3488,  3489,
    1141,  1142,  2659,  1760,   353,  1762,   178,   501,  2970,   429,
     515,   515,   238,   269,  2679,   515,   515,  2638,   516,  3444,
     419,   515,   220,  3448,  2691,   300,   515,   294,   225,  3052,
     515,   203,   225,   225,   290,  1802,   297,   172,     8,  1806,
     466,    11,  1809,  1810,    40,    15,    16,   515,   236,   515,
       5,     5,  2802,    98,   351,   515,   325,   515,   355,   315,
    3198,   287,   458,   515,   515,  2617,   322,     5,     5,   241,
     296,   515,     5,   515,     5,   148,    46,     9,  3503,   515,
    1847,   126,   127,    53,   351,   515,   478,   302,   355,   104,
     387,   519,   519,   516,    40,  1862,   387,   220,   167,   285,
     287,   167,  1869,  1870,   236,  1843,   362,    59,   515,   429,
      80,  1878,   515,    93,   519,   429,    59,    59,   429,   266,
     387,   429,   108,   295,  1967,   381,   222,   172,  1895,   429,
    1973,  3154,  1899,  1900,   525,  1902,   477,   429,   152,   378,
    1907,  1908,  1909,  1910,  1911,  1912,  1913,   100,   275,  1916,
    1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,   275,
    2712,   458,   515,    40,  1931,  1932,  3416,   275,  1935,   304,
    1937,   275,   515,   275,   199,  1942,   152,  1944,   172,   517,
     315,   316,   317,    13,   516,   516,   516,   172,   516,   516,
     519,   458,  2885,   516,   450,   516,   515,  1964,   474,   455,
    1967,   225,  1969,   225,  1967,   282,  1973,   177,   282,   515,
    1973,  3349,  3165,  1980,   515,   519,   464,  1984,   785,   445,
     787,  1988,   517,  1990,   194,  1992,   515,   515,   515,   199,
    2897,  2898,  1967,   515,   515,    39,   515,  2789,  1973,   517,
     473,  2461,  2462,     9,   427,   380,   147,  2014,   427,   421,
     817,   423,  1967,    11,  3392,   353,   514,   519,  1973,  2026,
    2027,   162,  1967,  2742,   519,   525,   167,   237,  1973,   522,
     315,   316,   317,     8,   446,   842,    11,   449,   515,   427,
      15,    16,   417,   280,    19,    20,    21,   513,   515,   429,
     516,   517,   181,   163,   172,   519,   516,   218,   455,  2066,
    3024,   519,   266,  3441,  2071,  2072,  2101,   390,   227,   291,
     313,   313,   519,   519,   181,   450,   220,   218,  3280,  1415,
    1416,   516,   292,   296,   515,  1421,   461,   227,   275,  2096,
    2097,   227,   288,   334,  2101,   380,   467,   238,   152,   515,
     515,    82,   477,   152,  2896,  3222,   391,   152,  2115,   477,
     152,  2118,    40,  2120,   152,     3,   515,   275,     3,    40,
     290,   290,    59,    40,   172,    11,   501,   108,   413,  2136,
    2137,   167,   417,   516,   181,   516,  2143,   516,  2930,  2146,
     515,   167,   516,  2146,     3,   515,   287,  2866,    39,  1746,
     515,     3,   437,  3416,   515,   296,  2163,  2617,   513,  1756,
    2163,  1758,   513,   429,  1761,   450,   429,   516,   975,  2176,
    1767,  2146,  1769,   429,   514,   516,   461,   984,   429,   516,
     172,   429,   392,   517,   519,  1782,  2193,  2194,  2163,   522,
    1787,  2146,   477,   174,  1791,  1792,  1793,  1794,   516,  1796,
    1797,  2146,   498,  2210,   516,  2212,   498,   498,  2163,   516,
     155,   516,   516,   516,  2221,   515,   501,  3009,  2163,   250,
     515,   515,   203,    40,   199,   515,  1033,  3132,   515,  3419,
     515,    59,  2239,  2240,  2241,   474,   519,   504,   291,   500,
     291,   452,  2239,  2240,  2241,   519,     8,   222,   244,    11,
      59,    59,   151,    15,    16,   266,   275,    19,    20,    21,
    3052,   429,   515,   152,   203,   246,   429,   429,   152,   152,
     282,  2278,   429,   172,    36,   429,   516,  2284,   282,    40,
     515,  2316,   515,   288,   353,   516,   477,  2747,   290,   499,
    3005,   519,    40,  1100,   152,   280,   506,   507,   508,   509,
     510,   511,   516,  1110,   445,   172,     7,     8,   515,   515,
    2305,   516,    13,  2305,   516,  2322,  2305,   292,    19,  2305,
      59,   186,    23,  1130,    25,    26,   516,   151,   167,    30,
      31,    32,  1139,  2340,    35,    80,  2343,    38,    39,   513,
     516,    42,   143,   199,    45,    46,  2343,   172,   172,   516,
    2357,  2358,   516,   301,   181,   291,   516,   152,  2365,   515,
     525,   516,  3154,   515,   359,   516,   519,   515,  2365,   516,
     519,   516,   513,     8,   176,   440,   517,  3208,  3248,  3210,
      15,    16,   515,   517,    19,    20,    21,   515,    89,    90,
     371,   516,   516,   516,    40,  3220,  2403,   516,   519,   515,
    2403,   382,   103,   515,    40,    86,   519,   108,   109,   110,
     111,   112,   455,   172,   515,   476,   315,   316,   317,   516,
     516,   199,   516,   514,   514,  2885,   519,   516,  2403,   516,
    2890,   516,   516,   461,    59,  2442,   417,   290,  3223,   516,
    3225,   504,   516,  3407,   516,   516,  3351,   477,  2403,   205,
    2457,   117,    40,   515,   227,    88,  2491,   192,  2469,   440,
     222,   280,   280,   429,   504,  3360,   429,  2474,  2529,    40,
     275,   517,    40,  2480,  2481,   514,   517,  2937,  2938,   516,
    3341,   380,   517,   517,  2491,   517,   467,   107,   517,  2524,
     517,   315,   316,   317,   517,  2502,   517,   517,  2505,   517,
    2507,   517,   517,   517,   517,   514,   516,  2514,  2515,   517,
    3335,  2518,  2519,   477,   517,   516,  2523,  2524,   417,   290,
     517,   515,     9,  2530,   517,   515,   517,   502,   503,   504,
     292,   506,   507,   508,   509,   510,   511,   517,  2545,   517,
    2575,   517,   352,   517,   517,  2543,   517,   517,  2555,   517,
     517,   450,   517,  2543,  1361,   517,   380,   515,  2543,   515,
    2543,  2158,   461,   515,  2543,  2543,  2543,   336,  2575,   519,
     516,  2549,  1908,  1909,  1910,  1911,  1912,  1913,   477,   519,
    1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,
      59,   516,   199,   417,   514,    74,   192,   519,   460,    91,
     516,    80,   501,   345,   515,    40,   152,  2614,   517,   516,
    2617,  2618,   124,  2620,    93,   152,   515,  2614,    40,   516,
     367,  2618,    40,  2620,  3416,  2632,   450,  2634,    37,   367,
      40,   310,   519,    42,   516,   515,   515,   461,   117,   455,
     119,   515,   515,   280,   249,   515,   191,   440,     0,   178,
     178,   455,   293,   477,    74,    74,    80,   292,     9,   516,
     369,   516,   516,  2658,   515,   514,  2658,  1474,    20,  2658,
    3389,    23,  2658,   514,   203,   203,  2654,   501,    59,    93,
     133,   504,  3142,  3143,   273,   440,    38,   290,   460,   515,
      40,   515,   101,   293,  3154,    47,   293,   205,   290,  2734,
     515,   387,  2709,  2681,   516,  2712,  2684,   290,   452,   516,
     516,   122,   241,   241,   366,   148,   516,    25,    36,   366,
     298,   871,  2729,  2730,  2890,  2601,  2809,  2734,   207,  1768,
    2737,  1239,  2614,  1679,  2234,  2332,  2277,    89,    90,    91,
     502,   503,   504,  1812,   506,   507,   508,   509,   510,   511,
    2304,   103,  2365,   786,  3005,  2650,  3366,  2764,  3471,  3125,
    2096,  2097,  3420,  3429,   173,  3464,   295,   295,  1202,  3183,
    2240,  2778,  2227,  2670,  3418,  3427,  2783,  2784,  2224,  2620,
    2593,  2788,  2789,  3415,  1327,   314,  2793,  1299,  2823,  2796,
    2797,  1869,  2554,  2346,  2801,  2802,   275,  3314,  2805,  3312,
     209,   280,  2809,  1345,  3250,  3392,  2809,  3345,  2553,  2816,
    3493,  2543,  1365,  2176,   980,  1184,   225,  2210,  1740,  1008,
    1008,  3401,  2424,  2193,  1704,  1185,   235,  3323,  1160,  3212,
    1739,    23,  2163,  1978,  2809,  1187,   537,  3047,   792,  2403,
     986,   542,   371,   371,   545,  2402,   803,  3146,  2449,   378,
     329,  2737,   553,  2860,  2809,  1995,  1878,   984,   984,  3327,
     269,  2868,  1669,  1878,  2809,  3326,   345,   502,   503,   504,
     984,   506,   507,   508,   509,   510,   511,  2073,   984,   984,
    2887,   290,   984,  2177,   984,   984,  2481,  2119,  2116,  2896,
    2028,  2816,   421,   421,   423,   423,  2075,  1444,  2498,  1678,
    1988,   103,    -1,    -1,    -1,    -1,   315,    -1,    -1,    -1,
      -1,   440,   440,   322,    -1,    -1,    -1,   446,   446,    -1,
     449,   449,    -1,  2930,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,   991,    -1,    15,    16,    40,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   362,    -1,    -1,  3416,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,   446,    -1,  2976,
    2977,    -1,   381,    53,    -1,    -1,   455,    -1,    -1,    -1,
    2977,  2578,  2579,    -1,    -1,    -1,    -1,    -1,    -1,  3024,
      -1,  1798,    -1,    -1,    -1,    -1,    -1,    -1,  3005,    -1,
      80,  3008,  3009,   106,  1811,  1812,    -1,    -1,  2986,  2606,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3024,    -1,    -1,
      -1,    -1,    -1,    -1,  2621,  2622,  2623,  2624,  2625,  2626,
    2627,  2628,  2629,  2630,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   450,   743,   744,   745,  3052,     8,    -1,    -1,    11,
    3057,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,  3068,  3069,    -1,    -1,  3072,    -1,  3074,    -1,    -1,
      -1,  1878,   172,   176,    36,    -1,    -1,  1884,    -1,    -1,
      -1,    -1,    -1,    -1,   785,   786,   787,    -1,  1037,    -1,
      -1,   792,  3099,   794,    -1,    -1,    -1,   177,    -1,   202,
      -1,    -1,   803,    -1,    -1,    -1,   807,   808,    -1,    -1,
      -1,   812,   813,    -1,   194,    40,  3123,    -1,    -1,   199,
      -1,    -1,    -1,    -1,  1182,   826,   827,   828,    -1,    -1,
      -1,    -1,    -1,  1191,    -1,    60,    -1,    -1,    -1,   840,
     841,    -1,   843,    -1,    -1,    -1,    -1,  3154,   251,    -1,
      -1,    -1,    -1,    -1,    -1,   856,    -1,   237,   261,    -1,
      -1,   862,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,    -1,   873,    -1,    -1,   876,    -1,    -1,    -1,    -1,
      -1,   106,  2518,  2519,   536,    -1,  3193,  3194,    -1,    -1,
      -1,  3198,  3170,  3171,    -1,  3198,    -1,  3194,    -1,    -1,
      -1,  3208,   305,  3210,  1037,  3212,    -1,    -1,    -1,  3216,
      -1,  3218,   292,  3220,    -1,   315,   316,   317,    -1,   920,
     921,    -1,    -1,  3198,  3231,    -1,    -1,    -1,    -1,  3236,
      -1,  3238,    -1,    -1,   935,   936,   937,   938,   939,  3246,
      -1,    -1,    -1,  3198,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   952,  3259,    -1,   357,    -1,    -1,  3264,    -1,    -1,
     222,    -1,  3259,    -1,    -1,    -1,  1215,    -1,    -1,  3247,
    2867,  3249,    -1,    -1,    -1,    -1,    -1,   202,    -1,   382,
     380,    -1,    -1,    -1,   985,   986,    -1,   988,    -1,    -1,
     991,    -1,     8,    -1,    -1,    11,   997,   998,   401,    15,
      16,    -1,  1003,    19,    20,    21,  3313,    -1,  1009,   172,
      -1,  3289,   392,    -1,    -1,  1016,  3323,   417,    -1,    -1,
      36,    -1,    -1,    -1,    -1,  1026,   251,  3305,  3335,    -1,
     292,  3309,  1033,    -1,    -1,    -1,   261,    -1,    -1,    -1,
      -1,    -1,  3349,  1044,    -1,    -1,  3349,    -1,   273,    -1,
     450,    -1,    -1,    -1,  1303,    -1,    -1,  1415,  1416,    -1,
    3367,   461,    -1,  1421,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2709,  3349,    -1,    -1,   477,    -1,    -1,
     305,    -1,  1215,    -1,    -1,  3392,    -1,    -1,    -1,  3392,
      -1,    -1,  1093,    -1,  3349,    -1,    -1,    -1,   750,   751,
    3407,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3416,
      -1,  3418,    -1,    -1,    -1,   515,    -1,  3392,    -1,   499,
      -1,  3418,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,   357,    -1,  3441,    -1,    -1,  3392,  3441,  2246,
     792,   304,  1143,    -1,    -1,  1146,    -1,    -1,  3455,  3456,
    3457,   803,   315,   316,   317,  3433,    13,   382,    -1,  1160,
    1161,    -1,    19,    -1,    -1,    -1,  3441,  1168,    -1,    -1,
    1303,    -1,    -1,    -1,    31,  3482,   401,    -1,    -1,    -1,
      -1,  3459,    -1,    -1,    -1,    -1,  3441,    -1,    45,    46,
    1191,  2298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   851,
    1201,  1202,    -1,    -1,    -1,    -1,   222,    -1,    -1,  2316,
      -1,    -1,    -1,  1214,    -1,     8,  3523,   380,    11,   871,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
    1231,    -1,  2868,    -1,  1235,    -1,    -1,  3134,    -1,  1240,
     502,   503,   504,    36,   506,   507,   508,   509,   510,   511,
      26,  2358,   109,    -1,   417,    -1,    32,    -1,  3155,  3156,
    2367,    -1,  2369,    -1,    40,    -1,  2373,    -1,  2375,    -1,
      -1,    -1,    -1,    -1,  1523,    -1,   292,    -1,    -1,    -1,
      -1,   126,   127,  3180,    60,    -1,    -1,   450,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1296,    -1,  1298,   461,    -1,
      -1,    -1,    -1,  1304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    55,    -1,  1318,    -1,    -1,
      -1,    -1,    -1,    -1,   976,    -1,  1327,   172,    -1,    -1,
     106,  1332,    -1,  1334,  1335,    -1,  1337,  1338,   501,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1704,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    42,    -1,  1009,    -1,    -1,
      -1,   137,   102,    -1,  1016,    -1,     8,  1616,    -1,    11,
      -1,    -1,  3008,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
    1523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1052,   141,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,
      -1,    -1,  1064,    -1,  1415,  1416,    -1,    -1,    -1,    -1,
    1421,   108,  1423,   110,    -1,   112,   202,    -1,   168,   222,
      -1,   171,    -1,    -1,    -1,  1436,    -1,  1438,  1439,  1091,
      -1,    -1,    -1,    -1,    -1,  1446,    -1,   187,  1449,    -1,
      -1,  1452,    -1,    -1,    -1,    -1,  1457,    -1,    -1,  1460,
      -1,    -1,    -1,    -1,  1465,    -1,  1467,    -1,  1469,    -1,
     315,   316,   317,  1474,    -1,   251,    -1,    -1,    -1,    -1,
      -1,    -1,     0,  1616,    -1,   261,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,   273,    -1,   292,
      -1,    -1,  1751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2617,    -1,    -1,    -1,    -1,  3412,    -1,    -1,   294,    -1,
      -1,    -1,    -1,  1175,  1176,    -1,  1178,    -1,    -1,   305,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
     280,    -1,    -1,  2650,    -1,    -1,   391,    -1,   288,    -1,
    1908,  1909,  1910,  1911,  1912,  1913,    -1,    -1,  1916,  1917,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,   413,    -1,
     310,    -1,   417,    -1,    -1,   351,    -1,  1578,    -1,   355,
     222,   357,   100,    -1,    -1,    -1,    -1,    -1,  1589,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   450,   382,    -1,    -1,    -1,
      -1,   387,    -1,    -1,    -1,    -1,   461,    -1,  1751,    -1,
      -1,    -1,    -1,    -1,    -1,   401,    -1,  1628,    -1,   147,
       8,    -1,   477,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,   162,    -1,  1895,    -1,    37,   167,
     292,    -1,    -1,    42,   172,    -1,   501,    -1,  1907,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,   186,    -1,
     515,    -1,    -1,    -1,  1675,    -1,  1677,    -1,  1679,    -1,
      -1,    -1,   458,    -1,    -1,    -1,    -1,    -1,  1937,  1690,
      -1,  1692,  1344,    -1,    -1,  1944,   553,    -1,    -1,    -1,
     218,    -1,    -1,  1704,    -1,    -1,  2813,    -1,    -1,   502,
     503,   504,   101,   506,   507,   508,   509,   510,   511,    -1,
     238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1729,    -1,
    1731,  1980,    -1,    -1,    -1,  1984,    -1,    -1,  2096,  2097,
      -1,    -1,    -1,  1992,  1745,  1746,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1756,  1757,  1758,  1759,    -1,
    1761,    -1,  1895,    -1,    -1,  2014,  1767,    -1,  1769,   287,
      -1,    -1,   290,    -1,  1907,    -1,    -1,    -1,   296,    -1,
    1781,  1782,    -1,    -1,   173,  1786,  1787,    -1,    -1,    -1,
    1791,  1792,  1793,  1794,    -1,  1796,  1797,  1449,    -1,    -1,
    1452,    -1,    -1,    -1,  1937,  1457,    -1,    -1,  1460,    -1,
      -1,  1944,  1813,  1465,    37,    -1,    -1,    -1,   336,    42,
     209,  1822,  1823,  1824,  1825,  1826,  1827,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
    1841,   359,    -1,    -1,   222,    -1,   235,  1980,    -1,    -1,
     537,  1984,  2210,    -1,    -1,   542,  1857,    -1,   545,  1992,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,  2982,    -1,    -1,   101,    -1,
     269,  2014,    -1,     0,    -1,    -1,    -1,   744,   745,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3005,   417,
    1552,   290,    -1,    -1,    -1,    -1,    -1,  1908,  1909,  1910,
    1911,  1912,  1913,    -1,   292,  1916,  1917,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,    -1,   315,   445,    -1,    -1,
      -1,    -1,    -1,   322,    -1,    -1,    -1,   455,    -1,    -1,
      -1,  1037,    -1,    -1,    -1,  1946,    -1,    -1,    -1,    -1,
     173,    -1,    -1,    -1,    -1,    -1,   474,  1958,   476,   477,
      -1,    -1,    -1,    -1,    -1,    -1,  1967,    -1,    -1,    -1,
      -1,    -1,  1973,   362,    -1,    -1,    -1,  1978,  3085,  1631,
      -1,    -1,  1983,   100,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,   381,  1994,  1995,   513,    -1,    -1,   516,   517,
     518,    -1,   225,    -1,    -1,   862,     8,    -1,    -1,    11,
      -1,    -1,   235,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     147,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,   162,   269,  3154,    -1,  1701,
     167,    53,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,   450,    -1,  2064,   181,    -1,   455,  2068,    -1,   186,
      -1,    -1,  2073,  2322,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1037,    -1,
      -1,    -1,   315,    -1,    -1,  2096,  2097,    -1,    -1,   322,
      -1,   218,    -1,    -1,    -1,    -1,    -1,   794,    -1,    -1,
      -1,  1037,  2113,    -1,    -1,    -1,  1037,    -1,    -1,  1215,
      -1,   238,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,   362,
      -1,    -1,    -1,    -1,    -1,  2146,  1003,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2158,   381,    -1,
    2518,  2519,  2163,    -1,    -1,    -1,  2167,    -1,    -1,  1026,
     287,    -1,    -1,   290,  3281,   177,    -1,    -1,    -1,   296,
      -1,    -1,  1834,    -1,    -1,    -1,   873,    -1,    -1,  2322,
      -1,  1843,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2207,  1303,  2457,  2210,
      -1,    -1,  2213,    -1,    -1,    -1,    -1,    -1,    -1,   336,
     222,   223,    -1,    -1,    -1,    -1,    -1,   450,  2229,    -1,
      -1,    -1,    -1,   920,    -1,   237,  1093,    -1,    -1,    -1,
      -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,   935,   936,
     937,   938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2514,  1215,    -1,    -1,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1215,
     292,    -1,    -1,   295,  1215,    -1,    -1,    -1,    -1,  2300,
     417,   988,    -1,  1160,  1161,  2306,    -1,    -1,    -1,  3416,
      -1,    -1,    -1,    -1,    -1,  1967,    -1,  2318,  2319,  2320,
    2321,  1973,    -1,    -1,  2457,    -1,    -1,    -1,   445,    -1,
      -1,  2332,    -1,  2334,    -1,    -1,  2337,    -1,   455,    -1,
    2341,    -1,    -1,    -1,  2345,    -1,    -1,    -1,    -1,    -1,
    2351,  2709,    -1,    -1,  1303,    -1,    -1,   474,    -1,   476,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2617,    -1,
    2371,  2372,    -1,  2374,    -1,    -1,  2734,  1303,    -1,    -1,
      -1,  2514,  1303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,  2403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2778,    -1,  2423,    -1,    -1,    -1,    -1,  1523,    -1,    -1,
    2431,  2432,  2433,    -1,    -1,    -1,    -1,    -1,    -1,  2440,
      -1,  2442,  2443,    -1,    -1,    -1,    -1,    -1,  2449,  2101,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    -1,    -1,  2712,    -1,    -1,    -1,  2119,  2469,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,  1334,  1335,    -1,
    1337,    -1,  2483,  2135,  2617,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    60,    -1,  2146,    53,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
    2868,  2163,    -1,    -1,  1201,    -1,    -1,  2518,  2519,    -1,
    1616,    -1,    80,   525,    -1,    -1,    -1,  1214,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
    2789,    -1,    -1,    -1,    -1,    -1,  2547,    -1,  1235,   117,
      -1,    -1,  2553,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2569,   991,
      -1,    -1,  2573,    -1,  1523,    -1,  2577,  2578,  2579,  2712,
      -1,  1438,  2583,  2584,  2585,    -1,  2587,   145,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1523,    -1,    -1,
      -1,    -1,  1523,    -1,    -1,  2606,    -1,  2608,   176,    -1,
    1467,  1298,  1469,    -1,    -1,    -1,    -1,  1304,    -1,   177,
    2621,  2622,  2623,  2624,  2625,  2626,  2627,  2628,  2629,  2630,
      -1,    -1,    -1,    -1,   202,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,  2896,    -1,    -1,
    3008,    -1,  2653,    -1,    -1,  1751,  2789,    -1,    -1,  2660,
      -1,    -1,    -1,    -1,  2316,    -1,    -1,  1616,    -1,  2670,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,  2930,    -1,   251,    -1,    -1,    -1,  2688,    -1,    -1,
    1616,    -1,    -1,   261,    -1,  1616,    -1,  2698,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,    -1,   275,  2709,    -1,
      -1,    -1,    -1,    -1,  2715,    -1,    -1,    -1,    -1,    -1,
      -1,  2722,  2723,  2724,  2725,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2734,   292,    -1,  2737,   305,    -1,    -1,
    2741,  2742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2750,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1446,
    3009,    -1,    -1,  2896,    -1,    -1,    -1,    -1,    -1,  1191,
      -1,    -1,    -1,    -1,    -1,    -1,  2777,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2930,    -1,  1895,
      -1,    -1,  1751,  3052,    -1,    -1,  2807,    -1,  2809,    -1,
      -1,  1907,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2823,    -1,    -1,  1751,  2827,    -1,    -1,    -1,
    1751,    -1,  2833,   401,   392,   403,    -1,    -1,   406,  2491,
      -1,  1937,    -1,    -1,    -1,    -1,  2847,    -1,  1944,    -1,
      -1,    -1,  2853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3218,    -1,    -1,    -1,    -1,  2866,  2867,  2868,    -1,    -1,
      -1,    -1,  2524,  2874,  1731,    -1,  3009,    -1,    -1,    -1,
      26,    -1,    -1,    -1,  1980,    -1,    32,    -1,  1984,  1746,
    2891,  2543,    -1,    -1,    40,    -1,  1992,  2549,    -1,  1756,
      -1,  1758,    -1,    -1,  1761,  3154,    -1,    -1,    -1,    -1,
    1767,    -1,  1769,    -1,    60,    -1,    -1,    -1,  2014,  3052,
      -1,    -1,    -1,  2575,    -1,  1782,    -1,    -1,    -1,    -1,
    1787,    -1,    -1,    -1,  1791,  1792,  1793,  1794,    -1,  1796,
    1797,   499,    -1,    -1,    -1,    -1,  1895,   515,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,  1907,    -1,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2969,  1895,
      -1,  2972,    -1,    -1,  1895,    -1,    -1,    -1,    -1,    -1,
      -1,  1907,    -1,    -1,  2985,    -1,  1907,    -1,  1937,    -1,
    1677,   137,  1679,  1415,  1416,  1944,    -1,    -1,    -1,  1421,
    3001,    -1,  2654,  1690,    -1,    -1,    -1,  3008,    -1,    -1,
      -1,  1937,    -1,    -1,    -1,    -1,  1937,    -1,  1944,    -1,
      -1,  3154,    -1,  1944,    -1,    -1,    -1,    -1,    -1,  2681,
      -1,  1980,  2684,  3034,    -1,  1984,    -1,    -1,    -1,  3040,
      -1,    -1,  1729,  1992,    -1,    -1,  3047,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1980,    -1,   202,    -1,  1984,  1980,
      -1,    -1,    -1,  1984,    -1,  2014,  1992,    -1,    -1,    -1,
      -1,  1992,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3081,    -1,  2734,    -1,    -1,    -1,    -1,    -1,  2014,  1946,
      -1,    -1,    -1,  2014,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3103,    -1,    -1,   251,    -1,  3108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   261,    -1,    -1,   838,   839,
      -1,  1978,    -1,    -1,    -1,    -1,  1983,   273,    -1,    -1,
      -1,    -1,    -1,  3134,    -1,  1822,  1823,  1824,  1825,    -1,
    1827,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,  3155,  3156,    -1,  2809,    -1,   305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3416,    -1,    -1,
      -1,  2823,    -1,  3174,    -1,  3176,    -1,    -1,    -1,  3180,
      -1,    -1,    -1,    -1,    -1,   905,    -1,    -1,    -1,   909,
     910,    -1,    -1,    -1,  3195,    -1,    -1,  3198,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,    -1,  2064,    -1,   355,
      -1,   357,    -1,    -1,    -1,    -1,  2073,  3218,    -1,    -1,
      -1,  3222,  3223,    -1,  3225,    -1,  2322,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1657,   382,    -1,    -1,    -1,
      -1,   387,   962,    -1,    -1,    -1,    -1,    -1,    -1,  3250,
      -1,    -1,    -1,    -1,    -1,   401,  3257,    -1,    -1,    -1,
      -1,   981,    -1,    -1,    -1,    -1,    -1,   987,    -1,    -1,
     990,  1958,    -1,   993,   994,   995,   996,    -1,    -1,    -1,
      -1,    -1,  1704,  3416,    -1,    -1,    -1,  3288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2158,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   458,    -1,    -1,  1035,  1036,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3327,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2986,    -1,  1056,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3349,    -1,
    2207,    -1,    -1,    -1,    -1,  1075,  2213,    -1,    -1,    -1,
      -1,  2457,    -1,    -1,    -1,    -1,  1086,  1087,  1088,    -1,
    1090,  1091,  3024,  2322,    -1,  3376,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,  3389,  3390,
      -1,  3392,  3393,    -1,    -1,    -1,  2322,    -1,    -1,    -1,
    3401,  2322,    -1,    -1,  1124,    -1,    -1,    -1,    -1,    -1,
      -1,  3412,    -1,    -1,    -1,    -1,    46,    -1,  2514,    -1,
      -1,  1141,  1142,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3434,    -1,    -1,    -1,    -1,    -1,    -1,
    3441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,    -1,
      -1,  1181,  1182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1192,  1193,    -1,  2332,    -1,  3478,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1908,  1909,  1910,  1911,
    1912,  1913,  3493,    -1,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,    -1,    -1,    -1,    -1,  2457,    -1,
      -1,    -1,    -1,    -1,     0,   145,    -1,    -1,  3170,  3171,
      -1,  2617,    -1,    -1,    -1,    -1,    -1,    -1,  1248,    -1,
      -1,  2457,    -1,    -1,    -1,    -1,  2457,  1257,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1281,    -1,    -1,   194,  2514,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2440,    -1,    -1,  2443,    -1,  2514,    -1,
      -1,    -1,  2449,  2514,    -1,  3247,    -1,  3249,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,  2712,    -1,    -1,  2306,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2319,  2320,  2321,    -1,    -1,  3289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2334,  1368,    -1,
    2337,    -1,    -1,  3305,    -1,    -1,     8,  3309,  2345,    11,
      -1,   147,   292,    15,    16,    -1,    -1,    -1,  2617,    -1,
      -1,    -1,    -1,    -1,  2096,  2097,   162,    -1,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,  2617,    -1,  2789,    46,   181,  2617,    -1,    -1,    -1,
     186,    53,    -1,    -1,    -1,    -1,    -1,    -1,  1428,    -1,
    1430,  1431,    -1,    -1,    -1,    -1,  2573,    -1,    -1,    -1,
    2577,  2578,  2579,  1443,  1444,    -1,    -1,    -1,    80,    -1,
      -1,    -1,   218,    -1,    -1,    -1,    -1,    -1,    -1,  1459,
      -1,    -1,    -1,    -1,  2431,  2432,  2433,    -1,    -1,  2606,
      -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,  2712,  2621,  2622,  2623,  2624,  2625,  2626,
    2627,  2628,  2629,  2630,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3433,    -1,    -1,    -1,    -1,  2712,    -1,  2210,    -1,
      -1,  2712,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
    2896,   287,    -1,    -1,   290,    -1,    -1,  3459,    -1,    -1,
     296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2930,    -1,    -1,    -1,    -1,    -1,
    2789,    -1,   194,    -1,  1564,    -1,    -1,   199,    -1,    -1,
     336,    -1,  1572,    -1,    -1,    -1,    -1,    -1,  2715,    -1,
      -1,    -1,    -1,  2789,    -1,    -1,    -1,    -1,  2789,   499,
      -1,    -1,    -1,   359,    -1,    -1,   506,   507,   508,   509,
     510,   511,  2569,    -1,  2741,   237,    -1,    -1,    -1,    -1,
      -1,  1611,    -1,    -1,    -1,    -1,    -1,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,    -1,    -1,    -1,    -1,  1629,
    1630,    -1,    -1,  3009,  1634,    -1,    -1,    -1,  1638,    -1,
      -1,  1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,
      -1,   417,  1652,    -1,    -1,    -1,    -1,    -1,    -1,  1659,
     292,  1661,    -1,    -1,    -1,    -1,    -1,  2896,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3052,    -1,    -1,   445,
    1680,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,
    2896,    -1,    -1,  2660,    -1,  2896,    -1,    -1,    -1,    -1,
      -1,  2930,    -1,    -1,    -1,    -1,    -1,    -1,   474,    -1,
     476,   477,    -1,    -1,    -1,  1715,  1716,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2930,    -1,    -1,    -1,    -1,  2930,
    2867,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,
     516,   517,   518,    -1,    -1,  2722,  2723,  2724,  2725,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,  3154,    -1,
    3009,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1802,  3009,    -1,    -1,  1806,    46,  3009,  1809,
    1810,    -1,    -1,    -1,    53,    -1,  2518,  2519,    -1,    -1,
      -1,    -1,    -1,  3052,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,     8,  3052,  1847,    11,    -1,
      -1,  3052,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,  1869,
    1870,    -1,    -1,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1899,
    1900,    -1,  1902,  3040,    -1,    -1,   145,  2874,    -1,    -1,
    3047,     8,    -1,    -1,    11,    -1,    -1,    80,    15,    16,
      17,    18,    19,    20,    21,  3154,    -1,    -1,    -1,    -1,
      -1,  1931,  1932,    -1,    -1,  1935,    -1,    -1,   177,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3154,    46,
      -1,    -1,    -1,  3154,    -1,   194,    53,    -1,    -1,    -1,
     199,    -1,    -1,    -1,  1964,    -1,  3103,    -1,    -1,  1969,
      -1,  3108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   145,    80,     3,    -1,     5,    -1,  1988,    -1,
    1990,    -1,    -1,    -1,    -1,    -1,    -1,  3134,   237,   991,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2709,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,  3155,  3156,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2027,    -1,    -1,
      -1,   194,  2734,    -1,    -1,    -1,   199,    -1,    -1,    -1,
    3416,    -1,    -1,  3180,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2066,    -1,    -1,    -1,
      -1,  2071,  2072,    -1,   237,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,  3222,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,   113,   114,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2115,    -1,    -1,  2118,  1111,
    2120,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,  2136,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1156,    -1,  2868,    -1,    -1,    -1,
     189,   190,    -1,    -1,    -1,    -1,  2176,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,  3416,    -1,    -1,
      -1,    -1,    -1,  2193,  2194,   292,    -1,    -1,   295,  1191,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3174,    -1,    -1,
    3416,    -1,  2212,    -1,    -1,  3416,    -1,    -1,    -1,    -1,
      -1,  2221,    -1,    -1,    -1,    -1,    -1,     0,  3195,   392,
      -1,    -1,    -1,    -1,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    22,
    1242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
     499,    34,    35,    -1,    -1,    -1,    -1,   506,   507,   508,
     509,   510,   511,    -1,    47,  3412,    -1,    -1,  2278,    52,
      -1,    -1,    -1,    -1,  2284,    -1,    -1,    -1,    61,    -1,
    3257,    -1,    -1,    -1,  1286,   392,    -1,    -1,    -1,  1291,
      -1,    -1,    75,    -1,    -1,    -1,  3008,    -1,    -1,    -1,
      -1,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3288,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,   111,    -1,
    2340,    -1,    -1,   506,   507,   508,   509,   510,   511,  1341,
      -1,    -1,    -1,   126,   127,   128,    -1,   376,   377,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
     143,    -1,    -1,    -1,  1366,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,  1411,
      -1,  1413,   519,  1415,  1416,   198,  1418,    -1,    -1,  1421,
      -1,    -1,  1424,    -1,    -1,  1427,    -1,    -1,    -1,    -1,
    1432,   214,     3,  1435,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,   471,   472,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,  2474,    36,   495,   496,    -1,    40,
    2480,  2481,    -1,    -1,  1476,    46,    -1,    -1,    -1,    -1,
      -1,  2491,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2502,    -1,    -1,  2505,    -1,  2507,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2515,  3218,    -1,    -1,    80,
      -1,    -1,    -1,  2523,  2524,    -1,    -1,    -1,    -1,    -1,
    2530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   315,   316,   317,  2545,    -1,    -1,    -1,    -1,
     323,    -1,    -1,   326,    -1,  2555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1560,    -1,
      -1,    -1,    -1,    -1,    -1,  2575,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,  1576,    -1,    -1,    -1,    -1,    -1,
      -1,   364,    -1,    -1,  1586,  1587,  1588,    -1,    -1,    -1,
    1592,    -1,    -1,    -1,  1596,    -1,    -1,   380,    -1,    -1,
      -1,    -1,     8,    -1,   387,    11,   177,    -1,   391,    15,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,    -1,
      -1,    -1,  2632,   194,  2634,    -1,    -1,    -1,   199,    -1,
     413,    -1,    -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,   222,   223,    -1,   437,    -1,  1658,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,   450,    -1,    -1,
     453,    -1,    -1,   456,    80,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,  1698,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,  1714,    -1,    -1,    -1,    -1,  1719,   501,  2729,
    2730,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,  1736,   518,    -1,    -1,    -1,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2764,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2778,    -1,
      -1,   177,    -1,  2783,  2784,    -1,    -1,    -1,  2788,    -1,
      -1,    -1,    -1,  2793,    -1,    -1,  2796,  2797,   194,    -1,
      -1,  2801,  2802,   199,    -1,  2805,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2816,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2860,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,  2887,    -1,   113,
     114,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1897,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1905,  1906,    -1,  1908,  1909,  1910,  1911,
    1912,  1913,    -1,    -1,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,   190,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,  2976,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,  3024,    -1,    -1,    -1,    -1,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,  2030,   263,
     264,  2033,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3057,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3068,  3069,
      -1,    -1,  3072,    -1,  3074,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2079,    -1,    -1,
      -1,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,  3099,
      -1,    -1,    -1,   499,  2096,  2097,    -1,  2099,  2100,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,  2111,
      -1,    -1,  2114,  3123,    -1,    -1,    -1,    -1,    -1,    -1,
    2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,    -1,    -1,    -1,    -1,   194,    -1,
      -1,     8,    -1,   199,    11,  2157,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    36,
      -1,    -1,    -1,  3193,    -1,    -1,    -1,    -1,    -1,    46,
      -1,   237,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,  3212,    -1,    -1,    -1,  3216,    -1,  2210,    -1,
    3220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3231,    -1,    80,    -1,    -1,  3236,    -1,  3238,   275,
      -1,    -1,   278,    -1,    -1,    -1,  3246,   471,   472,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,  3264,    -1,    -1,    -1,    -1,    -1,
      -1,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2279,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,  2289,  2290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3313,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3323,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,  3335,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,  2354,    -1,    -1,    -1,    -1,  3367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2378,  2379,  2380,    -1,
     237,  2383,  2384,  2385,  2386,  2387,  2388,    -1,    -1,    -1,
    2392,  2393,  2394,  2395,  2396,  2397,  2398,  2399,  2400,  2401,
      -1,    -1,    -1,     8,  2406,  2407,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,  2434,    -1,    -1,   292,    -1,  2439,   295,    -1,
      -1,    46,    -1,    -1,    -1,  3455,  3456,  3457,    53,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
     516,  2473,  3482,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2492,    -1,    -1,  2495,  2496,    -1,    -1,    -1,    -1,    -1,
      -1,  2503,  2504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3523,    -1,  2517,  2518,  2519,  2520,    -1,
    2522,    -1,    -1,    -1,  2526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    36,    -1,    -1,  2580,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,   194,
      -1,    -1,    53,    -1,   199,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    80,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2685,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,  2709,    15,    16,
      17,    18,    19,    20,    21,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,  2765,   177,  2767,    -1,    -1,    -1,    -1,
      -1,  2773,    -1,    80,    -1,    -1,   237,    -1,    -1,    -1,
    2782,   194,    -1,  2785,    -1,  2787,   199,   392,    -1,  2791,
      -1,    -1,  2794,  2795,    -1,    -1,  2798,  2799,    -1,    -1,
      -1,    -1,    -1,    -1,  2806,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,  2815,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,   237,    -1,    68,    69,  2830,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,  2868,   109,   110,    -1,
     177,   113,   114,    -1,    -1,    -1,    46,    -1,    -1,   292,
      -1,    -1,   295,    53,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      80,   516,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,   190,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3007,  3008,   177,    -1,    -1,
      -1,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
      -1,   263,   264,    -1,   194,    -1,    -1,    -1,    -1,   199,
    3032,  3033,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,   222,   223,  3056,   516,    -1,    -1,  3060,    -1,
    3062,  3063,  3064,    -1,    -1,  3067,    -1,   237,  3070,  3071,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3079,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   499,    -1,    -1,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,   516,    -1,   275,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3120,    -1,
      -1,    -1,   292,    -1,  3126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,    -1,  3139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,  3200,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,   471,
     472,  3233,  3234,  3235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3253,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3328,    -1,    -1,   499,
      -1,    -1,   502,   503,   504,  3337,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3388,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3431,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,  3485,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,   525,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,   525,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,   501,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,   516,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,   501,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
     501,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,   516,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,   516,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,   516,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,   516,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,    -1,    -1,    -1,    -1,
     513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,   524,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,
     515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,    -1,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,   508,    -1,     3,     4,     5,
     513,    -1,   515,     9,    -1,    -1,    -1,   520,   521,    -1,
     523,   524,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,     3,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,    -1,   521,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,    -1,    -1,   292,   293,   294,    -1,
     296,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     516,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,   516,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,     3,   501,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,   291,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,    -1,     3,   501,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,   291,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
     172,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,   501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,   172,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,   501,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
       3,   501,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     515,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,
     515,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,    -1,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
     498,    -1,     3,    -1,   502,   503,   504,     8,   506,   507,
     508,   509,   510,   511,    15,    16,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
     177,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   177,
      53,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
     237,   199,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   275,   237,
     199,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,   222,   223,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   237,    -1,
     278,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,   516,
     392,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    36,    -1,    -1,    -1,   516,   392,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,   516,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      36,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,
      46,     8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,
      17,    18,    19,    20,    21,    -1,   499,    -1,    -1,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    36,
      -1,    -1,    -1,   516,    80,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,   177,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,   177,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,   194,    -1,
      -1,    -1,    -1,   199,    36,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    46,    -1,    -1,    -1,    -1,    -1,
     177,    53,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,   237,   199,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   275,
     237,   199,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   237,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,   516,   392,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,     8,    -1,   278,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,   392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    80,    -1,    -1,    -1,
     516,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    36,    -1,    -1,    -1,   516,
     392,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    36,    -1,    -1,   516,    80,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,   237,   506,   507,   508,   509,   510,   511,
      -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,    -1,   194,   278,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,   237,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,    -1,   237,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
     514,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
      -1,     8,    -1,    -1,    11,    -1,   506,   507,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,   126,
      -1,    -1,    -1,    -1,    53,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     177,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    80,   167,
      -1,    36,    -1,    -1,   172,    -1,    -1,    -1,    -1,   177,
      -1,    46,    -1,    -1,    -1,   222,   223,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
     237,   199,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   275,   237,
     199,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,   222,   223,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   237,    -1,
     278,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     222,   223,   177,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,   194,
      -1,    -1,    -1,   292,   199,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,    -1,   222,   223,    -1,
      -1,    -1,    -1,   275,    -1,   324,   278,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,   455,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,   392,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      36,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      46,     8,    -1,    -1,    11,   177,    -1,    53,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    36,
      -1,    -1,    -1,    40,    80,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    46,    -1,   295,    -1,    -1,   172,    -1,    53,    -1,
       8,   177,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    80,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
     177,    -1,    -1,    -1,    -1,    53,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,   237,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
     237,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   167,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   194,
      -1,   278,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,   222,   223,   392,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,   392,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,   292,    -1,    -1,   295,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,   392,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    36,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   392,    53,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    36,    -1,   425,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    80,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,   222,   223,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    36,   237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    46,    -1,   295,    -1,    -1,
      -1,    -1,    53,    -1,   392,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    80,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    46,   295,    -1,    -1,    -1,    -1,    -1,
      53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,   392,    11,    -1,    53,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    80,    -1,   177,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,   392,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,   222,
     223,   177,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,   194,    -1,
      -1,   292,    -1,   199,   295,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,   177,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,   194,    -1,
      -1,   237,    -1,   199,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,   237,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,
      -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,   291,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,   291,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,   291,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,    -1,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,    -1,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,    -1,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,    -1,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,    -1,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,    -1,   322,   323,   324,    -1,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,    -1,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,    -1,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
      -1,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,    -1,    -1,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,    -1,   322,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,    -1,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,    -1,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,    -1,    -1,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,    -1,   322,   323,   324,
      -1,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,    -1,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,    -1,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
      -1,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,    -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,    -1,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,    -1,   276,   277,
     278,   279,    -1,    -1,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,    -1,   322,   323,   324,    -1,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,    -1,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,    -1,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,    -1,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    22,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,    32,    -1,    34,    35,
      -1,    -1,    -1,    -1,    22,    -1,    -1,   495,   496,   497,
     498,    -1,    -1,    -1,    32,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,
      98,    81,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   111,    -1,    24,    -1,    97,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,    -1,   143,   126,   127,
      -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,
      -1,    -1,   168,   151,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,    -1,
     168,    -1,    81,    -1,   172,    -1,   156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,   169,
      -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,   214,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
      -1,    -1,    -1,   203,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,   156,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     169,    -1,    -1,    -1,    -1,   174,   246,    -1,    -1,    -1,
     250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   315,
     316,   317,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
     326,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,   314,    -1,    -1,   246,    -1,   355,
     320,   250,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,
      -1,    -1,    -1,    -1,    -1,   335,    -1,   355,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,   364,    -1,    -1,    -1,
      -1,   387,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,   401,    -1,    -1,   368,   387,
      -1,   371,    -1,   391,    -1,    -1,    -1,   413,    -1,    -1,
      -1,   417,   382,   401,    -1,   385,    -1,    -1,    -1,    -1,
      -1,   320,    -1,    -1,    -1,   413,    -1,    -1,    -1,   417,
      -1,   437,    -1,   403,    -1,    -1,   335,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   450,    -1,    -1,   417,    -1,   437,
     456,    -1,    -1,   423,   424,   461,    -1,    -1,    -1,   465,
      -1,    -1,   450,    -1,   434,    -1,    -1,    -1,   456,   368,
     440,   477,   371,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,    -1,    -1,   385,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,   501,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,   417,    -1,
      -1,    -1,    -1,    -1,    -1,   424,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,
      -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   143,   151,
     153,   154,   168,   172,   198,   214,   240,   315,   316,   317,
     323,   326,   355,   364,   380,   387,   391,   401,   413,   417,
     437,   450,   453,   456,   461,   477,   501,   515,   527,   528,
     529,   530,   531,   538,   549,   550,   551,   554,   555,   557,
     568,   586,   634,   644,   647,   650,   654,   656,   659,   660,
     664,   670,   672,   676,   683,   687,   688,   689,   696,   701,
     717,   721,   722,   725,   727,   728,   729,   730,   732,   734,
     735,   739,   792,   793,   961,   963,   964,   965,   966,   971,
     974,   980,   981,   982,   986,   431,   480,   962,   203,   371,
     382,   417,   467,   108,   192,   552,   962,     3,    22,    23,
      24,    25,    26,    27,    28,    29,    31,    32,    33,    42,
      43,    44,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    59,    60,    61,    62,    63,    64,
      67,    68,    69,    70,    71,    72,    73,    75,    76,    77,
      78,    79,    81,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    94,    95,    96,    97,    98,    99,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   118,   120,   121,   122,   123,
     124,   125,   128,   129,   130,   131,   134,   135,   136,   137,
     138,   140,   141,   142,   144,   145,   146,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   161,
     163,   164,   165,   166,   168,   170,   171,   173,   174,   175,
     176,   177,   178,   180,   182,   183,   184,   185,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     200,   201,   202,   203,   204,   205,   206,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   219,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   234,
     235,   236,   237,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   276,
     277,   278,   279,   281,   282,   283,   284,   285,   286,   288,
     289,   292,   293,   294,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   330,   331,   332,   333,   334,   335,   337,   338,
     339,   340,   341,   342,   343,   344,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   392,   393,
     394,   395,   396,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   415,   416,
     418,   419,   420,   421,   422,   423,   424,   426,   427,   428,
     431,   432,   433,   434,   435,   437,   438,   439,   440,   441,
     442,   443,   444,   447,   448,   449,   451,   452,   453,   454,
     456,   457,   458,   459,   460,   461,   462,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   475,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   561,   637,
     638,   639,   870,   950,   954,     3,   176,   247,   410,   556,
     561,   637,   290,   962,    55,   172,   515,   581,   178,   241,
     295,   314,   371,   421,   423,   440,   446,   449,   632,   652,
     695,     5,    30,   326,   561,   562,   949,     3,    30,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    45,    49,
      53,    54,    55,    56,    57,    58,    65,    66,    71,    72,
      74,    79,    80,    81,    82,    83,    89,    93,   100,   101,
     108,   112,   115,   117,   119,   126,   127,   132,   133,   139,
     143,   147,   152,   159,   160,   162,   165,   167,   169,   171,
     172,   173,   176,   177,   179,   181,   182,   183,   186,   194,
     199,   207,   209,   210,   216,   217,   218,   219,   220,   222,
     223,   225,   232,   233,   235,   237,   238,   247,   268,   269,
     270,   274,   275,   278,   280,   281,   283,   287,   290,   291,
     295,   296,   299,   300,   302,   303,   315,   316,   317,   318,
     321,   322,   325,   329,   336,   340,   345,   359,   362,   366,
     380,   381,   388,   391,   392,   395,   397,   410,   412,   413,
     414,   417,   419,   425,   427,   428,   429,   430,   433,   435,
     436,   439,   445,   446,   450,   455,   461,   462,   463,   465,
     473,   474,   476,   477,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   567,   637,   641,   643,    24,
      81,    97,   146,   156,   169,   174,   203,   246,   250,   320,
     335,   368,   371,   382,   385,   403,   417,   423,   424,   434,
     440,   467,   652,   665,   666,   669,   962,   949,   100,   137,
     465,   515,   530,   531,   538,   554,   555,   568,   586,   634,
     644,   647,   654,   656,   659,   660,   664,   672,   679,   683,
     689,   696,   717,   721,   722,   725,   727,   961,   963,   964,
     966,   971,   974,   980,   986,   108,    75,   214,    66,    79,
      81,   159,   232,   281,   291,   303,   321,   367,   412,   433,
     435,   439,   461,   515,   560,   561,   562,   728,   793,   795,
     797,   807,   814,   815,   870,   872,   873,   108,     5,   561,
     563,   718,   718,   561,   949,    30,   178,   241,   386,   427,
     431,   561,   972,   973,   984,   962,    30,   132,   748,   749,
     178,   241,   371,   386,   427,   975,   976,   984,   962,   561,
     727,   739,   985,   561,   814,   417,   745,   560,   173,   515,
     968,   515,   343,   740,   741,   949,   740,   728,   729,   980,
       0,   518,   465,   677,   122,   213,   452,   147,   218,   296,
     445,   751,   752,   797,   797,   728,   730,   732,   519,    30,
     427,   431,   727,   985,   192,   560,   949,   192,   560,   192,
     814,   192,   560,   275,   563,   513,   517,   564,   565,   515,
      82,   108,   174,   203,   246,   371,   382,   417,   440,   467,
     559,   108,   727,   560,   421,   423,   421,   423,   353,   192,
     560,   560,   174,   246,   343,   382,   417,   467,   645,   378,
     203,    30,   949,   192,   567,   252,   434,   107,   417,   417,
     467,   375,   378,   192,   561,   667,   956,   192,   946,   949,
     192,   949,   515,   675,   295,   423,   679,     3,   461,   637,
     641,   680,   682,   683,   685,   686,   677,   561,   563,   556,
     718,   515,   515,   167,   515,   728,   815,   515,   515,   560,
     515,   515,   172,   515,   515,   515,   515,   728,   793,   797,
     807,   508,   564,    40,   561,   808,   809,   808,   380,   519,
     731,    37,    42,   101,   173,   209,   225,   235,   269,   315,
     322,   362,   381,   450,   811,   809,    40,   561,   808,   810,
     501,   819,   563,   172,   719,   504,   515,   515,   723,   973,
     973,   973,   498,   224,   517,   290,     4,     6,     7,     8,
       9,    10,    39,    54,    56,    57,    65,    71,    72,    83,
     112,   115,   117,   136,   152,   160,   165,   182,   183,   216,
     217,   219,   247,   268,   270,   275,   280,   283,   292,   340,
     366,   395,   427,   428,   436,   462,   499,   506,   507,   508,
     513,   515,   520,   521,   523,   524,   561,   563,   728,   782,
     831,   834,   837,   838,   839,   841,   842,   843,   844,   846,
     847,   862,   864,   865,   866,   867,   868,   869,   870,   871,
     873,   874,   889,   890,   901,   923,   928,   936,   937,   938,
     950,   951,   952,   935,   937,   975,   975,   563,   975,   498,
     172,   429,   504,   517,   564,   661,   814,     3,   171,   173,
     465,   683,   967,   969,   171,   970,   862,   907,   908,   740,
     519,   515,   958,   516,   516,   516,   529,   560,   172,   295,
     704,   157,   661,    30,   132,   746,   746,    59,   746,   162,
     167,   238,   287,   757,   759,   760,   785,   787,   788,   789,
     181,   290,   455,   290,   751,   752,   515,   418,   983,   498,
     224,   152,    26,    32,   137,   294,   351,   355,   387,   458,
     543,   546,   547,   351,   152,    40,    60,   106,   202,   251,
     261,   273,   305,   351,   357,   382,   387,   401,   532,   535,
     546,   152,   351,   387,   546,   152,   351,   387,   546,   152,
      40,   553,   862,   929,   566,   567,   565,     3,    30,    37,
      42,    49,    55,    81,    83,    89,   101,   132,   171,   173,
     176,   177,   194,   209,   222,   223,   225,   235,   237,   247,
     269,   278,   300,   302,   322,   362,   381,   392,   410,   419,
     439,   463,   465,   516,   637,   642,   862,   910,   911,   953,
     959,   862,   417,   560,   561,   516,   515,   621,   371,   632,
     652,   275,   648,    40,   467,   192,   560,   192,   560,   636,
     192,   560,   192,   560,   192,   561,   651,    89,   692,   152,
     481,    90,   129,   308,   422,   192,   561,   152,   517,   957,
      63,   358,   519,   668,   152,   519,   668,   152,   290,   673,
     674,   862,   959,   353,   516,   519,     4,   160,   290,   436,
     506,   507,   534,   537,   563,   678,   680,   681,   684,   952,
     679,   429,   515,   576,   580,   719,   862,   908,   515,     3,
      68,    69,   109,   110,   113,   114,   189,   190,   253,   254,
     255,   256,   257,   258,   259,   260,   263,   264,   376,   377,
     471,   472,   495,   496,   563,   849,   850,   851,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   913,   914,   809,
     810,   862,   560,   862,   915,   506,   507,   561,   863,   864,
     890,   901,   917,   515,   862,   907,   918,   862,    58,   172,
     233,   430,   862,   908,   921,   862,   516,   562,   515,   419,
     765,   766,   766,   748,   749,   797,   220,   743,    37,   225,
     381,   811,   225,   300,   812,   797,   812,   225,   811,   515,
     225,   812,   148,   200,   799,   225,   766,   515,   562,   515,
     766,   297,   561,   563,   466,   720,   862,   977,   979,   910,
       3,    37,    42,    49,    54,    55,    56,    57,    71,    72,
      81,    83,    89,   101,   112,   115,   165,   171,   173,   177,
     194,   209,   216,   217,   219,   222,   223,   225,   235,   237,
     247,   268,   269,   270,   278,   283,   300,   302,   322,   340,
     362,   366,   381,   388,   392,   395,   410,   419,   427,   428,
     439,   445,   462,   465,   637,   640,   825,   827,   828,   830,
     832,   834,   836,   838,   839,   840,   842,   843,   846,   847,
     912,   955,    40,   236,   561,   515,   513,   728,   464,   845,
     862,   927,   845,   845,   515,   515,   833,   833,   325,   728,
     515,   835,   521,    71,    72,   845,   862,   833,   515,   515,
     479,   501,   515,   848,   515,   848,   862,   862,   862,   148,
     939,   940,   862,   908,   909,   728,   862,   907,   562,   891,
     892,   893,     9,   567,   517,   564,   930,   564,   515,   563,
     515,   515,   563,   952,     3,     8,    11,    15,    16,    17,
      18,    19,    20,    21,    36,    40,    46,    53,    80,   177,
     194,   199,   222,   223,   237,   275,   278,   292,   295,   392,
     499,   502,   503,   504,   506,   507,   508,   509,   510,   511,
     899,   900,   901,   903,   933,   478,   875,   302,   862,   519,
     743,   515,   563,   743,     3,   117,   241,   534,   563,   847,
     978,   104,   979,   979,   561,    40,   561,   516,   519,   677,
     519,   516,   741,   946,   947,    40,   958,   661,   193,   353,
     220,   621,   387,   730,   730,    30,   753,   754,   862,    59,
     730,   747,   164,   272,   773,   227,   273,   339,   390,   452,
       4,     9,    30,   768,   862,   506,   507,   769,   770,   862,
     864,   785,   786,   760,   759,   757,   758,   167,   788,   285,
     790,    59,   736,   737,   738,   800,   863,   937,   937,   757,
     785,   908,   236,   560,    74,    82,    93,   169,   192,   329,
     446,   561,   603,   613,   628,    82,    93,   726,    93,   726,
     515,   429,   515,   601,   245,   449,   601,    93,   519,   429,
     560,     3,   830,   534,    59,   536,   534,   534,   106,   251,
     261,    59,   429,   477,   501,   533,   266,   371,   533,   535,
     814,    93,   429,   726,   371,   560,   429,   371,   552,   561,
     576,   514,   525,   910,   910,   911,   519,   751,   752,    13,
      14,   222,   222,   429,   429,   561,   620,   625,   477,   579,
     560,   343,   382,   417,   467,   645,   378,   152,   100,   586,
     649,   654,   689,   986,   144,   827,   560,   275,   532,   655,
     275,   515,   621,    40,   275,   621,   275,   515,   646,   275,
     199,   653,   192,   561,   615,   693,   567,   152,   172,   671,
     667,   566,   517,   956,   946,   949,   949,   956,   516,   519,
      13,   679,   685,     4,   952,     4,   952,   563,   567,   578,
     585,    55,   102,   123,   141,   145,   168,   171,   187,   280,
     288,   310,   337,   582,   720,    40,   516,   862,   516,   172,
     519,   516,   318,   916,   516,   863,   863,    11,    15,    16,
      19,    20,    21,   199,   222,   292,   502,   503,   504,   506,
     507,   508,   509,   510,   511,   901,   863,   516,   816,   817,
     872,   167,   172,   919,   920,   519,   516,    40,   921,   908,
     921,   921,   172,   516,    40,   808,   515,   947,     4,     9,
     561,   761,   763,   764,   937,   935,   178,   241,   417,   421,
     423,   449,   560,   744,   474,   820,   797,   225,   797,   290,
     455,   813,   797,   225,   937,   797,   282,   282,   515,   797,
     562,   821,   822,   515,   562,   821,   561,   563,   519,   516,
     519,   517,   515,   830,   515,   515,   517,    39,   829,   515,
     849,   850,   851,   852,   853,   854,   855,   856,   857,   858,
     859,   860,   861,   516,   519,   833,   568,   660,   696,   701,
     724,   727,   963,   980,   908,   909,   515,   473,   924,   925,
     862,   909,   952,   862,   894,   895,   896,   897,   845,   845,
       8,    15,    16,    19,    20,    21,   502,   503,   504,   506,
     507,   508,   509,   510,   511,   561,   899,   904,   516,   908,
     427,   427,   952,   952,   515,   561,   353,   944,   167,   514,
     516,   519,   525,   519,   522,   508,   565,   908,   952,   862,
     861,   861,   827,   862,   862,   862,   862,   862,   862,   862,
     862,     5,   567,   960,   427,    45,   414,   934,   956,   862,
     862,   515,   728,   922,   132,   160,   275,   280,   285,   436,
     447,   862,   280,   515,   862,   429,    53,   177,   194,   199,
     237,   392,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,    30,    38,   397,   898,   513,   517,   932,   181,
     163,   876,   366,   515,   890,   938,   172,   794,   910,   794,
     515,   563,   561,   560,   967,   549,   560,   862,   519,   516,
     250,   275,   742,   455,   663,   560,   698,   515,   561,   703,
     713,   714,   716,    41,   126,   755,   519,   455,   755,   266,
     730,   366,   367,   506,   507,   770,   772,   864,   390,   227,
     291,   313,   313,   519,   510,     4,   771,   952,   771,   366,
     367,   772,   560,   945,   279,   394,   791,   515,   947,   948,
     519,   181,   455,   199,   181,   220,   786,   758,   516,   351,
     546,   515,   192,   613,   949,   227,   275,   227,   455,   515,
     606,   826,   827,   949,   561,   192,   949,   192,   561,    26,
     137,   387,   542,   545,   567,   597,   611,   949,   567,   605,
     624,   949,   543,   949,   351,   387,   532,   546,   534,   956,
     949,   534,   956,   949,   534,   351,   387,   546,   949,   949,
     949,   949,   351,   387,   546,   949,   949,   563,   507,   862,
     929,   751,   751,   751,   463,   911,   193,   356,   750,   862,
     862,   280,   558,   563,   280,   558,   561,   334,   575,   516,
     519,   288,   172,   429,   570,   648,   467,   560,   560,   636,
     560,   560,   651,   560,   295,   632,   515,   728,   515,   152,
     152,   237,   561,   603,   613,   616,   619,   629,   631,   477,
     479,   608,   151,   727,   152,   477,   694,   152,   516,   910,
      40,   152,     3,   515,   275,   290,   561,     3,   668,   566,
     668,   290,   668,   673,   862,   576,   508,   513,   515,   534,
     577,   684,   868,   869,   516,   519,    40,   574,   563,   574,
     275,   280,   337,   574,    59,   574,   827,   516,   862,   862,
     862,   919,   827,   863,   863,   863,   863,   863,   863,   132,
     275,   285,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   516,   519,    40,   818,   862,   862,   920,   919,
     827,   516,   516,   516,   908,   827,   947,   516,   313,   510,
     313,   367,   510,   515,   515,   743,   421,   423,   421,   423,
     560,   745,   745,   745,   862,   181,   774,   813,   797,   862,
     515,   797,   167,   515,   562,   804,   813,   827,   516,   519,
     821,   516,   977,     3,   912,    39,   829,   561,   824,   824,
       3,   513,   513,   952,   429,   429,   429,   429,   827,   452,
     516,   514,   908,   862,   139,   925,   926,   516,   516,   516,
     525,   519,   522,   517,   516,   516,   498,   498,   516,   516,
     947,   515,   862,   941,   561,   862,   862,   891,   940,   516,
     516,   516,   498,   863,   863,   145,   908,   172,   132,   160,
     280,   285,   436,   447,   515,   145,   904,   862,   414,   934,
     862,   922,   862,   429,   515,   728,   862,   929,   566,   515,
     515,   155,   877,   795,   796,   820,   751,   820,   952,   861,
     958,   958,   250,   515,   796,   474,   662,    40,    59,   699,
     709,   716,   930,   519,   794,   504,   500,   756,   754,   292,
     899,   902,   756,     4,   952,   772,   291,   452,   769,   519,
     244,   947,   736,    59,   937,   515,   562,    59,   266,   429,
     862,   275,   628,   515,   152,   515,   606,   203,   625,   626,
     587,    40,   176,   596,   622,   587,    26,   137,   355,   357,
     387,   539,   540,   541,   547,   548,   152,   668,   152,   668,
     597,   611,   597,   516,   519,   563,   590,   504,   517,   516,
     519,   429,   371,    93,   429,   726,   371,   429,   429,   429,
     371,   553,   525,   514,   525,   750,   750,   750,   911,   282,
     282,   516,   515,   569,     3,   404,   405,   563,   584,   620,
     575,   560,   655,   515,    40,   621,   646,   653,   648,   353,
     417,   563,   657,   658,   625,   560,   560,   636,   560,   516,
     519,   288,   601,   288,   290,   600,   949,   477,   635,   560,
     601,    40,   560,   516,   417,   862,   651,   585,   152,   560,
     671,   956,   572,   583,   684,   578,   563,   563,   280,   625,
     508,   625,   563,   508,   625,   563,   516,   516,   920,   172,
     132,   285,   515,   819,   816,   515,   516,   516,   516,   561,
     761,   820,   745,   745,   745,   745,   560,   560,   560,    59,
     186,   783,   813,   947,   515,   801,   802,   803,   865,   867,
     947,   167,    80,   823,   822,   516,   516,   513,   827,   516,
     519,   516,   952,   514,   952,   516,   850,   852,   853,   854,
     853,   854,   854,   516,   425,   862,   143,   862,   894,   904,
     848,   848,   516,   862,   941,   942,   943,    40,   199,   516,
     944,   861,   862,    36,    36,   862,   516,   862,   172,   515,
     912,   862,   516,   145,   863,   863,   145,   145,   862,   862,
     514,   525,   515,   931,   752,   474,   862,   301,   881,   519,
     774,   750,   774,   516,   724,   862,   359,   707,   561,   266,
     321,   117,   304,   515,   697,   727,   516,   519,   703,   662,
     862,   164,   231,   515,   756,   291,   560,   516,   948,   181,
     728,   729,   937,   948,   949,   949,   516,   152,   626,   613,
     626,   587,   615,   519,   516,   119,   207,   273,   275,   612,
     515,    33,    59,   633,   622,    74,    80,    93,   117,   119,
     207,   275,   280,   329,   345,   446,   455,   592,   593,   607,
     176,   117,   191,   275,   601,   533,   107,   117,   176,   275,
     403,   406,   535,   601,   387,   541,   440,   949,   561,   545,
       3,    37,    42,    49,    55,    81,    83,    89,   101,   171,
     173,   176,   177,   194,   209,   222,   223,   225,   235,   237,
     247,   269,   274,   278,   292,   300,   302,   322,   362,   381,
     388,   392,   410,   419,   439,   445,   465,   506,   507,   534,
     563,   588,   627,   637,   643,   827,   902,   953,   567,   624,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,
     576,   929,   929,   516,   516,   516,   751,   107,   371,   517,
     533,   584,   515,   619,   727,   694,    40,   515,   632,   192,
     560,   516,   519,   516,   655,   515,    40,   610,   608,   616,
      86,   675,   107,   273,   621,   727,   646,   727,   653,   516,
     615,   455,   691,   668,   516,   519,   625,   863,   172,   515,
     912,   821,   516,   519,   516,   774,   560,   560,   560,   560,
      30,   103,   182,   365,   515,   775,   776,   777,   778,   779,
     780,   781,   862,   862,   476,   878,   516,   864,   905,   906,
     199,   181,   798,   802,   516,   804,   805,   806,   956,   829,
     952,   829,   561,   829,   514,   514,   862,   519,   516,   561,
     862,   864,   862,   862,   862,   912,   516,   862,    36,    36,
     862,   862,   145,   516,   507,   929,   516,   910,   516,   862,
     516,   515,   561,   882,   783,   516,   783,   563,   516,   936,
     461,   416,   454,   708,   561,   702,   712,   290,   705,   504,
     716,   707,   904,    59,   516,   516,   460,   461,   733,   587,
     613,   516,   516,   477,   618,   120,   195,   205,   119,   457,
     862,   117,    40,   515,   956,   949,   863,   120,   195,   119,
     280,   227,   560,   618,    88,   633,   192,   280,   534,   862,
     633,   280,   506,   507,   537,   561,   827,   668,   668,     3,
     247,   410,   953,   957,   504,   429,   429,   514,   514,   750,
     516,   516,   561,   576,   455,   571,   573,   625,   516,   635,
      40,   417,   862,   585,   417,   275,   515,   563,   694,   619,
     151,   727,   149,   201,   600,   122,   137,   328,   635,   107,
     694,   477,   987,    40,   515,   290,   561,   690,   515,   583,
     863,   912,   516,   516,     9,   352,   767,   783,   515,   389,
     515,   516,   519,   561,   879,   880,   336,   784,   519,   516,
     515,   562,    59,   516,   199,   516,   805,   514,   827,   941,
     514,   192,   516,   862,   862,   862,   525,   514,   525,   516,
     516,   561,   883,   878,   563,   878,   519,   460,   930,   516,
     519,    91,   707,   862,   516,   948,   948,   345,   618,   515,
     609,   587,   516,   191,   515,   862,   275,   593,   618,   621,
     949,    40,   152,   823,   957,   510,   588,   949,   949,   516,
     533,   124,   516,   608,   727,   727,   516,   560,   152,    40,
     516,   949,   635,    30,    85,    94,   118,   191,   204,   403,
     406,   604,   604,   367,   367,    40,    64,    74,   241,   417,
     862,   585,   560,   515,   561,   706,   715,   872,   516,   516,
     515,   878,   908,   515,   908,   777,    40,   519,   862,   455,
     762,   864,   937,   947,   809,   515,   809,   862,   929,   929,
     310,   884,   784,   784,   727,   304,   727,   702,   290,   515,
     700,   560,   587,   567,   614,   617,   407,   469,   594,   595,
     515,   589,   862,   516,   249,   630,   191,   455,   544,   510,
     440,   576,   563,   694,   600,   987,   515,   560,   727,   608,
     675,   727,    74,   293,    74,   727,   516,   691,   862,    80,
     710,   516,   519,   710,     9,   784,   516,   776,   516,   882,
     880,   369,   516,   937,   514,   514,   514,    59,   751,   762,
     762,   708,    93,   715,   133,   621,   504,   516,   519,   532,
     516,   273,   602,   173,   309,   393,   290,   598,   599,   623,
     589,   862,   440,    40,   515,   987,   600,   635,   987,   293,
     293,   515,   516,   956,   711,   956,   694,   706,   711,   516,
     762,   516,   764,   516,   907,   184,   338,   367,   885,   460,
     949,   516,   276,   452,   630,   588,   617,   516,   595,   205,
     122,   452,   290,   623,   290,   598,   727,   715,   710,   755,
     820,   755,    53,   104,   442,   862,   886,   887,   886,   886,
     516,   727,   820,   387,   599,    63,   273,   358,   387,   591,
     591,   987,   516,   711,   756,   756,   887,   366,   166,   324,
     166,   324,   148,   888,   888,   888,   714,   587,    25,   117,
     280,   694,   755,    36,   104,   181,   273,   426,   820,   820,
     756,   887,   366,   298
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   526,   527,   528,   528,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   538,   538,   538,
     538,   538,   538,   538,   538,   539,   539,   540,   540,   541,
     541,   541,   541,   542,   542,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   544,   544,   545,   545,   545,   545,
     546,   546,   547,   548,   548,   548,   659,   659,   659,   659,
     560,   560,   561,   561,   561,   562,   562,   563,   564,   564,
     565,   566,   567,   567,   567,   567,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   726,
     726,   696,   697,   697,   697,   697,   697,   698,   698,   699,
     699,   699,   700,   700,   700,   701,   701,   702,   703,   703,
     704,   704,   704,   705,   705,   705,   706,   706,   706,   707,
     707,   708,   708,   709,   709,   710,   710,   711,   711,   712,
     712,   713,   713,   714,   714,   715,   715,   716,   656,   656,
     656,   657,   657,   658,   658,   721,   721,   721,   654,   654,
     654,   655,   655,   650,   650,   650,   651,   651,   652,   652,
     652,   653,   653,   964,   672,   672,   672,   673,   673,   674,
     674,   675,   675,   531,   531,   532,   532,   533,   533,   533,
     534,   534,   534,   534,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   536,   536,
     537,   537,   537,   670,   670,   671,   671,   961,   961,   961,
     961,   961,   961,   962,   962,   962,   965,   586,   586,   586,
     587,   587,   588,   588,   588,   588,   588,   588,   589,   589,
     590,   591,   591,   591,   591,   591,   592,   592,   592,   592,
     593,   593,   593,   593,   593,   593,   593,   593,   594,   594,
     595,   595,   596,   596,   596,   597,   598,   599,   599,   599,
     599,   599,   600,   600,   600,   600,   601,   602,   602,   603,
     603,   604,   604,   604,   604,   604,   604,   604,   604,   605,
     605,   606,   607,   607,   607,   607,   608,   608,   608,   608,
     609,   610,   610,   610,   611,   612,   612,   612,   612,   612,
     612,   613,   613,   614,   614,   615,   616,   616,   616,   617,
     617,   618,   618,   619,   619,   619,   620,   621,   621,   622,
     622,   623,   624,   624,   624,   624,   625,   625,   626,   626,
     627,   627,   627,   628,   628,   628,   628,   628,   628,   629,
     629,   630,   630,   630,   630,   631,   632,   632,   632,   632,
     632,   632,   632,   632,   633,   633,   664,   664,   664,   664,
     664,   664,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     666,   666,   666,   666,   666,   666,   667,   667,   668,   668,
     668,   669,   669,   669,   644,   644,   644,   644,   644,   644,
     645,   645,   646,   646,   963,   568,   568,   568,   569,   569,
     569,   570,   570,   571,   571,   572,   572,   573,   573,   574,
     574,   575,   575,   576,   576,   577,   577,   577,   577,   577,
     577,   577,   578,   579,   579,   580,   580,   581,   581,   582,
     582,   582,   582,   582,   582,   582,   582,   582,   582,   582,
     582,   582,   582,   582,   582,   583,   584,   584,   584,   584,
     584,   585,   585,   727,   727,   728,   728,   728,   729,   729,
     729,   729,   729,   729,   729,   729,   730,   730,   731,   731,
     732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   732,   732,   732,   733,
     733,   734,   734,   735,   735,   736,   736,   736,   737,   737,
     738,   738,   739,   739,   739,   740,   740,   741,   742,   742,
     742,   743,   743,   744,   744,   744,   744,   744,   744,   744,
     744,   744,   745,   745,   746,   746,   746,   747,   748,   748,
     749,   749,   750,   750,   750,   751,   751,   752,   752,   753,
     753,   754,   754,   755,   755,   755,   756,   756,   756,   757,
     757,   757,   757,   758,   758,   759,   759,   759,   759,   760,
     760,   761,   761,   761,   761,   761,   761,   762,   762,   763,
     763,   764,   764,   764,   764,   765,   766,   766,   767,   767,
     768,   768,   768,   768,   768,   769,   770,   770,   770,   771,
     771,   772,   772,   773,   773,   774,   774,   774,   775,   775,
     776,   776,   777,   777,   777,   777,   777,   778,   779,   780,
     781,   782,   782,   783,   783,   784,   784,   785,   785,   786,
     786,   787,   787,   788,   789,   789,   789,   789,   790,   790,
     791,   791,   791,   792,   792,   793,   793,   794,   794,   795,
     795,   796,   796,   797,   797,   797,   797,   797,   797,   797,
     797,   797,   797,   798,   798,   799,   799,   799,   800,   800,
     801,   801,   801,   801,   802,   802,   803,   803,   804,   804,
     805,   806,   806,   807,   807,   807,   807,   807,   807,   807,
     807,   807,   807,   807,   808,   808,   808,   808,   809,   809,
     810,   810,   810,   810,   810,   811,   811,   811,   811,   811,
     811,   812,   812,   813,   813,   814,   814,   814,   814,   815,
     815,   816,   817,   817,   818,   818,   819,   819,   820,   820,
     821,   821,   822,   823,   823,   824,   824,   825,   825,   826,
     826,   827,   827,   827,   827,   827,   827,   827,   827,   827,
     827,   828,   828,   829,   829,   829,   830,   830,   830,   830,
     830,   830,   830,   831,   831,   831,   831,   832,   833,   833,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   834,
     834,   835,   835,   836,   836,   837,   837,   838,   839,   840,
     840,   841,   841,   842,   843,   844,   844,   844,   844,   844,
     844,   845,   845,   846,   846,   846,   846,   847,   848,   848,
     848,   849,   849,   850,   850,   851,   851,   852,   852,   853,
     853,   854,   854,   855,   855,   856,   856,   857,   857,   858,
     858,   859,   859,   860,   860,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     864,   864,   865,   865,   865,   865,   865,   865,   866,   866,
     866,   867,   867,   867,   867,   867,   867,   867,   867,   867,
     867,   867,   867,   868,   869,   870,   870,   870,   870,   870,
     870,   871,   871,   872,   872,   873,   873,   873,   873,   873,
     873,   873,   873,   873,   873,   873,   873,   873,   873,   874,
     874,   875,   875,   876,   876,   876,   877,   877,   878,   878,
     879,   879,   880,   881,   881,   881,   882,   883,   883,   884,
     884,   885,   885,   885,   885,   886,   886,   887,   887,   887,
     887,   887,   888,   888,   888,   888,   888,   889,   889,   890,
     890,   891,   892,   892,   893,   893,   894,   895,   895,   896,
     896,   897,   897,   898,   898,   898,   899,   899,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   901,   901,   902,   902,   903,   903,   903,   903,
     903,   903,   903,   903,   904,   904,   905,   905,   906,   906,
     907,   907,   908,   908,   909,   909,   910,   910,   911,   911,
     911,   912,   912,   913,   913,   914,   914,   914,   914,   914,
     914,   914,   914,   914,   914,   914,   914,   914,   914,   915,
     915,   916,   917,   917,   918,   918,   918,   918,   918,   918,
     919,   920,   921,   921,   921,   922,   922,   923,   924,   924,
     925,   926,   926,   927,   927,   928,   928,   565,   565,   565,
     565,   929,   929,   930,   930,   931,   931,   931,   932,   932,
     932,   932,   932,   933,   933,   934,   934,   935,   935,   936,
     936,   937,   937,   938,   938,   938,   939,   939,   940,   940,
     941,   942,   942,   943,   943,   944,   944,   944,   945,   945,
     946,   946,   947,   947,   948,   948,   949,   950,   950,   951,
     951,   951,   951,   951,   951,   951,   951,   951,   951,   951,
     951,   951,   951,   952,   953,   953,   953,   954,   954,   954,
     955,   955,   955,   956,   956,   957,   957,   958,   958,   959,
     960,   960,   722,   723,   723,   724,   724,   724,   724,   724,
     724,   647,   647,   647,   648,   648,   649,   649,   649,   649,
     689,   689,   690,   691,   691,   692,   692,   693,   693,   694,
     694,   695,   695,   530,   530,   530,   530,   530,   530,   555,
     555,   556,   556,   557,   557,   558,   558,   559,   559,   559,
     559,   559,   559,   559,   559,   559,   559,   687,   687,   688,
     676,   676,   676,   676,   677,   677,   678,   678,   678,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     680,   680,   680,   681,   681,   682,   682,   683,   683,   684,
     684,   684,   684,   685,   686,   686,   974,   974,   974,   974,
     975,   975,   975,   975,   976,   976,   977,   978,   978,   978,
     978,   978,   978,   978,   979,   979,   717,   717,   717,   718,
     718,   719,   719,   719,   720,   720,   720,   966,   966,   966,
     966,   966,   967,   967,   967,   967,   967,   968,   968,   969,
     969,   970,   970,   660,   660,   661,   661,   661,   662,   662,
     663,   663,   549,   549,   550,   550,   551,   551,   551,   552,
     552,   553,   553,   971,   971,   971,   971,   972,   972,   973,
     973,   973,   980,   980,   980,   980,   980,   980,   980,   980,
     981,   981,   982,   982,   983,   983,   984,   984,   985,   985,
     554,   986,   986,   986,   986,   986,   987,   987,   987,   987,
     634,   634,   634,   635,   635,   635,   636,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     9,     1,     4,     4,     7,     2,     1,     3,     2,
       2,     0,     4,     3,     0,     1,     0,     2,     3,     5,
       2,     2,     0,     8,     5,     0,     5,     5,     7,     2,
       0,     1,     1,     1,     3,     2,     0,     1,     0,     1,
       3,     1,     3,     1,     2,     1,     3,     2,     6,     8,
       5,     1,     0,     1,     3,     2,     4,     5,     5,     8,
       7,     1,     0,     8,    11,    10,     0,     1,     0,     1,
       1,     0,     2,     4,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     5,     7,     0,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     8,    11,    10,     7,    10,     9,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     1,     3,
       1,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     3,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     9,     9,     3,     0,     2,     2,     0,     5,     3,
       0,     1,     1,     3,     5,     3,     1,     2,     1,     3,
       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,
       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,
       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,
       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,
       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,
       0,     2,     3,     5,     6,     2,     3,     1,     5,     5,
       5,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     3,
       2,     2,     3,     3,     5,     4,     6,     3,     5,     4,
       6,     4,     6,     5,     7,     3,     2,     4,     3,     2,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     4,     3,     5,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     5,     6,     6,     7,
       1,     2,     1,     1,     1,     2,     2,     4,     3,     1,
       1,     1,     1,     1,     4,     1,     1,     1,     1,     2,
       4,     2,     2,     3,     3,     3,     6,     7,     9,     7,
       7,     5,     1,     1,     1,     5,     6,     6,     4,     4,
       4,     4,     6,     5,     5,     5,     4,     6,     4,     7,
       9,     5,     0,     5,     4,     0,     1,     0,     2,     0,
       1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
       0,     3,     3,     3,     0,     1,     4,     2,     2,     2,
       2,     2,     3,     2,     2,     3,     0,     4,     3,     1,
       5,     3,     1,     3,     1,     2,     3,     1,     3,     1,
       2,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     4,     1,     4,     1,     2,
       1,     2,     1,     2,     1,     3,     1,     3,     1,     2,
       1,     3,     1,     2,     1,     0,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       3,     2,     3,     0,     3,     3,     2,     2,     1,     0,
       2,     2,     3,     2,     1,     1,     3,     5,     1,     2,
       4,     2,     0,     1,     0,     1,     2,     3,     5,     7,
       7,     1,     0,     0,     2,     0,     2,     3,     3,     3,
       5,     7,     7,     0,     2,     1,     0,     1,     0,     1,
       3,     1,     2,     3,     2,     1,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     1,     2,     1,
       1,     2,     1,     1,     2,     7,     2,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     3,     3,     0,     1,
       1,     1,     5,     3,     0,     1,     1,     1,     1,     1,
       1,     4,     7,     6,     2,     0,     1,     1,     1,     1,
      13,    16,     1,     2,     0,     1,     0,     1,     0,     2,
       0,     1,     0,     6,     8,     6,     8,     6,     8,     3,
       2,     1,     0,     6,     6,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     4,     6,     3,
       2,     4,     3,     5,     1,     0,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     2,     3,     3,     3,
       1,     3,     3,     2,     3,     3,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     2,     4,     5,     1,
       1,     0,     2,     2,     0,     2,     2,     4,     6,     5,
       4,     6,     1,     1,     1,     1,     1,     1,     0,     1,
       3,     1,     0,     7,     3,     1,     2,     3,     2,     0,
       2,     0,     2,     4,     5,     8,     2,     3,     5,     1,
       0,     2,     0,     2,     3,     3,     3,     1,     1,     1,
       2,     3,     2,     2,     2,     2,     3,     4,     3,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     3,
       2,     9,    12,    11,    12,    14,     3,     4,     4,     0,
       7,    10,     9,     2,     3,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 506 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 522 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 534 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 584 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 20676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 21057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_arg: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: WITH OIDS  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* opt_oids: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_list: %empty  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: BINARY  */
#line 151 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* opt_binary: %empty  */
#line 154 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: BINARY  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: OIDS  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: FREEZE  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: CSV  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: HEADER_P  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: FORCE QUOTE '*'  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY columnList  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: PARTITION BY '*'  */
#line 208 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: FORCE NULL_P columnList  */
#line 216 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_opt_item: ENCODING Sconst  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 227 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: Sconst  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDIN  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_file_name: STDOUT  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_file_name: IDENT '.' ColId  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* copy_file_name: IDENT  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 243 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 247 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 23918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 23924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 23930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_pivot_group_by: %empty  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_include_nulls: %empty  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_header: d_expr  */
#line 1133 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_header: indirection_expr  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* pivot_value_list: pivot_value  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* unpivot_header: ColIdOrString  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1172 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* unpivot_value_list: unpivot_value  */
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: '(' joined_table ')'  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 25044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 25098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* alias_clause: AS ColIdOrString  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* alias_clause: ColId  */
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_alias_clause: alias_clause  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_alias_clause: %empty  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* func_alias_clause: alias_clause  */
#line 1389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* func_alias_clause: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_type: FULL join_outer  */
#line 1414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_type: LEFT join_outer  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_type: RIGHT join_outer  */
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_type: SEMI  */
#line 1417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 25236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* join_type: ANTI  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 25242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* join_type: INNER_P  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* join_outer: OUTER_P  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* join_outer: %empty  */
#line 1424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* join_qual: ON a_expr  */
#line 1437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* relation_expr: qualified_name  */
#line 1443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* relation_expr: qualified_name '*'  */
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* relation_expr: ONLY qualified_name  */
#line 1457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* func_table: func_expr_windowless opt_ordinality  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* rowsfrom_list: rowsfrom_item  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_col_def_list: %empty  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_ordinality: %empty  */
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* where_clause: WHERE a_expr  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* where_clause: %empty  */
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* TableFuncElementList: TableFuncElement  */
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_collate_clause: COLLATE any_name  */
#line 1576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_collate_clause: %empty  */
#line 1583 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* colid_type_list: ColId Typename  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_Typename: Typename  */
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_Typename: %empty  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: SimpleTypename opt_array_bounds  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Typename: SimpleTypename ARRAY  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* Typename: qualified_typename  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 25549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* qualified_typename: IDENT '.' IDENT  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 25588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* opt_array_bounds: %empty  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SimpleTypename: GenericType  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SimpleTypename: Numeric  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* SimpleTypename: Bit  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* SimpleTypename: Character  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* SimpleTypename: ConstDatetime  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* SimpleTypename: ConstInterval opt_interval  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* ConstTypename: Numeric  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* ConstTypename: ConstBit  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* ConstTypename: ConstCharacter  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* ConstTypename: ConstDatetime  */
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* GenericType: type_name_token opt_type_modifiers  */
#line 1730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_type_modifiers: %empty  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: INT_P  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: INTEGER  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Numeric: SMALLINT  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Numeric: BIGINT  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Numeric: REAL  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Numeric: FLOAT_P opt_float  */
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* Numeric: DOUBLE_P PRECISION  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Numeric: DEC opt_type_modifiers  */
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* Numeric: BOOLEAN_P  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* opt_float: '(' Iconst ')'  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* opt_float: %empty  */
#line 1832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* Bit: BitWithLength  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* Bit: BitWithoutLength  */
#line 1846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* ConstBit: BitWithLength  */
#line 1854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* ConstBit: BitWithoutLength  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* BitWithoutLength: BIT opt_varying  */
#line 1878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* Character: CharacterWithLength  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* Character: CharacterWithoutLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* ConstCharacter: CharacterWithLength  */
#line 1909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* ConstCharacter: CharacterWithoutLength  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* CharacterWithoutLength: character  */
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* character: CHARACTER opt_varying  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* character: CHAR_P opt_varying  */
#line 1946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* character: VARCHAR  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* character: NATIONAL CHARACTER opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* character: NATIONAL CHAR_P opt_varying  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* character: NCHAR opt_varying  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_varying: VARYING  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 26009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* opt_varying: %empty  */
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1967 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* ConstDatetime: TIME opt_timezone  */
#line 1993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* ConstInterval: INTERVAL  */
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_timezone: %empty  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_interval: year_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_interval: month_keyword  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: day_keyword  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* opt_interval: hour_keyword  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_interval: minute_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_interval: second_keyword  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_interval: millisecond_keyword  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* opt_interval: microsecond_keyword  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_interval: week_keyword  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_interval: decade_keyword  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_interval: century_keyword  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 26158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_interval: millennium_keyword  */
#line 2076 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 26164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_interval: year_keyword TO month_keyword  */
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* opt_interval: day_keyword TO hour_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_interval: day_keyword TO minute_keyword  */
#line 2088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* opt_interval: day_keyword TO second_keyword  */
#line 2094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* opt_interval: hour_keyword TO second_keyword  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* opt_interval: minute_keyword TO second_keyword  */
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* opt_interval: %empty  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: c_expr  */
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr TYPECAST Typename  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr COLLATE any_name  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: '+' a_expr  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: '-' a_expr  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr '+' a_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr '-' a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr '*' a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr '/' a_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr '%' a_expr  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr '^' a_expr  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr POWER_OF a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr '<' a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr '>' a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr '=' a_expr  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr qual_Op a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: qual_Op a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr qual_Op  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr AND a_expr  */
#line 2216 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr OR a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: NOT a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: NOT_LA a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr GLOB a_expr  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr LIKE a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2246 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr ILIKE a_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr IS NULL_P  */
#line 2320 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr ISNULL  */
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr IS NOT NULL_P  */
#line 2336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr NOT NULL_P  */
#line 2344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr NOTNULL  */
#line 2352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2368 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: row OVERLAPS row  */
#line 2372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr IS TRUE_P  */
#line 2388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: a_expr IS FALSE_P  */
#line 2404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr IS UNKNOWN  */
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* a_expr: a_expr IN_P in_expr  */
#line 2484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* a_expr: DEFAULT  */
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: c_expr  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr TYPECAST Typename  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: '+' b_expr  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: '-' b_expr  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr '+' b_expr  */
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: b_expr '-' b_expr  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: b_expr '*' b_expr  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr '/' b_expr  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* b_expr: b_expr '%' b_expr  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* b_expr: b_expr '^' b_expr  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* b_expr: b_expr POWER_OF b_expr  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* b_expr: b_expr '<' b_expr  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* b_expr: b_expr '>' b_expr  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* b_expr: b_expr '=' b_expr  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* b_expr: b_expr qual_Op b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* b_expr: qual_Op b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* b_expr: b_expr qual_Op  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 27103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* d_expr: columnref  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* d_expr: AexprConst  */
#line 2677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* d_expr: select_with_parens  */
#line 2679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* d_expr: select_with_parens indirection  */
#line 2690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* d_expr: EXISTS select_with_parens  */
#line 2714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2725 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* indirection_expr_or_a_expr: row  */
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 27209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* indirection_expr: '?'  */
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* indirection_expr: PARAM  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* indirection_expr: struct_expr  */
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* indirection_expr: func_expr  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* indirection_expr: case_expr  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* indirection_expr: list_expr  */
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 27279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* indirection_expr: list_comprehension  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 27287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* indirection_expr: ARRAY select_with_parens  */
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2804 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* indirection_expr: '#' ICONST  */
#line 2810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* indirection_expr: '$' ColLabel  */
#line 2817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 27331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 27340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_application: func_name '(' ')'  */
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2865 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* func_expr: func_expr_common_subexpr  */
#line 2932 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* func_expr_windowless: func_application  */
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2957 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2959 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* within_group_clause: %empty  */
#line 3065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* filter_clause: %empty  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* export_clause: EXPORT_STATE  */
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* export_clause: %empty  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* window_clause: WINDOW window_definition_list  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* window_clause: %empty  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* window_definition_list: window_definition  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* window_definition: ColId AS window_specification  */
#line 3095 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* over_clause: OVER window_specification  */
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* over_clause: OVER ColId  */
#line 3105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* over_clause: %empty  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_existing_window_name: ColId  */
#line 3148 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_existing_window_name: %empty  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* opt_partition_clause: %empty  */
#line 3153 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3162 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* opt_frame_clause: %empty  */
#line 3186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* frame_extent: frame_bound  */
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3261 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* frame_bound: CURRENT_P ROW  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* frame_bound: a_expr PRECEDING  */
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* frame_bound: a_expr FOLLOWING  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* opt_window_exclusion_clause: %empty  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 28000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* qualified_row: ROW '(' ')'  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* row: qualified_row  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 28018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* row: '(' expr_list ',' a_expr ')'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 28024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 28037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* dict_arguments: dict_arg  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3346 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* dict_arguments_opt_comma: dict_arguments  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* map_arg: a_expr ':' a_expr  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 28069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* map_arguments: map_arg  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* map_arguments: map_arguments ',' map_arg  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* map_arguments_opt_comma: map_arguments  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* map_arguments_opt_comma: map_arguments ','  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* opt_map_arguments_opt_comma: %empty  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 28105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* sub_type: ANY  */
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* sub_type: SOME  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* sub_type: ALL  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 28123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* all_Op: Op  */
#line 3383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* all_Op: MathOp  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 28135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* MathOp: '+'  */
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 28141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* MathOp: '-'  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 28147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* MathOp: '*'  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 28153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* MathOp: '/'  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 28159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* MathOp: INTEGER_DIVISION  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* MathOp: '%'  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 28171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* MathOp: '^'  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 28177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* MathOp: POWER_OF  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 28183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* MathOp: '<'  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 28189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* MathOp: '>'  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* MathOp: '='  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 28201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* MathOp: LESS_EQUALS  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 28207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* MathOp: GREATER_EQUALS  */
#line 3399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* MathOp: NOT_EQUALS  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* qual_Op: Op  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* qual_all_Op: all_Op  */
#line 3411 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* subquery_Op: all_Op  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* subquery_Op: LIKE  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* subquery_Op: NOT_LA LIKE  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* subquery_Op: GLOB  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* subquery_Op: NOT_LA GLOB  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* subquery_Op: ILIKE  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* subquery_Op: NOT_LA ILIKE  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* any_operator: all_Op  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* any_operator: ColId '.' any_operator  */
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* c_expr_list: c_expr  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* c_expr_list_opt_comma: c_expr_list  */
#line 3464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* expr_list: a_expr  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* expr_list: expr_list ',' a_expr  */
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* expr_list_opt_comma: expr_list  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* expr_list_opt_comma: expr_list ','  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* opt_expr_list_opt_comma: %empty  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* func_arg_list: func_arg_expr  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* func_arg_expr: a_expr  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* type_list: Typename  */
#line 3544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* type_list: type_list ',' Typename  */
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* extract_list: extract_arg FROM a_expr  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* extract_list: %empty  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* extract_arg: IDENT  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* extract_arg: year_keyword  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* extract_arg: month_keyword  */
#line 3562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* extract_arg: day_keyword  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* extract_arg: hour_keyword  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* extract_arg: minute_keyword  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* extract_arg: second_keyword  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* extract_arg: millisecond_keyword  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* extract_arg: microsecond_keyword  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* extract_arg: week_keyword  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 28519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* extract_arg: decade_keyword  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 28525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* extract_arg: century_keyword  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 28531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* extract_arg: millennium_keyword  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 28537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* extract_arg: Sconst  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* overlay_placing: PLACING a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* position_list: b_expr IN_P b_expr  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 28571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* position_list: %empty  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* substr_list: a_expr substr_from substr_for  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* substr_list: a_expr substr_for substr_from  */
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* substr_list: a_expr substr_from  */
#line 3628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* substr_list: a_expr substr_for  */
#line 3632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* substr_list: expr_list  */
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* substr_list: %empty  */
#line 3651 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* substr_from: FROM a_expr  */
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* substr_for: FOR a_expr  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* trim_list: FROM expr_list_opt_comma  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* trim_list: expr_list_opt_comma  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* in_expr: select_with_parens  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* when_clause_list: when_clause  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* when_clause_list: when_clause_list when_clause  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* case_default: ELSE a_expr  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* case_default: %empty  */
#line 3714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* case_arg: a_expr  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* case_arg: %empty  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* columnref: ColId  */
#line 3722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* columnref: ColId indirection  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3756 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_slice_bound: a_expr  */
#line 3766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_slice_bound: %empty  */
#line 3767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* opt_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* opt_indirection: opt_indirection indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_func_arguments: %empty  */
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_func_arguments: '(' ')'  */
#line 3778 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3779 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* extended_indirection_el: '[' a_expr ']'  */
#line 3793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3817 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_extended_indirection: %empty  */
#line 3832 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3833 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* opt_target_list_opt_comma: %empty  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* target_list: target_el  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* target_list: target_list ',' target_el  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* target_list_opt_comma: target_list  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* target_list_opt_comma: target_list ','  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* target_el: a_expr AS ColLabelOrString  */
#line 3864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* target_el: a_expr IDENT  */
#line 3880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* target_el: a_expr  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3897 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* except_list: EXCLUDE ColId  */
#line 3898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* opt_except_list: except_list  */
#line 3901 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* opt_except_list: %empty  */
#line 3902 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* replace_list_el: a_expr AS ColId  */
#line 3905 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 29027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* replace_list: replace_list_el  */
#line 3909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* replace_list: replace_list ',' replace_list_el  */
#line 3910 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* replace_list_opt_comma: replace_list  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* replace_list_opt_comma: replace_list ','  */
#line 3915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* opt_replace_list: REPLACE replace_list_el  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* opt_replace_list: %empty  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* qualified_name_list: qualified_name  */
#line 3930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 29075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 29081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* name_list: name  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* name_list: name_list ',' name  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* name_list_opt_comma: name_list  */
#line 3943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* name_list_opt_comma: name_list ','  */
#line 3944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* name: ColIdOrString  */
#line 3952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* func_name: function_name_token  */
#line 3964 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* func_name: ColId indirection  */
#line 3967 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 29138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* AexprConst: Iconst  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 29146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* AexprConst: FCONST  */
#line 3982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* AexprConst: Sconst opt_indirection  */
#line 3986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 29170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* AexprConst: BCONST  */
#line 3998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* AexprConst: XCONST  */
#line 4002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* AexprConst: func_name Sconst  */
#line 4011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* AexprConst: ConstTypename Sconst  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 29252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4060 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 29260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* AexprConst: TRUE_P  */
#line 4072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 29284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* AexprConst: FALSE_P  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 29292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* AexprConst: NULL_P  */
#line 4080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 29300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* Iconst: ICONST  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* type_function_name: IDENT  */
#line 4102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* type_function_name: unreserved_keyword  */
#line 4103 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* type_function_name: type_func_name_keyword  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* function_name_token: IDENT  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* function_name_token: unreserved_keyword  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* function_name_token: func_name_keyword  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* type_name_token: IDENT  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* type_name_token: unreserved_keyword  */
#line 4113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* type_name_token: type_name_keyword  */
#line 4114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* any_name: ColId  */
#line 4117 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* any_name: ColId attrs  */
#line 4118 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* attrs: '.' attr_name  */
#line 4122 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* attrs: attrs '.' attr_name  */
#line 4124 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* opt_name_list: %empty  */
#line 4129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* ColLabelOrString: ColLabel  */
#line 4136 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* ColLabelOrString: SCONST  */
#line 4137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 29766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 29778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 29790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 29796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 29802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 29820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 29826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 29832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 29838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 29844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 29850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* NonReservedWord: IDENT  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* NonReservedWord: unreserved_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* NonReservedWord: other_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 30005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 30013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 30019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 30025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 30031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 30037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 30043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 30069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 30079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 30115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 30126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 30141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 30153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 30218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 30235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->version = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 30272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* LoadStmt: INSTALL file_name opt_from_repo opt_ext_version  */
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-2].str);
                    n->repository = (yyvsp[-1].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 30285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* LoadStmt: FORCE INSTALL file_name opt_from_repo opt_ext_version  */
#line 24 "third_party/libpg_query/grammar/statements/load.y"
                                                                                      {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[-1].str);
                      n->version = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 30298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* file_name: Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* file_name: ColId  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* opt_from_repo: %empty  */
#line 41 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_from_repo: FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/load.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_from_repo: FROM ColId  */
#line 43 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_ext_version: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_ext_version: VERSION_P Sconst  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_ext_version: VERSION_P ColId  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 30700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 30748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 31002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 31008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 31014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 31077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 31097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 31101 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
