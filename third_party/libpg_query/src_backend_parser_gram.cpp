/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PERMANENT = 307,                /* PERMANENT  */
  YYSYMBOL_PIVOT = 308,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 309,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 310,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 311,                  /* PLACING  */
  YYSYMBOL_PLANS = 312,                    /* PLANS  */
  YYSYMBOL_POLICY = 313,                   /* POLICY  */
  YYSYMBOL_POSITION = 314,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 315,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 316,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 317,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 318,                /* PRECISION  */
  YYSYMBOL_PREPARE = 319,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 320,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 321,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 322,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 323,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 324,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 325,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 326,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 327,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 328,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 329,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 330,                    /* QUOTE  */
  YYSYMBOL_RANGE = 331,                    /* RANGE  */
  YYSYMBOL_READ_P = 332,                   /* READ_P  */
  YYSYMBOL_REAL = 333,                     /* REAL  */
  YYSYMBOL_REASSIGN = 334,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 335,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 336,                /* RECURSIVE  */
  YYSYMBOL_REF = 337,                      /* REF  */
  YYSYMBOL_REFERENCES = 338,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 339,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 340,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 341,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 342,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 343,                  /* RELEASE  */
  YYSYMBOL_RENAME = 344,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 345,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 346,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 347,                  /* REPLICA  */
  YYSYMBOL_RESET = 348,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 349,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 350,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 351,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 352,                /* RETURNING  */
  YYSYMBOL_RETURNS = 353,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 354,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 355,                    /* RIGHT  */
  YYSYMBOL_ROLE = 356,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 357,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 358,                   /* ROLLUP  */
  YYSYMBOL_ROW = 359,                      /* ROW  */
  YYSYMBOL_ROWS = 360,                     /* ROWS  */
  YYSYMBOL_RULE = 361,                     /* RULE  */
  YYSYMBOL_SAMPLE = 362,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 363,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 364,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 365,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 366,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 367,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 368,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 369,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 370,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 371,                   /* SECRET  */
  YYSYMBOL_SECURITY = 372,                 /* SECURITY  */
  YYSYMBOL_SELECT = 373,                   /* SELECT  */
  YYSYMBOL_SEMI = 374,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 375,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 376,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 377,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 378,                   /* SERVER  */
  YYSYMBOL_SESSION = 379,                  /* SESSION  */
  YYSYMBOL_SET = 380,                      /* SET  */
  YYSYMBOL_SETOF = 381,                    /* SETOF  */
  YYSYMBOL_SETS = 382,                     /* SETS  */
  YYSYMBOL_SHARE = 383,                    /* SHARE  */
  YYSYMBOL_SHOW = 384,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 385,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 386,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 387,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 388,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 389,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 390,                     /* SOME  */
  YYSYMBOL_SQL_P = 391,                    /* SQL_P  */
  YYSYMBOL_STABLE = 392,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 393,             /* STANDALONE_P  */
  YYSYMBOL_START = 394,                    /* START  */
  YYSYMBOL_STATEMENT = 395,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 396,               /* STATISTICS  */
  YYSYMBOL_STDIN = 397,                    /* STDIN  */
  YYSYMBOL_STDOUT = 398,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 399,                  /* STORAGE  */
  YYSYMBOL_STORED = 400,                   /* STORED  */
  YYSYMBOL_STRICT_P = 401,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 402,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 403,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 404,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 405,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 406,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 407,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 408,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 409,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 410,                    /* TABLE  */
  YYSYMBOL_TABLES = 411,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 412,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 413,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 414,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 415,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 416,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 417,                   /* TEXT_P  */
  YYSYMBOL_THEN = 418,                     /* THEN  */
  YYSYMBOL_TIES = 419,                     /* TIES  */
  YYSYMBOL_TIME = 420,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 421,                /* TIMESTAMP  */
  YYSYMBOL_TO = 422,                       /* TO  */
  YYSYMBOL_TRAILING = 423,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 424,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 425,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 426,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 427,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 428,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 429,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 430,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 431,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 432,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 433,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 434,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 435,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 436,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 437,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 438,                    /* UNION  */
  YYSYMBOL_UNIQUE = 439,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 440,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 441,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 442,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 443,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 444,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 445,                   /* UPDATE  */
  YYSYMBOL_USE_P = 446,                    /* USE_P  */
  YYSYMBOL_USER = 447,                     /* USER  */
  YYSYMBOL_USING = 448,                    /* USING  */
  YYSYMBOL_VACUUM = 449,                   /* VACUUM  */
  YYSYMBOL_VALID = 450,                    /* VALID  */
  YYSYMBOL_VALIDATE = 451,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 452,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 453,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 454,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 455,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 456,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 457,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 458,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 459,                /* VERSION_P  */
  YYSYMBOL_VIEW = 460,                     /* VIEW  */
  YYSYMBOL_VIEWS = 461,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 462,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 463,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 464,                     /* WHEN  */
  YYSYMBOL_WHERE = 465,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 466,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 467,                   /* WINDOW  */
  YYSYMBOL_WITH = 468,                     /* WITH  */
  YYSYMBOL_WITHIN = 469,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 470,                  /* WITHOUT  */
  YYSYMBOL_WORK = 471,                     /* WORK  */
  YYSYMBOL_WRAPPER = 472,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 473,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 474,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 475,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 476,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 477,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 478,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 479,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 480,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 481,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 482,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 483,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 484,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 485,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 486,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 487,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 488,                    /* YES_P  */
  YYSYMBOL_ZONE = 489,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 490,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 491,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 492,                  /* WITH_LA  */
  YYSYMBOL_493_ = 493,                     /* '<'  */
  YYSYMBOL_494_ = 494,                     /* '>'  */
  YYSYMBOL_495_ = 495,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 496,                /* POSTFIXOP  */
  YYSYMBOL_497_ = 497,                     /* '+'  */
  YYSYMBOL_498_ = 498,                     /* '-'  */
  YYSYMBOL_499_ = 499,                     /* '*'  */
  YYSYMBOL_500_ = 500,                     /* '/'  */
  YYSYMBOL_501_ = 501,                     /* '%'  */
  YYSYMBOL_502_ = 502,                     /* '^'  */
  YYSYMBOL_UMINUS = 503,                   /* UMINUS  */
  YYSYMBOL_504_ = 504,                     /* '['  */
  YYSYMBOL_505_ = 505,                     /* ']'  */
  YYSYMBOL_506_ = 506,                     /* '('  */
  YYSYMBOL_507_ = 507,                     /* ')'  */
  YYSYMBOL_508_ = 508,                     /* '.'  */
  YYSYMBOL_509_ = 509,                     /* ';'  */
  YYSYMBOL_510_ = 510,                     /* ','  */
  YYSYMBOL_511_ = 511,                     /* '#'  */
  YYSYMBOL_512_ = 512,                     /* '$'  */
  YYSYMBOL_513_ = 513,                     /* '?'  */
  YYSYMBOL_514_ = 514,                     /* '{'  */
  YYSYMBOL_515_ = 515,                     /* '}'  */
  YYSYMBOL_516_ = 516,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 517,                 /* $accept  */
  YYSYMBOL_stmtblock = 518,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 519,                /* stmtmulti  */
  YYSYMBOL_stmt = 520,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 521,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 522,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 523,               /* SeqOptList  */
  YYSYMBOL_opt_with = 524,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 525,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 526,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 527,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 528,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 529,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 530, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 531,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 532, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 533, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 534,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 535,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 536, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 537,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 538,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 539,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 540,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 541,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 542,               /* DetachStmt  */
  YYSYMBOL_opt_database = 543,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 544,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 545,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 546,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 547,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 548,           /* qualified_name  */
  YYSYMBOL_ColId = 549,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 550,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 551,                   /* Sconst  */
  YYSYMBOL_indirection = 552,              /* indirection  */
  YYSYMBOL_indirection_el = 553,           /* indirection_el  */
  YYSYMBOL_attr_name = 554,                /* attr_name  */
  YYSYMBOL_ColLabel = 555,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 556,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 557,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 558,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 559, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 560,                /* opt_using  */
  YYSYMBOL_opt_as = 561,                   /* opt_as  */
  YYSYMBOL_opt_program = 562,              /* opt_program  */
  YYSYMBOL_copy_options = 563,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 564,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 565,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 566,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 567,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 568,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 569,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 570, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 571,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 572,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 573,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 574,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 575,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 576, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 577,       /* generic_option_arg  */
  YYSYMBOL_key_action = 578,               /* key_action  */
  YYSYMBOL_ColConstraint = 579,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 580,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 581,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 582,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 583,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 584,      /* generic_option_elem  */
  YYSYMBOL_key_update = 585,               /* key_update  */
  YYSYMBOL_key_actions = 586,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 587,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 588,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 589,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 590,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 591,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 592,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 593,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 594,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 595,                  /* OptWith  */
  YYSYMBOL_definition = 596,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 597,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 598,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 599,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 600,                /* columnDef  */
  YYSYMBOL_def_list = 601,                 /* def_list  */
  YYSYMBOL_index_name = 602,               /* index_name  */
  YYSYMBOL_TableElement = 603,             /* TableElement  */
  YYSYMBOL_def_elem = 604,                 /* def_elem  */
  YYSYMBOL_opt_definition = 605,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 606,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 607,               /* columnElem  */
  YYSYMBOL_opt_column_list = 608,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 609,              /* ColQualList  */
  YYSYMBOL_key_delete = 610,               /* key_delete  */
  YYSYMBOL_reloption_elem = 611,           /* reloption_elem  */
  YYSYMBOL_columnList = 612,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 613,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 614,                /* func_type  */
  YYSYMBOL_ConstraintElem = 615,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 616,         /* TableElementList  */
  YYSYMBOL_key_match = 617,                /* key_match  */
  YYSYMBOL_TableLikeClause = 618,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 619,                  /* OptTemp  */
  YYSYMBOL_generated_when = 620,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 621,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 622,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 623,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 624,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 625,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 626,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 627,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 628,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 629,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 630,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 631,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 632,              /* macro_alias  */
  YYSYMBOL_param_list = 633,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 634,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 635,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 636,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 637,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 638,          /* opt_secret_name  */
  YYSYMBOL_secret_key = 639,               /* secret_key  */
  YYSYMBOL_secret_key_val = 640,           /* secret_key_val  */
  YYSYMBOL_scope_list_val_item = 641,      /* scope_list_val_item  */
  YYSYMBOL_scope_list_val = 642,           /* scope_list_val  */
  YYSYMBOL_opt_persist = 643,              /* opt_persist  */
  YYSYMBOL_CreateSeqStmt = 644,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 645,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 646,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 647,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 648,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 649,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 650,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 651,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 652,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 653,             /* using_clause  */
  YYSYMBOL_DropStmt = 654,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 655,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 656,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 657,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 658,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 659, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 660,           /* type_name_list  */
  YYSYMBOL_DropSecretStmt = 661,           /* DropSecretStmt  */
  YYSYMBOL_ExecuteStmt = 662,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 663,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 664,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 665,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 666,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 667,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 668,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 669,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 670,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 671, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 672,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 673,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 674,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 675,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 676,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 677,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 678,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 679,                /* IndexStmt  */
  YYSYMBOL_access_method = 680,            /* access_method  */
  YYSYMBOL_access_method_clause = 681,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 682,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 683,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 684,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 685,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 686,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 687,              /* insert_rest  */
  YYSYMBOL_insert_target = 688,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 689,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 690,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 691,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 692,       /* insert_column_item  */
  YYSYMBOL_set_clause = 693,               /* set_clause  */
  YYSYMBOL_opt_or_action = 694,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 695,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 696,               /* index_elem  */
  YYSYMBOL_returning_clause = 697,         /* returning_clause  */
  YYSYMBOL_override_kind = 698,            /* override_kind  */
  YYSYMBOL_set_target_list = 699,          /* set_target_list  */
  YYSYMBOL_opt_collate = 700,              /* opt_collate  */
  YYSYMBOL_opt_class = 701,                /* opt_class  */
  YYSYMBOL_insert_column_list = 702,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 703,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 704, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 705,             /* index_params  */
  YYSYMBOL_set_target = 706,               /* set_target  */
  YYSYMBOL_LoadStmt = 707,                 /* LoadStmt  */
  YYSYMBOL_file_name = 708,                /* file_name  */
  YYSYMBOL_repo_path = 709,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 710,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 711,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 712,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 713,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 714,               /* RenameStmt  */
  YYSYMBOL_opt_column = 715,               /* opt_column  */
  YYSYMBOL_SelectStmt = 716,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 717,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 718,         /* select_no_parens  */
  YYSYMBOL_select_clause = 719,            /* select_clause  */
  YYSYMBOL_opt_select = 720,               /* opt_select  */
  YYSYMBOL_simple_select = 721,            /* simple_select  */
  YYSYMBOL_value_or_values = 722,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 723,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 724,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 725,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 726, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 727,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 728,              /* with_clause  */
  YYSYMBOL_cte_list = 729,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 730,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 731,         /* opt_materialized  */
  YYSYMBOL_into_clause = 732,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 733,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 734,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 735,          /* all_or_distinct  */
  YYSYMBOL_by_name = 736,                  /* by_name  */
  YYSYMBOL_distinct_clause = 737,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 738,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 739,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 740,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 741,              /* sort_clause  */
  YYSYMBOL_sortby_list = 742,              /* sortby_list  */
  YYSYMBOL_sortby = 743,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 744,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 745,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 746,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 747,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 748,             /* limit_clause  */
  YYSYMBOL_offset_clause = 749,            /* offset_clause  */
  YYSYMBOL_sample_count = 750,             /* sample_count  */
  YYSYMBOL_sample_clause = 751,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 752,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 753,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 754,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 755,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 756,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 757,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 758,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 759, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 760,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 761,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 762,            /* first_or_next  */
  YYSYMBOL_group_clause = 763,             /* group_clause  */
  YYSYMBOL_group_by_list = 764,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 765,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 766,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 767,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 768,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 769,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 770,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 771,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 772,            /* having_clause  */
  YYSYMBOL_qualify_clause = 773,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 774,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 775,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 776,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 777,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 778,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 779,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 780,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 781,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 782,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 783,              /* from_clause  */
  YYSYMBOL_from_list = 784,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 785,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 786,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 787,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 788,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 789,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 790,             /* pivot_header  */
  YYSYMBOL_pivot_value = 791,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 792,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 793,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 794,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 795,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 796,             /* joined_table  */
  YYSYMBOL_alias_clause = 797,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 798,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 799,        /* func_alias_clause  */
  YYSYMBOL_join_type = 800,                /* join_type  */
  YYSYMBOL_join_outer = 801,               /* join_outer  */
  YYSYMBOL_join_qual = 802,                /* join_qual  */
  YYSYMBOL_relation_expr = 803,            /* relation_expr  */
  YYSYMBOL_func_table = 804,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 805,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 806,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 807,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 808,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 809,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 810,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 811,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 812,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 813,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 814,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 815,             /* opt_Typename  */
  YYSYMBOL_Typename = 816,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 817,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 818,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 819,            /* ConstTypename  */
  YYSYMBOL_GenericType = 820,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 821,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 822,                  /* Numeric  */
  YYSYMBOL_opt_float = 823,                /* opt_float  */
  YYSYMBOL_Bit = 824,                      /* Bit  */
  YYSYMBOL_ConstBit = 825,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 826,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 827,         /* BitWithoutLength  */
  YYSYMBOL_Character = 828,                /* Character  */
  YYSYMBOL_ConstCharacter = 829,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 830,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 831,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 832,                /* character  */
  YYSYMBOL_opt_varying = 833,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 834,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 835,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 836,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 837,             /* year_keyword  */
  YYSYMBOL_month_keyword = 838,            /* month_keyword  */
  YYSYMBOL_day_keyword = 839,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 840,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 841,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 842,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 843,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 844,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 845,             /* opt_interval  */
  YYSYMBOL_a_expr = 846,                   /* a_expr  */
  YYSYMBOL_b_expr = 847,                   /* b_expr  */
  YYSYMBOL_c_expr = 848,                   /* c_expr  */
  YYSYMBOL_d_expr = 849,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 850,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 851,              /* struct_expr  */
  YYSYMBOL_func_application = 852,         /* func_application  */
  YYSYMBOL_func_expr = 853,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 854,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 855, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 856,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 857,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 858,            /* filter_clause  */
  YYSYMBOL_export_clause = 859,            /* export_clause  */
  YYSYMBOL_window_clause = 860,            /* window_clause  */
  YYSYMBOL_window_definition_list = 861,   /* window_definition_list  */
  YYSYMBOL_window_definition = 862,        /* window_definition  */
  YYSYMBOL_over_clause = 863,              /* over_clause  */
  YYSYMBOL_window_specification = 864,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 865, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 866,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 867,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 868,             /* frame_extent  */
  YYSYMBOL_frame_bound = 869,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 870, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 871,            /* qualified_row  */
  YYSYMBOL_row = 872,                      /* row  */
  YYSYMBOL_dict_arg = 873,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 874,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 875, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 876,                  /* map_arg  */
  YYSYMBOL_map_arguments = 877,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 878,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 879, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 880,                 /* sub_type  */
  YYSYMBOL_all_Op = 881,                   /* all_Op  */
  YYSYMBOL_MathOp = 882,                   /* MathOp  */
  YYSYMBOL_qual_Op = 883,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 884,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 885,              /* subquery_Op  */
  YYSYMBOL_any_operator = 886,             /* any_operator  */
  YYSYMBOL_c_expr_list = 887,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 888,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 889,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 890,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 891,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 892,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 893,            /* func_arg_expr  */
  YYSYMBOL_type_list = 894,                /* type_list  */
  YYSYMBOL_extract_list = 895,             /* extract_list  */
  YYSYMBOL_extract_arg = 896,              /* extract_arg  */
  YYSYMBOL_overlay_list = 897,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 898,          /* overlay_placing  */
  YYSYMBOL_position_list = 899,            /* position_list  */
  YYSYMBOL_substr_list = 900,              /* substr_list  */
  YYSYMBOL_substr_from = 901,              /* substr_from  */
  YYSYMBOL_substr_for = 902,               /* substr_for  */
  YYSYMBOL_trim_list = 903,                /* trim_list  */
  YYSYMBOL_in_expr = 904,                  /* in_expr  */
  YYSYMBOL_case_expr = 905,                /* case_expr  */
  YYSYMBOL_when_clause_list = 906,         /* when_clause_list  */
  YYSYMBOL_when_clause = 907,              /* when_clause  */
  YYSYMBOL_case_default = 908,             /* case_default  */
  YYSYMBOL_case_arg = 909,                 /* case_arg  */
  YYSYMBOL_columnref = 910,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 911,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 912,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 913,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 914,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 915, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 916,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 917, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 918,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 919,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 920,                /* target_el  */
  YYSYMBOL_except_list = 921,              /* except_list  */
  YYSYMBOL_opt_except_list = 922,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 923,          /* replace_list_el  */
  YYSYMBOL_replace_list = 924,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 925,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 926,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 927,      /* qualified_name_list  */
  YYSYMBOL_name_list = 928,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 929,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 930, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 931,                     /* name  */
  YYSYMBOL_func_name = 932,                /* func_name  */
  YYSYMBOL_AexprConst = 933,               /* AexprConst  */
  YYSYMBOL_Iconst = 934,                   /* Iconst  */
  YYSYMBOL_type_function_name = 935,       /* type_function_name  */
  YYSYMBOL_function_name_token = 936,      /* function_name_token  */
  YYSYMBOL_type_name_token = 937,          /* type_name_token  */
  YYSYMBOL_any_name = 938,                 /* any_name  */
  YYSYMBOL_attrs = 939,                    /* attrs  */
  YYSYMBOL_opt_name_list = 940,            /* opt_name_list  */
  YYSYMBOL_param_name = 941,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 942,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 943,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 944,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 945,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 946,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 947,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 948,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 949,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 950,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 951,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 952,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 953,            /* generic_reset  */
  YYSYMBOL_reset_rest = 954,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 955,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 956,                 /* set_rest  */
  YYSYMBOL_generic_set = 957,              /* generic_set  */
  YYSYMBOL_var_value = 958,                /* var_value  */
  YYSYMBOL_zone_value = 959,               /* zone_value  */
  YYSYMBOL_var_list = 960,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 961,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 962,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 963,               /* opt_tables  */
  YYSYMBOL_var_name = 964,                 /* var_name  */
  YYSYMBOL_table_id = 965,                 /* table_id  */
  YYSYMBOL_ViewStmt = 966,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 967          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  693
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   70877

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  517
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  451
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2071
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3456

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   749


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   511,   512,   501,     2,     2,
     506,   507,   499,   497,   510,   498,   508,   500,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   516,   509,
     493,   495,   494,   513,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   504,     2,   505,   502,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   514,     2,   515,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   496,   503
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   498,   498,   514,   526,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   575,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,   458,     7,    13,    19,    25,     9,    13,
      44,    45,    46,    50,    51,    55,    59,    60,    64,    70,
      75,    76,    77,    78,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     9,
      23,    29,    36,    42,    49,    59,    63,    71,    72,    73,
      77,    86,    95,   102,   103,   108,   120,   125,   150,   155,
     160,   166,   176,   186,   192,   203,   214,   229,   230,   236,
     237,   242,   243,   249,   250,   254,   255,   260,   262,   268,
     269,   273,   274,   277,   278,   283,     7,    16,    25,    46,
      47,    50,    54,     7,    14,    22,     9,    19,    29,    42,
      43,     7,    16,    25,    37,    38,    43,    44,    45,    49,
      50,    55,    59,    60,    65,    66,    67,     7,    14,    31,
      51,    55,    65,    69,    75,    76,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     7,    14,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     2,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    69,    79,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   114,   115,   116,   117,   118,   119,   124,   125,
     130,   131,   132,   137,   138,   139,   142,   143,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     107,   112,   120,   124,   129,   130,   135,   139,   144,   148,
     152,   156,   160,   164,   168,   172,   176,   180,   184,   188,
     192,   196,   200,   204,   212,   218,   219,   220,   225,   229,
      47,    48,    52,    53,    68,    69,    76,    84,    92,   100,
     108,   116,   127,   128,   155,   160,   168,   184,   201,   218,
     235,   236,   255,   259,   263,   267,   271,   280,   290,   299,
     308,   318,   328,   339,   353,   370,   370,   374,   374,   378,
     378,   382,   388,   395,   399,   400,   404,   405,   419,   426,
     433,   443,   444,   447,   460,   461,   462,   466,   477,   485,
     490,   495,   500,   505,   513,   521,   526,   531,   538,   539,
     543,   544,   545,   549,   556,   557,   561,   562,   566,   567,
     568,   572,   573,   577,   578,   594,   595,   598,   607,   618,
     619,   620,   623,   624,   625,   629,   630,   631,   632,   636,
     637,   641,   643,   659,   661,   666,   669,   677,   681,   685,
     689,   693,   697,   704,   709,   716,   717,   721,   726,   730,
     734,   742,   749,   750,   755,   756,   760,   761,   766,   768,
     770,   775,   795,   796,   798,   803,   804,   808,   809,   812,
     813,   838,   839,   844,   848,   849,   853,   854,   858,   859,
     860,   861,   862,   866,   879,   886,   893,   900,   901,   905,
     906,   910,   911,   915,   916,   920,   921,   925,   926,   930,
     941,   942,   943,   944,   948,   949,   954,   955,   956,   965,
     971,   980,   981,   994,   995,   999,  1000,  1004,  1005,  1011,
    1017,  1025,  1034,  1042,  1051,  1060,  1064,  1069,  1079,  1092,
    1093,  1096,  1097,  1098,  1101,  1109,  1119,  1120,  1123,  1131,
    1140,  1144,  1151,  1152,  1156,  1165,  1169,  1194,  1198,  1211,
    1225,  1240,  1252,  1265,  1279,  1293,  1306,  1321,  1340,  1346,
    1351,  1357,  1364,  1365,  1373,  1377,  1381,  1387,  1394,  1399,
    1400,  1401,  1402,  1403,  1404,  1408,  1409,  1421,  1422,  1427,
    1434,  1441,  1448,  1480,  1491,  1504,  1509,  1510,  1513,  1514,
    1517,  1518,  1523,  1524,  1529,  1533,  1539,  1560,  1568,  1581,
    1584,  1588,  1588,  1591,  1592,  1594,  1599,  1606,  1611,  1617,
    1622,  1628,  1634,  1640,  1649,  1651,  1654,  1658,  1659,  1660,
    1661,  1662,  1663,  1668,  1688,  1689,  1690,  1691,  1702,  1716,
    1717,  1723,  1728,  1733,  1738,  1743,  1748,  1753,  1758,  1764,
    1770,  1776,  1783,  1805,  1814,  1818,  1826,  1830,  1838,  1850,
    1871,  1875,  1881,  1885,  1898,  1906,  1916,  1918,  1920,  1922,
    1924,  1926,  1931,  1932,  1939,  1948,  1956,  1965,  1976,  1984,
    1985,  1986,  1990,  1990,  1993,  1993,  1996,  1996,  1999,  1999,
    2002,  2002,  2005,  2005,  2008,  2008,  2011,  2011,  2014,  2016,
    2018,  2020,  2022,  2024,  2026,  2028,  2030,  2035,  2040,  2046,
    2053,  2058,  2064,  2070,  2101,  2103,  2105,  2113,  2128,  2130,
    2132,  2134,  2136,  2138,  2140,  2142,  2144,  2146,  2148,  2150,
    2152,  2154,  2156,  2158,  2161,  2163,  2165,  2168,  2170,  2172,
    2174,  2176,  2181,  2186,  2193,  2198,  2205,  2210,  2217,  2222,
    2230,  2238,  2246,  2254,  2272,  2280,  2288,  2296,  2304,  2312,
    2320,  2324,  2340,  2348,  2356,  2364,  2372,  2380,  2388,  2392,
    2396,  2400,  2404,  2412,  2420,  2428,  2436,  2456,  2478,  2489,
    2496,  2510,  2518,  2526,  2546,  2548,  2550,  2552,  2554,  2556,
    2558,  2560,  2562,  2564,  2566,  2568,  2570,  2572,  2574,  2576,
    2578,  2580,  2582,  2584,  2586,  2588,  2592,  2596,  2600,  2614,
    2615,  2619,  2633,  2634,  2635,  2642,  2646,  2650,  2653,  2664,
    2669,  2671,  2682,  2706,  2717,  2728,  2732,  2739,  2743,  2747,
    2764,  2772,  2781,  2785,  2792,  2800,  2808,  2819,  2839,  2875,
    2886,  2887,  2894,  2900,  2902,  2904,  2908,  2917,  2922,  2929,
    2944,  2951,  2955,  2959,  2963,  2967,  2977,  2986,  3008,  3009,
    3013,  3014,  3015,  3019,  3020,  3027,  3028,  3032,  3033,  3038,
    3046,  3048,  3062,  3065,  3092,  3093,  3096,  3097,  3105,  3113,
    3121,  3130,  3140,  3158,  3204,  3213,  3222,  3231,  3240,  3252,
    3253,  3254,  3255,  3256,  3270,  3271,  3274,  3275,  3279,  3289,
    3290,  3294,  3295,  3299,  3306,  3307,  3312,  3313,  3318,  3319,
    3322,  3323,  3324,  3327,  3328,  3331,  3332,  3333,  3334,  3335,
    3336,  3337,  3338,  3339,  3340,  3341,  3342,  3343,  3344,  3347,
    3349,  3354,  3356,  3361,  3363,  3365,  3367,  3369,  3371,  3373,
    3375,  3389,  3391,  3396,  3400,  3407,  3412,  3418,  3422,  3429,
    3434,  3441,  3446,  3454,  3458,  3464,  3468,  3477,  3488,  3489,
    3493,  3497,  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3511,
    3512,  3513,  3523,  3527,  3534,  3541,  3542,  3558,  3562,  3567,
    3571,  3586,  3591,  3595,  3598,  3601,  3602,  3603,  3606,  3613,
    3623,  3637,  3638,  3642,  3653,  3654,  3657,  3658,  3661,  3665,
    3672,  3680,  3688,  3696,  3706,  3707,  3712,  3713,  3717,  3718,
    3719,  3723,  3732,  3740,  3748,  3757,  3772,  3773,  3778,  3779,
    3789,  3790,  3794,  3795,  3799,  3800,  3803,  3819,  3827,  3837,
    3838,  3841,  3842,  3845,  3849,  3850,  3854,  3855,  3858,  3859,
    3860,  3870,  3871,  3875,  3877,  3883,  3884,  3888,  3889,  3892,
    3903,  3906,  3917,  3921,  3925,  3937,  3941,  3950,  3957,  3995,
    3999,  4003,  4007,  4011,  4015,  4019,  4025,  4042,  4043,  4044,
    4047,  4048,  4049,  4052,  4053,  4054,  4057,  4058,  4061,  4063,
    4068,  4069,  4072,  4076,  4077,     7,    18,    19,    23,    24,
      25,    26,    27,     7,    26,    50,    73,    80,    85,    86,
      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,
      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
      52,     5,    12,    22,    23,     7,    19,    33,     9,    16,
      26,    33,    44,    45,    50,    51,    52,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    90,    91,    92,
      97,    98,   103,   107,   115,   116,   121,   122,   123,   129,
     134,   142,   143,    10,    16,    22,    28,    38,    39,    47,
      58,    70,    78,    86,    93,   103,   105,   111,   115,   119,
     134,   141,   142,   143,   147,   148,     7,    15,    22,    29,
      36,    45,    46,    48,    49,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    18,    31,    35,    42,    53,    54,    60,    61,
       9,    19,     7,    18,    25,    34,    35,    39,    40,     2,
       7,    12,    17,    26,    33,    43,    44,    51,     3,    10,
      17,    24,    31,    38,    45,    52,    61,    61,    63,    63,
      65,    66,    70,    71,     6,     8,    21,    34,    47,    65,
      87,    88,    89,    90,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PERMANENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER",
  "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET", "SECURITY",
  "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE",
  "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'",
  "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterObjectSchemaStmt",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "secret_key", "secret_key_val", "scope_list_val_item", "scope_list_val",
  "opt_persist", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "DropSecretStmt", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3071)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2000)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6323,   -94,    67, -3071, -3071,   277,   -94, 48558, 63153,   -94,
     153,  1754, 50506, -3071,   309,  7555,   -94, 53428, 70354,   373,
     290, 30790,   448, 53915, 53915, -3071, -3071, -3071, 63153, 53428,
   54402,   -94,   312, 63640, -3071,   -94, 32738, 50993,   350, -3071,
   53428,    38,    68, 54889, 53428,  2958,   744,   281, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071,   340, -3071, -3071, -3071, -3071,   243, -3071, -3071, -3071,
   -3071, -3071,   142, -3071,   146,   160, 30790, 30790,  2048,   321,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, 32251, -3071,
   -3071, -3071, -3071, 55376, 53428, 55863, 51480, 56350, -3071,   838,
   -3071,   184, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
     185, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071,   190, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071,   191, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071,   584,   192, -3071, -3071,
   -3071,   440, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071,  2958, 53428,   -45,   446,   542, -3071, 56837, -3071,
     535, 53428, -3071, -3071,   648,   546,   765, -3071, -3071, 51967,
   -3071, -3071, -3071,   872,  1092,   840, -3071, -3071,   684, -3071,
     148, -3071, -3071,   724,   692, -3071, -3071, -3071, -3071, 63153,
   -3071, -3071, -3071, -3071,   777, -3071, 67536, -3071, 64127, 57324,
   57811, -3071,   650,  1865,  4483, 70371, 29814, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071,   340, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, 53915,
   63153, 53915,   654,   709,  1069,   745, 31277,   749, 33226,   758,
     769,  1112,   778,   788,   804,   810,    68, 30302,   835,   584,
   -3071, 58298, 58298,   -72,  2861, -3071, 58298, 58785, -3071,   829,
   -3071,   838, -3071, -3071, -3071,  1181, -3071,  -141,   864, -3071,
   59272, 59272, 59272,   895,  1176, -3071, -3071, -3071,   898, -3071,
   -3071,  1134, 19713, 19713, 64614, 64614,   838, 64614,   942, -3071,
   -3071,    45, -3071, -3071, -3071,  2048,   912,   584, -3071, -3071,
   50993, -3071, -3071,   268,  1267, 19713, 53428,   925, -3071,   943,
     925,   946,   948, -3071,  6323, -3071, 53428,  1296,  1180, 50993,
     517,   517,  1418,   517,   992,   996,  4847,  2540, -3071,  1526,
   -3071,   984,  1095,  1011,  1298, -3071,   912,  1373,  1045,  1184,
    1389,  6179,  1408,  1052,  1410,  1104,  1510, 19713, 46123,   584,
   -3071, 11028,  1060,  1063, -3071, -3071, -3071, -3071,  1464,  1305,
   -3071,  1547, -3071, -3071,  1154, 59759, 60246, 60733, 61220, 65101,
    1523, -3071, -3071,  1476, -3071, -3071, -3071,  1159, -3071, -3071,
   -3071,  1439,   441, -3071, -3071, -3071, -3071, -3071, -3071,  1179,
   -3071,  1179,  1179, -3071, -3071, -3071, -3071,  1136,  1136,  1322,
    1138, -3071, -3071, -3071,  1500, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071,  1144,   938, -3071,  1179, -3071,
    1136, -3071, -3071, -3071, -3071, -3071, -3071, -3071, 69911, -3071,
   -3071, -3071, -3071,   415,   574, -3071,  1157, -3071, -3071, -3071,
   -3071,   105,  1161, -3071,  1617, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071,  1164, -3071,  3462,  1136,  1530,  1195,   172,
   -3071,  1560,   182, -3071,  1562,  1432, 14100, -3071,  1371, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,    68,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071,   365, -3071, -3071, 43196,
   70371,  1297,  1217, -3071,  1568, 19713, 19713,  1223,  1957, 58298,
   58785, 19713, 53428, -3071, 19713, 24321,  1236, 19713, 19713, 11540,
   19713, 28840, 58298,  2861,  1237, -3071,   716, 53428,  1243, -3071,
    1345,  1345,   312, 30790,  1546, -3071,   861,  1557,  1473, -3071,
   30790,  1473,  1084,  1277,  1569,  1473, -3071,   550,  1571,  1345,
   33713,  1282, -3071,  1345,  1506, -3071, -3071, 53915, 43196, 14100,
   68008,  1757, -3071, -3071, -3071, -3071,  1572, 63153,  1293, -3071,
   -3071, -3071, -3071, -3071, -3071,   534,  1795,   167,  1800, 19713,
     167,   167,  1301,   193,   193, -3071,  1304, -3071,   194,  1307,
    1310,  1806,  1812,   147,   152,   938,   167, 19713, -3071,   193,
    1312,  1815,  1317,  1817,   162,   165, -3071,   196, 19713, 19713,
   19713,  1682, 19713, 10516,  1818, 46123, -3071, 53428,   610, -3071,
     584,  1318,   838, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071,   166,  7538, -3071, -3071, -3071, -3071,  1361, -3071, -3071,
   -3071, -3071,  1536, 19713, -3071, -3071,  1324,  1546, -3071,   197,
   -3071, -3071,  1546, -3071, -3071, -3071, -3071, -3071,   225,  1735,
   42222, 42709, 63153,   584, -3071, 65588, -3071, -3071, -3071, -3071,
   -3071, -3071,   476, -3071,   340, 44914,  1330,  1334,   925, 53428,
   53428,  1805, -3071, -3071, -3071,   943, 50993,   120,  1634,  1470,
   -3071, -3071,  2048,  2048, 15105,  1428,   211,   904, 15617, 20225,
    1689,  1573,   538,   558,  1695, -3071,  1576,  1799, 24321, 19713,
   19713,   992,   996, 19713, -3071, -3071, -3071,  1628, 53428, 49045,
     495,   796,  1356,  1441,  1358,     8,  1774, -3071,  1359, -3071,
    1444, 53428, 69911,   150, -3071,  1811,   150,   150,   209,  1814,
    1459,   240,  1632,    36,   -86,  1458, -3071,  1359, 50993,   175,
     722,  1359, 53428,  1481,   776,  1359, 63153,  1217, 40133,  1376,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
     168, 14100, -3071,   987,  1163,  1174,   381,   206,  1246,  1285,
   14100,  1397,  1402,   174,  1429,  1491,  1499,  1519,  1552,  1652,
    1660,  1667,   136,  1671,  1673,  1676,  1678,  1680,  1683, -3071,
    1692,   178,  1700,   219, 14100,  1712, -3071,   180, -3071, 44914,
     -12, -3071, -3071,  1714,  1483, 63153,  1447, 53428,   660,  1545,
    1769,  1820, 68480, 53428,  1654,  1458,  1655,  1420,  1888,  1662,
    1063,  1665,  1434,  1674, -3071,  1437, -3071, 66075,  1942, -3071,
    1801, -3071, -3071, -3071, -3071, -3071,  1442, -3071, -3071, 19713,
   -3071, -3071, -3071,  1938, -3071, 68008, 68008,  1179,  1179, -3071,
   -3071,  1912,  1535,  1538,  1938, -3071,  1938, -3071, 63153, -3071,
   -3071, 68008, -3071, 63153,  1452,  1462,  1938, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071,  1938,  1548, -3071,  1549,  1550,  1551, -3071,
   -3071, -3071, -3071, -3071, 63153, 46123,  1461, 63153, -3071, 53428,
   53428, -3071, 53428, 63153, -3071,   575, 44914,  1967,  1379, 70371,
   47584, -3071, -3071, -3071, -3071,   910,   994, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071,   838, 46123, -3071,  3935,
   53915, 43800,  1474, 19713, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071,  1475,  1810, -3071, -3071,  6822,  1477,
   44091,  1484, 24321, 24321,   584,  2503, -3071, -3071, 24321,  1485,
   48071, 43720,  1486,  1490, 44228, 16129, 19713, 16129, 16129, 44311,
   -3071,  1492, 44415, 58298,  1494, 53428, 52454, -3071, -3071, -3071,
   19713, 19713,  2861, 52941,  1518, -3071, 30790, -3071,  1778, 30790,
   -3071, -3071,  3437, -3071, 30790,  1782, 19713, 30790, -3071,  1728,
    1730,  1503, 30790, -3071, 53428,  1505, 53428, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071,  1496,   612, -3071,   628,  1828,
   -3071, -3071, 19713, 19713, -3071, 44914,  1553, 19713, -3071, 19713,
    3961, 38584, 16641,  3961,  2004,  2004, 36148, -3071,  1670, 44599,
   -3071,  1513,  1194,  8178,  1509, -3071, -3071,  1504, -3071,  1511,
    1507, 40761,   173,   584,   584, 19713, -3071, 19713,  2668,  2668,
   -3071,   187, 68008, 19713, 19713, 19713, 19713, 19713, 19713, 19713,
   19713, 45636,  1603,   164, 63153, 19713, 19713,  1521,   794, -3071,
   19713,  1758, -3071,  1524, 19713,  1610,   220, 19713, 19713, 19713,
   19713, 19713, 19713, 19713, 19713, 19713, -3071, -3071, 26862,   201,
     625,  1857,  1877,   -42,   411, 19713,  1872, 11028, -3071,  1872,
   -3071, -3071, -3071, -3071, -3071,   198, -3071, -3071, -3071,  1496,
   -3071,  1496, -3071, 63153, -3071, 53428,   268, 50019, 19713, -3071,
   -3071,  1534,  1533,   305, -3071,  1597, -3071, -3071, 53428, 36635,
    1833, -3071,   283,  1537, -3071, 43680,  1789,  1833,  2048, -3071,
   -3071, 25345,  1668,  1834,  1773, -3071, -3071,  1747,  1753, -3071,
    1558, 45108, 20737, 20737, -3071,  1372, 44914,  1381, -3071, -3071,
   -3071, -3071, -3071, -3071,   714, -3071, 53428,   347, 34200, -3071,
    1559,    60, -3071,  2799,  1886,  1856,  1689,   558,  1565, -3071,
    1147,  1567, 66562, 53428,  1852,  1816,  1863,    93, 68008, -3071,
   -3071, -3071, -3071, 53428, 63153, 61707, 67049, 46610, 53428, 46123,
   -3071, -3071, -3071, -3071, 53428,   802, 53428,  6652, -3071, -3071,
   -3071,   150, -3071, -3071, -3071, -3071, -3071, 63153, 53428, -3071,
   -3071,   150, 63153, 53428,   150, -3071,  1488, 53428, 53428, 53428,
   53428,  1645, 53428, 53428, -3071, -3071, -3071, 21249,    20,    20,
    1802, 12052,   202, -3071, 19713, 19713,  1751, -3071, -3071,   771,
    1809,    83, -3071,  1637, 53428, 53428, 53428, 53428, 63153, 53428,
     939, -3071, -3071, -3071, -3071, -3071,  1593, -3071,  1594,  1954,
    1458, -3071,  1956, 49532,   457,  3037,  1958,  1640,  1961, 12564,
    2065,  1963, 63153,  1845, -3071, -3071,  1832, -3071, -3071, 19713,
    1612,  1615,   105,   782, -3071, -3071,  1613,  1462,  1639,  1643,
    1616,  1633, 68008,   798, -3071,   808,  1938,   138,  1636,  1641,
    1489,   931,   961,  1378,   172, -3071, 46123, -3071,   182, -3071,
    1861,   159, -3071, 14100, 19713, -3071, -3071, -3071, -3071, -3071,
   -3071,  1217, 27360, -3071,   819, -3071, -3071,  2095,   838,  2095,
     766, -3071, -3071,  2095, -3071,  2080,  2095, -3071, -3071, 68008,
   -3071,  8218, -3071, 19713, 19713, -3071, 19713,  1979, -3071,  2138,
    2138, 68008, 24321, 24321, 24321, 24321, 24321, 24321,   721,  1312,
   24321, 24321, 24321, 24321, 24321, 24321, 24321, 24321, 24321, 25857,
     459, -3071, -3071,   850,  2111, 19713, 19713,  1992,  1979, 19713,
   -3071, 68008,  1648, -3071,  1649,  1650, 19713, -3071, 68008, -3071,
   53428,  1651,    -8,   -13, -3071,  1653,  1656, -3071,  1546, -3071,
     659,   816, 53428,  3350,  5430,  5533, -3071, -3071, 19713,  1984,
    3437, 30790, -3071, 19713,  1658, -3071, -3071, 30790,  2003, -3071,
   -3071, -3071, 34687,  3437, 68008,   858, -3071, 53428, 68008,   870,
   43196, -3071, 14100, -3071, 68008, -3071, -3071, -3071, -3071, -3071,
   -3071,  1659,  1669, 19713,    81, -3071,  8284,  6781, -3071,  1663,
   -3071,  1657, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, -3071,  1681, -3071,  1675,
   -3071,  1679, 53428, -3071, 21761, -3071, 63153, -3071, -3071, 19713,
   19713, 53428, -3071,  1682, -3071,  1685, 39079, -3071, -3071, -3071,
     226,   821, 44966,   411,  2573,  2573,  2573,  3961, -3071, -3071,
   -3071,  1686, -3071, 24321, 24321, -3071,  3443,  2295, 10516, -3071,
   -3071,  2009, -3071,   866, -3071,  1672, -3071, -3071,  4495, -3071,
   38584, 45155, 19713,   169, -3071, 19713,  1521, 19713,  1762,  2573,
    2573,  2573,   382,   382,   226,   226,   226,   821,   411, -3071,
   -3071, -3071,  1684, 19713, 46123, -3071,  1688,  1694,  2034,  1317,
   19713, -3071, -3071, 30790,  1518,   -12,  1518,  1938,  2668, -3071,
     943, -3071, -3071,   943, 44914, 53428, -3071, -3071,  1943,  1696,
   30790,  1733,  2155,  2144, 63153, -3071, -3071,  1701,  1872,  1709,
   -3071, -3071,  1725, 19713,   768,  1725, -3071,  1833,    -2,  1934,
    1010,  1010,  1372,  1935, -3071, -3071,  1775, -3071, -3071, -3071,
   19713, 13076,  1393, -3071,  1403, -3071, -3071, -3071, -3071, -3071,
    1715, -3071,  1983, -3071, 53428, -3071, -3071, 24321,  2165, 19713,
   35174,  2167,  1972, -3071, -3071, -3071,  1813,  1359, 19713,  1965,
   -3071,   143,  1726,  2088,   334,  2039, 63153, -3071,   345,   368,
   -3071,   215,  2091,   159,  2093,   159, 46123, 46123, 46123,   880,
   -3071, -3071, -3071,   838, -3071,  -135,   887, -3071, -3071, -3071,
   -3071,  1821,   784,  1458,  1359, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071,   189,   791,  1359,  1823, -3071,  1824, -3071,  1829,
     797,  1359, -3071, -3071,  8976, 44914,   386,   202,   202,   202,
   14100, -3071,  1975,  1981,  1752, 44914, 44914, -3071,   181, -3071,
   63153, -3071, -3071, -3071,  1751,  1820, 53428,  1458,  1736,  2214,
    1063,  1434,  1756, -3071,  1917,   601,  1677, -3071, 63153, 53428,
   53428, 53428, 62194, -3071, -3071, -3071,  1759,  1755, -3071,    -3,
    1986,  1985, 53428,  1804, 53428,  1358,  2230, 53428, -3071,   919,
   17153, 63153, 37609, -3071,   934,  2126, 53428,  1768, -3071, -3071,
   -3071, -3071,  1938, -3071, -3071,   280,   280, -3071, -3071, 63153,
   -3071,  1771, -3071,  1772, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071, 63153, -3071, -3071, 44914,
   -3071, -3071, 47097, -3071, -3071, -3071, -3071, -3071, 46123, -3071,
     838, -3071,   838,  2007, 63153, 41248,   838, 41735,   838,  1777,
   -3071, 44914, 39119, 44914,  1992, -3071,   227,  2138,   747,   747,
     747,  5023,  2118,   250,  1780,   747,   747,   747,   279,   279,
     227,   227,   227,  2138,   459,   829, 48071,  1781, -3071, 44914,
   44914, -3071, -3071,  1783, -3071, -3071, -3071, -3071,  1784,  1786,
   -3071, -3071, -3071, -3071, -3071, -3071, 63153,  1059,  1518,   350,
     350,   350,   350, -3071, 53428, 53428, 53428, 44914,  2229,  2108,
   -3071,  3437, 44914, 53428, -3071, 28349, 53428, -3071,  2132, -3071,
    2217, -3071, 53428,   944, -3071, -3071, -3071, -3071, -3071, 44729,
   19713, -3071,  2158, -3071, 19713, 19713, -3071, 38584, -3071, -3071,
    1792, 10516, 44819, -3071,  2106, 39159, 44914, -3071,  1670, -3071,
    2668, 19713,  2921,  3785, 19713,  1798, 19713,  2135, -3071, -3071,
    1803, -3071, -3071, 68008, 19713,  1807,  4776, 24321, 24321,  6423,
   -3071,  6862, 19713, 10516, -3071, 40173,  1797,  1819,  1802, 17665,
   -3071,  2014,  1822, -3071,  1984,   202,  1984,  1826, -3071, -3071,
   -3071, -3071,  1828, -3071, 19713,  1970, 63153,    73,  2259,   950,
   -3071,   584, 36635,  1733, 19713,   626, -3071, -3071,  1825, -3071,
    1725, -3071, -3071, -3071,  2032, -3071, -3071, -3071, 53428, -3071,
    1830, -3071, 34200,  2141, 10516, -3071, 34200, 53428, 53428, 39199,
    2171, -3071, 63153, 63153, 63153, -3071, 63153,  1835,  1836,   304,
    1840,   317, -3071,  3571,   304,  2152,   421,  1358,   240,  5760,
      57, -3071, -3071, -3071,  1891, 53428, -3071, 63153, -3071, -3071,
   -3071, -3071, -3071, 46610, -3071, -3071, 38096, 46123, -3071, 46123,
   53428, 53428, 53428, 53428, 53428, 53428, 53428, 53428, 53428, 53428,
   19713, -3071, 19713,  1842,  1843,  1844,  1802, -3071, -3071, -3071,
   -3071, -3071, -3071,   -86, -3071,   181,  1841, -3071, 49532,  2958,
    1640,  2288, 63153,  1820,   877, 62666, -3071,  1846,  1850,   954,
    1458,  1849,  2289, -3071,   457, 49532, -3071, -3071, -3071,  2246,
   -3071,   650,   214, -3071,  1063, -3071,  2958,  1434, -3071,  2958,
   44914,  1855, -3071,  2330, -3071, -3071, 63153, 63153,  1890, -3071,
    1462,  1837, -3071, -3071,  1462, 68008,  1462, -3071, -3071,   159,
     962, -3071, -3071, -3071, -3071, -3071, 63153,  1854, -3071,  1854,
   -3071, -3071,  1854, -3071, -3071, -3071, -3071, 24321,  2173,  1859,
   68008, -3071, -3071, 53428, -3071, -3071, -3071,   978,  1860,  1984,
   53428, 53428, 53428, 53428, -3071, -3071, -3071, 18177, 19713,  1895,
   -3071,  1864, 14612,  2172, -3071, 27858, -3071,   199,  1867, 34687,
   63153, -3071, -3071, -3071, 19713, 44914, -3071, 44914, -3071, -3071,
   -3071,  8097, -3071,  1866,  1868, 63153, 19713, -3071, -3071, -3071,
     822, 19713, 19713,  3443, -3071,  5791, 19713, 68008,   979,  3443,
     216, 19713,  4308,  5407, 19713, 19713,  6919, 39239, -3071, 22273,
   13588, -3071,  1870, 19713, 39586, 37122, -3071, 30790,  2108,  1871,
    2108,   838,  1874, 44914, 19713, -3071, -3071, -3071, -3071,  1925,
     -68, 32738,  2099, -3071,  1889, 63153, -3071,  1970, 44914, -3071,
   -3071, 38584, -3071, -3071, -3071, -3071, -3071,  2326,  1964,  1883,
    1884, -3071,  1316, -3071, -3071, 63153,  1893, -3071,  1896,   304,
   -3071, 63153,  1927, -3071,   228,  2193,    98, -3071, 19713, -3071,
    2283,  2357,  3571,  1898, 63153, 53428, 24321, -3071,   657,   212,
   -3071,  2183, 53428,  1927,  2320, -3071, -3071, -3071,   317, -3071,
    2220,  2137, -3071,   150, -3071, 19713,   317,  2139,   139, 63153,
   -3071, -3071,  3636, -3071, 68008,   159,   159, -3071,  1900,  1903,
    1906,  1907,  1908,  1914,  1915,  1920,  1921,  1922,  1924, -3071,
    1930,  1932,  1933,  1937,  1940,  1944,  1945,  1946,  1144,  1955,
   -3071,  1966,  1825,  1968,  1971,  1973,  1974,  1977, 68952,  1978,
    1980,  1988,  1989,  1157,  1990,   910,   994, -3071, -3071, -3071,
   -3071,  1997, -3071, -3071, -3071,  1195,  1947, -3071, -3071, -3071,
    1998, -3071,  2011, -3071, -3071, -3071, -3071, -3071,  1959,  1987,
   -3071, -3071, -3071,   202,  1217,   155, 63153,  1918,  1804,  2395,
   18689,  1015,   645,  2198,  1969, -3071,   838,  1640, -3071, 49532,
    3467,   696,  1985, -3071,   204,  1804, -3071,  2364,  1640,  2005,
    2431, -3071, 63153, -3071, -3071,   564, -3071,  2195, 63153,  2002,
   -3071, -3071, -3071, -3071, 47097,  1854,  5550, 24321, 68008,  1034,
    1050, -3071,  2471,  2148,  2108, -3071, -3071, -3071, -3071, -3071,
    2019,   357,  2025, 10004,  1999, -3071, -3071, -3071, -3071, -3071,
   -3071, 44914, 44914, 63153,  2191, -3071, -3071,  2026,  2028, 35661,
    2478,  2031, -3071, 14100, -3071,  2345, -3071, 29327, -3071, 44914,
   19713, -3071, -3071, 40213,  2353,  3443,  3443,  5791,  1064, -3071,
    3443, 19713, 19713,  3443,  3443, 19713, -3071,  9490,   400, -3071,
    1089, -3071, 39626, -3071, 69424, -3071, -3071,  1895,   838,  1895,
   -3071, -3071,  2033, -3071, -3071, -3071,  2092, -3071, -3071,  1102,
    2452,  1970, 19713, -3071, -3071,  2037, 34200, -3071, -3071, -3071,
   -3071, 34200,   304, -3071,  2213,  1927,  2047, -3071, -3071, -3071,
   -3071, -3071, -3071, 39666, -3071,    32, 19713, -3071,  1099,  5023,
   -3071, -3071, -3071, -3071,  1927,  1063, -3071, 53428,  2515,  2409,
   -3071, -3071, 44914, -3071, -3071,  1938,  1938, -3071, -3071,  2217,
   -3071, -3071, -3071, -3071,  1195,   466, 38096, 53428, 53428, -3071,
   -3071,  2051, -3071, -3071,   -86,  2439,  1109,   457, -3071,  2958,
    2958, 44914, -3071, 53428,  2412, 49532, -3071,  2522,  2054, 53428,
    1804,   231,   231, -3071,  2204, -3071,  2210, -3071, -3071,  2532,
     233, -3071, 19201,  1118, -3071,  2330, 53428, -3071, -3071, 31764,
   -3071,  5550,  1123, -3071, -3071,  2066,  2068, -3071,  1895, 19713,
    2069, 19713, -3071, 22785,  2536,  2073, -3071, 19713,  2130, 26369,
   -3071, 19713, -3071, 53428, 58298,    20,  2081, 58298, -3071, -3071,
   -3071, 19713, -3071,  3443,  3443,  3443, 19713, -3071, 19713, -3071,
   -3071, -3071,  2276,  2191, -3071,  2191, 19713,  2958,   584,    43,
   63153,   -19, -3071, 44914, -3071, -3071, -3071, 53428, -3071, 46123,
   -3071,   304,   -33,  2085, 19713, 39706,  2323, -3071, -3071,  2359,
   -3071,  2411, -3071,  2156,   487,  2177, -3071, -3071, -3071, -3071,
    1217,   838,  1640,  1985,  2005, -3071,  2114, 53428,  2958,   457,
     650, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071, -3071,
   -3071, -3071, -3071, -3071,  2958,  2551,  2338,  2553,  2958, 44914,
   -3071, -3071,  1890, 19713,    84, -3071,  1128,  2549, -3071, -3071,
    2620,  2191,  2123, 22785,  2124, -3071,  2127, 63153, 44914,  2272,
   -3071, -3071,  2128, -3071, -3071,   202, 19713, -3071, 40277,  2131,
    2136,  2583,  1802,  2130,  2130, -3071,   -68, -3071, -3071,  2546,
   31764,  2516,  1063,   304,  2149,  1142, -3071, -3071, -3071, -3071,
   -3071,  1458, -3071, 39746,  2380,   171,  2365,  2085, 19713, -3071,
    2216, -3071, -3071, -3071,  2607, -3071, -3071, 49532,  2146,  2005,
    1985,  1804,  2005,  2369, -3071,  2370, -3071,  2151, 40093, 63153,
   63153,  1640, 31764, 63153,  2153,  2130, -3071,  2154, -3071, -3071,
   -3071, 52454, -3071,  2159,  2160, -3071, -3071, -3071, 19713,   141,
   -3071, -3071,  2205, 53428,  1150,    23,  2359, 38096, -3071, 46123,
    1994,   -33,  2459, -3071, -3071, -3071, -3071,   149,  2379, -3071,
    2385, -3071, 44914, -3071,  2958, 49532, -3071, -3071, -3071, -3071,
   -3071, -3071, 31764,  2549, -3071,   283, -3071,  1518, -3071,   283,
   -3071, -3071, -3071, -3071,   838, -3071,  1486, 23297, 23297, 23297,
    2166,  2958, -3071,  1518, -3071,  2292,  2365, -3071, -3071, -3071,
   -3071, -3071,   499,   499,  2545, -3071,  2232, -3071,  2005,  1151,
   63153,  1725, -3071,  1725, 24833,  2315,   205, 43760,  2535, -3071,
    2535,  2535, -3071, -3071, -3071, 36635, -3071, -3071,  2661, -3071,
     222, -3071, -3071, -3071,  1640,   283, -3071, -3071,  2653, -3071,
   -3071, -3071, -3071, -3071,   179, -3071, -3071, -3071,  1518,   304,
   -3071, -3071, -3071,  1518,  1725, 23809,  2332, -3071,  2401, -3071,
   -3071, -3071, -3071, -3071, -3071, -3071
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     154,   266,     0,  1345,  1344,  1416,   266,     0,  1294,   266,
     487,   404,     0,  1437,  1416,     0,   266,     0,   154,     0,
       0,     0,     0,     0,     0,   547,   550,   548,     0,     0,
       0,   266,   587,     0,  1436,   266,     0,     0,   579,   549,
       0,  1396,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    24,    23,    25,
      26,  1303,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,   523,   510,   592,   522,     0,     0,   153,   691,
     530,    36,    37,    38,    39,    40,    41,    42,  1435,    43,
     265,   264,   258,     0,     0,     0,     0,     0,  1415,     0,
     259,   110,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1470,  1471,  1830,  1472,  1473,  1474,  1475,  1476,  1831,
    1477,  1478,  1479,  1776,  1777,  1832,  1778,  1779,  1480,  1481,
    1482,  1483,  1484,  1485,  1486,  1487,  1780,  1781,  1488,  1489,
    1490,  1491,  1492,  1782,  1833,  1783,  1493,  1494,  1495,  1496,
    1497,  1834,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,
    1506,  1835,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
    1515,  1516,  1784,  1785,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,
    1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,
    1543,  1544,  1786,  1545,  1546,  1547,  1548,  1549,  1787,  1550,
    1551,  1552,  1788,  1553,  1554,  1555,  1836,  1837,  1556,  1557,
    1789,  1839,  1558,  1559,  1790,  1791,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1567,  1568,  1840,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1841,  1792,
    1581,  1582,  1583,  1584,  1585,  1793,  1794,  1795,  1586,  1842,
    1843,  1587,  1844,  1588,  1589,  1590,  1591,  1592,  1593,  1594,
    1845,  1595,  1846,  1596,  1597,  1598,  1599,  1600,  1601,  1602,
    1603,  1796,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,
    1797,  1848,  1798,  1622,  1623,  1624,  1799,  1625,  1626,  1849,
    1627,  1800,  1628,  1801,  1629,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,  1637,  1638,  1802,  1850,  1639,  1851,  1803,  1640,
    1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,
    1651,  1652,  1804,  1852,  1653,  1654,  1805,  1655,  1656,  1657,
    1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1806,
    1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1853,
    1686,  1687,  1688,  1807,  1689,  1690,  1691,  1692,  1693,  1694,
    1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,
    1705,  1706,  1707,  1808,  1708,  1709,  1710,  1854,  1711,  1712,
    1809,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1725,  1810,  1726,  1811,  1727,  1728,  1729,
    1730,  1856,  1731,  1732,  1733,  1734,  1735,  1736,  1812,  1813,
    1737,  1738,  1814,  1739,  1815,  1740,  1741,  1816,  1742,  1743,
    1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
    1754,  1755,  1756,  1757,  1758,  1817,  1818,  1759,  1857,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,
    1771,  1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,
    1828,  1829,  1772,  1773,  1774,  1775,     0,   111,   112,  1242,
    1444,     0,  1220,   110,  1789,  1796,  1810,  1292,  1293,   111,
     261,   486,     0,     0,     0,     0,     0,   216,     0,   398,
     397,     0,  1283,   403,     0,     0,     0,   114,   106,  1655,
     113,  1219,   104,  1415,     0,     0,   424,   425,     0,   434,
       0,   417,   422,   418,     0,   443,   436,   444,   426,     0,
     416,   437,   427,   415,     0,   445,     0,   420,     0,     0,
       0,   262,   225,   404,     0,   154,     0,  1307,  1308,  1309,
    1310,  1311,  1312,  1317,  1313,  1314,  1315,  1316,  1318,  1319,
    1320,  1321,  1322,  1298,  1303,  1323,  1324,  1325,  1326,  1327,
    1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  1336,     0,
    1294,     0,     0,  1782,  1833,  1787,     0,  1800,     0,  1803,
    1804,  1689,  1811,  1814,  1815,  1816,  1817,     0,   759,   113,
     108,   743,     0,   525,   695,   705,   743,   748,  1010,   771,
    1011,     0,   115,  1382,  1381,  1377,  1376,   193,  1257,  1424,
    1558,  1598,  1706,  1812,  1737,  1440,  1425,  1419,  1423,   263,
     586,   584,     0,  1191,  1558,  1598,  1693,  1706,  1812,  1353,
    1357,     0,   260,  1442,  1429,     0,  1430,   113,   531,   578,
       0,   267,  1395,     0,  1400,     0,  1669,   558,   561,  1251,
     559,   523,     0,     1,   154,  1302,  1410,     0,   160,     0,
     582,   582,     0,   582,     0,   515,     0,     0,   523,   518,
     522,   692,  1439,  1812,  1737,  1428,  1431,  1567,     0,     0,
    1567,     0,  1567,     0,  1567,     0,  1418,  1175,     0,  1221,
     116,     0,     0,   369,   402,   401,   400,   399,   404,  1567,
    1267,     0,   454,   455,     0,     0,     0,     0,     0,   204,
    1278,   107,   105,     0,  1413,   432,   433,     0,   423,   419,
     421,   256,     0,  1243,  1858,  1859,  1860,   814,  1861,   843,
     821,   843,   843,  1862,  1863,  1864,  1865,   810,   810,  1532,
     823,  1866,  1867,  1868,  1567,  1869,  1870,   811,   812,   848,
    1871,  1872,  1873,  1874,  1875,     0,     0,  1876,   843,  1877,
     810,  1878,  1879,  1880,   815,  1881,   781,  1882,     0,  1883,
     813,   782,  1884,   851,   851,  1885,     0,   838,  1886,  1244,
    1245,   442,     0,   446,   796,   797,   798,   799,   824,   825,
     800,   830,   831,   835,   801,   883,   810,  1567,  1246,   442,
     438,  1567,   442,  1213,  1567,     0,     0,   217,     0,   397,
    1300,  1337,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,
    1896,  1895,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,
    1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,
    1915,  1918,  1916,  1917,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,  1930,  1931,  1933,  1932,  1934,
    1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1944,
    1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,  1954,
    1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,
    1965,  1966,  1967,  1338,  1339,  1351,     0,  1352,  1342,  1306,
     154,     0,   485,  1291,  1378,     0,     0,     0,  1131,   743,
     748,     0,     0,   761,     0,  1146,     0,  1152,     0,     0,
       0,   743,   530,     0,   705,   760,   109,     0,   741,   742,
     633,   633,   587,     0,   568,   753,     0,     0,   756,   754,
       0,   756,     0,     0,     0,   756,   752,   713,     0,   633,
       0,   741,   744,   633,     0,   763,  1297,     0,     0,     0,
       0,     0,  1422,  1420,  1421,  1426,     0,     0,     0,  1223,
    1225,  1226,  1099,  1236,   996,     0,  1777,  1778,  1779,  1167,
    1780,  1781,  1783,  1784,  1785,   950,  1786,  1234,  1788,  1790,
    1791,  1793,  1794,  1795,  1796,  1797,  1798,     0,  1235,  1801,
    1634,  1806,  1807,  1809,  1812,  1813,  1233,  1818,     0,     0,
       0,  1202,  1122,     0,     0,     0,   995,     0,  1168,  1176,
     991,     0,     0,   804,   805,   826,   827,   806,   832,   833,
     807,     0,  1198,   884,   979,  1186,   998,  1029,  1000,  1009,
     987,  1066,   980,     0,   990,   982,  1194,   568,  1192,     0,
     983,  1222,   568,  1190,  1356,  1354,  1360,  1355,     0,     0,
       0,     0,     0,   109,  1402,  1403,  1394,  1392,  1393,  1391,
    1390,  1397,     0,  1399,  1303,  1117,  1119,     0,   560,     0,
       0,     0,   513,   512,     3,  1251,     0,     0,     0,     0,
     580,   581,     0,     0,     0,     0,     0,     0,     0,     0,
     676,   607,   608,   610,   673,   677,   685,     0,     0,     0,
       0,     0,   519,     0,  1438,  1434,  1432,     0,     0,     0,
     138,   138,     0,     0,     0,     0,     0,    98,    47,    91,
       0,     0,     0,     0,   239,   252,     0,     0,     0,     0,
       0,   249,     0,     0,   232,   226,   228,    49,     0,   138,
       0,    45,     0,     0,     0,    51,     0,   485,  1174,     0,
     120,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,
    2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,
    2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,
    2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,  2048,
    2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,
    2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  1954,  2067,
    2068,  2069,  2070,  2071,   118,   119,   122,   121,   123,   117,
     110,     0,  1968,  1830,  1831,  1832,  1833,  1783,  1834,  1835,
       0,  1836,  1837,  1789,  1839,  1840,  1841,  1842,  1843,  1844,
    1845,  1846,  1796,  1848,  1849,  1850,  1851,  1852,  1853,  1994,
    1854,  1810,  1856,  1816,     0,  1857,  1002,   111,  1239,  1125,
     592,  1123,  1252,     0,     0,     0,   483,     0,     0,     0,
       0,  1263,     0,     0,  1567,   200,  1567,   369,     0,  1567,
     369,  1567,     0,  1567,   205,     0,  1277,  1280,     0,   435,
       0,   431,   429,   428,   430,   842,   829,   837,   836,  1122,
     819,   818,   817,     0,   816,     0,     0,   843,   843,   841,
     820,   796,     0,     0,     0,   847,     0,   845,     0,   440,
     441,     0,   413,     0,   789,   785,     0,   856,   857,   858,
     859,   866,   867,   864,   865,   860,   861,   854,   855,   862,
     863,   852,   853,     0,   868,   869,   870,   871,   872,   873,
     874,   875,   802,   808,     0,     0,  1247,     0,   408,     0,
       0,   410,     0,     0,   222,     0,   220,     0,   404,   154,
       0,   233,  1347,  1348,  1346,     0,     0,  1305,   236,  1341,
    1350,  1340,  1349,  1304,   253,  1299,     0,     0,  1295,   473,
       0,     0,     0,     0,  1132,  1141,  1133,  1134,  1135,  1136,
    1137,  1138,  1139,  1140,     0,     0,   704,   702,     0,     0,
       0,     0,     0,     0,  1168,     0,   954,   980,     0,     0,
       0,  1117,  1151,     0,     0,     0,     0,     0,     0,  1117,
    1157,     0,     0,   727,   739,     0,   626,   632,   703,   701,
       0,  1191,   696,     0,   773,   753,     0,   752,     0,     0,
     755,   749,     0,   750,     0,     0,     0,     0,   751,     0,
       0,     0,     0,   699,     0,   739,     0,   700,   770,  1384,
    1383,  1379,  1366,  1365,  1374,   194,     0,  1128,     0,   154,
    1427,  1441,     0,  1122,   988,  1166,     0,     0,   993,  1079,
     909,     0,     0,   910,   888,   889,     0,  1201,  1210,  1117,
    1121,     0,   991,  1117,     0,   984,   985,     0,  1069,  1071,
       0,     0,  1169,  1224,   992,     0,  1229,     0,   883,   883,
    1197,  1099,     0,  1089,  1092,     0,     0,  1096,  1097,  1098,
       0,     0,     0,  1189,     0,  1107,  1109,     0,     0,   925,
    1105,     0,   928,     0,     0,     0,     0,  1093,  1094,  1095,
    1085,  1086,  1087,  1088,  1090,  1091,  1103,  1084,   906,     0,
     981,     0,  1032,     0,   905,  1195,   694,     0,  1227,   694,
    1368,  1372,  1373,  1371,  1367,     0,  1359,  1358,  1363,  1361,
    1364,  1362,  1443,     0,  1404,  1388,     0,  1385,  1120,   689,
     562,  1215,     0,   566,  1411,  1409,   159,   158,     0,     0,
     535,   534,   601,   593,   595,   601,     0,   533,     0,   649,
     650,     0,     0,     0,     0,   682,   680,  1223,  1236,   637,
     611,   636,     0,     0,   615,     0,   641,   884,   675,   517,
     605,   606,   609,   516,     0,   678,     0,   688,     0,   554,
     556,   539,   553,   551,   536,   544,   676,   610,     0,  1433,
       0,     0,     0,     0,     0,  1567,     0,     0,   784,    82,
      63,   321,   137,     0,     0,     0,     0,     0,     0,     0,
      90,    87,    88,    89,     0,     0,     0,     0,   237,   238,
     251,     0,   242,   243,   240,   244,   245,     0,     0,   230,
     231,     0,     0,     0,     0,   229,     0,     0,     0,     0,
       0,     0,     0,     0,  1417,  1412,  1170,  1175,   592,   592,
     592,     0,   590,   591,     0,     0,   472,   367,   377,     0,
       0,     0,  1267,     0,     0,     0,     0,     0,   204,     0,
     404,  1268,  1266,  1270,  1269,  1271,  1538,   188,     0,     0,
     199,   196,     0,   366,   340,     0,     0,  1282,     0,     0,
       0,     0,     0,  1567,   356,  1279,     0,  1414,   257,     0,
       0,     0,   442,     0,   840,   839,   790,   786,     0,     0,
       0,     0,     0,     0,   447,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   442,  1248,     0,   439,   442,  1214,
       0,   442,   224,     0,     0,  1301,  1343,   234,   254,   235,
     255,   485,   480,   508,     0,   488,   493,   470,     0,   470,
       0,   490,   494,   470,   489,     0,   470,   484,  1380,     0,
    1025,     0,  1015,     0,     0,   762,     0,     0,  1016,   956,
     957,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   974,
     973,  1017,   766,     0,   769,     0,     0,  1149,  1150,     0,
    1018,     0,     0,  1156,     0,     0,     0,  1023,     0,   706,
       0,     0,     0,   621,   625,   628,     0,   631,   568,   524,
    1558,  1598,     0,   579,   579,   579,   577,   567,     0,   653,
       0,     0,   728,     0,     0,   730,   732,     0,     0,   735,
     712,   711,     0,     0,     0,     0,   774,     0,  1219,     0,
       0,   195,     0,  1256,     0,  1261,  1262,  1259,  1255,  1258,
    1260,     0,     0,     0,  1165,  1161,     0,     0,  1074,  1076,
    1078,     0,  1083,  1089,  1092,  1096,  1097,  1098,  1093,  1094,
    1095,  1085,  1086,  1087,  1088,  1090,  1091,     0,  1111,     0,
    1065,     0,     0,  1200,     0,   952,     0,   986,   997,     0,
       0,  1072,  1001,  1202,  1177,     0,     0,  1232,  1231,   885,
     894,   897,   929,   930,   901,   902,   903,   907,  1254,  1253,
    1196,     0,  1188,     0,     0,   886,   911,   916,     0,  1158,
     946,     0,   934,     0,   924,     0,   932,   936,   912,   927,
       0,   908,     0,  1189,  1108,  1110,     0,  1106,     0,   898,
     899,   900,   890,   891,   892,   893,   895,   896,   904,  1082,
    1080,  1081,     0,  1175,     0,  1187,     0,     0,  1034,     0,
       0,   931,  1193,     0,   773,   592,   773,     0,   883,  1405,
    1251,  1398,  1387,  1251,  1118,  1216,  1250,   564,     0,     0,
       0,  1407,   145,   149,     0,  1176,   179,   181,   694,     0,
     599,   600,   604,     0,     0,   604,   583,   532,  1807,  1689,
       0,     0,     0,     0,   642,   683,     0,   674,   639,   640,
       0,   638,  1223,   643,  1222,   644,   647,   648,   616,  1211,
     684,   686,     0,   679,     0,  1217,   538,   557,     0,     0,
       0,     0,     0,   521,   520,   690,     0,    48,     0,  1567,
      65,     0,     0,     0,     0,     0,     0,   271,     0,   371,
     271,   103,  1567,   442,  1567,   442,  1465,  1533,  1707,     0,
      61,   345,    94,     0,   131,   374,     0,   330,    84,    99,
     124,     0,     0,   227,    50,   241,   246,   127,   250,   247,
    1287,   248,   138,     0,    46,     0,   125,     0,  1285,     0,
       0,    52,   129,  1289,     0,  1174,     0,   590,   590,   590,
       0,  1124,     0,     0,     0,  1126,  1127,   471,     0,   368,
       0,   482,   461,   462,   472,  1265,     0,   200,   369,     0,
     369,     0,     0,  1267,     0,     0,   190,   186,     0,     0,
       0,     0,   367,   359,   357,   390,     0,   364,   358,     0,
       0,   316,     0,  1459,     0,     0,     0,     0,   456,     0,
       0,   204,     0,   209,     0,     0,     0,     0,   809,   822,
     414,   796,     0,   850,   849,   851,   851,   779,   796,     0,
     796,     0,   794,     0,   834,   803,   876,   877,   878,   879,
     880,   881,   882,   407,  1249,   409,     0,   411,   223,   221,
    1296,   477,     0,   476,   481,   475,   479,   474,     0,   469,
       0,   503,     0,     0,     0,     0,     0,     0,     0,     0,
    1012,  1130,     0,  1144,  1143,   955,   962,   965,   969,   970,
     971,  1145,     0,     0,     0,   966,   967,   968,   958,   959,
     960,   961,   963,   964,   972,   771,     0,     0,   765,  1154,
    1153,  1147,  1148,     0,  1020,  1021,  1022,  1155,     0,     0,
     740,   619,   617,   620,   622,   618,     0,     0,   773,   579,
     579,   579,   579,   576,     0,     0,     0,   772,     0,   670,
     734,     0,   758,     0,   731,     0,     0,   722,     0,   729,
     778,   745,     0,     0,   747,  1375,  1129,   585,   989,     0,
       0,  1162,     0,   951,     0,  1077,   999,     0,  1100,  1064,
       0,     0,     0,  1209,     0,  1118,  1068,  1070,  1210,   994,
     883,     0,     0,     0,     0,     0,     0,     0,   935,   926,
       0,   933,   937,     0,     0,     0,   920,     0,     0,   918,
     947,   914,     0,     0,   948,  1174,     0,  1178,     0,     0,
    1033,  1042,   697,   693,   653,   590,   653,     0,  1369,  1389,
    1386,   565,   154,  1408,     0,   168,     0,     0,     0,     0,
     171,   185,   182,  1407,     0,     0,   594,   596,     0,  1101,
     604,   598,   646,   645,     0,   614,   681,   612,     0,   687,
       0,   555,     0,   541,     0,   715,     0,     0,     0,     0,
       0,   320,     0,     0,     0,   271,     0,   379,     0,   386,
       0,     0,   371,   352,    83,     0,     0,     0,    57,   102,
      75,    67,    53,    81,     0,     0,    86,     0,    79,    96,
      97,    95,   100,     0,   281,   306,     0,     0,   317,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1175,  1171,  1175,     0,     0,     0,   592,   588,   589,  1003,
     506,   507,   505,   232,   378,     0,     0,   198,   366,     0,
    1282,     0,     0,  1264,   404,     0,   191,     0,   189,     0,
     200,   369,     0,   344,   340,   365,   338,   337,   339,     0,
    1460,   225,     0,  1454,   369,  1281,     0,     0,   457,     0,
     451,     0,   206,     0,   207,   201,     0,     0,  1276,   828,
     792,     0,   846,   844,   793,     0,   791,   787,   795,   442,
       0,   465,   504,   509,   491,   496,     0,   502,   498,   497,
     492,   500,   499,   495,  1013,  1024,  1142,     0,     0,     0,
       0,   764,   767,     0,  1019,  1014,   738,     0,     0,   653,
       0,     0,     0,     0,   570,   569,   575,     0,     0,  1036,
     733,     0,     0,     0,   720,   710,   716,     0,     0,     0,
       0,   776,   775,   746,     0,  1164,  1160,  1073,  1075,  1112,
    1199,  1117,  1204,  1206,     0,     0,     0,  1067,   953,  1230,
     887,     0,     0,   917,  1159,   938,     0,     0,     0,   913,
    1100,     0,     0,     0,     0,     0,   922,     0,  1182,  1175,
       0,  1181,     0,     0,     0,     0,  1008,   698,   670,     0,
     670,     0,     0,  1406,     0,  1401,   146,   147,   148,     0,
       0,     0,   163,   140,     0,     0,   180,   168,   156,   602,
     603,     0,   597,   613,  1212,  1218,   540,     0,   991,     0,
       0,   537,     0,   132,   271,     0,     0,    64,     0,   388,
     332,   380,   363,   347,     0,     0,     0,   272,     0,   405,
       0,     0,   353,     0,     0,     0,     0,   333,     0,     0,
     292,     0,     0,   363,     0,   370,   288,   289,     0,    56,
      76,     0,    72,     0,   101,     0,     0,     0,     0,     0,
      59,    71,     0,    54,     0,   442,   442,    62,  1243,  1858,
    1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1978,
    1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1987,  1876,
     278,  1877,  1634,  1878,  1879,  1880,  1881,  1882,     0,  1883,
     782,  1884,  1885,  2063,  1886,  1085,  1086,   276,   277,   373,
     273,  1244,   274,   381,   275,     0,   376,   331,   128,  1288,
       0,   126,     0,  1286,   135,   133,   130,  1290,     0,     0,
    1006,  1007,  1004,   590,   485,   464,     0,     0,  1459,     0,
       0,     0,     0,  1567,     0,   187,     0,  1282,   197,   366,
       0,   396,   316,   391,     0,  1459,  1457,     0,  1282,  1453,
       0,   448,     0,   211,   212,     0,   210,     0,     0,     0,
     788,   780,   412,   478,     0,   501,   975,     0,     0,     0,
       0,   629,     0,   635,   670,   574,   573,   572,   571,   652,
    1508,  1790,  1688,     0,   656,   651,   654,   659,   661,   660,
     662,   658,   669,     0,   672,   757,  1113,  1115,     0,     0,
       0,     0,   721,     0,   723,     0,   725,     0,   777,  1163,
    1207,  1208,  1203,     0,   884,   944,   942,   939,     0,   940,
     921,     0,     0,   919,   915,     0,   949,     0,     0,  1179,
       0,  1028,     0,  1031,  1045,  1041,  1040,  1036,  1003,  1036,
    1370,   563,   167,   144,   170,   169,     0,  1176,   177,     0,
       0,   168,     0,   172,   458,     0,     0,   552,   714,   545,
     546,     0,   384,    66,     0,   363,     0,   271,   349,   348,
     351,   346,   350,     0,   406,     0,     0,   290,     0,   297,
     335,   336,   334,   291,   363,   369,   293,     0,     0,     0,
      68,    58,    55,    60,    69,     0,     0,    70,    73,   778,
      85,    78,  1987,  1996,     0,     0,     0,     0,     0,  1173,
    1172,     0,   460,   467,   232,     0,     0,   340,  1456,     0,
       0,   453,   203,     0,     0,   366,   192,     0,     0,     0,
    1459,     0,     0,   268,     0,   313,     0,   218,  1458,     0,
       0,  1445,     0,     0,   208,     0,     0,  1274,  1275,     0,
     466,   976,     0,   977,   768,     0,     0,   627,  1036,     0,
       0,     0,   663,   657,     0,  1035,  1037,     0,   624,  1116,
     717,     0,   719,     0,   743,   592,     0,   743,   726,  1205,
    1026,     0,   941,   945,   943,   923,  1175,  1183,  1175,  1180,
    1030,  1044,  1047,   672,  1228,   672,     0,     0,   155,     0,
       0,   152,   139,   157,  1102,   542,   543,     0,   271,     0,
     362,   385,   302,   280,     0,     0,     0,   287,   294,   395,
     296,     0,    77,    93,     0,     0,   375,   136,   134,  1005,
     485,     0,  1282,   316,  1453,   450,     0,     0,     0,   340,
     225,  1455,   329,   322,   323,   324,   325,   326,   327,   328,
     343,   342,   314,   315,     0,     0,     0,     0,     0,   452,
     202,   213,  1276,     0,   174,   183,     0,   174,   978,   630,
       0,   672,     0,     0,     0,   655,     0,     0,   671,     0,
     528,  1114,     0,   709,   707,   590,     0,   708,     0,     0,
       0,     0,   592,   624,   624,   141,     0,   142,   178,     0,
       0,     0,   369,   387,   361,     0,   354,   300,   299,   301,
     305,     0,   303,     0,   319,     0,   312,   280,     0,    80,
       0,   382,   459,   463,     0,   270,  1447,   366,     0,  1453,
     316,  1459,  1453,     0,  1450,     0,   449,     0,     0,     0,
     176,  1282,     0,   176,     0,   624,   665,     0,   664,  1039,
    1038,   626,   718,     0,     0,  1027,  1185,  1184,     0,  1051,
     527,   526,     0,     0,     0,     0,   395,     0,   341,     0,
       0,   302,     0,   295,   392,   393,   394,     0,   308,   298,
     309,    74,    92,   383,     0,   366,  1448,   269,   219,  1446,
    1451,  1452,     0,   174,   173,   601,   175,   773,   184,   601,
     634,   529,   666,   623,     0,   724,  1046,     0,     0,     0,
       0,     0,   151,   773,   162,     0,   312,   360,   355,   279,
     304,   318,     0,     0,     0,   310,     0,   311,  1453,     0,
     176,   604,  1272,   604,  1776,  1509,  1744,     0,  1063,  1052,
    1063,  1063,  1043,   143,   150,     0,   271,   284,     0,   283,
       0,   372,   307,  1449,  1282,   601,   164,   165,     0,  1056,
    1055,  1054,  1058,  1057,     0,  1050,  1048,  1049,   773,   389,
     282,   286,   285,   773,   604,     0,     0,  1060,     0,  1061,
     161,  1273,   166,  1053,  1059,  1062
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3071, -3071, -3071,  2000,   100,   101,  -715, -1159,  -877, -1177,
   -3071,  -125,   102, -3071, -3071,   156, -3071,   960, -3071,   145,
    -654,   519, -3071,  1056, -3071, -3071,  2692, -3071,   106,   108,
    2102,  3117,  2578,  3584,   981,  -503,  -719, -1310,  -930,    22,
   -3071, -3071, -3071, -3071,  -945,   471, -1176, -3071,   388, -3071,
   -3071, -3071, -3071,  -215,   140, -3071,     7, -2114, -2816,  -563,
   -3071,  -665, -3071,  -327, -3071,  -612, -3071,  -915,  -618,  -652,
   -2707, -1101, -3071,  1577,  -367, -3071,   566, -3071, -2466, -3071,
   -3071,   551, -3071, -1122, -3071, -2214,   151,  -598, -2535, -2489,
   -2105,  -701,   210,  -602,   188, -2078, -1153, -3071,   577, -3071,
    -586, -3071,  -711, -2060,   109, -2587, -1608,    -7, -3071, -3071,
   -3071,  -540, -3071, -2459,   110,  1425, -2086,   111, -1637, -3071,
   -3071, -1588,   135, -2366,  -360, -3071,  2021,    12, -2036,   112,
   -3071, -3071,   113,    33,  -530,   264, -3071,   115, -3071, -3071,
    1349,  -797, -3071,  1399, -3071,   117,   913, -3071, -2479, -3071,
    -451, -3071,  -499,  -489, -3071, -3071,    26,  -908,  1339, -3071,
   -3071, -3071,    16, -3071,  -461, -3071, -3071, -2495, -3071,    46,
   -3071, -3071, -3071, -3071, -3071,  -398,   285, -3071, -3071,  -539,
   -2506,  -488, -3071, -2901, -2967, -3071, -3071,  -636, -2960, -1998,
     118,   122,  1333,   119,   121, -3071,   298,   127, -1112,    24,
     270,   -44,   -34, -3071,   -29, -3071, -3071, -3071,   629, -3071,
   -3071,    47,    63,  1687, -3071,  -996, -3071, -1496,   682, -3071,
    1827,  1839, -2146,  -645,   -69, -3071,   664, -1635, -2090,  -551,
    1083,  1661,  1690,   413, -2395, -3071,  -523, -3071,  -404, -3071,
   -3071,   661,  1133, -1519, -1524, -3071, -2143, -3071,  -434,  -321,
   -3071, -3071, -3071, -3071, -3071, -2454, -2404,  -520,  1107, -3071,
    1691, -3071, -3071, -3071, -3071,    37, -1493,  2795,   711,   -47,
   -3071, -3071, -3071, -3071,   144, -3071,   862,  -152, -3071,  2199,
    -559,  -631,  1878,  -395,   236, -1787,    31,  2211,   464, -3071,
   -3071,   467, -2039, -1483,   422,  -236,  1453, -3071, -3071,  -555,
   -1285,  -791, -3071, -3071,  -515,  -170, -3071, -3071, -3071,  1129,
    1167, -3071, -3071,  2290,  2778, -3071,  -632,  3201,  -546,  -766,
    1892,  -897,  1894,  -876,  -863,  -873,  1897,  1902, -1485,  4721,
    -703,  2521, -2178, -3071,   975,     2, -3071, -1451,    17, -3071,
   -3071, -3071, -3071, -2645, -3071,  -409, -3071,  -407, -3071, -3071,
   -3071, -1605, -3070, -1630, -3071,  3575,   820, -3071, -3071,   419,
   -3071, -3071, -3071, -3071, -1523, -3071,  5704,   730, -3071, -1968,
   -3071, -3071,  -939,  -672, -1072,  -965, -1253, -1325, -3071, -3071,
   -3071, -3071, -3071, -3071, -1544, -1710,  -124,   780, -3071, -3071,
     873, -3071, -3071, -3071, -1711, -2045, -3071, -3071, -3071,   799,
    1360,   116,  -658, -1572, -3071,   841, -2297, -3071, -3071,   425,
   -3071,  -479, -1094, -2361,  1831,   137, -3071,  5019, -2472, -3071,
   -3071,  -566, -2592, -1051,  -796, -3071,   128,  1311,    52, -3071,
     129,  1219, -3071, -3071, -3071,   130, -3071,   557,   131,   502,
   -3071,   896, -3071,   685,   133, -3071, -3071,    87,  2769,    19,
   -2878
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   577,   578,  1800,  1751,  1532,  1186,
    1741,  1438,   579,  2540,  2541,  2542,  2189,  1167,  3289,  2190,
    1168,  1169,  2544,    52,    53,    54,   109,  1197,   580,   581,
     517,   628,  1058,   630,  1059,  1574,   730,  1274,  1275,   582,
    2244,  3084,  2640,  3085,  2330,  2238,  1448,  2324,  1863,  1781,
    1449,   523,  1877,  2641,  2583,  1864,   583,  2529,  2869,  3282,
    2555,  3421,  2805,  2806,  3279,  3280,  2532,  2192,  3348,  3349,
    2610,  1733,  3343,  2263,  3220,  2196,  2177,  2807,  2271,  3180,
    2911,  2193,  2787,  2264,  3275,  1815,  2265,  3276,  3037,  2266,
    1778,  1804,  2533,  3350,  2197,  1779,  2528,  2870,  1721,  2267,
    3286,  2268,   534,  2791,   584,  2613,  1338,   519,   508,   509,
     820,  1277,  1318,  1278,   585,   748,  1810,   586,  1331,  1792,
      62,  1345,  2283,  2284,  2924,  2925,   535,   587,  1801,   588,
    2597,  2598,   589,   590,  1104,  2485,  2111,   591,   568,   569,
     839,  1382,   570,   821,    68,   592,  1424,  1425,   847,    70,
     696,  1440,   593,  1441,  1442,   936,    71,  1533,   938,   939,
      72,    73,   595,  3118,  2929,  1347,  1816,  2276,   536,   596,
    2752,  2113,  2488,  3271,    76,  3018,  2116,  1128,  3021,  3235,
    2745,  3016,  2489,  3310,  3365,  3019,  2117,  2118,  3236,  2119,
     597,   645,  1531,   598,   599,  1001,  1978,   600,  1724,   601,
    1060,    83,    84,   974,    85,  3031,    86,    87,  1699,  1700,
    1701,   675,   687,   688,  2109,  1504,  1947,   680,  1132,  1668,
     662,   663,  2234,   704,  1773,  1663,  1664,  2122,  2496,  1692,
    1693,  1141,  1142,  1935,  3250,  1936,  1937,  1497,  1498,  3127,
    1680,  1684,  1685,  2143,  2133,  1671,  2399,  2954,  2955,  2956,
    2957,  2958,  2959,  2960,  1061,  2679,  3138,  1688,  1689,  1144,
    1145,  1146,  1697,  2153,    89,    90,  2094,  2472,  2473,   634,
    2971,  1521,  1702,  2683,  2684,  2685,  2975,  2976,  2977,   635,
     969,   970,   993,   988,  1511,  1955,   636,   637,  1912,  1913,
    2368,   995,  1949,  1965,  1966,  2691,  1833,   822,  2178,  1537,
    1385,   824,  1062,   825,  1360,  1063,  1364,   827,  1064,  1065,
    1066,   830,  1067,  1068,  1069,   833,  1356,  1070,  1071,  1375,
    1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1115,
    1703,  1073,  1074,  1075,  1076,  1077,  1078,   639,  1079,  1080,
    1622,  2088,  2471,  2964,  3135,  3136,  2736,  3006,  3162,  3262,
    3380,  3408,  3409,  3435,  1081,  1082,  1568,  1569,  1570,  1988,
    1989,  1990,  1991,  2082,  1616,  1617,  1083,  2874,  1619,  2009,
    2967,  2968,  1116,  1490,  1561,  1320,  1321,  1538,  1464,  1465,
    1471,  1887,  1479,  1483,  1917,  1918,  1491,  2050,  1084,  1984,
    1985,  2422,  1546,  1085,  1199,  1573,  2731,  2085,  1620,  2044,
    1092,  1086,  1093,  1088,  1557,  1558,  2433,  2703,  2704,  2015,
    2150,  1651,  2155,  2156,   843,  1089,  1090,  1091,  1322,   512,
     836,  3366,  1416,  1121,  1323,  2040,   602,   102,   603,    93,
     604,  1111,   684,  1112,  1114,   605,   656,   657,   606,   669,
     670,  1534,  1636,  1535,   607,    98,  1155,   658,   676,   608,
    3111
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     507,   692,   840,   729,  1087,   989,  1185,    58,  1755,   510,
    1279,   823,    63,  1117,   507,   705,    74,  1371,  1482,    99,
     835,  1765,    57,   638,    81,  1754,  1652,  1328,  2008,  1914,
    2125,  1443,  1326,    66,  1536,  2501,   934,  1720,   640,   706,
     707,  1823,  1418,  1969,   594,  1421,    75,    88,  1377,  1726,
    1427,  1457,    92,  2092,   709,  2474,  2226,  2476,   632,   710,
     674,  1770,  1437,  1730,  1151,    88,  2534,  1187,   678,  1191,
    2491,  1195,  1459,   971,  1654,  1461,   850,  1759,   992,   507,
     507,  2573,  2574,  2575,  2875,  1460,  1827,   935,   638,   638,
     842,  1626,  2455,  2027,  2028,  2899,  1629,  2872,  2527,  2897,
      49,    50,    51,   640,   640,  1845,    55,   690,    56,    59,
      60,    61,    64,    65,  1564,    67,  2490,    69,    77,    78,
     671,    79,   715,   632,   632,  1566,   966,    80,    91,    94,
      95,    96,  2915,    97,  2702,  2584,  2096,   723,  2912,  1357,
    1358, -1847,  -511,   940,   511,  2245,   646,  1013,  1013, -1987,
   -1987,  2766,  -848,  1140,  1431,  2771,  -848, -1847,   511,  1013,
    -514,  2148,  3309,  2400,  2145,  2591,  1369,  -851,  1379,  1129,
    -851,   642,  -843, -1240,  1103,  1013,  2409,  2249, -1221, -1838,
    2599, -1237, -1237, -1855,  1143, -1241,   642, -1978, -1978, -1240,
   -1838, -1996, -1996, -1238, -1238, -1847, -1855, -1241,  -810,  -823,
    2252,  -838,   642,   642,   642,  3103,   682,  2371,   521,  2042,
      21,  2587,  1099,  3041,  2042,  1711,  2420, -1083,  3183, -1973,
   -1973,  1633,  1379,   511,   511, -1083,  2901,  2686,  1630,  1431,
     642,  2079, -1998, -1998,  1013,  1379,  2158,  1582,  1891,  2080,
    -511,  2535,  1584,  1893,  -232,  1379, -1104,  1279,  1731,  -232,
    2242,  3024,  1475,   757, -1104,  1722,  2647,  2649,  -514,  2652,
    3196,  3212,   835,  1361,  3269,   103,  1757,  3392,  3056,  1722,
      82,  1106,  1592,  2063,  1452,  -468,  1731,   702,  2606,  1377,
    2562,  3446,  -647,  3075,  3007,  1370,  3009,  1820,    82,   700,
    1891,   631,  3384,  2383,  1892,  1893,  1739,  3225,  2381,  1742,
    1743,   972,     3,     4,  1594,  3226,    82,  1714,  1656,   702,
    3334,  3088,  2780,  1744,  3213,   691,  1768,  2089,  1466,  2916,
    3377,  1413,  3104,  3214,  2120,  1769,  3296,  3052,  3107,  2739,
     100,  2738,  2747,  2740,  3428,  3441,  3313,  3105,  1631,  3344,
    3266,  3014,   660,  2344,  3038,  3215,  3369,  2384,  2536,  2669,
    2789,    25,    26,    27,   998,  3447,   631,   631,   708,   701,
    2556,   697,  3163,   610,  3165,   999,  3430,  3277,    82,   734,
    1669,   735,  2466,  2557,  2372,  3453,  2790,   101,  2658,  3015,
    1560,  1738,  1749,   108,  1279,  2530,  3074,  2748,  1357,  1358,
    2232,   992,  2064,  1582, -1972, -1972,   826,  1583,  1584,   934,
    1753,  1931,  3399,   971,  1369,  2121,  1750,  2538,  -783,  2065,
    2762,  2779,  3097,  2927,  2066,   543,    32,  3216,  3039,  2783,
    3098,  3356,  1582,  3109,  3359,  -511,  1583,  1584,  1592,  3278,
    3217,   104,  1931,  3425,  1107,   702,  1108,  2822,   973,   789,
     661,  1445,   105,  -514,  2527,  3448,  2527,  2394,  2395,  2396,
    1732,   698,  2067,    37,   835,  1745,  1380,  1592,   934,  2699,
    1594,  1632,  3400,  1746,  2090,  1716,  1657,  1100,  3385,  3227,
    1891,  1982,  3378,  3345,  1892,  1893,  1670,   106,  1732,   609,
    2917,  1708,  3194,  3241,  2413,  3053,    39,  3270,  2385,  1594,
    3128,  1704,  1705,  2382,  -511,  3442,  3295,    42,  1771,   611,
    3178,  3379,  1162,  1729,  1552,  2243,  2784,  2686,  2159,  1361,
    1380,    43,  -514,  3211,  1729,  3172,  2531,  1862,  2231,  3188,
    3423,  3387,  3431,  1380,  1370,  3106,  2944,   107,  2659,  1351,
    1972,  2920,   692,  1380,  2809,    44,  2314,  2008,  3184,  -783,
    1101,  2175,  1729,   947,   683,  1983,   732,  1130,  3042,    45,
    2107,  2233,  1635,  1007,   641,  1572,  3113,  3346,   758,   819,
     934,   934,  3417,  2537,  2908,  2538,  1352,  1499,  2935,   933,
    2785,  2043,  2786,  2108,   685,  1722,  2457, -1083,  2580,  2581,
     963,  1508,  1717,   692,   703,  1523,  1723,  1515,   727,  1527,
    2170,  2081,   728,  3357,  3393,  2539,  1655,  1758,  3449,  2176,
    1706,  2499,   937,  3083,  2875,  2068, -1104,  2810,  2504,   507,
    -511,  2563,  2145,  2478,  2680,  1381,  2593,  2872,   638,  2151,
     507,  3203,    88,  1755,  1355,  2493,   835,  3218,  -514,   638,
    3219,  1707,  1372,   640,  2656,  1372,  3065,  3066,   826,  1807,
    1152,   709, -1847,  2302,   640,  1131,   710,  1435,  1436,  -511,
    1549,  -511,  2602,  -848,  1373,   507,   507,  1373, -1847,   522,
    3032,  2039,  2095,  1647,   962,  3175,  1549,  -514,  1374,  -514,
    3176,  1376,  1577,  -843, -1240,  1772,  2584,   727,   507, -1221,
   -1838,   728,  1417,  3149, -1855,  2320, -1241,  1560,   699,  2811,
   -1240, -1838,  1420,  2621,  1519,  1136, -1847, -1855, -1241,  1359,
    1363,    58,  -838,  1627,  2097,  2973,    63,  3294,  1749,  1110,
      74,  1105,  1547,    99,  3358,  1136,    57,  1328,    81,  2231,
     507,  1276,  1435,  1436,  1317,   960,  1109,    66,  1615,  1908,
    1105,  3301,  1750,   944,  2152,  1824,  1825,  -232,  -232,  3130,
      75,    88,  1353,  3300,   693,  1520,    92,  3081,  3058,  1118,
    1372,   671,   671,   511,   671,  1012,  3063,  3023,  1891,  3263,
     679,  3264,  1892,  1893,   511,  3418, -2000, -2000, -2000,  1889,
    1890,  1138,  1373,  3050,  2467,  1910,  1992,  1797,  1905,  1906,
    1907,  1908,  2175,  1993,  1994,  2759,   835,  1995,  1996,  1997,
     694,  1138,    82,  3025,    49,    50,    51,  2191,   695,  2195,
      55,   819,    56,    59,    60,    61,    64,    65,  2897,    67,
     823,    69,    77,    78,  1923,    79,  3367,   742,  3086,   835,
     835,    80,    91,    94,    95,    96,  1834,    97,  1159,   742,
     826,   711,  1582,  1582,  1160,   835,  2379,  3315,  1139,  1317,
    2524,  3101,  1938,   642,  2279,    82,   691,  3051,   840,  2352,
    3419,  1847,  2760,  1279,  2024,  1279,  1354,  1851,  1958,  2888,
     736,  2889,   737,  -667,  2205,  2875,  3098,  1592,  3330,  3331,
    1981,  1560,  1429,  2379,  2208,  1430,  1722,  2211,  2872,  3420,
    2011,  1612,  1613,  1614,  1615,  1372,   949,  1725,   738,   743,
     934,  2571,  3102,  2670,  2671,  2672,  2673,   961,  1505,  1594,
    1594,   743,  2572,  2025,  2008,  3157,  -215,  1373,  1610,  1611,
    1612,  1613,  1614,  1615,  1857,  1914,  3158,   749,  2430,  1013,
    3371,  1374,  2051,  3181,  2332,  2269,  1502,  2270,  2336,  3443,
    1855,  2338,   933,  1512,  1929,  1161,  1672,   744,   507,   507,
    1848,   935,  2388,  2306,   507,   708,   731,   507,   507,  2052,
     507,   507,   507,   507,  2325,  2709,  1903,  1904,  1905,  1906,
    1907,  1908,  1731,   750,    82,  2307,   507,  3195,  2309,  2311,
    2312,  1572,  3168,   507,  1846,   638,   745,  2576,  2308,  2310,
    1673,  1783,   638,  1645,   744,  2323,  1646,    88,  3290,  2353,
     640,   933,  1317,   819,  2447,  1846,  1783,   640,  1859,  2354,
   -1969, -1969,   826,  1013,   644,   644,  2630,  1367,  1368,   692,
     632,  2595,   507,  2634,  2502,  2636,  1731,   632,  2998,  1013,
    1784,  2448,  2203,   745,  1731,  2290,  1755,  2029,  2045,   978,
     507,  1731,  1899,  2499,  2333,  1784,   835,  1731,  1543,  2334,
      45,   507,   507,   507,  1372,   507,   507,  2313,  1276,  2479,
     524,  2315,  2480,  2498,  2317,  3093,  2167,  1427,   746,   753,
    2510,   747,  2053,  1932,  3273,   979,  1373,  2054,  1933,  3114,
    1785,  1159,  2055,  2389,  3115,  2390,   507,  1160,  1159,  2255,
    1376,  1506,  1852,  2204,  1160,  1853,  1760,   755,   727,  1162,
     726,   981,   728,   933,   933,   754,  2335,  1675,  1660,  1661,
    2564,  1667,  2214,   710,   710,  1786,   710,  2221,   747,  3323,
     511,   756,   524,   525,   727,  1389,  1390,   511,  1571,  1971,
    1786,  1505,  1972,  2227,  2228,  2229,  1672,   507,  2718,  2083,
    1159,   507,   507,  2084,   759,  1973,  1160, -1284,  1974,  2449,
    1763,   507,   507,   507,  2450,   762,   507,  2287,  2561,  1136,
    1164,  1564,   760,  -591,  1137,  2565,   846,  1105,  -591,  1676,
     945,  2569,   826,  2179,  1732,   819,  1094,  1095,  2607,  1097,
    1673,  2793,   835,  1159,  2615,   525, -1970, -1970,  1161,  1160,
    2940,  2206,  1165,  1395,  1396,  1161,  2209, -1971, -1971,  2346,
    2347,  2348,  2349,  2350,  2351,   826,   826,  2355,  2356,  2357,
    2358,  2359,  2360,  2361,  2362,  2363,  2364,  1002,  1003,  1004,
      82,   826,  2796,  1395,  1396,   946,   985,  1513,  1732,  1756,
     727,  1518, -1221,  2056,   728,  1138,  1732,  2254,  1729,  -591,
    2391,   947,  2392,  1732,  2057,  1507,  1674,  1161,  2008,  1732,
   -2000, -2000, -2000,   631,  1903,  1904,  1905,  1906,  1907,  1908,
     631,   948,   978,  1166,  2377,   951,  2191,  2191,  2191, -1974,
   -1974,  1998,  1999,  2000,   954,  2001,  2002,  2003,  2004,  2005,
    2006,  2549,  1139,  2551,  1317,   955,  -591,  2297,  2239,   956,
    1161,  2240,  1729,  1317,   957,  1544,   835,  1675,   979,  2291,
    1729,   529,  1974,   849,   958,  2451,  1548,  1729, -1975, -1975,
    1399,  1400,  3439,  1729,  1514,  2298,  2452,  1317,  2299,  2681,
     959,  3426,  2688,  3427,   981,  2300,   960,   110,  2299,   533,
     520,   994,   934,  1562,  2339,   819,  2327,   571,  3402,  2328,
    1399,  1400,  1162,   835,   965,  2939,  2345,  -523,  1791,  1162,
    2442,  2443,   659,  1793,  3414,   835,   672,  1794,   997,  1676,
    1795,  -523,   507,   529,  3452,   849,  -523,  2365,   819,   819,
    2366,  1922,  2820,  1924,  1925,  2411,  2373,  3186,  2412,  2776,
    1000,  2778,  2800,  2378,   819,   835,  2445,  2414,   532,  2813,
    2412,   533,   835,  1133,  1005,  1135,  2546,  2552,  2548,  1163,
    2553,  1162,  2988,  1164,  2558,  1006,  1189,  2559,  1862,  3450,
    1164,  2777,   708,   708,  3451,   708,  1007,  -523,  1276,  2410,
   -1976, -1976,   826,  2410,  2642, -1977, -1977,  1008,   835,  2416,
    1102,  2801,   835,   933,  2894,  1165,  2618,  -523,   835,  1972,
     934,  1098,  1190,  1113,  1162,  1119,  2812,  2802,  2821,   985,
    1276,  2625, -1979, -1979,  2626,  3259,   507,  3260,  1193,  1120,
    2475,  2693,  1164,  1122,  2412,  1123,   937,  2754,  1507,  1950,
    2755,  2907,  1952,  1126,  2240,   507,   507,  1956,  1127,  2933,
    1959,   507,  2934,   507,  -523,  1963,    88,  1134,   507,   507,
     507,   507,   638,  -523,  1194,  2941,  2989,  1666,  2942,  1974,
    1153,  2166,  1564,   507,   507,  1164,  1166,   640,  1172,   507,
    1156,  2513,   507,  1166, -1980, -1980,  1154,   507,   638,   507,
     507,   638, -1981, -1981,  1159,   507,   638,  1157,  1173,   638,
    1160,  1158,  3092,   640,   638,  2626,   640,  1165,  1170,  2632,
    2633,   640, -1982, -1982,   640,   507,   507,  1171,  2803,   640,
     507,  3123,   507,   632,  1974,   507,   632,  2804,   826,  2590,
    1196,   632,   524,  2499,   632,  1166,  1188,  3124,  1192,   632,
    2412,  1975,  1174,  1979,  1276, -1983, -1983,  1324,   507,  1325,
     507,  3152,  1976,  1330,  1974,   819,   507,   507,   507,   507,
     507,   507,   507,   507,  1276,  1977,    88,  1332,   507,   507,
     942,  1980,   644,   507,  2092,    21,  3159,   507,  1166,  1972,
     507,   507,   507,   507,   507,   507,   507,   507,   507,  3169,
    1346,   507,  3170,  3122,  1333,   525,  3202,   511,   507,  2240,
    1317,  1161,   996,  2191,  1348,  3230,  1350,  2876,  2626,  2195,
    3238,  1349,  -523,  1974,  2127,  3311,  1355,   524,  3312,   710,
    1362,   507,  1359,   511,  1363,  2820,   511,  1096,  1365,  3338,
    1366,   511,  3339,  3033,   511,  1175,  1384,  3383,  3424,   511,
    3312,  3312,   826,  1378,   507, -1984, -1984,  1383,  3237,   700,
    1386,  1159,  1110, -1985, -1985,   507,   507,  1160,  1414,  2867,
   -1986, -1986,   642,  -592, -1988, -1988, -1989, -1989,  -592, -1990,
   -1990, -1991, -1991, -1992, -1992,   828, -1993, -1993,   727,    82,
     525,  1122,   728,  1415,  1176, -1995, -1995,  2179,  1419,   826,
    1422,   819,  1177, -1997, -1997,  1423,   835,  1428,  3082,  1446,
    1276,   826,  1276,  1447,  1178, -1999, -1999,  1774,  1775,  1453,
    3401,  2146,  2147,   829,  3403,  1450,    25,    26,    27,   701,
    -642,  -642,  1480,  1327,  1493,  1397,  1398,  1399,  1400,  1495,
    2639,   826,  -646,  -646,  2722,  2723,  1179,  1496,   826,  -592,
     507,  1503,  -645,  -645,  1317,  3000,  1510,   507,   507,  3029,
    3030,   527,  2024,  3410,  3411,  1162,   631,  1509,  1161,   631,
    3436,  3437,   934,  1516,   631,  1639,  1641,   631,  1526,  1517,
    3444,  1522,   631,   529,   826,   849,  1528,  1539,   826,  1542,
    -814,    32,  1317,  1540,   826,  -821,  -592,  1547,  1181,    82,
      45,  -811,   507,  -667,  2499,   702,  -668,  -812,  1551,  3237,
    -815,   533,  -813,  1552,  1575,   819,  1556,  1565,  1327,  2273,
    1621,  1623,  2212,  1182,  1625,  -214,  1164,  1637,    37,  1276,
    1648,  1649,  2932,   542,    21,  1653,  1317,   507,   572,  1658,
    1659,  1137,  1184,  1139,  1696,   933,  2770,  1694,  1698,  1709,
     648,  3237,  1727,  1728,  1729,  1734,  1736,  2049,  2213,  1735,
    1740,    39,   819,  1747,   689,   689,   507,   507,   529,   507,
     530,  1748,    42,  2902,   819,   507,   507,   507,   507,   507,
     507,  1752,  1767,   507,   507,   507,   507,   507,   507,   507,
     507,   507,   507,  1762,  2401,  1776,   533,   835,   507,   507,
    2404,  3237,   507,  2918,   819,  1780,  1788,  1789,  1790,   507,
    1439,   819,  1799,  1802,    10,  3200,  1803,   524,  1805,  1455,
    1806,  2893,  1162,  1808,    45,   719,  3061,   828,   708,  1166,
    1809,   507,  1811,  1812,   507,  1817,   507,  1013,  1819,  1818,
     507,  1826, -1284,   638,  2936,  1828,  1836,   819,  1829,   638,
    1454,   819,   642,   933,   703,  1317,  1837,   819,   640,  1846,
    1840,  1841,  1842,  1843,   640,   829,   507,  1883,  1530,  1439,
    1854,  1880,  1882,  1948,  1885,    25,    26,    27,   632,  2219,
     525,  1888,  1911,  1164,   632,    21,  1919,  1920,  1951,  1927,
    1930,  2873,  1957,  1960,   692,  1961,  1970,   507,  3145,  1962,
     835,  1967,   507,   507,  1564,  1582,  2014,  1983,  2017,  2019,
    2020,  2021,  2022,  2041,  3292,  2220,  2642,  2048,  3070,  3071,
    2060,  2059,  2062,  2086,  1172,  2087,   507,   507,   524,  2093,
    2106,   507,   526,  1576,  2105,  2110,   701,  2123,  2126,  3253,
      32,  2135,  1578,  2138,  1173,   507,  2136,  2137,   507,  2139,
     507,   527,  2161, -1284,  1387,  1388,  2257,  1371,  2140,  2157,
    1628,  2162,  2165,  2168,  2172,    82,   507,  1276,  2237,  1634,
    2931,  1439,  1439,   507,  2173,  2174,   507,    37,   511,   835,
    2241,   702,   826,  3049,   511,   638,  1166,  2246,  1174,  2256,
    2258,   525,  2259,   507,  2260,  2280,  2274,  -523,  2275,  2277,
     640,  2281,   638,  2285,   835,  2286,   507,  2292,   528,  2288,
      39,  -523,  2289,  2295,  2978,  -214,  -523,   640,  2293,   828,
     632,    42,  2294,   507,   507,  2329,    25,    26,    27,  2337,
    2296,  1389,  1390,  2304,  2316,    43,  1916,   632,  2305,  1891,
     507,  2367,   507,   848,  1915,  2374,  2375,  2376,  2380,  2386,
    2398,   507,  2387,  1755,  2403,  2405,  2417,   829,   529,    44,
     530,   835,  2426,  2425,  2418,  2441,  2446,  -523,  2453,  1276,
    1276,  1276,  2428,    45,  2462,  2470,  2429,   531,  2481,  2427,
    2463,  1175,  2439,   532,  2468,  2486,   533,  -523,  2484,  2867,
    2469,    32,  2482,  2487,  2494,  1391,  1392,  1393,  1394,  1395,
    1396,  2492,   692,  1397,  1398,    21,  2495,   507,  -648,  2505,
    2506,   631,  2509,  1317,  2512,  2508,  2516,   631,  3047,   528,
     511,  2517,  2522,  2520,  3121,  2518,  2523,  2526,    37,  2545,
    1176,  2547,  2588,  2560,  -523,  2566,  2567,   511,  1177,  3274,
    2577,  2568,  1791,  -523,  2589,   819,  2578,  1793,    38,  2579,
    1178,  1794,  2592,  2594,  1795,  2605,  2604,  2608,  2609,  3069,
    2616,    39,  2612,   507,  2627,  2629,  2637,  2638,   835,   529,
    2646,   849,    42,   826,  2654,  2657,  2660,  2663,  2677,  2678,
    2664,  2665,  1179,  2666,  2689,  2690,    43,  2696,   531,  2700,
    2706,   828,  2716,  1581,   532,  2714,  1582,   533,  2735,  2717,
    1583,  1584,   835,  2729,  2720,   933,  2763,  2767,  1562,  2775,
      44,  1276,  2744,  2808,  2824,  2730,  1399,  1400,  2900,  2910,
    2914,  2761,  2737,  2741,    45,  2923,  2049,  2765,  2928,   829,
    2937,  1592,  2930,  2782,  1181,  2781,  2788,  2896, -2000,  2890,
    2891,  2892,  2464,  2905,  3189,  2909,    25,    26,    27,   507,
    2906,  2922,  2963,   631,  2240,  2938,  2969,  2943,   638,  1182,
     752,  2965,  2749,  1594,  2974,  2981,  2980,  3001,  3008,  3013,
     631,  3011,  3020,   640,  3022,  3026,   826,   692,  1184,  3376,
    3027,  3028,   835,  3040,   934,  3036,  3044,  3045,   507,  2732,
    3034,   845,  -523,  3035,  3046,  3054,  3057,  3059, -1237,  3274,
    3060, -1968,  3064,   507, -1969, -1970, -1971,   507,   507,   692,
    3077,    32, -1972, -1973,   507,  3087,    21,  1861, -1974, -1975,
   -1976,  1530, -1977,  3078,   507,  3089,  2444,   507, -1979,   507,
   -1980, -1981,  3076,  1401,  1402, -1982,   819,   507, -1983,  2024,
     507,   507, -1984, -1985, -1986,   507,   507,  3242,    37,  3244,
    2867,   828,   507, -1988,  3079,   826,  3094, -2000,   727,  3108,
    2769,  3112,   728,  3110, -1989,  3095, -1990,   507,  3116, -1991,
    3125, -1992, -1993,  3252, -2000, -1994, -1995,   507, -1996, -2000,
     826,    39,  3080,  3126,   828,   828, -1997, -1998, -1999,   829,
    3255,  3389,    42,   511,  1975, -1238,  1979,   507,  3119,  3133,
     828,  1012,  2753,  3254,  1891,  1976,  3257,   689,  1892,  1893,
    3137,  2873,  1894,  1895,  1896,  3129,   691, -2000,  1977,    88,
     835,  3131,   829,   829,  1980,  3140,  3139,  3143,  3144,  3146,
    3151,  3171,  2687,  3166,  3174,  3167,  1276,   826,   829,  2871,
    1276,  3177,  1276,  3179,    45,  3191,  2750,  3192,  3199,  3201,
    3207,  3209,  3208,   507,  3222,   507,  3340,    25,    26,    27,
    3223,  3336,  3224,  3239,  3240,  3243,  3246,   975,  3249,  3261,
    1603,  1581,   976,  3247,  1582,   506,   518,  3256,  1583,  1584,
     540,  3281, -2000, -2000, -2000,   540,  3053,  3287,  3324,   629,
    1791,   643,   643,  3285,  3288,  1793,   647,   540,   655,  1794,
    3291,   655,  1795,  2898,   673,   677,  2098,  3329,   677,  1592,
    3297,   540,   540,  3303,  3304,  3305,  1593,  3309,   819,  3314,
    3316,  3318,    32,  3004,  3321,  3322,  3326,  3333,   692,   977,
    2919,  3327,  3328,  2921,  3337,  3335,  3342,  3354,  3347,  3353,
     507,  1594,  3355,   819,   826,  3360,  3361,  3362,  3381,  3391,
    3370,  3372,  3394,  3392,   629,   629,  3374,  3375,  3396,    37,
     507,   507,  3415,  3412,  3429,   507,   673,  3393,   507,  3434,
   -2000,   677,   540,   677,   677,   677,  3440,   507,   826,  3445,
    1502,  3454,  3455,  3067,  1124,  2199,  2823,  1897,  2827,   507,
    2543,  1562,    39,  2102,   507,   507,   544,   692,   978,   507,
     819,   828,   943,    42,   507,  2585,  2643,   507,   507,  3120,
    1898,  3187,   507,  1317,  3351,  2895,   507,    43,  3422,  3390,
     507,   729,  3397,  1562,  3416,  3221,  1719,   507,  2550,   638,
    2525,  3388,  2792,  3364,   979,  1595,  3395,  2877,  2521,   829,
    3386,    44,    82,  1787,   640,  3231,  2913,  2757,    82,  1329,
     980,  2926,  1596,  1844,  1822,  2751,  2318,  1597,   826,  1856,
     981,  3307,  3268,  3368,   632,  1387,  1388,  2756,  3332,  3438,
    2742,   507,  2873,  1878,  2768, -2000,  2511,  2497,  1899,   507,
    2164,   835,  1610,  1611,  1612,  1613,  1614,  1615,  3373,  1500,
    2668,  2507,   982,  1691,  2132,  1600,  1650,  1012,   507,  3317,
    1891,  1501,  3245,  2163,  1892,  1893,   633,   819,  1894,  1895,
    1896,  2483,  2687,  1150,  2408,  3148,   964,   950,  1467,  2972,
    2662,  1690,  2661,  3193,  2692,  1695,  1835,  2326,  3320,  3319,
    1456,  2437,  1458,  1439,  2698,  1462,  2460,   828,   983,  2331,
    1463,  2871,  1389,  1390,  2500,   984,   831,  2421,  1603,    82,
    3012,  1939,  2458,  2708,  2438,  2101,  2415,   716,     0,     0,
       0,     0,     0,     0,   511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   829,    82,     0,     0,    82,
       0,     0,     0,   507,     0,   985,     0,     0,   975,     0,
       0,     0,     0,   976,     0,     0,   826,     0,     0,   692,
       0,     0,     0,     0,   986,     0,  1391,  1392,  1393,  1394,
    1395,  1396,     0,     0,  1397,  1398,     0,   933,     0,  1012,
     507,   819,  1891,     0,  3100,     0,  1892,  1893,     0,     0,
    1894,  1895,  1896,     0,     0,     0,   507,     0,     0,     0,
     689,  1439,  1562,     0,     0,     0,     0,  2711,  1605,     0,
     977,   828,     0,     0,     0,     0,  1317,     0,     0,     0,
       0,     0,     0,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   987,   507,   507,     0,     0,   507,     0,
     507,     0,     0,  2160,     0,     0,  1900,  1901,  1902,   829,
    1903,  1904,  1905,  1906,  1907,  1908,     0,   631,   828,     0,
       0,     0,     0,     0,     0,   507,  1898,     0,     0,     0,
     828,   691,     0,     0,     0,     0,     0,     0,     0,   978,
       0,     0,     0,     0,     0,     0,     0,  1399,  1400,   507,
       0,     0,     0,     0,     0,     0,   829,     0,     0,     0,
     828,     0,     0,     0,     0,     0,     0,   828,   829,     0,
       0,     0,     0,  1606,     0,   979, -2000, -2000, -2000,  2871,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,     0,     0,
       0,   980,     0,     0,  1899,     0,     0,     0,   829,     0,
       0,   981,     0,   828,     0,   829,     0,   828,   831,     0,
       0,   677,     0,   828,     0,   507,   677,     0,     0,   677,
       0,     0,   507,  3204,  3205,     0,     0,   540,     0,     0,
       0,   638,   507,   982,   507,    21,   507,     0,     0,     0,
     507,   829,   507,     0,   507,   829,   640,   761,  1898,     0,
       0,   829,     0,     0,   507,     0,   838,   540,   540,   507,
       0,   507,     0,     0,  1401,  1402,     0,   681,     0,   507,
       0,     0,     0,     0,     0,     0,     0,   826,     0,   983,
       0,     0,  1276,     0,  2554,     0,   984,   507,     0,     0,
      82,     0,     0,     0,  2272,     0,     0,   941,   518,   643,
       0,  3265,     0,  3267,   506,     0,   677,     0,     0,     0,
       0,     0,     0,     0,    21,   629,  1899,     0,     0,   968,
     968,     0,     0,     0,   968,   991,   985,     0,     0,  2582,
     718,     0,   721,  1562,   725,     0,   507,     0,   655,   655,
     655,     0,  3299,     0,     0,   986,   507,  2596,     0,     0,
       0,     0,   655,   655,     0,   655,     0,     0,  3302,   507,
       0,  1849,  3306,  1850,     0,     0,   511,     0,   677,     0,
       0,     0,     0,   507,   540,     0,    25,    26,    27,     0,
       0,     0,   638,     0,   677,     0,     0,   677,     0,     0,
       0,   507,     0,     0,     0,     0,     0,   640,     0,     0,
     831,     0,  1900,  1901,  1902,     0,  1903,  1904,  1905,  1906,
    1907,  1908,     0,  1439,   987,   507,     0,     0,     0,     0,
       0,  2644,     0,  2645,   638,     0,     0,  2650,     0,  2653,
       0,   507,     0,   677,   677,   677,   677,  1344,     0,   640,
    2871,    32,  1276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   832,    25,    26,    27,     0,     0,
   -1732,     0,     0,     0,     0,   507,     0,     0,     0,    82,
      82,     0,     0,     0,   638,     0,     0,     0,    37,     0,
     507,   507,   507,     0,     0,     0,     0,     0,  3398,   640,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   828,     0,     0,     0,     0,     0,   507,     0,     0,
       0,    39,     0,     0,     0,  3413,     0,   511,     0,     0,
      32,     0,    42,     0,  1900,  1901,  1902,     0,  1903,  1904,
    1905,  1906,  1907,  1908,     0,     0,    43,     0,     0,   829,
       0,     0,     0,     0,     0,     0,     0,    82,   507,    82,
       0,     0,     0,     0,     0,     0,     0,    37, -1732,   511,
      44,  1581,     0,     0,  1582,     0,     0,     0,  1583,  1584,
       0,     0,   831,     0,    45,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   975,     0,  1476,     0,    82,   976,
      39,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
       0,    42,     0, -1732,    82,     0, -2000,     0,    82,   511,
       0,     0,     0,     0,     0,    43,     0, -1732,     0,     0,
       0,     0, -1732,     0,     0,     0,     0, -1732,     0,     0,
       0,  1594,     0,     0,     0,     0, -1732,   968,   991,    44,
     677, -1732,     0,  1474,     0,     0,   977,  2868,     0,   968,
     968,     0,     0,    45,  2171,   540,     0,     0,     0,     0,
       0,   629,     0,     0,  2180,     0,  2183,     0,   629,  2194,
       0,     0,     0, -1732,     0,  2198,  2582,  2200,   540,  1387,
    1388,     0,     0,     0,     0,  1529,     0,     0,     0,  2207,
       0,     0,   828, -1732,  2210,  1541,   832,     0,  2215,  2216,
    2217,  2218,     0,  2222,  2223,     0,   541,     0,     0,     0,
       0,   541,     0,     0,     0,   978,     0,     0,     0,     0,
       0,     0,     0,   541,  3099, -2000,     0,     0,     0,     0,
     829,     0,   831,     0,    82,     0,     0,   541,   541,     0,
   -1732,     0, -2000, -1732,    21,   540,     0, -2000,     0, -1732,
     733,   979,     0,  2793,     0,   740,  1389,  1390,   741,  2794,
       0,    82,     0,     0,     0,   831,   831,   980,     0,     0,
    1687,     0,  2795,     0,     0,     0,     0,   981,  1628,  1476,
       0,   831,     0,     0,     0, -2000,  1172,     0,     0, -1732,
    1642,     0,     0,  1644,  2796,   828,  2797,     0,   541,     0,
       0,     0,     0,     0,     0,     0,  1173,   540,   540,   982,
       0,     0, -1732,     0,   677,     0,     0,     0,     0,     0,
    1391,  1392,  1393,  1394,  1395,  1396,     0,     0,  1397,  1398,
    1953,     0,  3010,   829,     0,     0,  1474,     0,  1603,     0,
       0,     0,     0,     0,     0,   953,   677,  1718,     0,     0,
    1174,     0,     0,     0,     0,   983,     0,     0,     0,   677,
       0,     0,   984,     0,     0,     0,     0,     0,     0,     0,
     679,     0,     0,     0,   828,     0,   677,   834,     0,     0,
     677,     0,     0,  2798,  1764,    25,    26,    27,   832,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1732,   828,
       0,     0,   985,  1012,     0,     0,  1891,     0, -1732,     0,
    1892,  1893,   829,     0,  1894,  1895,  1896,  2816,     0,     0,
       0,   986,     0,  1125,     0, -1732,     0, -1732, -1732,     0,
       0,  2712,     0,     0,     0,     0,     0,   829, -2000,     0,
       0,  1399,  1400,  1175,     0,     0,     0,     0,     0,  2799,
      32,     0,     0,     0,  2800,     0,   828,     0,     0,     0,
       0,     0,     0,     0, -1732,     0,     0, -1732, -1732, -1732,
       0,     0,  1335,  1337,  1340,  1342,     0,     0,     0,     0,
       0,     0,   831,     0,     0,     0,     0,    37,     0,     0,
     987,     0,  1176,     0,   829,  1954,     0,  3096,     0,     0,
    1177,     0,     0,  2801,     0,     0,     0,     0,     0,     0,
       0,     0,  1178,  1777,     0,   677,     0,     0,     0,  2802,
      39,   677,     0,     0,     0,  1439,     0,     0,     0,     0,
       0,    42,     0,     0,     0,  1814,     0,     0,     0,     0,
       0,     0,     0, -2000,  1179,    43,  1849,     0,     0,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,  1401,  1402,
     832,     0,     0,   828,     0,     0,  1832,     0,     0,    44,
       0,  1832,     0,     0,     0,     0,     0,     0,  1403,  1581,
       0,     0,  1582,    45,     0,     0,  1583,  1584,     0,     0,
    1587,  1588,  1589,     0,     0,     0,  1181,   828,     0,  3164,
    1865,   829,   838,  1476,  1476,   838,     0,   540,   540,  1476,
     540,   838,  1898,     0,     0,     0,     0,  1592,   831,   834,
    2803,  1182,     0,     0,  1593,     0,     0,     0,     0,  2804,
       0,     0,     0,     0,     0,   829,     0,     0,  1529,     0,
    1184,     0,     0,     0,     0,  1866,     0,     0,     0,  1594,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1474,  1474,     0,     0,  1867,     0,  1474,  2868,   506,     0,
       0,     0,     0,     0,     0,     0,     0,   828,     0,  1469,
    1899,   968,  1868,   540,  1934,     0,  1869,     0,     0,     0,
       0,   677,     0,     0,   629,     0,     0,   629,     0,     0,
       0,     0,   629,     0,     0,   629,     0,     0,  1870,     0,
     629,  1871,   540,  2611,   540,   829,     0,     0,     0,     0,
     832,     0,     0,     0,     0,     0,     0,  1872,     0,     0,
       0,     0,   831,   541,     0,     0,     0,     0,     0,  2007,
       0,     0,     0,  1595,  2013,     0,     0,     0,     0,     0,
       0,     0,     0,   832,   832,     0,     0,     0,     0,     0,
    1596,     0,     0,   541,   541,  1597,     0,     0,     0,   832,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   831,
       0,     0,   838,     0,     0,     0,     0,     0,  1598,  1599,
       0,   831,  3293,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2134,  1600,     0,     0,     0,     0,     0,     0,
       0,   834,     0,     0,     0,   828,     0,     0,  1873,     0,
       0,   831,     0,     0,     0,     0,  1874,     0,   831,     0,
       0,  2099,     0,   677,     0,   677,     0,     0,     0,  1601,
       0,     0,  1602,     0,     0,     0,   677,  2115,  1875,     0,
       0,     0,     0,   829,     0,     0,  1603,     0,     0,  1474,
       0,     0,     0,     0,   831,     0,     0,     0,   831,     0,
       0,     0,     0,     0,   831,  1876,     0,     0,     0,     0,
     541,     0,     0,     0,   677,  1710,   540,     0,  1900,  1901,
    1902,     0,  1903,  1904,  1905,  1906,  1907,  1908,  1737,     0,
    1718,   540,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   540,  2181,   540,  2185,     0,   540,     0,     0,  1761,
       0,     0,   540,     0,   540,     0,  1012,     0,  2868,  1891,
       0,     0,     0,  1892,  1893,   838,   540,  1894,  1895,  1896,
     838,   540,     0,     0,     0,   540,   540,   540,   540,     0,
     540,   540,     0,     0,  2991,     0,  1605,     0,  2772,  2773,
       0,     0,     0,     0,     0,  3164,     0,     0,     0,     0,
     832,     0,   677,   677,   677,   677,  1344,   677,     0,     0,
       0,     0,     0,   834,     0,     0,  2825,     0,     0,     0,
       0,  2262,     0,     0,     0,     0,     0,     0,     0,     0,
    2282,  2878,  2879,  2880,  2881,  2882,  2883,  2884,  2885,  2886,
    2887,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1476,  1476,  1476,  1476,  1476,  1476,     0,
       0,  1476,  1476,  1476,  1476,  1476,  1476,  1476,  1476,  1476,
    1476,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1782,     0,     0,     0,     0,     0,
    1798,  1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,
    1612,  1613,  1614,  1615,     0,     0,   828,     0,     0,     0,
    1474,  1474,  1474,  1474,  1474,  1474,     0,     0,  1474,  1474,
    1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,     0,     0,
       0,     0,     0,     0,     0,     0,   832,     0,     0,     0,
       0,     0,     0,  1581,   829,     0,  1582,   545,   540,     0,
    1583,  1584,     0,     0,     0,     0,     0,     0,     0,     0,
     677,     0,     0,     0,     0,  1898,     0,     0,     0,   629,
    1477,     0,     0,   834,     0,   629,     0,     0,     0,     0,
     540,  1592,     0,     0,     0,   540,     0,     0, -2000,     0,
       0,  1494,   831,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   546,     0,  1476,  1476,   834,   834,     0,     0,
       0,     0,     0,  1594,  1525,     0,     0,     0,   547,     0,
       0,     0,   834,     0,     0,     0,     0,     0,     0,     0,
     540,     0,     0,  1899,  2434,     0,     0,     0,     0,   540,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     832,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1946,  1474,  1474,     0,     0,   548,  3048,     0,     0,     0,
       0,     0,     0,     0,     0,   549,  2454,     0,  2007,     0,
       0,  1567,     0,     0,     0,     0,     0,   550,     0,     0,
       0,     0,   551,     0,     0,     0,     0,   832,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2000,     0,   832,
       0,   629,     0,     0,     0,     0,     0,     0,  1476,     0,
       0,   552,     0,   540, -2000,     0,     0,     0,   629, -2000,
       0,     0,  2115,     0,     0,     0,     0,     0,     0,   832,
       0,     0,     0,   541,   541,     0,   832,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1477,   553,     0,     0, -2000,   554,     0,
       0,     0,   540,     0,     0,  1474,     0,     0,   540,     0,
       0,     0,   832,   831,     0,     0,   832,     0,     0,     0,
       0,     0,   832,     0,  1777,     0,     0,     0,     0,     0,
       0,     0,  2100,     0,  2103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2112,     0,     0,     0,     0,
    1603,     0,     0,   834,  1581,     0,     0,  1582,     0,     0,
       0,  1583,  1584,     0,     0,     0,   555,     0,     0,     0,
       0,  1900,  1901,  1902,     0,  1903,  1904,  1905,  1906,  1907,
    1908,   556,     0,  2149,     0,     0,     0,     0,  1777,     0,
       0,     0,  1592,     0,   677,     0,     0,     0,     0, -2000,
       0,     0,     0,     0,     0,     0,  1777,   677,   677,   677,
       0,     0,     0,     0,   557,     0,   831,   558,     0,     0,
     540,     0,   677,     0,  1594,   677,     0,     0,   560,  1344,
    2624,   561,     0,     0,   677,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2635,     0,   562,
   -2000,     0,     0,     0,   975,     0,     0,     0,  3190,   976,
       0,     0,     0,   563,   838,     0,     0,     0,     0,     0,
     564,  2247,  2248,  2250,  2251,     0,  2253,     0,  3197,  3198,
     565,     0,  1777,  1777,     0,  1777,   566,  2721,     0,   834,
       0,     0,     0,     0,     0,   831,     0,     0,     0,     0,
    3210,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   567,   506,     0,   977,     0, -2000,     0,
     831,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2667, -2000,     0,     0,     0,     0,
   -2000,     0,   677,   677,   677,     0,     0,     0,  1476,  1476,
       0,   540,     0,  1474,   540, -2000,     0,     0,     0,     0,
     540,     0,  1610,  1611,  1612,  1613,  1614,  1615,     0,     0,
       0,     0,     0,   541,   541,  2007,   541,   831, -2000,     0,
       0,     0,     0,     0,     0,   978,     0,     0,     0,     0,
       0,     0,     0,  1147,     0,     0,     0,     0,     0,     0,
       0,  1012,     0,   834,  1891,  1474,  1474,     0,  1892,  1893,
     832,     0,  1894,  1895,  1896,     0,     0,  1477,  1477,     0,
       0,   979,     0,  1477,     0,     0,     0,     0,     0,  2393,
       0,  1603,     0,     0,  2746,     0,     0,   980,     0,     0,
    2115,     0,     0,     0,     0,     0,     0,   981,     0,   541,
     834,     0,     0,     0,     0,     0,   677,     0,     0,     0,
     540,     0,   834,     0,   540,   540,   540,     0,     0,     0,
    1777,  1718,  1777,     0,  1814,     0,     0,     0,  1964,   982,
    1968,     0,     0,     0,   831,     0,     0,     0,     0,     0,
       0,     0,   834,   540,     0,  2826,     0,     0,     0,   834,
    1148,     0,     0,     0,     0,     0,     0,     0,   540,   540,
     540,   540,   540,   540,   540,   540,   540,   540,   831,     0,
       0,     0,     0,     0,     0,   983,     0,     0,     0,     0,
       0, -2000,   984,     0,  3382,   834,  2262,     0,     0,   834,
    2282,     0,     0,   677,     0,   834,     0,     0,  1476,     0,
       0,     0,     0,  1718,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2091,     0,
       0,     0,   985,  2966,  2282,  1814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   986,     0,     0,  1777,     0,     0,  2984,   831,     0,
       0,   832,     0,     0,     0,  1474,     0,     0,     0,     0,
    1898,   540,     0,     0,     0,     0,  1477,     0,   677,   677,
     677,   677,     0,     0,     0,     0,     0,     0,     0,     0,
    1474,     0,     0,  1474,     0,     0, -2000,   540,   838,     0,
       0,     0,     0,  1610,  1611,  1612,  1613,  1614,  1615,     0,
       0,     0,   541,  2982,     0,     0,     0,     0,     0,     0,
     987,     0,     0,     0,     0,  1149,     0,   541,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   541,  1899,   541,
       0,     0,   541,  3005,     0,   629,     0,  1476,   541,     0,
     541,     0,     0,     0,     0,     0,     0,     0,     0,  3017,
       0,     0,   541,  2115,   832,     0,     0,   541,     0,  2007,
       0,   541,   541,   541,   541,     0,   541,   541,     0,     0,
       0,     0,     0,  1718,     0,     0,     0,     0,     0,  1777,
       0,     0,     0,  2586,     0,     0,   831,     0,     0,     0,
       0,     0,   838,   540,  1474,     0,  2600,  2601,  2603,     0,
     677,     0,     0,  1072,  1072,     0,     0,     0,     0,     0,
       0,  2614,     0,     0,  2617,     0,     0,  3068,     0,     0,
       0,     0,     0,  2628,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   832,     0,  1012,     0,     0,  1891,     0,
       0,     0,  1892,  1893,     0,     0,  1894,  1895,  1896,     0,
   -1734,     0,     0,     0,     0,     0,     0,     0,   832,     0,
       0,     0,     0,  2992,     0,     0,     0,     0,  1198,     0,
       0,     0,  1319,     0,     0,     0,     0,     0,  1476,     0,
       0,     0,     0,   834,     0,     0,     0,  1477,  1477,  1477,
    1477,  1477,  1477,     0,  1777,  1477,  1477,  1477,  1477,  1477,
    1477,  1477,  1477,  1477,  1477,     0,     0,  2262,     0,     0,
       0,     0,     0,     0,     0,   832,     0,     0,     0,     0,
    2282,     0,     0,     0,     0,     0,  3117,     0,     0,     0,
       0,  2674,  2675,  2676,   541,  1474,  1900,  1901,  1902,     0,
    1903,  1904,  1905,  1906,  1907,  1908,     0,     0, -1734,     0,
       0,     0,     0, -1749,     0,     0,     0,     0,     0,     0,
       0,  3134,     0,     0,     0,     0,  2407,   540,     0,     0,
       0,  1968,     0,     0,     0,   540,     0,     0,  1012,     0,
       0,  1891,     0,     0,     0,  1892,  1893,  1426,     0,  1894,
    1895,  1896,     0, -1734,     0,     0,     0,     0,     0,     0,
       0,     0,  3161,     0,     0,     0,     0, -1734,     0,     0,
       0,     0, -1734,     0,     0,     0,   541, -1734,     0,     0,
       0,     0,   832,     0,   540,  1567, -1734,     0,     0,   540,
       0, -1734,     0,     0,     0,     0,     0,     0,  1477,  1477,
       0,     0,     0,     0,  1898,  2764,     0,   831,     0,     0,
       0, -1749,     0,     0,     0,   540,   832,     0,     0,     0,
       0,     0,     0, -1734,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   834,   540,   540,     0,     0,     0,
    3251,     0,     0, -1734,     0,     0,  1451,     0,     0,     0,
       0,   677,  1468,  1718,     0,  1470, -1749,   540,  1481,  1484,
    1489,  1492,     0,     0,     0,     0,     0,     0,     0,   541,
   -1749,     0,  1899,     0,   677, -1749,     0,  3234,     0,     0,
   -1749,     0,     0,     0,     0,     0,     0,     0,     0, -1749,
   -1734,     0,  2904, -1734, -1749,     0,   832,  1474,     0, -1734,
    1319,   540,   968,     0,     0,   968,     0,     0,     0,     0,
       0,     0,  1477,     0,     0,     0,     0,     0,   541,     0,
    1545,     0,     0,     0,  2515,     0, -1749,     0,  3017,     0,
       0,     0,     0,     0,     0,   677,     0,   834,  1550, -1734,
       0,     0,     0,     0,     0,     0, -1749, -2000,     0,  1553,
    1554,  1555,     0,  1559,  1563,     0,     0,     0,     0,     0,
       0,     0, -1734,     0,     0,   677,     0,  2945,  2946,  2947,
    2948,     0,     0,     0,     0,     0,     0,     0,     0,  1581,
    1172,     0,  1582,     0,  1624,     0,  1583,  1584,     0,     0,
    1587,  1588,  1589, -1749,     0,     0, -1749,     0,     0,     0,
    1173,     0, -1749,     0,     0,  3134,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1899,   834,  1592,     0,     0,
     679,     0,     0,     0,  1593,     0,     0,     0,  3234,     0,
       0,     0,     0,     0,   832,  1665,   541,     0,     0,  1681,
    1686,   834, -1749,     0,  1174,  2814,     0,     0, -1734,  1594,
    1072,  1072,     0,  2815,     0,  1718,     0,     0, -1734,     0,
       0,     0,     0,     0,     0, -1749,     0,   838,   838,     0,
    3234,   838,     0,     0,     0, -1734,     0, -1734, -1734,  1934,
    1900,  1901,  1902,     0,  1903,  1904,  1905,  1906,  1907,  1908,
       0,   540,     0,     0,     0,     0,     0,     0,   834,  3055,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2816,     0,  1718, -1734,     0,     0, -1734, -1734, -1734,
    3234,     0,     0,   679,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1175,  1444,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
       0, -1749,     0,     0,     0,     0,     0,     0,   838,     0,
    1596, -1749,     0,     0,     0,  1597,     0,   541,     0,     0,
     541,     0,     0,  2115,     0,     0,  1964,     0, -1749,     0,
   -1749, -1749,  1319,     0,     0,     0,  1176,     0, -2000, -2000,
       0,  1319,     0,     0,  1177,     0,     0,  1444,     0,     0,
       0,     0,     0,  1600,     0,   834,  1178,     0,  2817,     0,
       0,     0,  1477,  1477,     0,  1319,     0, -1749,     0,     0,
   -1749, -1749, -1749,  1900,  1901,  1902,     0,  1903,  1904,  1905,
    1906,  1907,  1908,     0,     0,     0,     0,     0,  1179,   834,
       0,     0, -2000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1603,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1579,     0,     0,     0,     0,     0,   541,     0,     0,     0,
     541,   541,   541,     0,     0,     0,     0,     0,     0,     0,
    1181,     0,     0,     0,     0,   832,     0,  1444,     0,  1444,
    1444,     0,     0,     0,     0,     0,     0,     0,     0,   541,
       0,     0,     0,     0,     0,  1182,     0,     0,     0,   834,
       0,     0,     0,     0,   541,   541,   541,   541,   541,   541,
     541,   541,   541,   541,  1184,     0,  2818,     0,     0,  2819,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1881,     0,  1605,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1444,     0,     0,  1444,  1444,     0,     0,     0,
       0,     0,     0,     0,     0,  1159,  1489,     0,  1489,  1489,
    3206,  1160,     0,     0,     0,     0,     0,     0,     0,  1172,
       0,  1072,  1072,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1477,  3232,     0,     0,     0,  1072,     0,  1173,
       0,     0,     0,     0,     0,     0,     0,  1964,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1477,     0,     0,
       0,     0,     0,     0,     0,     0,  1729,     0,  1986,     0,
    1987,     0,     0,  2407,     0,     0,     0,   834,     0,     0,
       0,  1606,     0,  1174,  1607,  1608,  1609,     0,  1610,  1611,
    1612,  1613,  1614,  1615,  3272,     0,     0,     0,  2026,     0,
       0,     0,     0,     0,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  1161,     0,     0,     0,  2046,  2047,     0,     0,
       0,  2058,     0,   -44,  3298,  2061,     0,     0,  2069,  2070,
    2071,  2072,  2073,  2074,  2075,  2076,  2077,     0,     0,  2078,
       0,     0,     0,     0,     0,     1,  1072,     0,  1319,     0,
       0,     0,     0,     0,     0,     2,     0,     3,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2104,
       5,  1477,     0,     0,     0,     6,  1175,     0,     0,   541,
       0,     0,  1821,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     0,  1830,     0,  1831,     8,     0,     0,     0,
       0,     0,     0,  1554,  1555,  1838,     0,     9,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
       0,    11,  1839,     0,     0,  1176,     0,     0,     0,     0,
       0,  1581,    12,  1177,  1582,     0,     0,     0,  1583,  1584,
       0,     0,     0,     0,     0,  1178,    13,    14,     0,     0,
       0,     0,     0,     0,  1858,  1860,    15,     0,     0,     0,
       0,     0,    16,     0,     0,     0,  1162,     0,     0,  1592,
      17,     0,    18,    19,     0,     0, -2000,  1179,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,  2225,     0,
      21,     0,  1319,     0,     0,  2235,  2236,     0,     0,     0,
       0,  1594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1477,     0,     0,     0,    22,     0,     0,     0,
       0,     0,     0,  1180,     0,     0,     0,  1164,     0,  1181,
    1319,     0,    23,     0,     0,     0,     0,     0,   834,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3142,  1182,     0,     0,     0,    24,  1183,
       0,  2407,     0,     0,  2724,     0,     0,     0,     0,     0,
       0,     0,     0,  1184,  1426,  2319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2000,     0,     0,     0,     0,
       0,     0,     0,     0,  2341,  2342,     0,  2343,     0,     0,
     541,     0, -2000,     0,     0,   541,     0, -2000,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1166,    25,    26,    27,     0,     0,  2369,  2370,     0,    28,
    2104,   541,    29,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2000,     0,     0,     0,  1478,
       0,   541,   541,     0,     0,     0,     0,     0,     0,  2397,
       0,    30,     0,     0,  2402,     0,     0,     0,  1159,     0,
      31,     0,     0,   541,  1160,     0,     0,     0,     0,     0,
       0,     0,  1172,  1319,     0,     0,    32,     0,     0,     0,
       0,  2144,  2144,    33,  2419,     0,     0,    34,  1603,     0,
       0,     0,  1173,     0,  1477,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   541,     0,    36,
       0,     0,     0,    37,     0,  2432,     0,     0,     0,     0,
    2435,  2436,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,  1174,     0,     0,     0,
    1444,     0,     0,     0,     0,     0,    39,     0,     0,    40,
    1444,     0,    41,  1444,     0,     0,  1618,    42,     0,     0,
       0,     0,     0,  2456,     0,  1161,  2459,     0,  2461,  1581,
       0,    43,  1582,     0,     0,     0,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,     0,  2465,     0,     0,     0, -2000,     0,
       0,     0,     0,     0,     0,    44,     0,  1590,     0,  1618,
       0,     0,     0,     0,     0,     0,     0,  1592,     0,    45,
    1581,     0,   -44,  1582,  1593,     0,     0,  1583,  1584,  1585,
    1586,  1587,  1588,  1589,  1665,     0,     0,     0,     0,  1175,
       0,     0,  1478,     0,     0,  2301,  2303,     0,  1590,  1594,
       0,  1686,  2076,     0,     0,     0,     0,     0,  1592,     0,
    1581,     0,     0,  1582,     0,  1593,     0,  1583,  1584,     0,
    1072,  1444,     0,     0,     0,     0,     0,     0,     0,  2519,
       0,     0,     0,     0,     0,     0,     0,     0,  1176,     0,
    1594,     0,  1618,     0,     0,     0,  1177,     0,  1592,     0,
       0,     0,     0, -2000,     0, -2000,     0,   541,  1178,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,  1581,     0,     0,
    1582,     0,     0,     0,  1583,  1584,     0,     0,     0,  1162,
    1594,     0,     0,     0,     0,  1555,     0,     0,     0,     0,
    1179,  1319,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,     0,     0,
    1596,     0, -2000,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1444,
       0,     0,     0,     0,  1595,     0,  2201,  1594,  1598,  1599,
    1164,  2620,  1181,  2725,     0,     0,     0,     0,     0,     0,
       0,  1596,     0,  1600,     0,     0,  1597,     0,     0,     0,
       0,     0,     0,  1618,     0,     0,     0,  1182,     0,     0,
       0,     0,  2202,     0, -2000,     0,     0,     0,     0,  1598,
    1599,     0,     0,     0,     0,     0,  1184,     0,     0,  1601,
       0, -2000,  1602,     0,  1600,     0, -2000,     0,     0,     0,
    2995,     0,     0,     0,     0,     0,  1603,     0,     0,  1604,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1601, -2000,     0,  1602, -2000,     0,     0,     0,     0,     0,
       0,     0,     0,  1166,     0,     0,     0,  1603, -2000,     0,
    1604,     0,     0, -2000,     0,     0,  2477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1618,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2695,     0,     0,     0,  2697,  1987,  1603,     0,  2503,
    2503, -2000,  2701,     0,     0,  1618,     0,     0,     0,     0,
       0,     0,  2710,     0,     0,  2713,  1605,  2715,     0,     0,
       0,     0,  1618,     0,  1618,  2719,  1478,  1478,     0,  1909,
       0,     0,  1478,  2726,  2727,  1618,     0,     0,  1618,     0,
    2734,     0,     0,  1618,     0,     0,  1618,     0,     0,     0,
       0,     0,     0,     0,  1603,  2743,     0,  1605,     0,     0,
       0,     0,     0,     0,     0,  2758,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1072,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2000,     0,  1618,
       0,     0,     0,     0,  1618,     0,     0,  1618,  1618,  1618,
       0,     0,     0,  1618,     0,     0,     0,  1618,     0,     0,
       0,  1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,
    1612,  1613,  1614,  1615,     0,     0,     0,     0,     0,     0,
       0,  2225,     0,  2225,     0,     0,     0,  2424,     0,     0,
       0,     0,     0,     0, -2000,     0,     0,     0,     0,     0,
       0,  2631,  1606,     0,     0,  1607,  1608,  1609,     0,  1610,
    1611,  1612,  1613,  1614,  1615,     0,     0,     0,  1618,     0,
       0,     0,  1884,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2000,     0,     0,     0,     0,     0,     0,  1610,
    1611,  1612,  1613,  1614,  1615,     0,     0,     0,     0,  1618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1618,     0,     0,     0,     0,
    1618,     0,     0,     0,     0,     0,     0,     0,  2961,  2962,
       0,     0,     0,     0,     0,     0,     0,  1909,     0, -2000,
       0,     0,     0,     0,     0,  2979,  1610,  1611,  1612,  1613,
    1614,  1615,     0,     0,     0,     0,     0,  2983,     0,     0,
       0,     0,  2985,  2986,     0,     0,     0,  2987,     0,     0,
       0,     0,  2990,     0,     0,  2993,  2994,     0,     0,     0,
    2225,  1319,     0,     0,  3002,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1072,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3043,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3062,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,  1581,     0,     0,  1582,
       0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,  1444,     0,     0,  1591,   545,
       0,     0,     0,     0,  1592,  1618,     0,     0,     0,     0,
       0,  1593,     0,  1909,  1909,     0,  1478,  1478,  1478,  1478,
    1478,  1478,     0,     0,  1478,  1478,  1478,  1478,  1478,  1478,
    1478,  1478,  1478,  1478,  1909,     0,  1594,     0,     0,     0,
       0,  3091,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   546,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1563,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1618,  1618,     0,     0,  1319,     0,     0,   548,     0,     0,
       0,  2432,     0,     0,     0,     0,     0,   549,     0,     0,
    1595,     0,  3153,  3154,     0,     0,  3155,     0,  1555,   550,
       0,     0,     0,     0,   551,     0,     0,  1596,     0,     0,
    1618,     0,  1597,     0,  1618,  1618,  1618,  1618,  1618,  1618,
    1618,  1618,     0,  3173,     0,     0,     0,  1478,  1478,     0,
    1618,  1618,     0,   552,     0,  1598,  1599,     0,     0,     0,
       0,     0,  1618,     0,     0,  1618,     0,  3185,     0,     0,
    1600,     0,     0,  1618,  1618,  1618,  1618,  1618,  1618,  1618,
    1618,  1618,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
     554,     0,     0,     0,     0,     0,  1601,     0,  1618,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,  1604,     0,     0,     0,
       0,     0,  1444,  3229,     0,     0,     0,  1444,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2961,     0,     0,     0,  3248,     0,
       0,  1478,  1072,     0,     0,     0,     0,     0,   555,     0,
       0,     0,  3258,     0,     0,     0,     0,  2225,     0,  2225,
       0,     0,     0,   556,  1858,  1860,     0,  1072,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3283,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,   558,
       0,     0,     0,  1605,     0,     0,   559,     0,     0,  1618,
     560,     0,     0,   561,     0,     0,     0,     0,     0,  1618,
    1618,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   562,     0,     0,  3308,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2961,   563,     0,     0,     0,     0,
       0,     0,   564,     0,     0,     0,     0,  1072,     0,     0,
       0,     0,   565,     0,     0,     0,     0,     0,   566,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3352,
       0,     0,     0,     0,     0,   567,     0,     0,     0,     0,
       0,     0,     0,  1618,     0,     0,     0,     0,  1606,     0,
       0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,
    1615,     0,     0,     0,     0,  1618,  1618,  1618,     0,     0,
    1909,  1909,  1909,  1909,  1909,  1909,     0,     0,     0,  1909,
    1909,  1909,  1909,  1909,  1909,  1909,  1909,  1909,  1909,     0,
       0,     0,     0,  1618,  1618,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1858,  1860,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1444,     0,     0,  3407,  3407,
    3407,  1618,     0,     0,     0,  1581,  1618,     0,  1582,     0,
       0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,
       0,     0,     0,  1618,     0,  3407,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,     0,  1618,  2705,     0,  1618,
    1618,     0,     0,  1592,     0,     0,  1909,  1909,     0,     0,
    1593,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1618,  1478,  1478,  1618,     0,  1618,  3407,     0,     0,  1618,
       0,     0,     0,     0,     0,  1594,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,     0,     0,  1582,
       0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,  1618,  1592,     0,  1581,     0,     0,  1582,
       0,  1593,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,     0,  1594,     0,     0,     0,
       0,     0,     0,     0,  1592,     0,     0,     0,     0,  1595,
       0,  1593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,  1597,  1581,     0,     0,  1582,  1594,     0,     0,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,  1599,     0,     0,     0,     0,
    1590,     0,     0,     0,  1618,     0,     0,     0,     0,  1600,
    1592,     0,     0,     0,     0,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,  1444,     0,     0,     0,
       0,  1478,  1594,     0,     0,  1601,     0,  1596,  1602,     0,
       0,     0,  1597,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1603,     0,     0,  1604,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,  1598,  1599,     0,     0,  1618,
       0,  1618,     0,     0,     0,  1618,     0,  1596,     0,     0,
    1600,     0,  1597,     0,  1618,     0,     0,  1618,     0,  1618,
       0,     0,     0,  1618,     0,     0,  1909,  1909,     0,     0,
    1618,  1618,     0,     0,     0,  1598,  1599,     0,  1618,     0,
       0,     0,     0,     0,     0,     0,  1601,  1618,     0,  1602,
    1600,     0,     0,     0,     0,     0,  1595,     0,     0,     0,
       0,     0,  1618,  1603,     0,     0,  1604,     0,     0,     0,
       0,     0,     0,  1596,     0,     0,     0,     0,  1597,     0,
       0,     0,  1605,     0,     0,     0,  1601,     0,     0,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1478,  1598,  1599,  1603,     0,     0,  1604,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1600,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,  1605,     0,     0,     0,     0,     0,  1603,
       0,     0,  1604,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1606,     0,     0,
    1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,
       0,     0,     0,  1605,  2018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1909,  1478,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1618,  1618,     0,  1606,  1605,
       0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,
    1615,     0,     0,  1618,     0,  2018,     0,  1618,     0,  1618,
    1618,  1618,     0,     0,  1618,     0,     0,  1618,  1618,     0,
       0,     0,     0,     0,     0,     0,  1618,     0,  1606,     0,
       0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,
    1615,     0,     0,     0,     0,  2340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1618,     0,     0,
       0,     0,     0,  1909,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1618,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,  1607,  1608,  1609,
       0,  1610,  1611,  1612,  1613,  1614,  1615,     0,     0,     0,
       0,  2423,     0,     0,     0,  1618,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1909,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1618,  1618,  1618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1618,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
    1009,   642,  1010,  1011,  1012,  1013,  1014,  1618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,  1618,     0,     0,  1015,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1016,   135,  1017,  1018,     0,   138,   139,   140,   141,   142,
     143,  1019,   612,   144,   145,  1020,  1021,   148,     0,   149,
     150,   151,   152,   613,     0,   614,  1618,  1022,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1023,  1024,   184,  1025,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,  1618,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1026,   213,   214,   215,   216,   217,
     615,  1027,   219,     0,   220,   221,  1028,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  1029,  1030,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1031,  1032,     0,
    1033,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1034,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1035,   311,  1036,
     313,   314,   315,   316,  1037,   317,   318,   319,   320,  1038,
     617,   322,  1039,   324,   325,   326,     0,   327,   328,     0,
       0,  1040,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   619,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     620,   353,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,  1041,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,  1042,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,  1043,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   622,   437,     0,   438,   439,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,  1044,  1045,     0,     0,
     450,   451,   623,   453,   624,  1046,   455,   456,   625,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,  1047,     0,   477,   478,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,  1048,     0,     0,     0,
       0,     0,     0,  1049,  1050,  1051,     0,     0,     0,     0,
    1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,
    1057,     0,  2570,   111,  1009,   642,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,  1015,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,  1016,   135,  1017,  1018,     0,   138,
     139,   140,   141,   142,   143,  1019,   612,   144,   145,  1020,
    1021,   148,     0,   149,   150,   151,   152,   613,     0,   614,
       0,  1022,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1023,  1024,   184,  1025,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1026,   213,
     214,   215,   216,   217,   615,  1027,   219,     0,   220,   221,
    1028,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,  1029,  1030,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1031,  1032,     0,  1033,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1034,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1035,   311,  1036,   313,   314,   315,   316,  1037,   317,
     318,   319,   320,  1038,   617,   322,  1039,   324,   325,   326,
       0,   327,   328,     0,     0,  1040,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   619,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   620,   353,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,  1041,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,  1042,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,  1043,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   622,   437,     0,   438,   439,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
    1044,  1045,     0,     0,   450,   451,   623,   453,   624,  1046,
     455,   456,   625,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,  1047,     0,   477,   478,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
    1048,     0,     0,     0,     0,     0,     0,  1049,  1050,  1051,
       0,     0,     0,     0,  1052,     0,  1053,     0,     0,     0,
       0,  1054,  1055,  1056,  1057,     0,  3156,   111,  1009,   642,
    1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,  1015,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,  1016,   135,
    1017,  1018,     0,   138,   139,   140,   141,   142,   143,  1019,
     612,   144,   145,  1020,  1021,   148,     0,   149,   150,   151,
     152,   613,     0,   614,     0,  1022,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1023,  1024,   184,  1025,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1026,   213,   214,   215,   216,   217,   615,  1027,
     219,     0,   220,   221,  1028,   223,     0,   224,     0,   225,
     226,    21,   227,   228,   229,   230,   231,   232,     0,   233,
       0,  1029,  1030,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1031,  1032,     0,  1033,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1034,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1035,   311,  1036,   313,   314,
     315,   316,  1037,   317,   318,   319,   320,  1038,   617,   322,
    1039,   324,   325,   326,     0,   327,   328,     0,     0,  1040,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     619,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    25,    26,    27,     0,   350,   351,   620,   353,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,  1041,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,  1042,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    32,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,  1043,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   622,
     437,     0,   438,   439,    37,   440,   441,   442,   443,   444,
     445,   446,     0,   447,  1044,  1045,     0,     0,   450,   451,
     623,   453,   624,  1046,   455,   456,   625,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,    39,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   626,  1047,
       0,   477,   478,   479,   480,   481,   482,   483,     0,     0,
     484,     0,    43,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,  1048,     0,    44,     0,     0,     0,
       0,  1049,  1050,  1051,     0,     0,     0,     0,  1052,     0,
    1053,  3132,     0,     0,     0,  1054,  1055,  1056,  1057,   111,
    1009,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,  1015,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1016,   135,  1017,  1018,     0,   138,   139,   140,   141,   142,
     143,  1019,   612,   144,   145,  1020,  1021,   148,     0,   149,
     150,   151,   152,   613,     0,   614,     0,  1022,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1023,  1024,   184,  1025,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1026,   213,   214,   215,   216,   217,
     615,  1027,   219,     0,   220,   221,  1028,   223,     0,   224,
       0,   225,   226,    21,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  1029,  1030,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1031,  1032,     0,
    1033,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1034,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1035,   311,  1036,
     313,   314,   315,   316,  1037,   317,   318,   319,   320,  1038,
     617,   322,  1039,   324,   325,   326,     0,   327,   328,     0,
       0,  1040,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   619,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    25,    26,    27,     0,   350,   351,
     620,   353,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,  1041,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,  1042,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    32,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,  1043,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   622,   437,     0,   438,   439,    37,   440,   441,   442,
     443,   444,   445,   446,     0,   447,  1044,  1045,     0,     0,
     450,   451,   623,   453,   624,  1046,   455,   456,   625,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,    39,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     626,  1047,     0,   477,   478,   479,   480,   481,   482,   483,
       0,     0,   484,     0,    43,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,  1048,     0,    44,     0,
       0,     0,     0,  1049,  1050,  1051,     0,     0,     0,     0,
    1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,
    1057,  1280,  1009,   642,  1010,  1011,  1012,  1013,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,  1281,   120,
     121,   122,     0,     0,     0,  1282,     0,  1015,     0,     0,
    1283,   124,   125,     0,   126,   127,   128,  1284,   130,   131,
     132,   133,  1016,  1285,  1017,  1018,     0,   138,   139,   140,
     141,   142,   143,  1019,   612,   144,   145,  1020,  1021,   148,
       0,   149,   150,   151,   152,   613,     0,  1286,     0,  1287,
     156,   157,   158,   159,   160,  1288,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,  1289,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1023,  1024,
     184,  1025,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,  1290,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1026,   213,   214,   215,
     216,   217,   615,  1027,   219,     0,   220,   221,  1028,   223,
       0,   224,     0,   225,  1291,     0,  1292,   228,   229,  1293,
    1294,   232,     0,   233,     0,  1029,  1030,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,  1295,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,  1296,   259,   260,   261,   262,   263,   264,  1031,
    1032,     0,  1033,     0,   268,  1297,  1298,   271,  1299,   273,
     274,   275,   276,   277,   278,     0,     0,   279,  1300,   281,
    1301,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1302,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1035,
    1303,  1036,   313,   314,   315,   316,  1037,   317,   318,  1304,
     320,  1038,   617,   322,  1039,   324,   325,   326,     0,   327,
     328,     0,     0,  1040,   330,   331,     0,     0,   332,   333,
     334,  1305,   336,  1306,   619,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   620,  1307,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,  1041,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,  1308,   390,   391,   392,  1042,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,  1309,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,  1310,   418,   419,  1043,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,  1311,   435,   622,   437,     0,   438,   439,     0,   440,
    1312,   442,   443,   444,   445,   446,     0,   447,  1044,  1045,
       0,     0,   450,   451,   623,   453,   624,  1046,   455,   456,
    1313,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,  1047,  1314,   477,  1315,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,  1048,     0,
       0,     0,     0,     0,     0,  1049,  1050,  1051,     0,     0,
       0,     0,  1052,     0,  1053,  1316,     0,     0,     0,  1054,
    1055,  1056,  1057,   111,  1009,   642,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,  1015,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,  1016,   135,  1017,  1018,  1485,   138,
     139,   140,   141,   142,   143,  1019,   612,   144,   145,  1020,
    1021,   148,     0,   149,   150,   151,   152,   613,     0,   614,
       0,  1022,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1023,  1024,   184,  1025,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1026,   213,
     214,   215,   216,   217,   615,  1027,   219,     0,   220,   221,
    1028,   223,     0,   224,     0,   225,   226,  1486,   227,   228,
     229,   230,   231,   232,     0,   233,     0,  1029,  1030,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1031,  1032,     0,  1033,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,  1487,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1034,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1035,   311,  1036,   313,   314,   315,   316,  1037,   317,
     318,   319,   320,  1038,   617,   322,  1039,   324,   325,   326,
       0,   327,   328,     0,     0,  1040,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   619,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   620,   353,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,  1041,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,  1042,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,  1043,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   622,   437,     0,   438,   439,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
    1044,  1045,     0,  1488,   450,   451,   623,   453,   624,  1046,
     455,   456,   625,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,  1047,     0,   477,   478,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
    1048,     0,     0,     0,     0,     0,     0,  1049,  1050,  1051,
       0,     0,     0,     0,  1052,     0,  1053,     0,     0,     0,
       0,  1054,  1055,  1056,  1057,  1280,  1009,   642,  1010,  1011,
    1012,  1013,  1014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,  1282,
       0,  1015,     0,     0,  1283,   124,   125,     0,   126,   127,
     128,  1284,   130,   131,   132,   133,  1016,  1285,  1017,  1018,
       0,   138,   139,   140,   141,   142,   143,  1019,   612,   144,
     145,  1020,  1021,   148,     0,   149,   150,   151,   152,   613,
       0,  1286,     0,  1287,   156,   157,   158,   159,   160,  1288,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,  1289,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1023,  1024,   184,  1025,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1026,   213,   214,   215,   216,   217,   615,  1027,   219,     0,
     220,   221,  1028,   223,     0,   224,     0,   225,  1291,     0,
    1292,   228,   229,  1293,  1294,   232,     0,   233,     0,  1029,
    1030,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,  1295,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,  1296,   259,   260,   261,
     262,   263,   264,  1031,  1032,     0,  1033,     0,   268,  1297,
    1298,   271,  1299,   273,   274,   275,   276,   277,   278,     0,
       0,   279,  1300,   281,  1301,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1302,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1035,  1303,  1036,   313,   314,   315,   316,
    1037,   317,   318,  1304,   320,  1038,   617,   322,  1039,   324,
     325,   326,     0,   327,   328,     0,     0,  1040,   330,   331,
       0,     0,   332,   333,   334,  1305,   336,  1306,   619,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   620,  1307,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,  1041,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,  1308,   390,   391,
     392,  1042,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,  1309,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1310,   418,   419,
    1043,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,  1311,   435,   622,   437,     0,
     438,   439,     0,   440,  1312,   442,   443,   444,   445,   446,
       0,   447,  1044,  1045,     0,     0,   450,   451,   623,   453,
     624,  1046,   455,   456,  1313,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,  1047,  2230,   477,
    1315,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,  1048,     0,     0,     0,     0,     0,     0,  1049,
    1050,  1051,     0,     0,     0,     0,  1052,     0,  1053,     0,
       0,     0,     0,  1054,  1055,  1056,  1057,  1280,  1009,   642,
    1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,  1282,     0,  1015,     0,     0,  1283,   124,   125,     0,
     126,   127,   128,  1284,   130,   131,   132,   133,  1016,  1285,
    1017,  1018,     0,   138,   139,   140,   141,   142,   143,  1019,
     612,   144,   145,  1020,  1021,   148,     0,   149,   150,   151,
     152,   613,     0,  1286,     0,  1287,   156,   157,   158,   159,
     160,  1288,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,  1289,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1023,  1024,   184,  1025,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1026,   213,   214,   215,   216,   217,   615,  1027,
     219,     0,   220,   221,  1028,   223,     0,   224,     0,   225,
    1291,     0,  1292,   228,   229,  1293,  1294,   232,     0,   233,
       0,  1029,  1030,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,  1295,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,  1296,   259,
     260,   261,   262,   263,   264,  1031,  1032,     0,  1033,     0,
     268,  1297,  1298,   271,  1299,   273,   274,   275,   276,   277,
     278,     0,     0,   279,  1300,   281,  1301,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1302,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1035,  1303,  1036,   313,   314,
     315,   316,  1037,   317,   318,  1304,   320,  1038,   617,   322,
    1039,   324,   325,   326,     0,   327,   328,     0,     0,  1040,
     330,   331,     0,     0,   332,   333,   334,  1305,   336,  1306,
     619,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   620,  1307,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,  1041,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,  1308,
     390,   391,   392,  1042,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,  1309,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,  1310,
     418,   419,  1043,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,  1311,   435,   622,
     437,     0,   438,   439,     0,   440,  1312,   442,   443,   444,
     445,   446,     0,   447,  1044,  1045,     0,     0,   450,   451,
     623,   453,   624,  1046,   455,   456,  1313,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,  1047,
       0,   477,  1315,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,  1048,     0,     0,     0,     0,     0,
       0,  1049,  1050,  1051,     0,     0,     0,     0,  1052,     0,
    1053,  2278,     0,     0,     0,  1054,  1055,  1056,  1057,   111,
    1009,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119, -1090,   120,   121,   122,
       0,     0,     0,     0, -1090,  1015,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1016,   135,  1017,  1018,     0,   138,   139,   140,   141,   142,
     143,  1019,   612,   144,   145,  1020,  1021,   148,     0,   149,
     150,   151,   152,   613,     0,   614,     0,  1022,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1023,  1024,   184,  1025,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1026,   213,   214,   215,   216,   217,
     615,  1027,   219,     0,   220,   221,  1028,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  1029,  1030,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1031,  1032,     0,
    1033,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1034,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1035,   311,  1036,
     313,   314,   315,   316,  1037,   317,   318,   319,   320,  1038,
     617,   322,  1039,   324,   325,   326,     0,   327,   328,     0,
       0,  1040,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   619,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     620,   353,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,  1041,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,  1042,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,  1043,   421, -1090,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   622,   437,     0,   438,   439,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,  1044,  1045,     0,     0,
     450,   451,   623,   453,   624,  1046,   455,   456,   625,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,  1047,     0,   477,   478,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,  1048,     0,     0,     0,
       0,     0,     0,  1049,  1050,  1051,     0,     0,     0,     0,
    1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,
    1057,  1280,  1009,   642,  1010,  1011,  1012,  1013,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,  1282,     0,  1015,     0,     0,
    1283,   124,   125,     0,   126,   127,   128,  1284,   130,   131,
     132,   133,  1016,  1285,  1017,  1018,     0,   138,   139,   140,
     141,   142,   143,  1019,   612,   144,   145,  1020,  1021,   148,
       0,   149,   150,   151,   152,   613,     0,  1286,     0,  1287,
     156,   157,   158,   159,   160,  1288,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,  1289,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1023,  1024,
     184,  1025,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1026,   213,   214,   215,
     216,   217,   615,  1027,   219,     0,   220,   221,  1028,   223,
       0,   224,     0,   225,  1291,     0,  1292,   228,   229,  1293,
    1294,   232,     0,   233,     0,  1029,  1030,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,  1295,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,  1296,   259,   260,   261,   262,   263,   264,  1031,
    1032,     0,  1033,     0,   268,  1297,  1298,   271,  1299,   273,
     274,   275,   276,   277,   278,     0,     0,   279,  1300,   281,
    1301,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1302,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1035,
    1303,  1036,   313,   314,   315,   316,  1037,   317,   318,  1304,
     320,  1038,   617,   322,  1039,   324,   325,   326,     0,   327,
     328,     0,     0,  1040,   330,   331,     0,     0,   332,   333,
     334,  1305,   336,  1306,   619,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   620,  1307,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,  1041,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,  1308,   390,   391,   392,  1042,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,  1309,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,  1310,   418,   419,  1043,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,  1311,   435,   622,   437,     0,   438,   439,     0,   440,
    1312,   442,   443,   444,   445,   446,     0,   447,  1044,  1045,
       0,     0,   450,   451,   623,   453,   624,  1046,   455,   456,
    1313,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,  1047,     0,   477,  1315,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,  1048,     0,
       0,     0,     0,     0,     0,  1049,  1050,  1051,     0,     0,
       0,     0,  1052,     0,  1053,  2999,     0,     0,     0,  1054,
    1055,  1056,  1057,  1280,  1009,   642,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,  1282,     0,  1015,
       0,     0,  1283,   124,   125,     0,   126,   127,   128,  1284,
     130,   131,   132,   133,  1016,  1285,  1017,  1018,     0,   138,
     139,   140,   141,   142,   143,  1019,   612,   144,   145,  1020,
    1021,   148,     0,   149,   150,   151,   152,   613,     0,  1286,
       0,  1287,   156,   157,   158,   159,   160,  1288,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,  1289,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1023,  1024,   184,  1025,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1026,   213,
     214,   215,   216,   217,   615,  1027,   219,     0,   220,   221,
    1028,   223,     0,   224,     0,   225,  1291,     0,  1292,   228,
     229,  1293,  1294,   232,     0,   233,     0,  1029,  1030,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,  1295,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,  1296,   259,   260,   261,   262,   263,
     264,  1031,  1032,     0,  1033,     0,   268,  1297,  1298,   271,
    1299,   273,   274,   275,   276,   277,   278,     0,     0,   279,
    1300,   281,  1301,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1302,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1035,  1303,  1036,   313,   314,   315,   316,  1037,   317,
     318,  1304,   320,  1038,   617,   322,  1039,   324,   325,   326,
       0,   327,   328,     0,     0,  1040,   330,   331,     0,     0,
     332,   333,   334,  1305,   336,  1306,   619,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   620,  1307,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,  1041,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,  1308,   390,   391,   392,  1042,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,  1309,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,  1310,   418,   419,  1043,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,  1311,   435,   622,   437,     0,   438,   439,
       0,   440,  1312,   442,   443,   444,   445,   446,     0,   447,
    1044,  1045,     0,     0,   450,   451,   623,   453,   624,  1046,
     455,   456,  1313,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,  1047,     0,   477,  1315,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
    1048,     0,     0,     0,     0,     0,     0,  1049,  1050,  1051,
       0,     0,     0,     0,  1052,     0,  1053,     0,     0,     0,
       0,  1054,  1055,  1056,  1057,   111,  1009,   642,  1010,  1011,
       0,  1013,  1014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,  1015,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,   133,  1016,   135,  1017,  1018,
       0,   138,   139,   140,   141,   142,   143,  1019,   612,   144,
     145,  1020,  1021,   148,     0,   149,   150,   151,   152,   613,
       0,   614,     0,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1023,  1024,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1026,   213,   214,   215,   216,   217,   615,  1027,   219,     0,
     220,   221,  1028,   223,     0,   224,     0,   225,   226,    21,
     227,   228,   229,   230,   231,   232,     0,   233,     0,  1029,
    1030,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1031,  1032,     0,  1033,     0,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1034,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1035,   311,  1036,   313,   314,   315,   316,
       0,   317,   318,   319,   320,  1038,   617,   322,  1039,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   619,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      25,    26,    27,     0,   350,   351,   620,   353,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,  1041,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,  1042,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    32,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
    1043,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   622,   437,     0,
     438,   439,    37,   440,   441,   442,   443,   444,   445,   446,
       0,   447,  1044,  1045,     0,     0,   450,   451,   623,   453,
     624,  1046,   455,   456,   625,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,    39,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   626,  1047,     0,   477,
     478,   479,   480,   481,   482,   483,     0,     0,   484,     0,
      43,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,     0,    44,     0,     0,     0,   111,  1009,
     642,  1010,  1011,  1012,  1013,  1014,  1052,     0,  1053,     0,
       0,     0,     0,  1054,  1055,  1056,  1057,   112,   113,   114,
     115,   116,   117,   118,   119,  1662,   120,   121,   122,     0,
       0,     0,     0,     0,  1015,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1016,
     135,  1017,  1018,     0,   138,   139,   140,   141,   142,   143,
    1019,   612,   144,   145,  1020,  1021,   148,     0,   149,   150,
     151,   152,   613,     0,   614,     0,  1022,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1023,  1024,   184,  1025,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1026,   213,   214,   215,   216,   217,   615,
    1027,   219,     0,   220,   221,  1028,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1029,  1030,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1031,  1032,     0,  1033,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1034,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1035,   311,  1036,   313,
     314,   315,   316,  1037,   317,   318,   319,   320,  1038,   617,
     322,  1039,   324,   325,   326,     0,   327,   328,     0,     0,
    1040,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   619,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   620,
     353,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,  1041,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   392,  1042,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,  1043,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     622,   437,     0,   438,   439,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,  1044,  1045,     0,     0,   450,
     451,   623,   453,   624,  1046,   455,   456,   625,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
    1047,     0,   477,   478,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,  1048,     0,     0,     0,     0,
       0,     0,  1049,  1050,  1051,     0,     0,     0,     0,  1052,
       0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,  1057,
     111,  1677,   642,  1010,  1011,  1012,  1678,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,  1679,   120,   121,
     122,     0,     0,     0,     0,     0,  1015,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1016,   135,  1017,  1018,     0,   138,   139,   140,   141,
     142,   143,  1019,   612,   144,   145,  1020,  1021,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,  1022,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1023,  1024,   184,
    1025,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1026,   213,   214,   215,   216,
     217,   615,  1027,   219,     0,   220,   221,  1028,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1029,  1030,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1031,  1032,
       0,  1033,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1034,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1035,   311,
    1036,   313,   314,   315,   316,  1037,   317,   318,   319,   320,
    1038,   617,   322,  1039,   324,   325,   326,     0,   327,   328,
       0,     0,  1040,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
    1041,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,  1042,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,  1043,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,  1044,  1045,     0,
       0,   450,   451,   623,   453,   624,  1046,   455,   456,   625,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,  1047,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,  1048,     0,     0,
       0,     0,     0,     0,  1049,  1050,  1051,     0,     0,     0,
       0,  1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,
    1056,  1057,   111,  1009,   642,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,   612,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   613,     0,   614,     0,
    1022,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,  1025,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   615,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,  1486,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1034,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,  1037,   317,   318,
     319,   320,  1038,   617,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,  1040,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   619,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   620,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,  1042,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   622,   437,     0,   438,   439,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   623,   453,   624,  1046,   455,
     456,   625,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,  1048,
       0,     0,     0,     0,     0,     0,  1049,  1050,  1051,     0,
       0,     0,     0,  1052,     0,  1053,     0,     0,     0,     0,
    1054,  1055,  1056,  1057,   111,  1009,   642,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1015,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1016,   135,  1017,  1018,     0,
     138,   139,   140,   141,   142,   143,  1019,   612,   144,   145,
    1020,  1021,   148,     0,   149,   150,   151,   152,   613,     0,
     614,     0,  1022,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1023,  1024,   184,  1025,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1026,
     213,   214,   215,   216,   217,   615,  1027,   219,     0,   220,
     221,  1028,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1029,  1030,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1031,  1032,     0,  1033,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1034,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1035,   311,  1036,   313,   314,   315,   316,  1037,
     317,   318,   319,   320,  1038,   617,   322,  1039,   324,   325,
     326,     0,   327,   328,     0,     0,  1040,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   619,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   620,   353,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,  1041,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
    1042,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,  1043,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   622,   437,     0,   438,
     439,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,  1044,  1045,     0,     0,   450,   451,   623,   453,   624,
    1046,   455,   456,   625,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,  1047,     0,   477,   478,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,  1048,     0,     0,     0,     0,     0,     0,  1049,  1050,
    1051,     0,     0,     0,     0,  1052,     0,  1053,  2010,     0,
       0,     0,  1054,  1055,  1056,  1057,   111,  1009,   642,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1015,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1016,   135,  1017,
    1018,     0,   138,   139,   140,   141,   142,   143,  1019,   612,
     144,   145,  1020,  1021,   148,     0,   149,   150,   151,   152,
     613,     0,   614,     0,  1022,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1023,  1024,   184,  1025,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1026,   213,   214,   215,   216,   217,   615,  1027,   219,
       0,   220,   221,  1028,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1029,  1030,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1031,  1032,     0,  1033,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1034,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1035,   311,  1036,   313,   314,   315,
     316,  1037,   317,   318,   319,   320,  1038,   617,   322,  1039,
     324,   325,   326,     0,   327,   328,     0,     0,  1040,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   619,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   620,   353,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,  1041,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,  1042,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,  1043,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   622,   437,
       0,   438,   439,  2619,   440,   441,   442,   443,   444,   445,
     446,     0,   447,  1044,  1045,     0,     0,   450,   451,   623,
     453,   624,  1046,   455,   456,   625,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,  1047,     0,
     477,   478,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,  1048,     0,     0,     0,     0,     0,     0,
    1049,  1050,  1051,     0,     0,     0,     0,  1052,     0,  1053,
       0,     0,     0,     0,  1054,  1055,  1056,  1057,   111,  1009,
     642,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1015,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1016,
     135,  1017,  1018,     0,   138,   139,   140,   141,   142,   143,
    1019,   612,   144,   145,  1020,  1021,   148,     0,   149,   150,
     151,   152,   613,     0,   614,     0,  1022,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1023,  1024,   184,  1025,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1026,   213,   214,   215,   216,   217,   615,
    1027,   219,     0,   220,   221,  1028,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1029,  1030,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1031,  1032,     0,  1033,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1034,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1035,   311,  1036,   313,
     314,   315,   316,  1037,   317,   318,   319,   320,  1038,   617,
     322,  1039,   324,   325,   326,     0,   327,   328,     0,     0,
    1040,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   619,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   620,
     353,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,  1041,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   392,  1042,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,  1043,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     622,   437,     0,   438,   439,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,  1044,  1045,     0,     0,   450,
     451,   623,   453,   624,  1046,   455,   456,   625,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
    1047,     0,   477,   478,   479,   480,   481,   482,   483,     0,
    2733,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,  1048,     0,     0,     0,     0,
       0,     0,  1049,  1050,  1051,     0,     0,     0,     0,  1052,
       0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,  1057,
     111,  1009,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,  2949,   120,   121,
     122,     0,     0,     0,     0,     0,  1015,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1016,   135,  1017,  1018,     0,   138,   139,   140,   141,
     142,   143,  1019,   612,   144,   145,  1020,  1021,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,  1022,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,  2950,   174,
     175,   176,   177,   178,   179,   180,   181,  1023,  1024,   184,
    1025,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1026,   213,   214,   215,   216,
     217,   615,  1027,   219,     0,   220,   221,  1028,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  2951,  1030,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1031,  1032,
       0,  1033,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1034,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1035,   311,
    1036,   313,   314,   315,   316,  1037,   317,   318,   319,   320,
    1038,   617,   322,  1039,   324,   325,   326,     0,   327,   328,
       0,     0,  1040,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
    1041,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,  2952,  1042,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,  1043,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,  1044,  1045,     0,
       0,   450,   451,   623,   453,   624,  1046,   455,   456,   625,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,  1047,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,  1048,     0,     0,
       0,     0,     0,     0,  1049,  1050,  1051,     0,     0,     0,
       0,  1052,     0,  2953,     0,     0,     0,     0,  1054,  1055,
    1056,  1057,   111,  1009,   642,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,   612,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   613,     0,   614,     0,
    1022,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,  1025,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   615,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1034,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,  1037,   317,   318,
     319,   320,  1038,   617,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,  1040,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   619,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   620,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,  1042,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   622,   437,     0,   438,   439,  3090,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   623,   453,   624,  1046,   455,
     456,   625,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,  1048,
       0,     0,     0,     0,     0,     0,  1049,  1050,  1051,     0,
       0,     0,     0,  1052,     0,  1053,     0,     0,     0,     0,
    1054,  1055,  1056,  1057,   111,  1009,   642,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1015,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1016,   135,  1017,  1018,     0,
     138,   139,   140,   141,   142,   143,  1019,   612,   144,   145,
    1020,  1021,   148,     0,   149,   150,   151,   152,   613,     0,
     614,     0,  1022,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1023,  1024,   184,  1025,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1026,
     213,   214,   215,   216,   217,   615,  1027,   219,     0,   220,
     221,  1028,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1029,  1030,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1031,  1032,     0,  1033,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1034,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1035,   311,  1036,   313,   314,   315,   316,  1037,
     317,   318,   319,   320,  1038,   617,   322,  1039,   324,   325,
     326,     0,   327,   328,     0,     0,  1040,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   619,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   620,   353,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,  1041,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
    1042,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,  1043,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   622,   437,     0,   438,
     439,  3228,   440,   441,   442,   443,   444,   445,   446,     0,
     447,  1044,  1045,     0,     0,   450,   451,   623,   453,   624,
    1046,   455,   456,   625,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,  1047,     0,   477,   478,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,  1048,     0,     0,     0,     0,     0,     0,  1049,  1050,
    1051,     0,     0,     0,     0,  1052,     0,  1053,     0,     0,
       0,     0,  1054,  1055,  1056,  1057,   111,  1009,   642,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1015,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1016,   135,  1017,
    1018,     0,   138,   139,   140,   141,   142,   143,  1019,   612,
     144,   145,  1020,  1021,   148,     0,   149,   150,   151,   152,
     613,     0,   614,     0,  1022,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1023,  1024,   184,  1025,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1026,   213,   214,   215,   216,   217,   615,  1027,   219,
       0,   220,   221,  1028,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1029,  1030,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1031,  1032,     0,  1033,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1034,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1035,   311,  1036,   313,   314,   315,
     316,  1037,   317,   318,   319,   320,  1038,   617,   322,  1039,
     324,   325,   326,     0,   327,   328,     0,     0,  1040,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   619,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   620,   353,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,  1041,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,  1042,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,  1043,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   622,   437,
       0,   438,   439,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,  1044,  1045,     0,     0,   450,   451,   623,
     453,   624,  1046,   455,   456,   625,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,  1047,     0,
     477,   478,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,  1048,     0,     0,     0,     0,     0,     0,
    1049,  1050,  1051,     0,     0,     0,     0,  1052,     0,  1053,
       0,     0,     0,     0,  1054,  1055,  1056,  1057,   111,  1009,
     642,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1015,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1016,
     135,  1017,  1018,     0,   138,   139,   140,   141,   142,   143,
    1019,   612,   144,   145,  1020,  1021,   148,     0,   149,   150,
     151,   152,   613,     0,   614,     0,  1022,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1023,  1024,   184,  1025,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1026,   213,   214,   215,   216,   217,   615,
    1027,   219,     0,   220,   221,  1028,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1029,  1030,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1031,  1032,     0,  1033,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1034,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1035,   311,  1036,   313,
     314,   315,   316,  1037,   317,   318,   319,   320,  1038,   617,
     322,  1039,   324,   325,   326,     0,   327,   328,     0,     0,
    1040,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   619,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   620,
     353,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,  1041,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   392,  1042,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,  1043,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     622,   437,     0,   438,   439,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,  1044,  1045,     0,     0,   450,
     451,   623,   453,   624,  1046,   455,   456,   625,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
    1047,     0,   477,   478,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,  1048,     0,     0,     0,     0,
       0,     0,  1682,  1683,  1051,     0,     0,     0,     0,  1052,
       0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,  1057,
     111,  2142,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,  1015,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1016,   135,  1017,  1018,     0,   138,   139,   140,   141,
     142,   143,  1019,   612,   144,   145,  1020,  1021,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,  1022,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1023,  1024,   184,
    1025,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1026,   213,   214,   215,   216,
     217,   615,  1027,   219,     0,   220,   221,  1028,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1029,  1030,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1031,  1032,
       0,  1033,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1034,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1035,   311,
    1036,   313,   314,   315,   316,  1037,   317,   318,   319,   320,
    1038,   617,   322,  1039,   324,   325,   326,     0,   327,   328,
       0,     0,  1040,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
    1041,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,  1042,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,  1043,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,  1044,  1045,     0,
       0,   450,   451,   623,   453,   624,  1046,   455,   456,   625,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,  1047,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,  1048,     0,     0,
       0,     0,     0,     0,  1049,  1050,  1051,     0,     0,     0,
       0,  1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,
    1056,  1057,   111,  1009,   642,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,   612,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   613,     0,   614,     0,
    1022,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,  1025,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   615,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1034,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,  1037,   317,   318,
     319,   320,  1038,   617,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,  1040,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   619,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   620,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,  1042,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   622,   437,     0,   438,   439,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   623,   453,   624,  1046,   455,
     456,   625,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,  1048,
       0,     0,     0,     0,     0,     0,  1049,  2224,  1051,     0,
       0,     0,     0,  1052,     0,  1053,     0,     0,     0,     0,
    1054,  1055,  1056,  1057,   111,  1009,   642,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1015,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1016,   135,  1017,  1018,     0,
     138,   139,   140,   141,   142,   143,  1019,   612,   144,   145,
    1020,  1021,   148,     0,   149,   150,   151,   152,   613,     0,
     614,     0,  1022,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1023,  1024,   184,  1025,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1026,
     213,   214,   215,   216,   217,   615,  1027,   219,     0,   220,
     221,  1028,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1029,  1030,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1031,  1032,     0,  1033,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1034,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1035,   311,  1036,   313,   314,   315,   316,  1037,
     317,   318,   319,   320,  1038,   617,   322,  1039,   324,   325,
     326,     0,   327,   328,     0,     0,  1040,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   619,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   620,   353,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,  1041,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
    1042,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,  1043,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   622,   437,     0,   438,
     439,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,  1044,  1045,     0,     0,   450,   451,   623,   453,   624,
    1046,   455,   456,   625,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,  1047,     0,   477,   478,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,  1048,     0,     0,     0,     0,     0,     0,  1049,  1050,
    1051,     0,     0,     0,     0,  1052,     0,  2431,     0,     0,
       0,     0,  1054,  1055,  1056,  1057,   111,  1009,   642,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1015,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1016,   135,  1017,
    1018,     0,   138,   139,   140,   141,   142,   143,  1019,   612,
     144,   145,  1020,  1021,   148,     0,   149,   150,   151,   152,
     613,     0,   614,     0,  1022,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1023,  1024,   184,  1025,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1026,   213,   214,   215,   216,   217,   615,  1027,   219,
       0,   220,   221,  1028,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1029,  1030,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1031,  1032,     0,  1033,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1034,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1035,   311,  1036,   313,   314,   315,
     316,  1037,   317,   318,   319,   320,  1038,   617,   322,  1039,
     324,   325,   326,     0,   327,   328,     0,     0,  1040,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   619,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   620,   353,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,  1041,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,  1042,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,  1043,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   622,   437,
       0,   438,   439,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,  1044,  1045,     0,     0,   450,   451,   623,
     453,   624,  1046,   455,   456,   625,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,  1047,     0,
     477,   478,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,  1048,     0,     0,     0,     0,     0,     0,
    1049,  2997,  1051,     0,     0,     0,     0,  1052,     0,  1053,
       0,     0,     0,     0,  1054,  1055,  1056,  1057,   111,  1009,
     642,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1015,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1016,
     135,  1017,  1018,     0,   138,   139,   140,   141,   142,   143,
    1019,   612,   144,   145,  1020,  1021,   148,     0,   149,   150,
     151,   152,   613,     0,   614,     0,  1022,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,  2950,   174,   175,   176,
     177,   178,   179,   180,   181,  1023,  1024,   184,  1025,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1026,   213,   214,   215,   216,   217,   615,
    1027,   219,     0,   220,   221,  1028,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  2951,  1030,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1031,  1032,     0,  1033,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1034,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1035,   311,  1036,   313,
     314,   315,   316,  1037,   317,   318,   319,   320,  1038,   617,
     322,  1039,   324,   325,   326,     0,   327,   328,     0,     0,
    1040,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   619,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   620,
     353,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,  1041,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,  2952,  1042,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,  1043,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     622,   437,     0,   438,   439,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,  1044,  1045,     0,     0,   450,
     451,   623,   453,   624,  1046,   455,   456,   625,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
    1047,     0,   477,   478,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,  1048,     0,     0,     0,     0,
       0,     0,  1049,  1050,  1051,     0,     0,     0,     0,  1052,
       0,  2953,     0,     0,     0,     0,  1054,  1055,  1056,  1057,
     111,  1009,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,  1015,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
    3404,  1016,   135,  1017,  1018,     0,   138,   139,   140,   141,
     142,   143,  1019,   612,   144,   145,  1020,  1021,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,  1022,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,  3405,
     175,   176,   177,   178,   179,   180,   181,  1023,  1024,   184,
    1025,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1026,   213,   214,   215,   216,
     217,   615,  1027,   219,     0,   220,   221,  1028,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1029,  1030,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1031,  1032,
       0,  1033,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1034,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1035,   311,
    1036,   313,   314,   315,   316,  1037,   317,   318,   319,   320,
    1038,   617,   322,  1039,   324,   325,   326,     0,   327,   328,
       0,     0,  1040,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
    1041,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,  1042,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,  1043,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,  1044,  1045,     0,
       0,   450,   451,   623,   453,   624,  1046,   455,   456,   625,
     458,   459,  3406,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,  1047,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,  1048,     0,     0,
       0,     0,     0,     0,  1049,  1050,  1051,     0,     0,     0,
       0,  1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,
    1056,  1057,   111,  1009,   642,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,   612,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   613,     0,   614,     0,
    1022,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,  3405,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,  1025,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   615,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1034,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,  1037,   317,   318,
     319,   320,  1038,   617,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,  1040,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   619,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   620,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,  1042,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   622,   437,     0,   438,   439,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   623,   453,   624,  1046,   455,
     456,   625,   458,   459,  3406,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,  1048,
       0,     0,     0,     0,     0,     0,  1049,  1050,  1051,     0,
       0,     0,     0,  1052,     0,  1053,     0,     0,     0,     0,
    1054,  1055,  1056,  1057,   111,  1009,   642,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1015,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1016,   135,  1017,  1018,     0,
     138,   139,   140,   141,   142,   143,  1019,   612,   144,   145,
    1020,  1021,   148,     0,   149,   150,   151,   152,   613,     0,
     614,     0,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1023,  1024,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1026,
     213,   214,   215,   216,   217,   615,  1027,   219,     0,   220,
     221,  1028,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1029,  1030,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1031,  1032,     0,  1033,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1034,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1035,   311,  1036,   313,   314,   315,   316,     0,
     317,   318,   319,   320,  1038,   617,   322,  1039,   324,   325,
     326,     0,   327,   328,     0,     0,  1040,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   619,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   620,   353,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,  1041,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
    1042,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,  1043,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   622,   437,     0,   438,
     439,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,  1044,  1045,     0,     0,   450,   451,   623,   453,   624,
    1046,   455,   456,   625,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,  1047,     0,   477,   478,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,     0,     0,     0,     0,     0,  1472,  1473,
       0,     0,     0,     0,     0,  1052,     0,  1053,     0,     0,
       0,     0,  1054,  1055,  1056,  1057,   111,  1009,   642,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1015,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132, -2000,  1016,   135,  1017,
    1018,     0,   138,   139,   140,   141,   142,   143,  1019,   612,
     144,   145,  1020,  1021,   148,     0,   149,   150,   151,   152,
     613,     0,   614,     0,  1022,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,  3405,   175,   176,   177,   178,
     179,   180,   181,  1023,  1024,   184,  1025,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1026,   213,   214,   215,   216,   217,   615,  1027,   219,
       0,   220,   221,  1028,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230, -2000,   232,     0,   233,     0,
    1029,  1030,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244, -2000,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1031,  1032,     0,  1033,     0,   268,
       0,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281, -2000,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1034,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1035,   311,  1036,   313,   314,   315,
     316,     0,   317,   318,     0,   320,  1038,   617,   322,  1039,
     324,   325,   326,     0,   327,   328,     0,     0,  1040,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   619,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   620,   353,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,  1041,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,  1042,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416, -2000,   418,
     419,  1043,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   622,   437,
       0,   438,   439,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,  1044,  1045,     0,     0,   450,   451,   623,
     453,   624,  1046,   455,   456,   625,   458,   459,  3406,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,  1047,     0,
     477,   478,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505, -2000,     0,     0,     0,     0,     0,     0,
    1049,  1050,  1051,     0,     0,     0,     0,  1052,     0,  1053,
       0,     0,     0,     0,  1054,  1055,  1056,  1057,   111,  1009,
     642,  1010,  1011,     0,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1015,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1016,
     135,  1017,  1018,     0,   138,   139,   140,   141,   142,   143,
    1019,   612,   144,   145,  1020,  1021,   148,     0,   149,   150,
     151,   152,   613,     0,   614,     0,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1023,  1024,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1026,   213,   214,   215,   216,   217,   615,
    1027,   219,     0,   220,   221,  1028,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1029,  1030,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1031,  1032,     0,  1033,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1034,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1035,   311,  1036,   313,
     314,   315,   316,     0,   317,   318,   319,   320,  1038,   617,
     322,  1039,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   619,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   620,
     353,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,  1041,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   392,  2128,  2129,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,  1043,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     622,   437,     0,   438,   439,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,  1044,  1045,     0,     0,   450,
     451,   623,   453,   624,  1046,   455,   456,   625,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
    1047,     0,   477,   478,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,     0,     0,     0,
       0,     0,  2130,  2131,     0,     0,     0,     0,     0,  1052,
       0,  1053,     0,     0,     0,     0,  1054,  1055,  1056,  1057,
     111,  1009,   642,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,  1015,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1016,   135,  1017,  1018,     0,   138,   139,   140,   141,
     142,   143,  1019,   612,   144,   145,  1020,  1021,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1023,  1024,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1026,   213,   214,   215,   216,
     217,   615,  1027,   219,     0,   220,   221,  1028,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1029,  1030,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1031,  1032,
       0,  1033,     0,   268,     0,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1034,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1035,   311,
    1036,   313,   314,   315,   316,     0,   317,   318,   319,   320,
    1038,   617,   322,  1039,   324,   325,   326,     0,   327,   328,
       0,     0,  1040,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
    1041,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,  1042,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,  1043,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,  1044,  1045,     0,
       0,   450,   451,   623,   453,   624,  1046,   455,   456,   625,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,  1047,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,     0,
       0,     0,     0,     0,  1472,  1473,     0,     0,     0,     0,
       0,  1052,     0,  1053,     0,     0,     0,     0,  1054,  1055,
    1056,  1057,   111,  1009,   642,  1010,  1011,     0,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,   612,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   613,     0,   614,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   615,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1034,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1038,   617,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   619,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   620,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,  1042,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   622,   437,     0,   438,   439,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   623,   453,   624,  1046,   455,
     456,   625,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,     0,     0,     0,     0,   111,  1009,   642,  1010,  1011,
    1012,  1013,  1014,  1052,     0,  1053,     0,     0,     0,     0,
    1054,  1055,  1056,  1057,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,  1015,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,     0,  1016,   135,  1017,  1018,
       0,   138,   139,   140,   141,   142,   143,  1019,   612,   144,
     145,  1020,  1021,   148,     0,   149,   150,   151,   152,   613,
       0,   614,     0,  1022,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1023,  1024,   184,  1025,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,     0,   207,     0,   208,   209,   210,   211,
    1026,   213,   214,   215,   216,   217,   615,  1027,   219,     0,
     220,   221,  1028,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,     0,   232,     0,   233,     0,  1029,
    1030,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1031,  1032,     0,  1033,     0,   268,     0,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1034,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1035,   311,  1036,   313,   314,   315,   316,
       0,   317,   318,     0,   320,  1038,   617,   322,  1039,   324,
     325,   326,     0,   327,   328,     0,     0,  1040,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   619,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   620,   353,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,  1041,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,  1042,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
    1043,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   622,   437,     0,
     438,   439,     0,   440,   441,   442,   443,   444,   445,   446,
       0,   447,  1044,  1045,     0,     0,   450,   451,   623,   453,
     624,  1046,   455,   456,   625,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,  1047,     0,   477,
     478,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,     0,     0,     0,     0,     0,     0,  1049,
    1050,  1051,     0,   851,  1431,   642,  1052,     0,  1053,  1013,
       0,     0,     0,  1054,  1055,  1056,  1057,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,   852,     0,     0,
       0,     0,   853,   124,   125,     0,   126,   127,   128,   854,
     130,   131,   132,   855,   856,   857,   858,   859,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   860,
     861,   148,     0,   149,   150,   151,   152,   862,     0,   863,
       0,   864,   156,   157,   158,   159,   160,   865,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   866,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     867,   868,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   869,   213,
     214,   215,   216,   217,   870,  1432,   219,     0,   220,   221,
     871,   223,     0,   224,     0,   225,   872,     0,   873,   228,
     229,   874,   875,   232,     0,   233,     0,   876,   877,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   878,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   879,   880,   260,   261,   262,   263,
     264,   881,   882,     0,   883,     0,   268,   884,   885,   271,
     886,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     887,   281,   888,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   889,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   890,   891,   892,   313,   314,   315,   893,     0,   317,
     318,   894,   320,     0,   895,   322,   896,   324,   325,   326,
       0,   327,   328,  1433,     0,   329,   330,   331,     0,     0,
     332,   333,   897,   898,   336,   899,   900,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   901,   902,   354,   355,   903,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   904,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   905,   390,   391,   392,   906,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   907,   407,   408,   409,   410,   411,
     412,   908,   414,   415,   416,   909,   418,   419,   910,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   911,   435,   912,   437,     0,   438,   439,
       0,   440,   913,   442,   443,   444,   445,   446,     0,   447,
     914,   915,     0,     0,   450,   451,   916,   453,   917,  1434,
     455,   456,   918,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,  1268,   920,     0,   477,   921,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   922,   923,   924,   925,   926,
     927,   928,   929,   930,   931,   932,   502,   503,   504,   505,
       0,     0,     0,     0,     0,     0,     0,  1435,  1436,  2321,
       0,   111,  1009,   642,  1010,  1011,  2322,  1013,     0,     0,
       0,     0,     0,     0,  1057,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,  1015,     0,     0,
     123,   124,   125,     0,   126,   127,   128,   129,   130,   131,
     132,   133,  1016,   135,  1017,  1018,     0,   138,   139,   140,
     141,   142,   143,  1019,     0,   144,   145,  1020,  1021,   148,
       0,   149,   150,   151,   152,   153,     0,   154,     0,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1023,  1024,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1026,   213,   214,   215,
     216,   217,   218,  1027,   219,     0,   220,   221,  1028,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,  2970,  1029,  1030,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1031,
    1032,     0,  1033,     0,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1035,
     311,  1036,   313,   314,   315,   316,     0,   317,   318,   319,
     320,  1038,   321,   322,  1039,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,  1041,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,  1043,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,   438,   439,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,  1044,  1045,
       0,     0,   450,   451,   452,   453,   454,  1046,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,  1047,     0,   477,   478,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
       0,     0,   111,  1009,   642,  1010,  1011,     0,  1013,     0,
       0,     0,  1052,     0,  2682,     0,     0,     0,     0,  1054,
    1055,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1015,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1016,   135,  1017,  1018,     0,   138,   139,
     140,   141,   142,   143,  1019,     0,   144,   145,  1020,  1021,
     148,     0,   149,   150,   151,   152,   153,     0,   154,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1023,
    1024,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1026,   213,   214,
     215,   216,   217,   218,  1027,   219,     0,   220,   221,  1028,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1029,  1030,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1031,  1032,     0,  1033,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1035,   311,  1036,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1038,   321,   322,  1039,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,  1041,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,  1043,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,  1044,
    1045,     0,     0,   450,   451,   452,   453,   454,  1046,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,  1047,     0,   477,   478,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,     0,     0,   513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1052,     0,  2682,     0,     0,     0,     0,
    1054,  1055,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
     967,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,  -523,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,  -523,   220,   221,
     222,   223,  -523,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,  -523,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,  -523,   283,   284,   285,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
    -523,   327,   328,     0,     0,   329,   330,   331,     0,  -523,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,  -523,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1122,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2406,  3147,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     3,     4,
       0,   852,     0,     0,     0,     0,   853,   124,   125,     0,
     126,   127,   128,   854,   130,   131,   132,   855,   856,   857,
     858,   859,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   860,   861,   148,     0,   149,   150,   151,
     152,   862,     0,   863,     0,   864,   156,   157,   158,   159,
     160,   865,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   866,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   867,   868,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   869,   213,   214,   215,   216,   217,   870,     0,
     219,     0,   220,   221,   871,   223,     0,   224,     0,   225,
     872,    21,   873,   228,   229,   874,   875,   232,     0,   233,
       0,   876,   877,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   878,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   879,   880,
     260,   261,   262,   263,   264,   881,   882,     0,   883,     0,
     268,   884,   885,   271,   886,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   887,   281,   888,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   889,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   890,   891,   892,   313,   314,
     315,   893,     0,   317,   318,   894,   320,     0,   895,   322,
     896,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   897,   898,   336,   899,
     900,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    25,    26,    27,     0,   350,   351,   901,   902,
     354,   355,   903,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   904,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   905,
     390,   391,   392,   906,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    32,   907,   407,
     408,   409,   410,   411,   412,   908,   414,   415,   416,   909,
     418,   419,   910,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   911,   435,   912,
     437,     0,   438,   439,    37,   440,   913,   442,   443,   444,
     445,   446,     0,   447,   914,   915,     0,     0,   450,   451,
     916,   453,   917,     0,   455,   456,   918,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,    39,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   919,   920,
       0,   477,   921,   479,   480,   481,   482,   483,     0,     0,
     484,     0,    43,   485,   486,   487,   488,   489,   490,   922,
     923,   924,   925,   926,   927,   928,   929,   930,   931,   932,
     502,   503,   504,   505,     0,   111,    44,   537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,   612,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   613,
       0,   614,     0,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   615,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,   226,    21,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   616,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   617,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   618,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   619,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      25,    26,    27,     0,   350,   351,   620,   353,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   621,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    32,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   622,   437,     0,
     438,   439,    37,   440,   441,   442,   443,   444,   445,   446,
       0,   447,   448,   449,     0,     0,   450,   451,   623,   453,
     624,     0,   455,   456,   625,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,    39,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   626,   476,     0,   477,
     478,   479,   480,   481,   482,   483,     0,     0,   484,     0,
      43,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,   111,    44,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   627,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,   612,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   613,     0,   614,
       0,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   615,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   616,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   617,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   618,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   619,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   620,   353,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     621,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   622,   437,     0,   438,   439,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   623,   453,   624,     0,
     455,   456,   625,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   626,   476,     0,   477,   478,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   627,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,   612,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   613,     0,   614,     0,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   615,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   617,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   619,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   620,   353,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   621,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   622,   437,     0,   438,   439,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   623,   453,   624,     0,   455,   456,   625,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   111,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
     612,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   613,     0,   614,     0,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   615,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   617,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     619,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   620,   353,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   622,
     437,     0,   438,   439,     0,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     623,   453,   624,     0,   455,   456,   625,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,   478,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3233,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,   712,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,    21,     0,
     228,   229,   514,     0,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   515,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    25,
      26,    27,     0,   350,   351,   352,     0,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    32,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   516,   435,   436,   437,     0,   438,
     439,    37,   440,     0,   442,   443,   444,   445,   446,     0,
     447,   713,   449,     0,     0,   714,   451,   452,   453,   454,
       0,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,    39,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   626,   476,     0,   477,     0,
     479,   480,   481,   482,   483,     0,     0,   484,     0,    43,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   513,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,    21,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    25,    26,    27,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    32,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,    37,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,    39,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   626,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,    43,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,   513,
      44,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   514,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   515,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     352,     0,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   516,
     435,   436,   437,     0,   438,   439,     0,   440,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,   476,     0,   477,     0,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   513,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   952,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   514,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   515,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   352,     0,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   516,   435,   436,   437,
       0,   438,   439,     0,   440,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,     0,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   513,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1524,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2154,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   513,     0,   537,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2406,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   513,     0,   537,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2514,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   514,     0,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   515,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   352,     0,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   516,   435,   436,   437,     0,   438,
     439,     0,   440,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
       0,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,     0,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3141,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,     0,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2012,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2114,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   514,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   515,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   352,     0,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   516,   435,   436,   437,     0,
     438,   439,     0,   440,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,   477,
       0,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   513,     0,  2622,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3004,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     514,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   515,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,     0,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   516,   435,   436,   437,     0,   438,   439,     0,
     440,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,     0,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,  2828,
    1431,   642,     0,     0,  1992,  1013,     0,     0,     0,     0,
       0,  1993,  1994,  2623,     0,  1995,  1996,  1997,   112,   113,
     114,   115,   116,   117,   118,   119,  1201,   120,   121,   122,
    1202,  1203,  1204,  2829,  1205,  1206,  1207,  1208,  2830,   124,
     125,  1209,   126,   127,   128,  2831,   130,   131,   132,     0,
     767,  2832,   769,   770,  1210,   138,   139,   140,   141,   142,
     143,  1211,  1212,   144,   145,   771,   772,   148,  1213,   149,
     150,   151,   152,     0,  1214,  2833,  1215,  2834,   156,   157,
     158,   159,   160,  2835,   162,   163,   164,  1216,   165,   166,
     167,   168,   169,   170,  1217,  2836,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   777,   778,   184,  1218,
     185,  1219,   186,   187,   188,   189,   190,   191,  1220,   192,
     193,   194,   195,   196,  1221,  1222,   197,   198,   779,   200,
     201,  1223,   202,   203,   204,  1224,   205,   206,   207,  1225,
     208,   209,   210,   211,     0,   213,   214,   215,   216,   217,
       0,  1226,   219,  1227,   220,   221,   780,   223,  1228,   224,
    1229,   225,  2837,  1230,  2838,   228,   229,  2839,  2840,   232,
    1231,   233,  1232,     0,     0,   236,   237,  1233,   238,   239,
     240,   241,   242,   243,   244,  2841,   246,   247,   248,   249,
    1234,   250,   251,   252,   253,   254,   255,   256,  1235,   257,
    2842,     0,   260,   261,   262,   263,   264,   787,   788,  1236,
     789,  1237,   268,  2843,  2844,   271,  2845,   273,   274,   275,
     276,   277,   278,  1238,  1239,   279,  2846,   281,  2847,  1240,
     283,   284,   285,   286,   287,   288,   289,   290,  2848,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   796,  2849,   798,
     313,   314,   315,  2850,  1241,   317,   318,  2851,   320,  1242,
       0,   322,   800,   324,   325,   326,  1243,   327,   328,  1244,
    1245,  2852,   330,   331,  1246,  1247,   332,   333,     0,  2853,
     336,  2854,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,  1248,  1249,  1250,  1251,   350,   351,
       0,  2855,   354,   355,     0,   357,   358,   359,  1252,   360,
     361,   362,   363,   364,   365,  1253,   366,   367,   368,   804,
     370,   371,   372,   373,  1254,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,  1255,   387,
     388,  2856,   390,   391,   392,   806,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,  1256,
    2857,   407,   408,   409,   410,   411,   412,  2858,   414,   415,
     416,  2859,   418,   419,   810,   421,  1257,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,  2860,
     435,     0,   437,  1258,   438,   439,  1259,   440,  2861,   442,
     443,   444,   445,   446,  1260,   447,   813,   814,  1261,  1262,
     450,   451,     0,   453,     0,  1263,   455,   456,  2862,   458,
     459,   460,   461,   462,  2863,  1265,   463,   464,   465,  1266,
     466,   467,   468,   469,  1267,   470,   471,   472,   473,   474,
       0,   817,  1269,   477,  2864,   479,   480,   481,   482,   483,
    1270,  1271,   484,  1272,  1273,   485,   486,   487,   488,   489,
     490,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   502,   503,   504,   505,     0,   513,     0,  1998,
    1999,  2000,  1992,  2865,  2866,  2003,  2004,  2005,  2006,  1993,
    1994,     0,     0,  1995,  1996,  1997,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,     0,     0,     0,  1998,  1999,  2000,
       0,  2001,  2002,  2003,  2004,  2005,  2006,  1581,     0,     0,
    1582,     0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  1581,     0,     0,
    1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,  1594,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  1581,     0,     0,
    1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,  1594,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  1581,     0,     0,
    1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,  1594,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  1581,     0,     0,
    1582,  1595,  1593,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,  1596,     0,
       0,     0,     0,  1597,     0,  1590,     0,  1594,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,     0,     0,
       0,  1595,  1593,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1596,     0,
       0,  1600,     0,  1597,     0,     0,     0,  1594,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1595,     0,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,  1596,     0,
    1602,  1600,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,  1595,     0,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,  1596,     0,
    1602,  1600,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,  1595,     0,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,  1596,     0,
    1602,  1600,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,  1605,     0,     0,  1601,     0,     0,
    1602,  1600,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1605,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1605,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,     0,     0,  1605,     0,  2440,     0,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,  1582,     0,     0,
       0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,  1590,     0,  1605,     0,  2655,     0,     0,     0,
       0,     0,  1592,     0,  1581,     0,     0,  1582,     0,  1593,
       0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,  1590,     0,  1594,     0,  2707,     0,     0,     0,
       0,     0,  1592,     0,  1581,     0,     0,  1582,     0,  1593,
       0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,  1590,     0,  1594,     0,  2774,     0,     0,     0,
       0,     0,  1592,     0,  1581,     0,     0,  1582,     0,  1593,
       0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,  1590,     0,  1594,     0,  2996,     0,     0,     0,
       0,     0,  1592,     0,  1581,     0,     0,  1582,  1595,  1593,
       0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,     0,
       0,     0,     0,     0,     0,  1596,     0,     0,     0,     0,
    1597,     0,  1590,     0,  1594,     0,     0,     0,     0,     0,
       0,     0,  1592,     0,     0,     0,     0,     0,  1595,  1593,
       0,     0,     0,  1598,  1599,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1596,     0,     0,  1600,     0,
    1597,     0,     0,     0,  1594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,     0,
       0,     0,     0,  1598,  1599,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,  1596,     0,  1602,  1600,     0,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,  1595,     0,
       0,     0,     0,  1598,  1599,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,  1596,     0,  1602,  1600,     0,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,  1595,     0,
       0,     0,     0,  1598,  1599,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,  1596,     0,  1602,  1600,     0,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,  1599,     0,     0,     0,     0,     0,
       0,  1605,     0,     0,  1601,     0,     0,  1602,  1600,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1605,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1605,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,     0,
       0,  1605,     0,  3003,     0,     0,     0,     0,     0,     0,
       0,  1581,     0,     0,  1582,     0,     0,     0,  1583,  1584,
    1585,  1586,  1587,  1588,  1589,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,  1590,
       0,  1605,     0,  3160,     0,     0,     0,     0,     0,  1592,
       0,  1581,     0,     0,  1582,     0,  1593,     0,  1583,  1584,
    1585,  1586,  1587,  1588,  1589,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,  1590,
       0,  1594,     0,  3182,     0,     0,     0,     0,     0,  1592,
       0,  1581,     0,     0,  1582,     0,  1593,     0,  1583,  1584,
    1585,  1586,  1587,  1588,  1589,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,  1590,
       0,  1594,     0,  3284,     0,     0,     0,     0,     0,  1592,
       0,  1581,     0,     0,  1582,     0,  1593,     0,  1583,  1584,
    1585,  1586,  1587,  1588,  1589,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,  1590,
       0,  1594,     0,  3341,     0,     0,     0,     0,     0,  1592,
       0,     0,     0,     0,     0,  1595,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1596,     0,     0,  1581,     0,  1597,  1582,     0,
       0,  1594,  1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,
       0,     0,     0,     0,     0,  1595,     0,     0,     0,     0,
    1598,  1599,     0,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,  1596,  1592,     0,  1600,     0,  1597,     0,     0,
    1593,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1595,     0,     0,     0,     0,
    1598,  1599,     0,     0,     0,  1594,     0,     0,     0,     0,
       0,  1601,  1596,     0,  1602,  1600,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1603,     0,
       0,  1604,     0,     0,     0,  1595,     0,     0,     0,     0,
    1598,  1599,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,  1596,     0,  1602,  1600,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1603,     0,
       0,  1604,     0,     0,     0,     0,     0,     0,     0,     0,
    1598,  1599,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,  1600,     0,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,     0,     0,  1603,     0,
       0,  1604,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,  1605,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,  1599,     0,     0,  1603,     0,
       0,  1604,     0,     0,     0,     0,     0,     0,     0,  1600,
       0,     0,     0,     0,     0,     0,     0,     0,  1605,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,  1602,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1605,     0,
       0,     0,  1603,     0,     0,  1604,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,  1608,  1609,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,  1605,     0,
    3363,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,  1608,  1609,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,  1766,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1605,  1606,     0,     0,  1607,  1608,  1609,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,  2728,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,  1608,  1609,     0,
    1610,  1611,  1612,  1613,  1614,  1615,     0,     0,  3150,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1200,     0,     0,  1606,     0,     0,
    1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,
       0,     0,  3325,   112,   113,   114,   115,   116,   117,   118,
     119,  1201,   120,   121,   122,  1202,  1203,  1204,   852,  1205,
    1206,  1207,  1208,   853,   124,   125,  1209,   126,   127,   128,
     854,   130,   131,   132,   855,   856,   857,   858,   859,  1210,
     138,   139,   140,   141,   142,   143,  1211,  1212,   144,   145,
     860,   861,   148,  1213,   149,   150,   151,   152,   862,  1214,
     863,  1215,   864,   156,   157,   158,   159,   160,   865,   162,
     163,   164,  1216,   165,   166,   167,   168,   169,   170,  1217,
     866,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   867,   868,   184,  1218,   185,  1219,   186,   187,   188,
     189,   190,   191,  1220,   192,   193,   194,   195,   196,  1221,
    1222,   197,   198,   199,   200,   201,  1223,   202,   203,   204,
    1224,   205,   206,   207,  1225,   208,   209,   210,   211,   869,
     213,   214,   215,   216,   217,   870,  1226,   219,  1227,   220,
     221,   871,   223,  1228,   224,  1229,   225,   872,  1230,   873,
     228,   229,   874,   875,   232,  1231,   233,  1232,   876,   877,
     236,   237,  1233,   238,   239,   240,   241,   242,   243,   244,
     878,   246,   247,   248,   249,  1234,   250,   251,   252,   253,
     254,   255,   256,  1235,   257,   879,   880,   260,   261,   262,
     263,   264,   881,   882,  1236,   883,  1237,   268,   884,   885,
     271,   886,   273,   274,   275,   276,   277,   278,  1238,  1239,
     279,   887,   281,   888,  1240,   283,   284,   285,   286,   287,
     288,   289,   290,   889,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   890,   891,   892,   313,   314,   315,   893,  1241,
     317,   318,   894,   320,  1242,   895,   322,   896,   324,   325,
     326,  1243,   327,   328,  1244,  1245,   329,   330,   331,  1246,
    1247,   332,   333,   897,   898,   336,   899,   900,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,  1248,
    1249,  1250,  1251,   350,   351,   901,   902,   354,   355,   903,
     357,   358,   359,  1252,   360,   361,   362,   363,   364,   365,
    1253,   366,   367,   368,   904,   370,   371,   372,   373,  1254,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,  1255,   387,   388,   905,   390,   391,   392,
     906,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,  1256,   907,   407,   408,   409,   410,
     411,   412,   908,   414,   415,   416,   909,   418,   419,   910,
     421,  1257,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   911,   435,   912,   437,  1258,   438,
     439,  1259,   440,   913,   442,   443,   444,   445,   446,  1260,
     447,   914,   915,  1261,  1262,   450,   451,   916,   453,   917,
    1263,   455,   456,   918,   458,   459,   460,   461,   462,  1264,
    1265,   463,   464,   465,  1266,   466,   467,   468,   469,  1267,
     470,   471,   472,   473,   474,  1268,   920,  1269,   477,   921,
     479,   480,   481,   482,   483,  1270,  1271,   484,  1272,  1273,
     485,   486,   487,   488,   489,   490,   922,   923,   924,   925,
     926,   927,   928,   929,   930,   931,   932,   502,   503,   504,
     505,   513,     0,     0,     0,     0,     0,     0,     0,     0,
    2023,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,     0,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
       0,     0,     0,     0,     0,     0,     0,  2648,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   851,  1431,   642,     0,     0,
       0,  1013,     0,     0,  2651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,   852,
       0,     0,     0,     0,   853,   124,   125,     0,   126,   127,
     128,   854,   130,   131,   132,   855,   856,   857,   858,   859,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   860,   861,   148,     0,   149,   150,   151,   152,   862,
       0,   863,     0,   864,   156,   157,   158,   159,   160,   865,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   866,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   867,   868,   184,  1638,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     869,   213,   214,   215,   216,   217,   870,  1432,   219,     0,
     220,   221,   871,   223,     0,   224,     0,   225,   872,     0,
     873,   228,   229,   874,   875,   232,     0,   233,     0,   876,
     877,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   878,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   879,   880,   260,   261,
     262,   263,   264,   881,   882,     0,   883,     0,   268,   884,
     885,   271,   886,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   887,   281,   888,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   889,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   890,   891,   892,   313,   314,   315,   893,
       0,   317,   318,   894,   320,     0,   895,   322,   896,   324,
     325,   326,     0,   327,   328,  1433,     0,   329,   330,   331,
       0,     0,   332,   333,   897,   898,   336,   899,   900,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   901,   902,   354,   355,
     903,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   904,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   905,   390,   391,
     392,   906,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   907,   407,   408,   409,
     410,   411,   412,   908,   414,   415,   416,   909,   418,   419,
     910,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   911,   435,   912,   437,     0,
     438,   439,     0,   440,   913,   442,   443,   444,   445,   446,
       0,   447,   914,   915,     0,     0,   450,   451,   916,   453,
     917,  1434,   455,   456,   918,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,  1268,   920,     0,   477,
     921,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   922,   923,   924,
     925,   926,   927,   928,   929,   930,   931,   932,   502,   503,
     504,   505,   851,  1431,   642,     0,     0,     0,  1013,  1435,
    1436,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,   852,     0,     0,     0,
       0,   853,   124,   125,     0,   126,   127,   128,   854,   130,
     131,   132,   855,   856,   857,   858,   859,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   860,   861,
     148,     0,   149,   150,   151,   152,   862,     0,   863,     0,
     864,   156,   157,   158,   159,   160,   865,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   866,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   867,
     868,   184,  1640,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   869,   213,   214,
     215,   216,   217,   870,  1432,   219,     0,   220,   221,   871,
     223,     0,   224,     0,   225,   872,     0,   873,   228,   229,
     874,   875,   232,     0,   233,     0,   876,   877,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   878,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   879,   880,   260,   261,   262,   263,   264,
     881,   882,     0,   883,     0,   268,   884,   885,   271,   886,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   887,
     281,   888,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   889,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     890,   891,   892,   313,   314,   315,   893,     0,   317,   318,
     894,   320,     0,   895,   322,   896,   324,   325,   326,     0,
     327,   328,  1433,     0,   329,   330,   331,     0,     0,   332,
     333,   897,   898,   336,   899,   900,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   901,   902,   354,   355,   903,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   904,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   905,   390,   391,   392,   906,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   907,   407,   408,   409,   410,   411,   412,
     908,   414,   415,   416,   909,   418,   419,   910,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   911,   435,   912,   437,     0,   438,   439,     0,
     440,   913,   442,   443,   444,   445,   446,     0,   447,   914,
     915,     0,     0,   450,   451,   916,   453,   917,  1434,   455,
     456,   918,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,  1268,   920,     0,   477,   921,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   922,   923,   924,   925,   926,   927,
     928,   929,   930,   931,   932,   502,   503,   504,   505,   851,
    1431,   642,     0,     0,     0,  1013,  1435,  1436,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,   852,     0,     0,     0,     0,   853,   124,
     125,     0,   126,   127,   128,   854,   130,   131,   132,   855,
     856,   857,   858,   859,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   860,   861,   148,     0,   149,
     150,   151,   152,   862,     0,   863,     0,   864,   156,   157,
     158,   159,   160,   865,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   866,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   867,   868,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   869,   213,   214,   215,   216,   217,
     870,  1432,   219,     0,   220,   221,   871,   223,     0,   224,
       0,   225,   872,     0,   873,   228,   229,   874,   875,   232,
       0,   233,     0,   876,   877,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   878,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     879,   880,   260,   261,   262,   263,   264,   881,   882,     0,
     883,     0,   268,   884,   885,   271,   886,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   887,   281,   888,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   889,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   890,   891,   892,
     313,   314,   315,   893,     0,   317,   318,   894,   320,     0,
     895,   322,   896,   324,   325,   326,     0,   327,   328,  1433,
       0,   329,   330,   331,     0,     0,   332,   333,   897,   898,
     336,   899,   900,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     901,   902,   354,   355,   903,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   904,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,   905,   390,   391,   392,   906,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     907,   407,   408,   409,   410,   411,   412,   908,   414,   415,
     416,   909,   418,   419,   910,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   911,
     435,   912,   437,     0,   438,   439,     0,   440,   913,   442,
     443,   444,   445,   446,     0,   447,   914,   915,     0,     0,
     450,   451,   916,   453,   917,  1434,   455,   456,   918,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
    1268,   920,     0,   477,   921,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   922,   923,   924,   925,   926,   927,   928,   929,   930,
     931,   932,   502,   503,   504,   505,     0,     0,  1581,     0,
       0,  1582,     0,  1435,  1436,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,     0,     0,     0,
       0,  2120,     0,     0,     0,     0,  1592,     0,  1581,     0,
       0,  1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,     0,  1594,     0,
       0,     0,     0,     0,     0,     0,  1592,     0,  1581,     0,
       0,  1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,     0,  1594,     0,
       0,     0,  2121,     0,     0,     0,  1592,     0,  1581,     0,
       0,  1582,     0,  1593,     0,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,     0,  1594,     0,
    1879,     0,     0,     0,     0,     0,  1592,     0,     0,     0,
       0,     0,  1595,  1593,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,  1597,     0,     0,     0,  1594,     0,
       0,     0,  1915,     0,     0,     0,     0,  1916,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,  1598,  1599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,  1600,     0,  1597,     0,     0,     0,     0,     0,
       0,  3432,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,  1598,  1599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,  1596,
       0,  1602,  1600,     0,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,  1604,     0,
       0,     0,  1595,     0,     0,     0,     0,  1598,  1599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,  1596,
       0,  1602,  1600,     0,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,  1604,     0,
       0,     0,     0,     0,     0,     0,     0,  1598,  1599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,  1600,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,  1604,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1605,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,     0,  3433,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,  1604,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1581,
       0,     0,  1582,     0,     0,  1605,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1590,  2124,     0,
       0,     0,     0,     0,     0,     0,     0,  1592,     0,     0,
       0,     0,     0,     0,  1593,  1605,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1594,
    1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,
    1613,  1614,  1615,     0,     0,  1605,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,
    1613,  1614,  1615,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,     0,     0,  1582,
       0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
    1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,
    1613,  1614,  1615,  1595,  1590,     0,     0,     0,  1921,     0,
       0,     0,     0,     0,  1592,     0,     0,     0,     0,     0,
    1596,  1593,     0,     0,     0,  1597,     0,     0,     0,     0,
    1606,     0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,
    1613,  1614,  1615,     0,     0,     0,  1594,     0,  1598,  1599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1581,
       0,     0,  1582,  1600,     0,     0,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1590,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1592,     0,  1601,
       0,     0,  1602,     0,  1593,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1603,     0,     0,  1604,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1594,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,  1886,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1596,     0,     0,
       0,     0,  1597,  1581,     0,     0,  1582,     0,     0,     0,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,     0,     0,     0,
       0,     0,     0,     0,     0,  1598,  1599,     0,     0,     0,
       0,  1590,     0,     0,     0,  1928,     0,     0,     0,     0,
    1600,  1592,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,     0,     0,     0,  1605,     0,  1926,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1594,     0,     0,  1601,     0,     0,  1602,
    1596,     0,     0,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,  1604,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1598,  1599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1600,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1601,
       0,  1606,  1602,     0,  1607,  1608,  1609,  1595,  1610,  1611,
    1612,  1613,  1614,  1615,     0,     0,  1603,     0,     0,  1604,
       0,     0,     0,     0,  1596,     0,     0,  1581,     0,  1597,
    1582,     0,     0,  1605,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,  1599,     0,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  1600,     0,     0,
       0,     0,  1593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
       0,     0,     0,  1601,     0,     0,  1602,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1605,     0,     0,     0,
    1603,     0,     0,  1604,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1606,     0,
       0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,
    1615,     0,     0,     0,     0,     0,     0,  1581,     0,     0,
    1582,     0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2016,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,  1595,     0,     0,     0,  1592,     0,     0,     0,     0,
       0,     0,  1593,     0,     0,     0,     0,     0,  1596,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,     0,     0,
    1605,  1606,     0,     0,  1607,  1608,  1609,  1594,  1610,  1611,
    1612,  1613,  1614,  1615,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1581,     0,     0,
    1582,  1600,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,     0,     0,  2705,
       0,     0,     0,     0,     0,  1592,     0,  1601,     0,     0,
    1602,     0,  1593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1604,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
       0,  1595,     0,     0,     0,  1606,     0,     0,  1607,  1608,
    1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,  1596,     0,
       0,     0,  1581,  1597,     0,  1582,     0,     0,     0,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,  1599,     0,     0,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1592,  1600,     0,     0,     0,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,  1582,     0,     0,
       0,  1583,  1584,     0,  1605,  1587,  1588,  1589,     0,     0,
       0,  1595,  1594,     0,     0,     0,     0,  1601,     0,     0,
    1602,     0,  1590,     0,     0,     0,     0,     0,  1596,     0,
       0,     0,  1592,  1597,  1603,     0,     0,  1604,     0,  1593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,  1599,     0,     0,
       0,     0,     0,     0,  1594,     0,     0,     0,     0,     0,
       0,  1600,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,  1601,     0,  1606,
    1602,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,     0,  1596,  1603,     0,     0,  1604,  1597,     0,
       0,     0,     0,     0,  1605,     0,  1581,     0,     0,  1582,
       0,     0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
       0,  1598,  1599,     0,     0,     0,     0,     0,  1595,     0,
       0,     0,     0,     0,  1590,     0,  1600,  2694,     0,     0,
       0,     0,     0,     0,  1592,  1596,     0,     0,     0,     0,
    1597,  1593,     0,  1581,     0,     0,  1582,     0,     0,     0,
    1583,  1584,     0,     0,  1587,  1588,  1589,     0,     0,     0,
       0,     0,  1601,  1598,  1599,  1602,  1594,     0,     0,     0,
       0,  1590,     0,     0,     0,     0,     0,     0,  1600,  1603,
       0,  1592,  1604,     0,  1605,     0,     0,     0,  1593,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,     0,  1594,  1601,     0,     0,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,  1604,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1596,     0,  1605,
       0,     0,  1597,     0,     0,     0,     0,     0,     0,  1606,
       0,     0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,
    1614,  1615,     0,     0,     0,  1598,  1599,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1600,     0,     0,     0,  1596,     0,     0,     0,     0,  1597,
       0,  1605,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,  1599,     0,     0,  1601,     0,     0,  1602,
       0,     0,     0,     0,     0,     0,     0,  1600,     0,     0,
       0,     0,     0,  1603,     0,     0,  1604,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,  1607,  1608,  1609,
       0,  1610,  1611,  1612,  1613,  1614,  1615,     0,     0,     0,
       0,     0,     0,  1601,     0,     0,  1602,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1606,     0,     0,  1607,
    1608,  1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1605,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1606,     0,
       0,  1607,  1608,  1609,     0,  1610,  1611,  1612,  1613,  2141,
    1615,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1200,
       0,  2038,     0,     0,     0,  1606,     0,     0,  1607,  1608,
    1609,     0,  1610,  1611,  1612,  1613,  1614,  1615,   112,   113,
     114,   115,   116,   117,   118,   119,  1201,   120,   121,   122,
    1202,  1203,  1204,   852,  1205,  1206,  1207,  1208,   853,   124,
     125,  1209,   126,   127,   128,   854,   130,   131,   132,   855,
     856,   857,   858,   859,  1210,   138,   139,   140,   141,   142,
     143,  1211,  1212,   144,   145,   860,   861,   148,  1213,   149,
     150,   151,   152,   862,  1214,   863,  1215,   864,   156,   157,
     158,   159,   160,   865,   162,   163,   164,  1216,   165,   166,
     167,   168,   169,   170,  1217,   866,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   867,   868,   184,  1218,
     185,  1219,   186,   187,   188,   189,   190,   191,  1220,   192,
     193,   194,   195,   196,  1221,  1222,   197,   198,   199,   200,
     201,  1223,   202,   203,   204,  1224,   205,   206,   207,  1225,
     208,   209,   210,   211,   869,   213,   214,   215,   216,   217,
     870,  1226,   219,  1227,   220,   221,   871,   223,  1228,   224,
    1229,   225,   872,  1230,   873,   228,   229,   874,   875,   232,
    1231,   233,  1232,   876,   877,   236,   237,  1233,   238,   239,
     240,   241,   242,   243,   244,   878,   246,   247,   248,   249,
    1234,   250,   251,   252,   253,   254,   255,   256,  1235,   257,
     879,   880,   260,   261,   262,   263,   264,   881,   882,  1236,
     883,  1237,   268,   884,   885,   271,   886,   273,   274,   275,
     276,   277,   278,  1238,  1239,   279,   887,   281,   888,  1240,
     283,   284,   285,   286,   287,   288,   289,   290,   889,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   890,   891,   892,
     313,   314,   315,   893,  1241,   317,   318,   894,   320,  1242,
     895,   322,   896,   324,   325,   326,  1243,   327,   328,  1244,
    1245,   329,   330,   331,  1246,  1247,   332,   333,   897,   898,
     336,   899,   900,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,  1248,  1249,  1250,  1251,   350,   351,
     901,   902,   354,   355,   903,   357,   358,   359,  1252,   360,
     361,   362,   363,   364,   365,  1253,   366,   367,   368,   904,
     370,   371,   372,   373,  1254,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,  1255,   387,
     388,   905,   390,   391,   392,   906,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,  1256,
     907,   407,   408,   409,   410,   411,   412,   908,   414,   415,
     416,   909,   418,   419,   910,   421,  1257,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   911,
     435,   912,   437,  1258,   438,   439,  1259,   440,   913,   442,
     443,   444,   445,   446,  1260,   447,   914,   915,  1261,  1262,
     450,   451,   916,   453,   917,  1263,   455,   456,   918,   458,
     459,   460,   461,   462,  1264,  1265,   463,   464,   465,  1266,
     466,   467,   468,   469,  1267,   470,   471,   472,   473,   474,
    1268,   920,  1269,   477,   921,   479,   480,   481,   482,   483,
    1270,  1271,   484,  1272,  1273,   485,   486,   487,   488,   489,
     490,   922,   923,   924,   925,   926,   927,   928,   929,   930,
     931,   932,   502,   503,   504,   505,  1200,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,  1201,   120,   121,   122,  1202,  1203,  1204,
     852,  1205,  1206,  1207,  1208,   853,   124,   125,  1209,   126,
     127,   128,   854,   130,   131,   132,   855,   856,   857,   858,
     859,  1210,   138,   139,   140,   141,   142,   143,  1211,  1212,
     144,   145,   860,   861,   148,  1213,   149,   150,   151,   152,
     862,  1214,   863,  1215,   864,   156,   157,   158,   159,   160,
     865,   162,   163,   164,  1216,   165,   166,   167,   168,   169,
     170,  1217,   866,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   867,   868,   184,  1218,   185,  1219,   186,
     187,   188,   189,   190,   191,  1220,   192,   193,   194,   195,
     196,  1221,  1222,   197,   198,   199,   200,   201,  1223,   202,
     203,   204,  1224,   205,   206,   207,  1225,   208,   209,   210,
     211,   869,   213,   214,   215,   216,   217,   870,  1226,   219,
    1227,   220,   221,   871,   223,  1228,   224,  1229,   225,   872,
    1230,   873,   228,   229,   874,   875,   232,  1231,   233,  1232,
     876,   877,   236,   237,  1233,   238,   239,   240,   241,   242,
     243,   244,   878,   246,   247,   248,   249,  1234,   250,   251,
     252,   253,   254,   255,   256,  1235,   257,   879,   880,   260,
     261,   262,   263,   264,   881,   882,  1236,   883,  1237,   268,
     884,   885,   271,   886,   273,   274,   275,   276,   277,   278,
    1238,  1239,   279,   887,   281,   888,  1240,   283,   284,   285,
     286,   287,   288,   289,   290,   889,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   890,   891,   892,   313,   314,   315,
     893,  1241,   317,   318,   894,   320,  1242,   895,   322,   896,
     324,   325,   326,  1243,   327,   328,  1244,  1245,   329,   330,
     331,  1246,  1247,   332,   333,   897,   898,   336,   899,   900,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,  1248,  1249,  1250,  1251,   350,   351,   901,   902,   354,
     355,   903,   357,   358,   359,  1252,   360,   361,   362,   363,
     364,   365,  1253,   366,   367,   368,   904,   370,   371,   372,
     373,  1254,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,  1255,   387,   388,   905,   390,
     391,   392,   906,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,  1256,   907,   407,   408,
     409,   410,   411,   412,   908,   414,   415,   416,   909,   418,
     419,   910,   421,  1257,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   911,   435,   912,   437,
    1258,   438,   439,  1259,   440,   913,   442,   443,   444,   445,
     446,  1260,   447,   914,   915,  1261,  1262,   450,   451,   916,
     453,   917,  1263,   455,   456,   918,   458,   459,   460,   461,
     462,  1264,  1265,   463,   464,   465,  1266,   466,   467,   468,
     469,  1267,   470,   471,   472,   473,   474,  1268,   920,  1269,
     477,   921,   479,   480,   481,   482,   483,  1270,  1271,   484,
    1272,  1273,   485,   486,   487,   488,   489,   490,   922,   923,
     924,   925,   926,   927,   928,   929,   930,   931,   932,   502,
     503,   504,   505,  1200,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,  2186,   117,   118,   119,
    1201,   120,   121,   122,  1202,  1203,  1204,   852,  1205,  1206,
    1207,  1208,   853,   124,   125,  1209,   126,   127,   128,   854,
     130,   131,   132,   855,   856,   857,   858,   859,  1210,   138,
     139,   140,   141,   142,   143,  1211,  1212,   144,   145,   860,
     861,   148,  1213,   149,   150,   151,   152,   862,  1214,   863,
    1215,   864,   156,   157,   158,   159,   160,   865,   162,   163,
     164,  1216,   165,   166,   167,   168,   169,   170,  1217,   866,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     867,   868,   184,  1218,   185,  1219,   186,   187,   188,   189,
     190,   191,  1220,   192,   193,   194,   195,   196,  1221,  1222,
     197,   198,   199,  2187,   201,  1223,   202,   203,   204,  1224,
     205,   206,   207,  1225,   208,   209,   210,   211,   869,   213,
     214,   215,   216,   217,   870,  1226,   219,  1227,   220,   221,
     871,   223,  1228,   224,  1229,   225,   872,  1230,   873,   228,
     229,   874,   875,   232,  1231,   233,  1232,   876,   877,   236,
     237,  1233,   238,   239,   240,   241,   242,   243,   244,   878,
     246,   247,   248,   249,  1234,   250,   251,   252,   253,   254,
     255,   256,  1235,   257,   879,   880,   260,   261,   262,   263,
     264,   881,   882,  1236,   883,  1237,   268,   884,   885,   271,
     886,   273,   274,   275,   276,   277,   278,  1238,  1239,   279,
     887,   281,   888,  1240,   283,   284,   285,   286,   287,   288,
     289,   290,   889,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   890,   891,   892,   313,   314,   315,   893,  1241,   317,
     318,   894,   320,  1242,   895,   322,   896,   324,   325,   326,
    1243,   327,   328,  1244,  1245,   329,   330,   331,  1246,  1247,
     332,   333,   897,   898,   336,   899,   900,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,  1248,  1249,
    1250,  1251,   350,   351,   901,   902,   354,   355,   903,   357,
     358,   359,  1252,   360,   361,   362,   363,   364,   365,  1253,
     366,   367,   368,   904,   370,   371,   372,   373,  1254,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,  1255,   387,   388,   905,   390,   391,   392,   906,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,  1256,   907,   407,   408,   409,   410,   411,
    2188,   908,   414,   415,   416,   909,   418,   419,   910,   421,
    1257,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   911,   435,   912,   437,  1258,   438,   439,
    1259,   440,   913,   442,   443,   444,   445,   446,  1260,   447,
     914,   915,  1261,  1262,   450,   451,   916,   453,   917,  1263,
     455,   456,   918,   458,   459,   460,   461,   462,  1264,  1265,
     463,   464,   465,  1266,   466,   467,   468,   469,  1267,   470,
     471,   472,   473,   474,  1268,   920,  1269,   477,   921,   479,
     480,   481,   482,   483,  1270,  1271,   484,  1272,  1273,   485,
     486,   487,   488,   489,   490,   922,   923,   924,   925,   926,
     927,   928,   929,   930,   931,   932,   502,   503,   504,   505,
     851,     0,   642,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,   852,     0,     0,     0,     0,   853,
     124,   125,     0,   126,   127,   128,   854,   130,   131,   132,
     855,   856,   857,   858,   859,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   860,   861,   148,     0,
     149,   150,   151,   152,   862,     0,   863,     0,   864,   156,
     157,   158,   159,   160,   865,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   866,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   867,   868,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   869,   213,   214,   215,   216,
     217,   870,  1432,   219,     0,   220,   221,   871,   223,     0,
     224,     0,   225,   872,     0,   873,   228,   229,   874,   875,
     232,     0,   233,     0,   876,   877,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   878,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   879,   880,   260,   261,   262,   263,   264,   881,   882,
       0,   883,     0,   268,   884,   885,   271,   886,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   887,   281,   888,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   889,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   890,   891,
     892,   313,   314,   315,   893,     0,   317,   318,   894,   320,
       0,   895,   322,   896,   324,   325,   326,     0,   327,   328,
    1433,     0,   329,   330,   331,     0,     0,   332,   333,   897,
     898,   336,   899,   900,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   901,   902,   354,   355,   903,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     904,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,   905,   390,   391,   392,   906,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   907,   407,   408,   409,   410,   411,   412,   908,   414,
     415,   416,   909,   418,   419,   910,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     911,   435,   912,   437,     0,   438,   439,     0,   440,   913,
     442,   443,   444,   445,   446,     0,   447,   914,   915,     0,
       0,   450,   451,   916,   453,   917,  1434,   455,   456,   918,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,  1268,   920,     0,   477,   921,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   922,   923,   924,   925,   926,   927,   928,   929,
     930,   931,   932,   502,   503,   504,   505,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     3,     4,
       0,   852,     0,     0,     0,     0,   853,   124,   125,     0,
     126,   127,   128,   854,   130,   131,   132,   855,   856,   857,
     858,   859,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   860,   861,   148,     0,   149,   150,   151,
     152,   862,     0,   863,     0,   864,   156,   157,   158,   159,
     160,   865,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   866,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   867,   868,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   869,   213,   214,   215,   216,   217,   870,     0,
     219,     0,   220,   221,   871,   223,     0,   224,     0,   225,
     872,     0,   873,   228,   229,   874,   875,   232,     0,   233,
       0,   876,   877,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   878,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   879,   880,
     260,   261,   262,   263,   264,   881,   882,     0,   883,     0,
     268,   884,   885,   271,   886,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   887,   281,   888,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   889,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   890,   891,   892,   313,   314,
     315,   893,     0,   317,   318,   894,   320,     0,   895,   322,
     896,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   897,   898,   336,   899,
     900,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   901,   902,
     354,   355,   903,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   904,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   905,
     390,   391,   392,   906,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   907,   407,
     408,   409,   410,   411,   412,   908,   414,   415,   416,   909,
     418,   419,   910,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   911,   435,   912,
     437,     0,   438,   439,     0,   440,   913,   442,   443,   444,
     445,   446,     0,   447,   914,   915,     0,     0,   450,   451,
     916,   453,   917,     0,   455,   456,   918,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,  1268,   920,
       0,   477,   921,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   922,
     923,   924,   925,   926,   927,   928,   929,   930,   931,   932,
     502,   503,   504,   505,   111,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,   612,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   613,     0,
     614,     0,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   615,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   617,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   619,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   620,   353,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   622,   437,     0,   438,
     439,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,   448,   449,     0,     0,   450,   451,   623,   453,   624,
       0,   455,   456,   625,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   111,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,   125,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,   154,     0,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,   438,   439,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,   478,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,  1711,   149,   150,
     151,   152,   153,     0,     0,  1712,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,  1713,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,  1714,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,  1715,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,  1716,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,  1717,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,  1711,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,  1713,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,  1714,   225,     0,     0,
       0,   228,   229,   514,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,  2261,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   515,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   352,     0,   354,   355,
     356,   357,   358,   359,  1716,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   516,   435,   436,   437,     0,
     438,   439,     0,   440,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,   462,
       0,  1717,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,   477,
       0,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   513,     0,   537,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     3,     4,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     514,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   515,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,     0,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   516,   435,   436,   437,     0,   438,   439,     0,
     440,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,     0,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   513,
       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,   538,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   514,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   515,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     352,     0,   354,   355,   356,   539,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   516,
     435,   436,   437,     0,   438,   439,     0,   440,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,   476,     0,   477,     0,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   513,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   514,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   515,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   618,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   352,     0,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   516,   435,   436,   437,
       0,   438,   439,     0,   440,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,     0,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   513,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   722,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   618,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,   751,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   513,  1932,     0,
       0,     0,     0,  1933,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   513,     0,   537,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   514,     0,  1940,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,  1941,   286,   287,
     288,   289,   290,   515,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   352,     0,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   516,   435,   436,   437,     0,   438,
     439,  1942,   440,     0,   442,  1943,   444,  1944,   446,     0,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
       0,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,  1945,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,     0,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   513,     0,   537,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,     0,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
     642,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   649,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   514,     0,   650,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   651,   286,
     287,   288,   289,   290,   515,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   352,     0,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   652,   412,   413,   414,   415,   416,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   516,   435,   436,   437,     0,
     438,   439,     0,   440,     0,   442,   443,   444,   445,   446,
       0,   447,   653,   449,     0,     0,   654,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,   477,
       0,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   513,     0,   537,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     514,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   515,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,     0,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   369,   370,   371,   686,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   516,   435,   436,   437,     0,   438,   439,     0,
     440,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,     0,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   513,
       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   514,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   717,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   515,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     352,     0,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   516,
     435,   436,   437,     0,   438,   439,     0,   440,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,   476,     0,   477,     0,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   513,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   514,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     720,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   515,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   352,     0,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   516,   435,   436,   437,
       0,   438,   439,     0,   440,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,     0,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   513,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   724,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   739,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   513,     0,   537,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   841,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   513,     0,   537,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   514,     0,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   844,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   515,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   352,     0,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   516,   435,   436,   437,     0,   438,
     439,     0,   440,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
       0,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,     0,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,   967,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,     0,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,   990,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   649,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   514,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   515,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   352,     0,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   516,   435,   436,   437,     0,
     438,   439,     0,   440,     0,   442,   443,   444,   445,   446,
       0,   447,   653,   449,     0,     0,   654,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,   477,
       0,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   513,     0,   537,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     514,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,  1334,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   515,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,     0,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   516,   435,   436,   437,     0,   438,   439,     0,
     440,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,     0,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   513,
       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   514,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,  1336,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   515,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     352,     0,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   516,
     435,   436,   437,     0,   438,   439,     0,   440,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,   476,     0,   477,     0,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   513,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   514,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
    1339,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   515,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   352,     0,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   516,   435,   436,   437,
       0,   438,   439,     0,   440,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,     0,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   513,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,  1341,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,  2182,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   763,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,   764,     0,     0,  -784,     0,   765,   124,   125,     0,
     126,   127,   128,   766,   130,   131,   132,     0,   767,   768,
     769,   770,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   771,   772,   148,     0,   149,   150,   151,
     152,     0,     0,   773,     0,   774,   156,   157,   158,   159,
     160,   775,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   776,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   777,   778,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,     0,   213,   214,   215,   216,   217,     0,     0,
     219,     0,   220,   221,   780,   223,     0,   224,     0,   225,
     781,     0,   782,   228,   229,  -784,   783,   232,     0,   233,
       0,     0,     0,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   785,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   786,     0,
     260,   261,   262,   263,   264,   787,   788,     0,   789,     0,
     268,   790,   791,   271,   792,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   793,   281,   794,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   795,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   796,   797,   798,   313,   314,
     315,     0,     0,   317,   318,   799,   320,     0,     0,   322,
     800,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,     0,   801,   336,   802,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,     0,   803,
     354,   355,     0,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   804,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   805,
     390,   391,   392,   806,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   807,   407,
     408,   409,   410,   411,   412,   808,   414,   415,   416,   809,
     418,   419,   810,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   811,   435,     0,
     437,     0,   438,   439,     0,   440,   812,   442,   443,   444,
     445,   446,     0,   447,   813,   814,     0,     0,   450,   451,
       0,   453,     0,     0,   455,   456,   815,   458,   459,   460,
     461,   462,   816,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,     0,   817,
       0,   477,   818,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   513,
       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
     502,   503,   504,   505,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   514,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,  2903,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   515,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
     352,     0,   354,   355,   356,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   516,
     435,   436,   437,     0,   438,   439,     0,   440,     0,   442,
     443,   444,   445,   446,     0,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
     475,   476,     0,   477,     0,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   513,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   514,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   515,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,     0,     0,     0,     0,   350,   351,   352,     0,   354,
     355,   356,   357,   358,   359,     0,   360,   361,   362,   363,
     364,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   516,   435,   436,   437,
       0,   438,   439,     0,   440,     0,   442,   443,   444,   445,
     446,     0,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,     0,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
     477,     0,   479,   480,   481,   482,   483,     0,     0,   484,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   513,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   514,     0,   664,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   665,   286,   287,   288,
     289,   290,   515,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,   352,     0,   354,   355,   356,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   666,   399,   400,   401,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,   667,
     412,   413,   414,   415,   416,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   516,   435,   436,   437,     0,   438,   439,
       0,   440,     0,   442,   443,   444,   445,   446,     0,   447,
     668,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,   477,     0,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   514,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   837,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   515,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,     0,     0,     0,     0,   350,
     351,   352,     0,   354,   355,   356,   357,   358,   359,     0,
     360,   361,   362,   363,   364,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     516,   435,   436,   437,     0,   438,   439,     0,   440,     0,
     442,   443,   444,   445,   446,     0,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
       0,   466,   467,   468,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,   477,     0,   479,   480,   481,   482,
     483,     0,     0,   484,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   666,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   668,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   514,     0,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,  1343,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   515,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,   352,     0,   354,   355,   356,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   516,   435,   436,   437,     0,   438,
     439,     0,   440,     0,   442,   443,   444,   445,   446,     0,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
       0,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,   475,   476,     0,   477,     0,
     479,   480,   481,   482,   483,     0,     0,   484,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,  1643,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   514,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     515,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,   352,     0,   354,   355,   356,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   516,   435,   436,   437,     0,   438,   439,     0,   440,
       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,   475,   476,     0,   477,     0,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   513,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   514,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,  1813,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   515,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,     0,     0,     0,     0,   350,   351,   352,
       0,   354,   355,   356,   357,   358,   359,     0,   360,   361,
     362,   363,   364,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   516,   435,
     436,   437,     0,   438,   439,     0,   440,     0,   442,   443,
     444,   445,   446,     0,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,     0,   466,
     467,   468,   469,     0,   470,   471,   472,   473,   474,   475,
     476,     0,   477,     0,   479,   480,   481,   482,   483,     0,
       0,   484,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   514,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,  2169,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   515,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,   352,     0,   354,   355,
     356,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   516,   435,   436,   437,     0,
     438,   439,     0,   440,     0,   442,   443,   444,   445,   446,
       0,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,   477,
       0,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   513,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     514,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,  2184,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   515,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,     0,     0,     0,
       0,   350,   351,   352,     0,   354,   355,   356,   357,   358,
     359,     0,   360,   361,   362,   363,   364,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   516,   435,   436,   437,     0,   438,   439,     0,
     440,     0,   442,   443,   444,   445,   446,     0,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,     0,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,   477,     0,   479,   480,
     481,   482,   483,     0,     0,   484,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   763,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,   764,     0,     0,     0,     0,   765,   124,
     125,     0,   126,   127,   128,   766,   130,   131,   132,     0,
     767,   768,   769,   770,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   771,   772,   148,     0,   149,
     150,   151,   152,     0,     0,   773,     0,   774,   156,   157,
     158,   159,   160,   775,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   776,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   777,   778,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,     0,   213,   214,   215,   216,   217,
       0,     0,   219,     0,   220,   221,   780,   223,     0,   224,
       0,   225,   781,     0,   782,   228,   229,     0,   783,   232,
       0,   233,     0,     0,     0,   236,   237,     0,   238,   239,
     240,   241,   242,   784,   244,   785,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     786,     0,   260,   261,   262,   263,   264,   787,   788,     0,
     789,     0,   268,   790,   791,   271,   792,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   793,   281,   794,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   795,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   796,   797,   798,
     313,   314,   315,     0,     0,   317,   318,   799,   320,     0,
       0,   322,   800,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,     0,   801,
     336,   802,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,     0,     0,     0,     0,   350,   351,
       0,   803,   354,   355,     0,   357,   358,   359,     0,   360,
     361,   362,   363,   364,   365,     0,   366,   367,   368,   804,
     370,   371,   372,   373,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,   805,   390,   391,   392,   806,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     807,   407,   408,   409,   410,   411,   412,   808,   414,   415,
     416,   809,   418,   419,   810,   421,     0,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   811,
     435,     0,   437,     0,   438,   439,     0,   440,   812,   442,
     443,   444,   445,   446,     0,   447,   813,   814,     0,     0,
     450,   451,     0,   453,     0,     0,   455,   456,   815,   458,
     459,   460,   461,   462,   816,     0,   463,   464,   465,     0,
     466,   467,   468,   469,     0,   470,   471,   472,   473,   474,
       0,   817,     0,   477,   818,   479,   480,   481,   482,   483,
       0,     0,   484,     0,     0,   485,   486,   487,   488,   489,
     490,   763,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   502,   503,   504,   505,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,   764,     0,     0,     0,     0,
     765,   124,   125,     0,   126,   127,   128,   766,   130,   131,
     132,     0,   767,   768,   769,   770,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   771,   772,   148,
       0,   149,   150,   151,   152,     0,     0,   773,     0,   774,
     156,   157,   158,   159,   160,   775,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   776,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   777,   778,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,     0,   213,   214,   215,
     216,   217,     0,     0,   219,     0,   220,   221,   780,   223,
       0,   224,     0,   225,   781,     0,   782,   228,   229,     0,
     783,   232,     0,   233,     0,     0,     0,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   785,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   786,     0,   260,   261,   262,   263,   264,   787,
     788,     0,   789,     0,   268,   790,   791,   271,   792,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   793,   281,
     794,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     795,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   796,
     797,   798,   313,   314,   315,     0,     0,   317,   318,   799,
     320,     0,     0,   322,   800,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
       0,   801,   336,   802,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,     0,     0,     0,     0,
     350,   351,     0,   803,   354,   355,     0,   357,   358,   359,
       0,   360,   361,   362,   363,   364,   365,     0,   366,   367,
     368,   804,   370,   371,   372,   373,     0,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,   805,   390,   391,   392,   806,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   807,   407,   408,   409,   410,   411,   412,   808,
     414,   415,   416,   809,   418,   419,   810,   421,     0,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   811,   435,     0,   437,     0,   438,   439,     0,   440,
     812,   442,   443,   444,   445,   446,     0,   447,   813,   814,
       0,     0,   450,   451,     0,   453,     0,     0,   455,   456,
     815,   458,   459,   460,   461,   462,   816,     0,   463,   464,
     465,     0,   466,   467,   468,   469,     0,   470,   471,   472,
     473,   474,     0,   817,     0,   477,   818,   479,   480,   481,
     482,   483,     0,     0,   484,     0,     0,   485,   486,   487,
     488,   489,   490,   763,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   502,   503,   504,   505,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,   764,     0,     0,
       0,     0,   765,   124,   125,     0,   126,   127,   128,   766,
     130,   131,   132,     0,   767,   768,   769,   770,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   771,
     772,   148,     0,   149,   150,   151,   152,     0,     0,   773,
       0,   774,   156,   157,   158,   159,   160,   775,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   776,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     777,   778,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
    1796,   206,   207,     0,   208,   209,   210,   211,     0,   213,
     214,   215,   216,   217,     0,     0,   219,     0,   220,   221,
     780,   223,     0,   224,     0,   225,   781,     0,   782,   228,
     229,     0,   783,   232,     0,   233,     0,     0,     0,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   785,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   786,     0,   260,   261,   262,   263,
     264,   787,   788,     0,   789,     0,   268,   790,   791,   271,
     792,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     793,   281,   794,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   795,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   796,   797,   798,   313,   314,   315,     0,     0,   317,
     318,   799,   320,     0,     0,   322,   800,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   801,   336,   802,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,     0,     0,
       0,     0,   350,   351,     0,   803,   354,   355,     0,   357,
     358,   359,     0,   360,   361,   362,   363,   364,   365,     0,
     366,   367,   368,   804,   370,   371,   372,   373,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   805,   390,   391,   392,   806,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   807,   407,   408,   409,   410,   411,
     412,   808,   414,   415,   416,   809,   418,   419,   810,   421,
       0,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   811,   435,     0,   437,     0,   438,   439,
       0,   440,   812,   442,   443,   444,   445,   446,     0,   447,
     813,   814,     0,     0,   450,   451,     0,   453,     0,     0,
     455,   456,   815,   458,   459,   460,   461,   462,   816,     0,
     463,   464,   465,     0,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,     0,   817,     0,   477,   818,   479,
     480,   481,   482,   483,     0,     0,   484,     0,     0,   485,
     486,   487,   488,   489,   490,  2828,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   502,   503,   504,   505,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,  2829,
       0,     0,     0,     0,  2830,   124,   125,     0,   126,   127,
     128,  2831,   130,   131,   132,     0,   767,  2832,   769,   770,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   771,   772,   148,     0,   149,   150,   151,   152,     0,
       0,  2833,     0,  2834,   156,   157,   158,   159,   160,  2835,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,  2836,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   777,   778,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
       0,   213,   214,   215,   216,   217,     0,     0,   219,     0,
     220,   221,   780,   223,     0,   224,     0,   225,  2837,     0,
    2838,   228,   229,  2839,  2840,   232,     0,   233,     0,     0,
       0,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,  2841,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,  2842,     0,   260,   261,
     262,   263,   264,   787,   788,     0,   789,     0,   268,  2843,
    2844,   271,  2845,   273,   274,   275,   276,   277,   278,     0,
       0,   279,  2846,   281,  2847,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  3072,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   796,  2849,   798,   313,   314,   315,     0,
       0,   317,   318,  2851,   320,     0,     0,   322,   800,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,  2853,   336,  2854,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
       0,     0,     0,     0,   350,   351,     0,  2855,   354,   355,
       0,   357,   358,   359,     0,   360,   361,   362,   363,   364,
     365,     0,   366,   367,   368,   804,   370,   371,   372,   373,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,  2856,   390,   391,
     392,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,  2857,   407,   408,   409,
     410,   411,   412,     0,   414,   415,   416,  2859,   418,   419,
     810,   421,     0,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,  3073,   435,     0,   437,     0,
     438,   439,     0,   440,  2861,   442,   443,   444,   445,   446,
       0,   447,   813,   814,     0,     0,   450,   451,     0,   453,
       0,     0,   455,   456,  2862,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,     0,   466,   467,   468,   469,
       0,   470,   471,   472,   473,   474,     0,   817,     0,   477,
    2864,   479,   480,   481,   482,   483,     0,     0,   484,     0,
       0,   485,   486,   487,   488,   489,   490,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   502,   503,
     504,   505,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   514,     0,   232,     0,   233,
       0,   234,   235,     0,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   515,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,     0,   346,   347,
     348,   349,     0,     0,     0,     0,   350,   351,   352,     0,
     354,   355,   356,   357,   358,   359,     0,   360,   361,   362,
     363,   364,   365,     0,   366,     0,   368,   369,   370,   371,
     372,   373,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     390,   391,   392,   393,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   516,   435,   436,
     437,     0,   438,   439,     0,   440,     0,   442,   443,   444,
     445,   446,     0,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,     0,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,   477,     0,   479,   480,   481,   482,   483,     0,     0,
     484,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   763,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,   764,     0,
       0,     0,     0,   765,   124,   125,     0,   126,   127,   128,
     766,   130,   131,   132,     0,   767,   768,   769,   770,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     771,   772,   148,     0,   149,   150,   151,   152,     0,     0,
     773,     0,   774,   156,   157,   158,   159,   160,   775,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     776,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   777,   778,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,     0,
     213,   214,   215,   216,   217,     0,     0,   219,     0,   220,
     221,   780,   223,     0,   224,     0,   225,   781,     0,   782,
     228,   229,     0,   783,   232,     0,   233,     0,     0,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     785,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   786,     0,   260,   261,   262,
     263,   264,   787,   788,     0,   789,     0,   268,   790,   791,
     271,   792,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   793,   281,   794,     0,   283,   284,   285,   286,   287,
     288,   289,   290,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   796,   797,   798,   313,   314,   315,     0,     0,
     317,   318,   799,   320,     0,     0,   322,   800,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   801,   336,   802,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,     0,
       0,     0,     0,   350,   351,     0,   803,   354,   355,     0,
     357,   358,   359,     0,   360,   361,   362,   363,   364,   365,
       0,   366,   367,   368,   804,   370,   371,   372,   373,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   805,   390,   391,   392,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   807,   407,   408,   409,   410,
     411,   412,     0,   414,   415,   416,   809,   418,   419,   810,
     421,     0,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,     0,   435,     0,   437,     0,   438,
     439,     0,   440,   812,   442,   443,   444,   445,   446,     0,
     447,   813,   814,     0,     0,   450,   451,     0,   453,     0,
       0,   455,   456,   815,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,     0,   466,   467,   468,   469,     0,
     470,   471,   472,   473,   474,     0,   817,     0,   477,   818,
     479,   480,   481,   482,   483,     0,     1,   484,     0,     0,
     485,   486,   487,   488,   489,   490,     2,     0,     3,     4,
       0,     0,     0,     1,     0,     0,     0,   502,   503,   504,
     505,     0,     0,     2,     0,     0,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,     0,     0,     6,     0,     0,     0,     8,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     9,     0,
       0,     0,     0,     0,     8,     0,     0,     0,     0,     0,
      10,     0,   573,     0,     0,     9,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,     0,    10,     0,   573,
       0,     0,     0,     0,     0,     0,     0,    13,     0,     0,
      12,     0,     0,     0,     0,     0,     0,   574,     0,     0,
       0,     0,     0,    16,    13,     0,     0,     0,     0,     0,
       0,    17,     0,     0,   574,     0,     0,     0,     0,     0,
      16,     0,     0,     0,     0,     0,     0,    20,    17,     0,
       0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    20,     0,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    25,    26,    27,     0,     0,     0,     0,     0,
      28,     0,     0,    29,     0,     0,     0,     0,     0,    25,
      26,    27,     0,     0,     0,     0,     0,    28,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,    32,    31,     0,
       0,     0,     0,     0,    33,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    32,     0,     0,     0,    35,     0,
       0,    33,     0,     0,     0,    34,     0,     0,     0,     0,
      36,     0,     0,     0,    37,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,    37,     0,     0,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    39,     0,     0,
       0,    38,     0,    41,     0,     0,     0,     0,    42,     0,
       0,     0,   575,     0,    39,     0,     0,     0,     0,     0,
      41,     0,    43,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     576,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,    45,   568,   506,   662,   636,   721,     0,  1185,     7,
     729,   566,     0,   685,    21,    84,     0,   808,   957,     0,
     566,  1197,     0,    21,     0,  1184,  1120,   738,  1551,  1480,
    1665,   939,   733,     0,   999,  2125,   576,  1159,    21,    86,
      87,  1366,   839,  1526,    18,   842,     0,     0,   814,  1161,
     846,   948,     0,  1625,    88,  2094,  1767,  2096,    21,    88,
      36,  1314,   939,  1164,   709,    18,  2180,   721,    37,   723,
    2115,   725,   948,   632,  1125,   948,   575,  1189,   637,    86,
      87,  2227,  2228,  2229,  2556,   948,  1371,   576,    86,    87,
     569,  1087,  2060,  1578,  1579,  2590,  1092,  2556,  2176,  2588,
       0,     0,     0,    86,    87,  1415,     0,    44,     0,     0,
       0,     0,     0,     0,  1053,     0,  2114,     0,     0,     0,
      33,     0,    98,    86,    87,  1055,   629,     0,     0,     0,
       0,     0,  2611,     0,  2431,  2240,  1629,   106,  2604,   771,
     772,     5,     0,   594,     7,  1782,    24,     9,     9,    13,
      14,  2512,     5,   704,     4,  2516,     9,     5,    21,     9,
       0,  1685,    78,  1950,  1683,  2251,   798,     5,    63,   699,
       5,     5,     5,     5,   677,     9,  1963,  1785,     5,     5,
    2258,    13,    14,     5,   704,     5,     5,    13,    14,     5,
       5,    13,    14,    13,    14,     5,     5,     5,     5,     5,
    1788,     5,     5,     5,     5,  2912,   168,  1917,    55,    45,
     167,  2247,   167,   115,    45,    72,   135,    30,   186,    13,
      14,  1098,    63,    86,    87,    38,  2592,  2405,     3,     4,
       5,    30,    13,    14,     9,    63,   176,    11,    11,    38,
      98,    26,    16,    16,     4,    63,    30,   966,   240,     9,
     167,  2757,   955,   105,    38,    80,  2334,  2335,    98,  2337,
    3076,    30,   808,   778,   283,   198,    91,   118,  2803,    80,
       0,     3,    46,    53,   946,   120,   240,   289,   281,  1045,
      91,   102,   284,  2875,  2738,   800,  2740,  1359,    18,   143,
      11,    21,   269,   306,    15,    16,  1173,    64,   306,  1176,
    1177,   373,    34,    35,    78,    72,    36,   164,   188,   289,
    3270,  2898,  2526,   104,    83,    45,  1281,   359,   949,   105,
     179,   836,   118,    92,    41,  1290,  3204,   115,  2915,  2475,
     424,  2474,   259,  2476,  3404,   113,  3237,   133,   113,   168,
     297,   409,    30,  1887,   116,   114,  3313,   360,   133,  2388,
      33,   308,   309,   310,   495,   176,    86,    87,    88,   213,
     495,   118,  3007,    73,  3009,   506,   161,   400,    98,   414,
     159,   416,  2083,   508,  1918,  3445,    59,   471,   128,   447,
    1052,  1172,   468,   106,  1103,    40,  2858,   314,  1020,  1021,
     188,   950,   172,    11,    13,    14,   566,    15,    16,   939,
     364,  1495,  3362,   962,  1036,   122,   492,   350,    40,   189,
    2500,  2525,  2907,  2627,   194,   106,   373,   186,   190,   115,
    2909,  3299,    11,  2918,  3302,   283,    15,    16,    46,   462,
     199,   364,  1526,  3400,   166,   289,   168,   380,   510,   214,
     128,   940,   375,   283,  2522,   266,  2524,  1943,  1944,  1945,
     442,   208,   232,   410,  1000,   246,   351,    46,   998,  2427,
      78,   236,  3363,   254,   506,   322,   346,   422,   445,   236,
      11,  1543,   331,   302,    15,    16,   265,   410,   442,   106,
     266,  1153,  3074,  3128,  1967,   273,   443,   506,   501,    78,
    2944,  1149,  1150,   501,   352,   273,  3203,   454,   510,   209,
    3035,   360,   287,   506,   506,   422,   202,  2685,   448,  1024,
     351,   468,   352,  3100,   506,  3021,   171,  1447,  1771,  3054,
    3398,  3337,   317,   351,  1039,   321,  2669,   460,   278,    88,
     510,  2617,   576,   351,   113,   492,  1846,  2060,   506,   171,
     495,   448,   506,   162,   506,   464,   522,    30,   450,   506,
     245,   349,  1098,   508,   106,  1058,  2922,   386,   410,   566,
    1100,  1101,    63,   348,  2600,   350,   125,   971,  2646,   576,
     266,   407,   268,   268,   506,    80,   407,   390,   397,   398,
     627,   976,   439,   627,   438,   989,    91,   982,   504,   993,
    1712,   390,   508,  3300,   445,   380,  1126,   422,   419,   506,
    1151,  2124,   576,   448,  3076,   385,   390,   186,  2132,   616,
     468,   422,  2131,  2098,  2401,   510,  2253,  3076,   616,   272,
     627,  3087,   575,  1800,   457,  2118,  1172,   396,   468,   627,
     399,  1151,   470,   616,  2344,   470,   497,   498,   808,  1340,
     709,   675,   506,   505,   627,   128,   675,   497,   498,   507,
     514,   509,  2260,   506,   492,   662,   663,   492,   506,   506,
    2774,  1591,  1627,  1114,   627,  3026,   514,   507,   506,   509,
    3031,   506,   506,   506,   506,  1320,  2781,   504,   685,   506,
     506,   508,   510,  2980,   506,  1861,   506,  1359,   445,   268,
     506,   506,   510,  2281,   144,   157,   506,   506,   506,   506,
     506,   694,   506,   506,   506,   506,   694,  3202,   468,   683,
     694,   680,   506,   694,  3301,   157,   694,  1428,   694,  1972,
     727,   728,   497,   498,   731,   506,   458,   694,   502,   502,
     699,  3210,   492,   611,   387,  1367,  1368,   497,   498,   382,
     694,   694,   301,  3209,     0,   195,   694,  2893,  2808,   686,
     470,   664,   665,   616,   667,     8,  2816,  2755,    11,  3163,
     410,  3165,    15,    16,   627,   266,    19,    20,    21,  1472,
    1473,   233,   492,   116,  2084,  1478,     8,  1332,   499,   500,
     501,   502,   448,    15,    16,   159,  1332,    19,    20,    21,
     509,   233,   522,  2761,   694,   694,   694,  1727,   458,  1729,
     694,   808,   694,   694,   694,   694,   694,   694,  3297,   694,
    1365,   694,   694,   694,  1486,   694,  3311,   169,  2896,  1365,
    1366,   694,   694,   694,   694,   694,  1381,   694,    26,   169,
    1000,   510,    11,    11,    32,  1381,  1930,  3241,   280,   846,
     506,   145,  1500,     5,  1809,   575,   576,   190,  1414,   128,
     351,  1417,   226,  1572,  1573,  1574,   415,  1423,  1516,  2570,
     414,  2572,   416,   506,  1741,  3337,  3355,    46,  3263,  3264,
    1542,  1543,   507,  1967,  1751,   510,    80,  1754,  3337,   380,
    1552,   499,   500,   501,   502,   470,   616,    91,   346,   241,
    1430,   505,   196,  2389,  2390,  2391,  2392,   627,    37,    78,
      78,   241,   516,  1575,  2427,   505,   371,   492,   497,   498,
     499,   500,   501,   502,     4,  2366,   516,   371,  2012,     9,
    3315,   506,   128,  3037,  1869,   468,   973,   470,  1873,  3424,
    1429,  1876,   939,   980,  1493,   133,   222,   336,   945,   946,
    1419,  1430,  1938,  1840,   951,   675,   506,   954,   955,   155,
     957,   958,   959,   960,  1862,  2440,   497,   498,   499,   500,
     501,   502,   240,   198,   694,  1841,   973,   501,  1841,  1842,
    1843,  1474,  3017,   980,   508,   973,   375,  2230,  1841,  1842,
     266,   336,   980,   507,   336,  1862,   510,   940,   501,   268,
     973,   998,   999,  1000,   128,   508,   336,   980,     4,   278,
      13,    14,  1172,     9,    23,    24,  2291,    69,    70,  1053,
     973,   410,  1019,  2298,     4,  2300,   240,   980,  2729,     9,
     375,   155,  1737,   375,   240,  1822,  2203,  1582,  1594,   168,
    1037,   240,   285,  2556,   268,   375,  1582,   240,   504,   273,
     506,  1048,  1049,  1050,   470,  1052,  1053,  1844,  1055,  2100,
     173,  1848,  2103,   285,  1851,   410,  1710,  1853,   410,   187,
    2154,   460,   268,     4,  3178,   204,   492,   273,     9,   505,
     410,    26,   278,   414,   510,   416,  1083,    32,    26,  1790,
     506,   220,   507,  1737,    32,   510,   364,   247,   504,   287,
     109,   230,   508,  1100,  1101,     3,   330,   383,  1132,  1133,
    2212,  1135,  1756,  1132,  1133,   460,  1135,  1761,   460,  3255,
     973,   427,   173,   236,   504,   184,   185,   980,   508,   507,
     460,    37,   510,  1768,  1769,  1770,   222,  1134,  2453,   504,
      26,  1138,  1139,   508,   410,   507,    32,   198,   510,   273,
     364,  1148,  1149,  1150,   278,   368,  1153,  1819,   364,   157,
     348,  2090,   460,   157,   162,   364,   506,  1126,   162,   445,
     506,   364,  1332,  1718,   442,  1172,   664,   665,  2269,   667,
     266,    72,  1718,    26,  2275,   236,    13,    14,   133,    32,
    2663,  1747,   380,   252,   253,   133,  1752,    13,    14,  1892,
    1893,  1894,  1895,  1896,  1897,  1365,  1366,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1907,  1908,  1909,   650,   651,   652,
     940,  1381,   113,   252,   253,   506,   355,   981,   442,  1188,
     504,   985,   506,   429,   508,   233,   442,   288,   506,   233,
     414,   162,   416,   442,   440,   374,   332,   133,  2761,   442,
     493,   494,   495,   973,   497,   498,   499,   500,   501,   502,
     980,   506,   168,   451,  1926,   506,  2186,  2187,  2188,    13,
      14,   493,   494,   495,   506,   497,   498,   499,   500,   501,
     502,  2186,   280,  2188,  1281,   506,   280,  1832,   507,   167,
     133,   510,   506,  1290,   506,  1015,  1832,   383,   204,   507,
     506,   414,   510,   416,   506,   429,  1026,   506,    13,    14,
     369,   370,  3416,   506,   220,   507,   440,  1314,   510,  2403,
     506,  3401,  2406,  3403,   230,   507,   506,     6,   510,   442,
       9,   492,  1862,  1053,  1879,  1332,   507,    16,  3367,   510,
     369,   370,   287,  1879,   499,  2660,  1891,   143,  1331,   287,
    2043,  2044,    31,  1331,  3383,  1891,    35,  1331,   167,   445,
    1331,   157,  1359,   414,  3444,   416,   162,   507,  1365,  1366,
     510,  1485,  2539,  1487,  1488,   507,  1921,   268,   510,  2522,
     506,  2524,   273,  1928,  1381,  1921,  2048,   507,   439,  2538,
     510,   442,  1928,   701,   489,   703,  2183,   507,  2185,   344,
     510,   287,  2717,   348,   507,   219,   344,   510,  2328,  3438,
     348,  2523,  1132,  1133,  3443,  1135,   508,   213,  1415,  1964,
      13,    14,  1582,  1968,  2322,    13,    14,   283,  1964,  1974,
     508,   322,  1968,  1430,  2583,   380,   507,   233,  1974,   510,
    1970,   489,   380,   166,   287,   510,  2537,   338,  2539,   355,
    1447,   507,    13,    14,   510,  3156,  1453,  3158,   344,   506,
    2095,   507,   348,   507,   510,   507,  1430,   507,   374,  1506,
     510,   507,  1509,   167,   510,  1472,  1473,  1514,   288,   507,
    1517,  1478,   510,  1480,   280,  1522,  1429,    59,  1485,  1486,
    1487,  1488,  1480,   289,   380,   507,   507,    59,   510,   510,
     506,   344,  2431,  1500,  1501,   348,   451,  1480,    40,  1506,
     489,  2159,  1509,   451,    13,    14,   411,  1514,  1506,  1516,
    1517,  1509,    13,    14,    26,  1522,  1514,   219,    60,  1517,
      32,   148,   507,  1506,  1522,   510,  1509,   380,   344,  2295,
    2296,  1514,    13,    14,  1517,  1542,  1543,   148,   439,  1522,
    1547,   507,  1549,  1506,   510,  1552,  1509,   448,  1718,  2250,
      40,  1514,   173,  3076,  1517,   451,   148,   507,   148,  1522,
     510,  1539,   104,  1539,  1571,    13,    14,   507,  1575,   506,
    1577,   507,  1539,   268,   510,  1582,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,  1590,  1591,  1539,  1539,    40,  1595,  1596,
     609,  1539,   611,  1600,  3166,   167,   507,  1604,   451,   510,
    1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,   507,
      87,  1618,   510,  2938,   460,   236,   507,  1480,  1625,   510,
    1627,   133,   641,  2553,   148,   507,   187,  2557,   510,  2559,
     507,   472,   438,   510,  1668,   507,   457,   173,   510,  1668,
     318,  1648,   506,  1506,   506,  2822,  1509,   666,   148,   507,
     506,  1514,   510,  2775,  1517,   197,    39,   507,   507,  1522,
     510,   510,  1832,   506,  1671,    13,    14,   506,  3119,   143,
     506,    26,  1646,    13,    14,  1682,  1683,    32,   148,  2556,
      13,    14,     5,   157,    13,    14,    13,    14,   162,    13,
      14,    13,    14,    13,    14,   566,    13,    14,   504,  1429,
     236,   507,   508,   508,   246,    13,    14,  2262,   148,  1879,
     148,  1718,   254,    13,    14,   283,  2262,   346,  2894,   422,
    1727,  1891,  1729,   506,   266,    13,    14,    13,    14,   506,
    3365,   359,   360,   566,  3369,   167,   308,   309,   310,   213,
     359,   360,   506,   364,   507,   256,   257,   369,   370,   506,
    2316,  1921,   359,   360,  2457,  2458,   298,   412,  1928,   233,
    1767,   215,   359,   360,  1771,  2730,   293,  1774,  1775,   453,
     454,   307,  2491,  3378,  3379,   287,  1506,   220,   133,  1509,
    3410,  3411,  2322,   506,  1514,  1100,  1101,  1517,   506,   220,
    3425,   220,  1522,   414,  1964,   416,   290,    40,  1968,   506,
       5,   373,  1809,   231,  1974,     5,   280,   506,   350,  1539,
     506,     5,  1819,   506,  3337,   289,   506,     5,   506,  3270,
       5,   442,     5,   506,   506,  1832,   144,     9,   364,  1805,
     469,   295,   344,   375,   510,   371,   348,   102,   410,  1846,
     510,   507,  2639,    12,   167,    40,  1853,  1854,    17,   215,
     380,   162,   394,   280,   278,  1862,  2514,   162,    59,   231,
      29,  3312,   506,   422,   506,    91,   422,  1597,   380,   510,
      59,   443,  1879,    59,    43,    44,  1883,  1884,   414,  1886,
     416,   422,   454,  2594,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,   259,   516,  1900,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1908,  1909,   422,  1951,   422,   442,  2453,  1915,  1916,
    1957,  3362,  1919,  2614,  1921,   468,   371,   148,    98,  1926,
     939,  1928,   268,   268,    96,  3084,   506,   173,    40,   948,
     268,  2576,   287,   268,   506,   104,  2813,   808,  1668,   451,
     506,  1948,   268,   506,  1951,     3,  1953,     9,   506,   148,
    1957,    39,   198,  1951,  2657,   420,   504,  1964,   420,  1957,
       3,  1968,     5,  1970,   438,  1972,   504,  1974,  1951,   508,
     422,   422,   422,   422,  1957,   808,  1983,   167,   997,   998,
      13,   507,   507,   465,   507,   308,   309,   310,  1951,   344,
     236,   507,   507,   348,  1957,   167,   510,   507,   220,   507,
     506,  2556,   220,   275,  2048,   275,   510,  2014,  2973,   506,
    2556,   506,  2019,  2020,  2953,    11,   346,   464,   505,   510,
     516,   510,   515,   420,  3200,   380,  2934,   506,  2825,  2826,
     506,   273,   422,   176,    40,   158,  2043,  2044,   173,   167,
     507,  2048,   288,  1062,   510,   448,   213,   510,   259,  3143,
     373,   383,  1071,   306,    60,  2062,   222,   284,  2065,   306,
    2067,   307,   176,   198,   107,   108,  1796,  2858,   510,   510,
    1089,   215,   507,   506,   222,  1805,  2083,  2084,   327,  1098,
    2635,  1100,  1101,  2090,   268,   222,  2093,   410,  1951,  2635,
     281,   289,  2262,  2796,  1957,  2093,   451,   460,   104,   506,
     506,   236,   148,  2110,   148,    40,   148,   143,   468,   148,
    2093,   148,  2110,   268,  2660,   283,  2123,   504,   364,   507,
     443,   157,   507,   507,  2690,   371,   162,  2110,   489,  1000,
    2093,   454,   489,  2140,  2141,    40,   308,   309,   310,    59,
     507,   184,   185,   507,   283,   468,   167,  2110,   507,    11,
    2157,    40,  2159,   288,   162,   507,   507,   507,   507,   506,
     176,  2168,   506,  3340,   506,   162,   507,  1000,   414,   492,
     416,  2717,   515,   510,   505,   489,   167,   213,   506,  2186,
    2187,  2188,   507,   506,   422,   151,   507,   433,   245,   508,
     506,   197,   507,   439,   506,    40,   442,   233,   465,  3076,
     506,   373,   506,    59,   495,   248,   249,   250,   251,   252,
     253,   510,  2256,   256,   257,   167,   491,  2224,   284,   284,
     445,  1951,   239,  2230,    59,   510,    59,  1957,  2794,   364,
    2093,   259,   506,   268,  2937,   422,   148,   198,   410,   148,
     246,   148,   506,   422,   280,   422,   422,  2110,   254,  3179,
     275,   422,  2245,   289,    40,  2262,   275,  2245,   430,   507,
     266,  2245,   506,   346,  2245,   510,   507,   281,   283,  2824,
      40,   443,   468,  2280,   148,   507,   505,   505,  2824,   414,
     273,   416,   454,  2453,   507,   167,   506,   506,    59,   181,
     507,   507,   298,   507,   162,    78,   468,   139,   433,   507,
     194,  1172,   167,     8,   439,   507,    11,   442,   294,   506,
      15,    16,  2858,   516,   507,  2322,   284,   176,  2048,   148,
     492,  2328,   352,   171,   433,   506,   369,   370,    40,    40,
      84,   506,   510,   507,   506,     5,  2066,   507,   448,  1172,
     167,    46,   505,   507,   350,   510,   506,   506,    53,   507,
     507,   507,  2082,   507,  3055,   506,   308,   309,   310,  2366,
     510,   506,   467,  2093,   510,   506,   194,   507,  2366,   375,
     539,   507,   113,    78,   507,   507,   510,   507,   507,   454,
    2110,   507,   283,  2366,   495,    59,  2556,  2431,   394,  3328,
     507,   507,  2938,   200,  2934,   468,   113,    40,  2405,  2468,
     507,   570,   438,   507,   506,   222,    86,   187,   508,  3339,
     273,   508,   273,  2420,   508,   508,   508,  2424,  2425,  2463,
     422,   373,   508,   508,  2431,   507,   167,  1446,   508,   508,
     508,  1450,   508,   422,  2441,    40,   141,  2444,   508,  2446,
     508,   508,   495,   486,   487,   508,  2453,  2454,   508,  3168,
    2457,  2458,   508,   508,   508,  2462,  2463,  3129,   410,  3131,
    3337,  1332,  2469,   508,   505,  2635,   268,   172,   504,   105,
    2514,    40,   508,   468,   508,   506,   508,  2484,   283,   508,
       9,   508,   508,  3141,   189,   508,   508,  2494,   508,   194,
    2660,   443,   505,   345,  1365,  1366,   508,   508,   508,  1332,
    3145,   507,   454,  2366,  2482,   508,  2482,  2514,   506,   510,
    1381,     8,  2488,  3144,    11,  2482,  3147,   686,    15,    16,
     329,  3076,    19,    20,    21,   506,  2256,   232,  2482,  2482,
    3076,   506,  1365,  1366,  2482,   507,   510,    59,   507,   194,
     187,    89,  2405,   510,   507,   453,  2553,  2717,  1381,  2556,
    2557,   338,  2559,   506,   506,    40,   297,   148,   507,   120,
     148,   507,    40,  2570,   360,  2572,  3281,   308,   309,   310,
     360,  3272,    40,   507,   506,   506,    40,    37,   448,   303,
     285,     8,    42,   510,    11,     7,     8,   506,    15,    16,
      12,   506,    19,    20,    21,    17,   273,   186,  3256,    21,
    2593,    23,    24,   244,   448,  2593,    28,    29,    30,  2593,
     433,    33,  2593,  2589,    36,    37,  1635,  3262,    40,    46,
     506,    43,    44,    72,   286,    72,    53,    78,  2635,     9,
     507,   507,   373,   506,   362,   507,   505,    91,  2682,    99,
    2616,   505,    59,  2619,   495,   129,   266,    40,   283,   433,
    2657,    78,   506,  2660,  2824,   286,   286,   506,   453,   200,
     507,   507,   283,   118,    86,    87,   507,   507,   283,   410,
    2677,  2678,   380,   507,   359,  2682,    98,   445,  2685,   144,
     385,   103,   104,   105,   106,   107,    25,  2694,  2858,    36,
    2737,   359,   291,  2818,   694,  1735,  2540,   194,  2553,  2706,
    2181,  2431,   443,  1647,  2711,  2712,    14,  2751,   168,  2716,
    2717,  1582,   610,   454,  2721,  2244,  2328,  2724,  2725,  2934,
     217,  3048,  2729,  2730,  3287,  2585,  2733,   468,  3393,  3341,
    2737,  3234,  3350,  2463,  3386,  3102,  1159,  2744,  2187,  2737,
    2174,  3339,  2532,  3309,   204,   172,  3348,  2559,  2171,  1582,
    3336,   492,  2482,  1328,  2737,  3115,  2605,  2493,  2488,   738,
     220,  2626,   189,  1414,  1365,   506,  1853,   194,  2938,  1430,
     230,  3232,  3170,  3312,  2737,   107,   108,  2492,  3266,  3415,
    2482,  2788,  3337,  1450,  2514,   490,  2157,  2123,   285,  2796,
    1707,  3337,   497,   498,   499,   500,   501,   502,  3321,   972,
    2387,  2140,   262,  1142,  1671,   232,  1119,     8,  2815,  3243,
      11,   972,  3133,  1706,    15,    16,    21,  2824,    19,    20,
      21,  2110,  2685,   283,  1962,  2977,   627,   616,   950,  2685,
    2366,  1141,  2365,  3069,  2412,  1144,  1383,  1862,  3247,  3246,
     948,  2021,   948,  1862,  2425,   948,  2066,  1718,   308,  1868,
     948,  2858,   184,   185,  2124,   315,   566,  1984,   285,  2589,
    2744,  1501,  2063,  2438,  2023,  1646,  1970,    98,    -1,    -1,
      -1,    -1,    -1,    -1,  2737,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1718,  2616,    -1,    -1,  2619,
      -1,    -1,    -1,  2900,    -1,   355,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    -1,    -1,  3076,    -1,    -1,  2953,
      -1,    -1,    -1,    -1,   374,    -1,   248,   249,   250,   251,
     252,   253,    -1,    -1,   256,   257,    -1,  2934,    -1,     8,
    2937,  2938,    11,    -1,  2910,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,  2953,    -1,    -1,    -1,
    1119,  1970,  2682,    -1,    -1,    -1,    -1,    36,   385,    -1,
      99,  1832,    -1,    -1,    -1,    -1,  2973,    -1,    -1,    -1,
      -1,    -1,    -1,  2980,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   443,  2991,  2992,    -1,    -1,  2995,    -1,
    2997,    -1,    -1,   194,    -1,    -1,   493,   494,   495,  1832,
     497,   498,   499,   500,   501,   502,    -1,  2737,  1879,    -1,
      -1,    -1,    -1,    -1,    -1,  3022,   217,    -1,    -1,    -1,
    1891,  2751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,   370,  3046,
      -1,    -1,    -1,    -1,    -1,    -1,  1879,    -1,    -1,    -1,
    1921,    -1,    -1,    -1,    -1,    -1,    -1,  1928,  1891,    -1,
      -1,    -1,    -1,   490,    -1,   204,   493,   494,   495,  3076,
     497,   498,   499,   500,   501,   502,    -1,    -1,    -1,    -1,
      -1,   220,    -1,    -1,   285,    -1,    -1,    -1,  1921,    -1,
      -1,   230,    -1,  1964,    -1,  1928,    -1,  1968,   808,    -1,
      -1,   523,    -1,  1974,    -1,  3112,   528,    -1,    -1,   531,
      -1,    -1,  3119,  3089,  3090,    -1,    -1,   539,    -1,    -1,
      -1,  3119,  3129,   262,  3131,   167,  3133,    -1,    -1,    -1,
    3137,  1964,  3139,    -1,  3141,  1968,  3119,   559,   217,    -1,
      -1,  1974,    -1,    -1,  3151,    -1,   568,   569,   570,  3156,
      -1,  3158,    -1,    -1,   486,   487,    -1,    40,    -1,  3166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3337,    -1,   308,
      -1,    -1,  3179,    -1,  2193,    -1,   315,  3184,    -1,    -1,
    2910,    -1,    -1,    -1,   147,    -1,    -1,   609,   610,   611,
      -1,  3167,    -1,  3169,   616,    -1,   618,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   167,   627,   285,    -1,    -1,   631,
     632,    -1,    -1,    -1,   636,   637,   355,    -1,    -1,  2238,
     103,    -1,   105,  2953,   107,    -1,  3233,    -1,   650,   651,
     652,    -1,  3208,    -1,    -1,   374,  3243,  2256,    -1,    -1,
      -1,    -1,   664,   665,    -1,   667,    -1,    -1,  3224,  3256,
      -1,  1420,  3228,  1422,    -1,    -1,  3119,    -1,   680,    -1,
      -1,    -1,    -1,  3270,   686,    -1,   308,   309,   310,    -1,
      -1,    -1,  3270,    -1,   696,    -1,    -1,   699,    -1,    -1,
      -1,  3288,    -1,    -1,    -1,    -1,    -1,  3270,    -1,    -1,
    1000,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,  2322,   443,  3312,    -1,    -1,    -1,    -1,
      -1,  2330,    -1,  2332,  3312,    -1,    -1,  2336,    -1,  2338,
      -1,  3328,    -1,   745,   746,   747,   748,   749,    -1,  3312,
    3337,   373,  3339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   566,   308,   309,   310,    -1,    -1,
       0,    -1,    -1,    -1,    -1,  3362,    -1,    -1,    -1,  3089,
    3090,    -1,    -1,    -1,  3362,    -1,    -1,    -1,   410,    -1,
    3377,  3378,  3379,    -1,    -1,    -1,    -1,    -1,  3354,  3362,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2262,    -1,    -1,    -1,    -1,    -1,  3404,    -1,    -1,
      -1,   443,    -1,    -1,    -1,  3381,    -1,  3270,    -1,    -1,
     373,    -1,   454,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   468,    -1,    -1,  2262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3167,  3445,  3169,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    98,  3312,
     492,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,  1172,    -1,   506,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,   955,    -1,  3208,    42,
     443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,   454,    -1,   143,  3224,    -1,    53,    -1,  3228,  3362,
      -1,    -1,    -1,    -1,    -1,   468,    -1,   157,    -1,    -1,
      -1,    -1,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,   176,   949,   950,   492,
     952,   181,    -1,   955,    -1,    -1,    99,  2556,    -1,   961,
     962,    -1,    -1,   506,  1713,   967,    -1,    -1,    -1,    -1,
      -1,   973,    -1,    -1,  1723,    -1,  1725,    -1,   980,  1728,
      -1,    -1,    -1,   213,    -1,  1734,  2585,  1736,   990,   107,
     108,    -1,    -1,    -1,    -1,   997,    -1,    -1,    -1,  1748,
      -1,    -1,  2453,   233,  1753,  1007,   808,    -1,  1757,  1758,
    1759,  1760,    -1,  1762,  1763,    -1,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,   147,   172,    -1,    -1,    -1,    -1,
    2453,    -1,  1332,    -1,  3354,    -1,    -1,    43,    44,    -1,
     280,    -1,   189,   283,   167,  1057,    -1,   194,    -1,   289,
     523,   204,    -1,    72,    -1,   528,   184,   185,   531,    78,
      -1,  3381,    -1,    -1,    -1,  1365,  1366,   220,    -1,    -1,
    1139,    -1,    91,    -1,    -1,    -1,    -1,   230,  2687,  1148,
      -1,  1381,    -1,    -1,    -1,   232,    40,    -1,    -1,   329,
    1102,    -1,    -1,  1105,   113,  2556,   115,    -1,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,  1119,  1120,   262,
      -1,    -1,   352,    -1,  1126,    -1,    -1,    -1,    -1,    -1,
     248,   249,   250,   251,   252,   253,    -1,    -1,   256,   257,
     283,    -1,  2741,  2556,    -1,    -1,  1148,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,   618,  1158,  1159,    -1,    -1,
     104,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,  1171,
      -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     410,    -1,    -1,    -1,  2635,    -1,  1188,   566,    -1,    -1,
    1192,    -1,    -1,   202,  1196,   308,   309,   310,  1000,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   438,  2660,
      -1,    -1,   355,     8,    -1,    -1,    11,    -1,   448,    -1,
      15,    16,  2635,    -1,    19,    20,    21,   171,    -1,    -1,
      -1,   374,    -1,   696,    -1,   465,    -1,   467,   468,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,  2660,   385,    -1,
      -1,   369,   370,   197,    -1,    -1,    -1,    -1,    -1,   268,
     373,    -1,    -1,    -1,   273,    -1,  2717,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   745,   746,   747,   748,    -1,    -1,    -1,    -1,
      -1,    -1,  1582,    -1,    -1,    -1,    -1,   410,    -1,    -1,
     443,    -1,   246,    -1,  2717,   448,    -1,  2906,    -1,    -1,
     254,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,  1325,    -1,  1327,    -1,    -1,    -1,   338,
     443,  1333,    -1,    -1,    -1,  2934,    -1,    -1,    -1,    -1,
      -1,   454,    -1,    -1,    -1,  1347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   298,   468,  2105,    -1,    -1,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   486,   487,
    1172,    -1,    -1,  2824,    -1,    -1,  1378,    -1,    -1,   492,
      -1,  1383,    -1,    -1,    -1,    -1,    -1,    -1,   506,     8,
      -1,    -1,    11,   506,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,   350,  2858,    -1,  3008,
      55,  2824,  1414,  1472,  1473,  1417,    -1,  1419,  1420,  1478,
    1422,  1423,   217,    -1,    -1,    -1,    -1,    46,  1718,   808,
     439,   375,    -1,    -1,    53,    -1,    -1,    -1,    -1,   448,
      -1,    -1,    -1,    -1,    -1,  2858,    -1,    -1,  1450,    -1,
     394,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1472,  1473,    -1,    -1,   119,    -1,  1478,  3076,  1480,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2938,    -1,   952,
     285,  1493,   137,  1495,  1496,    -1,   141,    -1,    -1,    -1,
      -1,  1503,    -1,    -1,  1506,    -1,    -1,  1509,    -1,    -1,
      -1,    -1,  1514,    -1,    -1,  1517,    -1,    -1,   163,    -1,
    1522,   166,  1524,  2272,  1526,  2938,    -1,    -1,    -1,    -1,
    1332,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,    -1,
      -1,    -1,  1832,   539,    -1,    -1,    -1,    -1,    -1,  1551,
      -1,    -1,    -1,   172,  1556,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1365,  1366,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   569,   570,   194,    -1,    -1,    -1,  1381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1879,
      -1,    -1,  1594,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,  1891,  3201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1671,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1000,    -1,    -1,    -1,  3076,    -1,    -1,   273,    -1,
      -1,  1921,    -1,    -1,    -1,    -1,   281,    -1,  1928,    -1,
      -1,  1643,    -1,  1645,    -1,  1647,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,  1658,  1659,   303,    -1,
      -1,    -1,    -1,  3076,    -1,    -1,   285,    -1,    -1,  1671,
      -1,    -1,    -1,    -1,  1964,    -1,    -1,    -1,  1968,    -1,
      -1,    -1,    -1,    -1,  1974,   330,    -1,    -1,    -1,    -1,
     686,    -1,    -1,    -1,  1696,  1158,  1698,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,  1171,    -1,
    1712,  1713,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1723,  1724,  1725,  1726,    -1,  1728,    -1,    -1,  1192,
      -1,    -1,  1734,    -1,  1736,    -1,     8,    -1,  3337,    11,
      -1,    -1,    -1,    15,    16,  1747,  1748,    19,    20,    21,
    1752,  1753,    -1,    -1,    -1,  1757,  1758,  1759,  1760,    -1,
    1762,  1763,    -1,    -1,    36,    -1,   385,    -1,  2517,  2518,
      -1,    -1,    -1,    -1,    -1,  3374,    -1,    -1,    -1,    -1,
    1582,    -1,  1784,  1785,  1786,  1787,  1788,  1789,    -1,    -1,
      -1,    -1,    -1,  1172,    -1,    -1,  2545,    -1,    -1,    -1,
      -1,  1803,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1812,  2560,  2561,  2562,  2563,  2564,  2565,  2566,  2567,  2568,
    2569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1892,  1893,  1894,  1895,  1896,  1897,    -1,
      -1,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,
    1909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1327,    -1,    -1,    -1,    -1,    -1,
    1333,   490,    -1,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,  3337,    -1,    -1,    -1,
    1892,  1893,  1894,  1895,  1896,  1897,    -1,    -1,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1718,    -1,    -1,    -1,
      -1,    -1,    -1,     8,  3337,    -1,    11,    24,  1930,    -1,
      15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1942,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,  1951,
     955,    -1,    -1,  1332,    -1,  1957,    -1,    -1,    -1,    -1,
    1962,    46,    -1,    -1,    -1,  1967,    -1,    -1,    53,    -1,
      -1,   967,  2262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    79,    -1,  2043,  2044,  1365,  1366,    -1,    -1,
      -1,    -1,    -1,    78,   990,    -1,    -1,    -1,    95,    -1,
      -1,    -1,  1381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2012,    -1,    -1,   285,  2016,    -1,    -1,    -1,    -1,  2021,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1832,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1503,  2043,  2044,    -1,    -1,   142,  2795,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   141,    -1,  2060,    -1,
      -1,  1057,    -1,    -1,    -1,    -1,    -1,   164,    -1,    -1,
      -1,    -1,   169,    -1,    -1,    -1,    -1,  1879,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,  1891,
      -1,  2093,    -1,    -1,    -1,    -1,    -1,    -1,  2157,    -1,
      -1,   198,    -1,  2105,   189,    -1,    -1,    -1,  2110,   194,
      -1,    -1,  2114,    -1,    -1,    -1,    -1,    -1,    -1,  1921,
      -1,    -1,    -1,  1119,  1120,    -1,  1928,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1148,   241,    -1,    -1,   232,   245,    -1,
      -1,    -1,  2154,    -1,    -1,  2157,    -1,    -1,  2160,    -1,
      -1,    -1,  1964,  2453,    -1,    -1,  1968,    -1,    -1,    -1,
      -1,    -1,  1974,    -1,  2176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1645,    -1,  1647,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1658,    -1,    -1,    -1,    -1,
     285,    -1,    -1,  1582,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    -1,   313,    -1,    -1,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   328,    -1,  1696,    -1,    -1,    -1,    -1,  2240,    -1,
      -1,    -1,    46,    -1,  2246,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,  2258,  2259,  2260,  2261,
      -1,    -1,    -1,    -1,   361,    -1,  2556,   364,    -1,    -1,
    2272,    -1,  2274,    -1,    78,  2277,    -1,    -1,   375,  2281,
    2282,   378,    -1,    -1,  2286,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2299,    -1,   396,
     385,    -1,    -1,    -1,    37,    -1,    -1,    -1,  3057,    42,
      -1,    -1,    -1,   410,  2316,    -1,    -1,    -1,    -1,    -1,
     417,  1784,  1785,  1786,  1787,    -1,  1789,    -1,  3077,  3078,
     427,    -1,  2334,  2335,    -1,  2337,   433,   141,    -1,  1718,
      -1,    -1,    -1,    -1,    -1,  2635,    -1,    -1,    -1,    -1,
    3099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   460,  2366,    -1,    99,    -1,   172,    -1,
    2660,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2386,   189,    -1,    -1,    -1,    -1,
     194,    -1,  2394,  2395,  2396,    -1,    -1,    -1,  2457,  2458,
      -1,  2403,    -1,  2405,  2406,   490,    -1,    -1,    -1,    -1,
    2412,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
      -1,    -1,    -1,  1419,  1420,  2427,  1422,  2717,   232,    -1,
      -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,  1832,    11,  2457,  2458,    -1,    15,    16,
    2262,    -1,    19,    20,    21,    -1,    -1,  1472,  1473,    -1,
      -1,   204,    -1,  1478,    -1,    -1,    -1,    -1,    -1,  1942,
      -1,   285,    -1,    -1,  2486,    -1,    -1,   220,    -1,    -1,
    2492,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,  1495,
    1879,    -1,    -1,    -1,    -1,    -1,  2508,    -1,    -1,    -1,
    2512,    -1,  1891,    -1,  2516,  2517,  2518,    -1,    -1,    -1,
    2522,  2523,  2524,    -1,  2526,    -1,    -1,    -1,  1524,   262,
    1526,    -1,    -1,    -1,  2824,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1921,  2545,    -1,  2547,    -1,    -1,    -1,  1928,
     283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2560,  2561,
    2562,  2563,  2564,  2565,  2566,  2567,  2568,  2569,  2858,    -1,
      -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,
      -1,   385,   315,    -1,  3333,  1964,  2588,    -1,    -1,  1968,
    2592,    -1,    -1,  2595,    -1,  1974,    -1,    -1,  2657,    -1,
      -1,    -1,    -1,  2605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1623,    -1,
      -1,    -1,   355,  2682,  2626,  2627,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   374,    -1,    -1,  2646,    -1,    -1,  2706,  2938,    -1,
      -1,  2453,    -1,    -1,    -1,  2657,    -1,    -1,    -1,    -1,
     217,  2663,    -1,    -1,    -1,    -1,  1671,    -1,  2670,  2671,
    2672,  2673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2682,    -1,    -1,  2685,    -1,    -1,   490,  2689,  2690,    -1,
      -1,    -1,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,  1698,  2705,    -1,    -1,    -1,    -1,    -1,    -1,
     443,    -1,    -1,    -1,    -1,   448,    -1,  1713,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1723,   285,  1725,
      -1,    -1,  1728,  2735,    -1,  2737,    -1,  2796,  1734,    -1,
    1736,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2751,
      -1,    -1,  1748,  2755,  2556,    -1,    -1,  1753,    -1,  2761,
      -1,  1757,  1758,  1759,  1760,    -1,  1762,  1763,    -1,    -1,
      -1,    -1,    -1,  2775,    -1,    -1,    -1,    -1,    -1,  2781,
      -1,    -1,    -1,  2246,    -1,    -1,  3076,    -1,    -1,    -1,
      -1,    -1,  2794,  2795,  2796,    -1,  2259,  2260,  2261,    -1,
    2802,    -1,    -1,   662,   663,    -1,    -1,    -1,    -1,    -1,
      -1,  2274,    -1,    -1,  2277,    -1,    -1,  2819,    -1,    -1,
      -1,    -1,    -1,  2286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2635,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2660,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,   727,    -1,
      -1,    -1,   731,    -1,    -1,    -1,    -1,    -1,  2937,    -1,
      -1,    -1,    -1,  2262,    -1,    -1,    -1,  1892,  1893,  1894,
    1895,  1896,  1897,    -1,  2896,  1900,  1901,  1902,  1903,  1904,
    1905,  1906,  1907,  1908,  1909,    -1,    -1,  2909,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2717,    -1,    -1,    -1,    -1,
    2922,    -1,    -1,    -1,    -1,    -1,  2928,    -1,    -1,    -1,
      -1,  2394,  2395,  2396,  1930,  2937,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,    98,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2963,    -1,    -1,    -1,    -1,  1962,  2969,    -1,    -1,
      -1,  1967,    -1,    -1,    -1,  2977,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,   846,    -1,    19,
      20,    21,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3004,    -1,    -1,    -1,    -1,   157,    -1,    -1,
      -1,    -1,   162,    -1,    -1,    -1,  2012,   167,    -1,    -1,
      -1,    -1,  2824,    -1,  3026,  2021,   176,    -1,    -1,  3031,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,  2043,  2044,
      -1,    -1,    -1,    -1,   217,  2508,    -1,  3337,    -1,    -1,
      -1,    98,    -1,    -1,    -1,  3057,  2858,    -1,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2453,  3077,  3078,    -1,    -1,    -1,
    3139,    -1,    -1,   233,    -1,    -1,   945,    -1,    -1,    -1,
      -1,  3093,   951,  3095,    -1,   954,   143,  3099,   957,   958,
     959,   960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2105,
     157,    -1,   285,    -1,  3116,   162,    -1,  3119,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
     280,    -1,  2595,   283,   181,    -1,  2938,  3139,    -1,   289,
     999,  3143,  3144,    -1,    -1,  3147,    -1,    -1,    -1,    -1,
      -1,    -1,  2157,    -1,    -1,    -1,    -1,    -1,  2154,    -1,
    1019,    -1,    -1,    -1,  2160,    -1,   213,    -1,  3170,    -1,
      -1,    -1,    -1,    -1,    -1,  3177,    -1,  2556,  1037,   329,
      -1,    -1,    -1,    -1,    -1,    -1,   233,   217,    -1,  1048,
    1049,  1050,    -1,  1052,  1053,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,    -1,    -1,  3207,    -1,  2670,  2671,  2672,
    2673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      40,    -1,    11,    -1,  1083,    -1,    15,    16,    -1,    -1,
      19,    20,    21,   280,    -1,    -1,   283,    -1,    -1,    -1,
      60,    -1,   289,    -1,    -1,  3247,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,  2635,    46,    -1,    -1,
     410,    -1,    -1,    -1,    53,    -1,    -1,    -1,  3270,    -1,
      -1,    -1,    -1,    -1,  3076,  1134,  2272,    -1,    -1,  1138,
    1139,  2660,   329,    -1,   104,   105,    -1,    -1,   438,    78,
    1149,  1150,    -1,   113,    -1,  3297,    -1,    -1,   448,    -1,
      -1,    -1,    -1,    -1,    -1,   352,    -1,  3309,  3310,    -1,
    3312,  3313,    -1,    -1,    -1,   465,    -1,   467,   468,  3321,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,  3333,    -1,    -1,    -1,    -1,    -1,    -1,  2717,  2802,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   171,    -1,  3355,   504,    -1,    -1,   507,   508,   509,
    3362,    -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,   939,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,  3400,    -1,
     189,   448,    -1,    -1,    -1,   194,    -1,  2403,    -1,    -1,
    2406,    -1,    -1,  3415,    -1,    -1,  2412,    -1,   465,    -1,
     467,   468,  1281,    -1,    -1,    -1,   246,    -1,   217,   218,
      -1,  1290,    -1,    -1,   254,    -1,    -1,   998,    -1,    -1,
      -1,    -1,    -1,   232,    -1,  2824,   266,    -1,   268,    -1,
      -1,    -1,  2457,  2458,    -1,  1314,    -1,   504,    -1,    -1,
     507,   508,   509,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,    -1,    -1,    -1,   298,  2858,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1071,    -1,    -1,    -1,    -1,    -1,  2512,    -1,    -1,    -1,
    2516,  2517,  2518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     350,    -1,    -1,    -1,    -1,  3337,    -1,  1098,    -1,  1100,
    1101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2545,
      -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,  2938,
      -1,    -1,    -1,    -1,  2560,  2561,  2562,  2563,  2564,  2565,
    2566,  2567,  2568,  2569,   394,    -1,   396,    -1,    -1,   399,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1453,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1173,    -1,    -1,  1176,  1177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    26,  1485,    -1,  1487,  1488,
    3093,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,  1500,  1501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2657,  3116,    -1,    -1,    -1,  1516,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2663,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2682,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,  1547,    -1,
    1549,    -1,    -1,  2689,    -1,    -1,    -1,  3076,    -1,    -1,
      -1,   490,    -1,   104,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,  3177,    -1,    -1,    -1,  1577,    -1,
      -1,    -1,    -1,    -1,  1583,  1584,  1585,  1586,  1587,  1588,
    1589,  1590,   133,    -1,    -1,    -1,  1595,  1596,    -1,    -1,
      -1,  1600,    -1,     0,  3207,  1604,    -1,    -1,  1607,  1608,
    1609,  1610,  1611,  1612,  1613,  1614,  1615,    -1,    -1,  1618,
      -1,    -1,    -1,    -1,    -1,    22,  1625,    -1,  1627,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1648,
      47,  2796,    -1,    -1,    -1,    52,   197,    -1,    -1,  2795,
      -1,    -1,  1363,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1374,    -1,  1376,    73,    -1,    -1,    -1,
      -1,    -1,    -1,  1682,  1683,  1386,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      -1,    98,  1403,    -1,    -1,   246,    -1,    -1,    -1,    -1,
      -1,     8,   109,   254,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    -1,    -1,    -1,   266,   123,   124,    -1,    -1,
      -1,    -1,    -1,    -1,  1435,  1436,   133,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,   287,    -1,    -1,    46,
     147,    -1,   149,   150,    -1,    -1,    53,   298,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,  1767,    -1,
     167,    -1,  1771,    -1,    -1,  1774,  1775,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2937,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,    -1,    -1,   344,    -1,    -1,    -1,   348,    -1,   350,
    1809,    -1,   209,    -1,    -1,    -1,    -1,    -1,  3337,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2969,   375,    -1,    -1,    -1,   235,   380,
      -1,  2977,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,  1853,  1854,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1883,  1884,    -1,  1886,    -1,    -1,
    3026,    -1,   189,    -1,    -1,  3031,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     451,   308,   309,   310,    -1,    -1,  1915,  1916,    -1,   316,
    1919,  3057,   319,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   955,
      -1,  3077,  3078,    -1,    -1,    -1,    -1,    -1,    -1,  1948,
      -1,   348,    -1,    -1,  1953,    -1,    -1,    -1,    26,    -1,
     357,    -1,    -1,  3099,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,  1972,    -1,    -1,   373,    -1,    -1,    -1,
      -1,  1682,  1683,   380,  1983,    -1,    -1,   384,   285,    -1,
      -1,    -1,    60,    -1,  3139,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3143,    -1,   406,
      -1,    -1,    -1,   410,    -1,  2014,    -1,    -1,    -1,    -1,
    2019,  2020,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   430,    -1,    -1,   104,    -1,    -1,    -1,
    1741,    -1,    -1,    -1,    -1,    -1,   443,    -1,    -1,   446,
    1751,    -1,   449,  1754,    -1,    -1,  1072,   454,    -1,    -1,
      -1,    -1,    -1,  2062,    -1,   133,  2065,    -1,  2067,     8,
      -1,   468,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,  2083,    -1,    -1,    -1,   385,    -1,
      -1,    -1,    -1,    -1,    -1,   492,    -1,    36,    -1,  1115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   506,
       8,    -1,   509,    11,    53,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,  2123,    -1,    -1,    -1,    -1,   197,
      -1,    -1,  1148,    -1,    -1,  1836,  1837,    -1,    36,    78,
      -1,  2140,  2141,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    -1,
    2159,  1862,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2168,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,
      78,    -1,  1198,    -1,    -1,    -1,   254,    -1,    46,    -1,
      -1,    -1,    -1,   490,    -1,    53,    -1,  3333,   266,    -1,
     497,   498,   499,   500,   501,   502,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,   287,
      78,    -1,    -1,    -1,    -1,  2224,    -1,    -1,    -1,    -1,
     298,  2230,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
     189,    -1,    53,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1970,
      -1,    -1,    -1,    -1,   172,    -1,   344,    78,   217,   218,
     348,  2280,   350,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   232,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,  1319,    -1,    -1,    -1,   375,    -1,    -1,
      -1,    -1,   380,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,   268,
      -1,   189,   271,    -1,   232,    -1,   194,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   172,    -1,   271,   232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   451,    -1,    -1,    -1,   285,   189,    -1,
     288,    -1,    -1,   194,    -1,    -1,  2097,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2420,    -1,    -1,    -1,  2424,  2425,   285,    -1,  2130,
    2131,   232,  2431,    -1,    -1,  1451,    -1,    -1,    -1,    -1,
      -1,    -1,  2441,    -1,    -1,  2444,   385,  2446,    -1,    -1,
      -1,    -1,  1468,    -1,  1470,  2454,  1472,  1473,    -1,  1475,
      -1,    -1,  1478,  2462,  2463,  1481,    -1,    -1,  1484,    -1,
    2469,    -1,    -1,  1489,    -1,    -1,  1492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,  2484,    -1,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2494,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2514,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,  1545,
      -1,    -1,    -1,    -1,  1550,    -1,    -1,  1553,  1554,  1555,
      -1,    -1,    -1,  1559,    -1,    -1,    -1,  1563,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2570,    -1,  2572,    -1,    -1,    -1,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
      -1,  2292,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,    -1,  1624,    -1,
      -1,    -1,   510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,    -1,    -1,  1665,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1681,    -1,    -1,    -1,    -1,
    1686,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2677,  2678,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,    -1,   490,
      -1,    -1,    -1,    -1,    -1,  2694,   497,   498,   499,   500,
     501,   502,    -1,    -1,    -1,    -1,    -1,  2706,    -1,    -1,
      -1,    -1,  2711,  2712,    -1,    -1,    -1,  2716,    -1,    -1,
      -1,    -1,  2721,    -1,    -1,  2724,  2725,    -1,    -1,    -1,
    2729,  2730,    -1,    -1,  2733,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2744,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2788,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2815,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,  2556,    -1,    -1,    40,    24,
      -1,    -1,    -1,    -1,    46,  1881,    -1,    -1,    -1,    -1,
      -1,    53,    -1,  1889,  1890,    -1,  1892,  1893,  1894,  1895,
    1896,  1897,    -1,    -1,  1900,  1901,  1902,  1903,  1904,  1905,
    1906,  1907,  1908,  1909,  1910,    -1,    78,    -1,    -1,    -1,
      -1,  2900,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2953,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1986,  1987,    -1,    -1,  2973,    -1,    -1,   142,    -1,    -1,
      -1,  2980,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
     172,    -1,  2991,  2992,    -1,    -1,  2995,    -1,  2997,   164,
      -1,    -1,    -1,    -1,   169,    -1,    -1,   189,    -1,    -1,
    2026,    -1,   194,    -1,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,    -1,  3022,    -1,    -1,    -1,  2043,  2044,    -1,
    2046,  2047,    -1,   198,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,  2058,    -1,    -1,  2061,    -1,  3046,    -1,    -1,
     232,    -1,    -1,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,    -1,   268,    -1,  2104,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,  2813,  3112,    -1,    -1,    -1,  2818,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3133,    -1,    -1,    -1,  3137,    -1,
      -1,  2157,  3141,    -1,    -1,    -1,    -1,    -1,   313,    -1,
      -1,    -1,  3151,    -1,    -1,    -1,    -1,  3156,    -1,  3158,
      -1,    -1,    -1,   328,  2865,  2866,    -1,  3166,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   361,    -1,    -1,   364,
      -1,    -1,    -1,   385,    -1,    -1,   371,    -1,    -1,  2225,
     375,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,  2235,
    2236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,  3233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3243,   410,    -1,    -1,    -1,    -1,
      -1,    -1,   417,    -1,    -1,    -1,    -1,  3256,    -1,    -1,
      -1,    -1,   427,    -1,    -1,    -1,    -1,    -1,   433,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3288,
      -1,    -1,    -1,    -1,    -1,   460,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2319,    -1,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,  2341,  2342,  2343,    -1,    -1,
    2346,  2347,  2348,  2349,  2350,  2351,    -1,    -1,    -1,  2355,
    2356,  2357,  2358,  2359,  2360,  2361,  2362,  2363,  2364,    -1,
      -1,    -1,    -1,  2369,  2370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3065,  3066,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3076,    -1,    -1,  3377,  3378,
    3379,  2397,    -1,    -1,    -1,     8,  2402,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,  2419,    -1,  3404,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,  2432,    40,    -1,  2435,
    2436,    -1,    -1,    46,    -1,    -1,  2442,  2443,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2456,  2457,  2458,  2459,    -1,  2461,  3445,    -1,    -1,  2465,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2519,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   172,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,     8,    -1,    -1,    11,    78,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,   232,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,  3337,    -1,    -1,    -1,
      -1,  2657,    78,    -1,    -1,   268,    -1,   189,   271,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,  2695,
      -1,  2697,    -1,    -1,    -1,  2701,    -1,   189,    -1,    -1,
     232,    -1,   194,    -1,  2710,    -1,    -1,  2713,    -1,  2715,
      -1,    -1,    -1,  2719,    -1,    -1,  2722,  2723,    -1,    -1,
    2726,  2727,    -1,    -1,    -1,   217,   218,    -1,  2734,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,  2743,    -1,   271,
     232,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,  2758,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,   385,    -1,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2796,   217,   218,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,    -1,   385,   507,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2936,  2937,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2961,  2962,    -1,   490,   385,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,  2979,    -1,   507,    -1,  2983,    -1,  2985,
    2986,  2987,    -1,    -1,  2990,    -1,    -1,  2993,  2994,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3002,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3043,    -1,    -1,
      -1,    -1,    -1,  3049,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3062,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,    -1,
      -1,   507,    -1,    -1,    -1,  3091,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3121,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3153,  3154,  3155,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3185,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,  3283,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,  3308,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,  3352,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,  3407,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,    -1,   516,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,    -1,   516,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,   492,    -1,    -1,    -1,
      -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
     506,   507,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,   492,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,   128,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
     506,   507,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,   492,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,   507,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,    -1,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,     3,     4,     5,   504,    -1,   506,     9,
      -1,    -1,    -1,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,     3,     4,     5,     6,     7,   506,     9,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,    -1,     9,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,    -1,   285,   286,   287,    -1,   289,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,     3,   492,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,     3,   492,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,   167,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,   410,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,     3,
     492,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   506,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    15,    16,   504,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,    -1,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,     3,    -1,   493,
     494,   495,     8,   497,   498,   499,   500,   501,   502,    15,
      16,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,   172,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   172,    53,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   232,    -1,   194,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,   268,    -1,    -1,
     271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   385,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    36,    -1,   385,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    36,    -1,    78,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    36,    -1,    78,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    36,    -1,    78,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,
     194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   385,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    36,
      -1,   385,    -1,   507,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    36,
      -1,    78,    -1,   507,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    36,
      -1,    78,    -1,   507,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    36,
      -1,    78,    -1,   507,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,     8,    -1,   194,    11,    -1,
      -1,    78,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    46,    -1,   232,    -1,   194,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   385,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   490,    -1,    -1,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,     4,     5,    -1,    -1,    -1,     9,   497,
     498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
       4,     5,    -1,    -1,    -1,     9,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,     8,    -1,
      -1,    11,    -1,   497,   498,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,
      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,
      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    46,    -1,     8,    -1,
      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,   172,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    78,    -1,
      -1,    -1,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,
      -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,
      -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   385,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,   448,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   172,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     189,    53,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,    -1,    78,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,   232,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   268,
      -1,    -1,   271,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
     232,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,   167,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,   268,    -1,    -1,   271,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,   490,   271,    -1,   493,   494,   495,   172,   497,   498,
     499,   500,   501,   502,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,   189,    -1,    -1,     8,    -1,   194,
      11,    -1,    -1,   385,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,   232,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   490,    -1,    -1,   493,   494,   495,    78,   497,   498,
     499,   500,   501,   502,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,   232,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,   268,    -1,    -1,
     271,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,   172,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   189,    -1,
      -1,    -1,     8,   194,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,   232,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,   385,    19,    20,    21,    -1,    -1,
      -1,   172,    78,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    36,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    46,   194,   285,    -1,    -1,   288,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,   268,    -1,   490,
     271,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,   189,   285,    -1,    -1,   288,   194,    -1,
      -1,    -1,    -1,    -1,   385,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    36,    -1,   232,   418,    -1,    -1,
      -1,    -1,    -1,    -1,    46,   189,    -1,    -1,    -1,    -1,
     194,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,   268,   217,   218,   271,    78,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,   232,   285,
      -1,    46,   288,    -1,   385,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    78,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   385,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,    -1,   217,   218,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,   164,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,     4,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    -1,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,   294,   295,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,    -1,   315,
     316,   317,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
      -1,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
      -1,   315,   316,   317,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,    -1,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,    -1,
     172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,    -1,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,    -1,   315,   316,   317,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,    -1,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    -1,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,    -1,   269,
     270,   271,   272,    -1,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,    -1,   293,   294,   295,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,    -1,   315,   316,   317,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,    -1,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    -1,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
      -1,   269,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,    -1,   315,   316,   317,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,    -1,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    -1,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,   294,   295,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,    -1,   315,   316,   317,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,    -1,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,    -1,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    22,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,    32,    -1,    34,    35,
      -1,    -1,    -1,    22,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    32,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      96,    -1,    98,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   109,    -1,    -1,    -1,    96,    -1,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,   139,   123,    -1,    -1,    -1,    -1,    -1,
      -1,   147,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,    -1,    -1,    -1,    -1,    -1,    -1,   163,   147,    -1,
      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   308,   309,   310,    -1,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   319,    -1,    -1,    -1,    -1,    -1,   308,
     309,   310,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
     319,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,   357,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,   394,    -1,
      -1,   380,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,   410,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,
      -1,   410,    -1,    -1,   430,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,    -1,    -1,
      -1,   430,    -1,   449,    -1,    -1,    -1,    -1,   454,    -1,
      -1,    -1,   458,    -1,   443,    -1,    -1,    -1,    -1,    -1,
     449,    -1,   468,    -1,    -1,   454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   468,
      -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   308,   309,   310,   316,   319,
     348,   357,   373,   380,   384,   394,   406,   410,   430,   443,
     446,   449,   454,   468,   492,   506,   518,   519,   520,   521,
     522,   529,   540,   541,   542,   545,   546,   556,   573,   621,
     631,   634,   637,   644,   646,   649,   650,   654,   661,   662,
     666,   673,   677,   678,   679,   686,   691,   707,   710,   711,
     714,   716,   717,   718,   719,   721,   723,   724,   728,   781,
     782,   943,   945,   946,   947,   952,   955,   961,   962,   966,
     424,   471,   944,   198,   364,   375,   410,   460,   106,   543,
     944,     3,    22,    23,    24,    25,    26,    27,    28,    29,
      31,    32,    33,    42,    43,    44,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    59,    60,
      61,    62,    63,    64,    67,    68,    69,    70,    71,    73,
      74,    75,    76,    77,    79,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    92,    93,    94,    95,    96,
      97,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   114,   116,   117,   118,   119,
     120,   121,   123,   124,   125,   126,   127,   130,   131,   132,
     133,   134,   136,   137,   138,   140,   141,   142,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   156,
     158,   159,   160,   161,   163,   165,   166,   168,   169,   170,
     171,   172,   173,   175,   177,   178,   179,   180,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     195,   196,   197,   198,   199,   200,   201,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   214,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   229,
     230,   231,   232,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   269,   270,   271,
     272,   274,   275,   276,   277,   278,   279,   281,   282,   285,
     286,   287,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     323,   324,   325,   326,   327,   328,   330,   331,   332,   333,
     334,   335,   336,   337,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   408,   409,
     411,   412,   413,   414,   415,   416,   417,   419,   420,   421,
     424,   425,   426,   427,   428,   430,   431,   432,   433,   434,
     435,   436,   437,   440,   441,   442,   444,   445,   446,   447,
     449,   450,   451,   452,   453,   454,   455,   457,   458,   459,
     460,   461,   462,   463,   466,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   549,   624,   625,   626,
     852,   932,   936,     3,   171,   242,   403,   547,   549,   624,
     944,    55,   506,   568,   173,   236,   288,   307,   364,   414,
     416,   433,   439,   442,   619,   643,   685,     5,    30,   319,
     549,   550,   931,   106,   543,    24,    79,    95,   142,   152,
     164,   169,   198,   241,   245,   313,   328,   361,   364,   371,
     375,   378,   396,   410,   417,   427,   433,   460,   655,   656,
     659,   944,   931,    98,   133,   458,   506,   521,   522,   529,
     545,   546,   556,   573,   621,   631,   634,   644,   646,   649,
     650,   654,   662,   669,   673,   679,   686,   707,   710,   711,
     714,   716,   943,   945,   947,   952,   955,   961,   966,   106,
      73,   209,    66,    77,    79,   154,   227,   274,   284,   296,
     314,   360,   405,   426,   428,   432,   454,   506,   548,   549,
     550,   717,   782,   784,   786,   796,   803,   804,   852,   854,
     855,   106,     5,   549,   551,   708,   708,   549,   931,    30,
     173,   236,   379,   420,   424,   549,   953,   954,   964,   944,
      30,   128,   737,   738,   173,   236,   364,   379,   420,   956,
     957,   964,   944,   549,   716,   728,   965,   549,   803,   410,
     734,   548,   168,   506,   949,   506,   336,   729,   730,   931,
     729,   717,   718,     0,   509,   458,   667,   118,   208,   445,
     143,   213,   289,   438,   740,   741,   786,   786,   717,   719,
     721,   510,    30,   420,   424,   716,   965,   187,   548,   931,
     187,   548,   187,   803,   187,   548,   551,   504,   508,   552,
     553,   506,   716,   548,   414,   416,   414,   416,   346,   187,
     548,   548,   169,   241,   336,   375,   410,   460,   632,   371,
     198,    30,   931,   187,     3,   247,   427,   105,   410,   410,
     460,   549,   368,     3,    37,    42,    49,    54,    55,    56,
      57,    69,    70,    79,    81,    87,    99,   110,   111,   132,
     160,   166,   168,   172,   187,   189,   204,   211,   212,   214,
     217,   218,   220,   230,   232,   242,   261,   262,   263,   271,
     276,   293,   295,   315,   333,   355,   359,   374,   381,   385,
     388,   403,   412,   420,   421,   432,   438,   455,   458,   624,
     627,   660,   814,   816,   818,   820,   822,   824,   826,   827,
     828,   830,   831,   832,   834,   835,   937,   187,   549,   657,
     938,   187,   928,   931,   187,   931,   506,   665,   288,   416,
     669,     3,    37,    42,    49,    53,    54,    55,    56,    57,
      69,    70,    77,    79,    81,    87,    99,   110,   111,   148,
     154,   160,   166,   168,   171,   172,   177,   178,   189,   204,
     205,   211,   212,   214,   217,   218,   220,   230,   232,   242,
     261,   262,   263,   267,   271,   274,   276,   292,   293,   295,
     296,   314,   315,   318,   333,   355,   359,   374,   381,   385,
     388,   403,   405,   412,   420,   421,   426,   428,   432,   454,
     455,   458,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   624,   628,   670,   672,   673,   675,   676,
     667,   549,   551,   547,   708,   506,   506,   162,   506,   717,
     804,   506,   506,   548,   506,   506,   167,   506,   506,   506,
     506,   717,   782,   786,   796,   499,   552,    40,   549,   797,
     798,   797,   373,   510,   720,    37,    42,    99,   168,   204,
     220,   230,   262,   308,   315,   355,   374,   443,   800,   798,
      40,   549,   797,   799,   492,   808,   551,   167,   495,   506,
     506,   712,   954,   954,   954,   489,   219,   508,   283,     4,
       6,     7,     8,     9,    10,    39,    54,    56,    57,    65,
      69,    70,    81,   110,   111,   113,   148,   155,   160,   177,
     178,   211,   212,   214,   242,   261,   263,   268,   273,   276,
     285,   333,   359,   388,   420,   421,   429,   455,   490,   497,
     498,   499,   504,   506,   511,   512,   513,   514,   549,   551,
     717,   771,   819,   822,   825,   826,   827,   829,   830,   831,
     834,   835,   846,   848,   849,   850,   851,   852,   853,   855,
     856,   871,   872,   883,   905,   910,   918,   919,   920,   932,
     933,   934,   917,   919,   956,   956,   551,   956,   489,   167,
     422,   495,   508,   552,   651,   803,     3,   166,   168,   458,
     673,   948,   950,   166,   951,   846,   889,   890,   729,   510,
     506,   940,   507,   507,   520,   548,   167,   288,   694,   651,
      30,   128,   735,   735,    59,   735,   157,   162,   233,   280,
     746,   748,   749,   774,   776,   777,   778,   176,   283,   448,
     283,   740,   741,   506,   411,   963,   489,   219,   148,    26,
      32,   133,   287,   344,   348,   380,   451,   534,   537,   538,
     344,   148,    40,    60,   104,   197,   246,   254,   266,   298,
     344,   350,   375,   380,   394,   523,   526,   537,   148,   344,
     380,   537,   148,   344,   380,   537,    40,   544,   846,   911,
       3,    30,    34,    35,    36,    38,    39,    40,    41,    45,
      58,    65,    66,    72,    78,    80,    91,    98,   113,   115,
     122,   128,   129,   135,   139,   143,   155,   157,   162,   164,
     167,   174,   176,   181,   194,   202,   213,   215,   227,   228,
     233,   268,   273,   280,   283,   284,   288,   289,   308,   309,
     310,   311,   322,   329,   338,   352,   373,   390,   407,   410,
     418,   422,   423,   429,   438,   439,   443,   448,   454,   456,
     464,   465,   467,   468,   554,   555,   624,   628,   630,   553,
       3,    30,    37,    42,    49,    55,    79,    81,    87,    99,
     128,   166,   168,   171,   172,   189,   204,   217,   218,   220,
     230,   232,   242,   262,   271,   293,   295,   315,   355,   374,
     385,   403,   412,   432,   456,   458,   507,   624,   629,   846,
     892,   893,   935,   941,   507,   506,   608,   364,   619,   643,
     268,   635,    40,   460,   187,   548,   187,   548,   623,   187,
     548,   187,   548,   187,   549,   638,    87,   682,   148,   472,
     187,    88,   125,   301,   415,   457,   833,   833,   833,   506,
     821,   821,   318,   506,   823,   148,   506,    69,    70,   833,
     821,   818,   470,   492,   506,   836,   506,   836,   506,    63,
     351,   510,   658,   506,    39,   817,   506,   107,   108,   184,
     185,   248,   249,   250,   251,   252,   253,   256,   257,   369,
     370,   486,   487,   506,   837,   838,   839,   840,   841,   842,
     843,   844,   845,   821,   148,   508,   939,   510,   658,   148,
     510,   658,   148,   283,   663,   664,   846,   941,   346,   507,
     510,     4,   155,   283,   429,   497,   498,   525,   528,   551,
     668,   670,   671,   674,   934,   669,   422,   506,   563,   567,
     167,   846,   890,   506,     3,   551,   837,   838,   839,   840,
     841,   842,   843,   844,   895,   896,   798,   799,   846,   548,
     846,   897,   497,   498,   549,   847,   848,   872,   883,   899,
     506,   846,   889,   900,   846,    58,   167,   228,   423,   846,
     890,   903,   846,   507,   550,   506,   412,   754,   755,   755,
     737,   738,   786,   215,   732,    37,   220,   374,   800,   220,
     293,   801,   786,   801,   220,   800,   506,   220,   801,   144,
     195,   788,   220,   755,   506,   550,   506,   755,   290,   549,
     551,   709,   525,   674,   958,   960,   892,   816,   894,    40,
     231,   549,   506,   504,   717,   846,   909,   506,   717,   514,
     846,   506,   506,   846,   846,   846,   144,   921,   922,   846,
     890,   891,   717,   846,   889,     9,   555,   550,   873,   874,
     875,   508,   552,   912,   552,   506,   551,   506,   551,   934,
       3,     8,    11,    15,    16,    17,    18,    19,    20,    21,
      36,    40,    46,    53,    78,   172,   189,   194,   217,   218,
     232,   268,   271,   285,   288,   385,   490,   493,   494,   495,
     497,   498,   499,   500,   501,   502,   881,   882,   883,   885,
     915,   469,   857,   295,   846,   510,   732,   506,   551,   732,
       3,   113,   236,   525,   551,   835,   959,   102,   113,   960,
     113,   960,   549,    40,   549,   507,   510,   667,   510,   507,
     730,   928,   929,    40,   940,   651,   188,   346,   215,   380,
     719,   719,    30,   742,   743,   846,    59,   719,   736,   159,
     265,   762,   222,   266,   332,   383,   445,     4,     9,    30,
     757,   846,   497,   498,   758,   759,   846,   848,   774,   775,
     749,   748,   746,   747,   162,   777,   278,   779,    59,   725,
     726,   727,   789,   847,   919,   919,   746,   774,   890,   231,
     548,    72,    80,    91,   164,   187,   322,   439,   549,   590,
     600,   615,    80,    91,   715,    91,   715,   506,   422,   506,
     588,   240,   442,   588,    91,   510,   422,   548,   818,   525,
      59,   527,   525,   525,   104,   246,   254,    59,   422,   468,
     492,   524,   259,   364,   524,   526,   803,    91,   422,   715,
     364,   548,   422,   364,   549,   563,   505,   516,   892,   892,
     893,   510,   740,   741,    13,    14,   422,   549,   607,   612,
     468,   566,   548,   336,   375,   410,   460,   632,   371,   148,
      98,   573,   636,   644,   679,   966,   140,   816,   548,   268,
     523,   645,   268,   506,   608,    40,   268,   608,   268,   506,
     633,   268,   506,   187,   549,   602,   683,     3,   148,   506,
     891,   934,   660,   894,   833,   833,    39,   817,   420,   420,
     934,   934,   549,   813,   816,   813,   504,   504,   934,   934,
     422,   422,   422,   422,   657,   554,   508,   938,   928,   931,
     931,   938,   507,   510,    13,   669,   675,     4,   934,     4,
     934,   551,   555,   565,   572,    55,   100,   119,   137,   141,
     163,   166,   182,   273,   281,   303,   330,   569,   709,    40,
     507,   846,   507,   167,   510,   507,   311,   898,   507,   847,
     847,    11,    15,    16,    19,    20,    21,   194,   217,   285,
     493,   494,   495,   497,   498,   499,   500,   501,   502,   883,
     847,   507,   805,   806,   854,   162,   167,   901,   902,   510,
     507,    40,   903,   890,   903,   903,   167,   507,    40,   797,
     506,   929,     4,     9,   549,   750,   752,   753,   919,   917,
     173,   236,   410,   414,   416,   442,   548,   733,   465,   809,
     786,   220,   786,   283,   448,   802,   786,   220,   919,   786,
     275,   275,   506,   786,   550,   810,   811,   506,   550,   810,
     510,   507,   510,   507,   510,   556,   650,   686,   713,   716,
     945,   890,   891,   464,   906,   907,   846,   846,   876,   877,
     878,   879,     8,    15,    16,    19,    20,    21,   493,   494,
     495,   497,   498,   499,   500,   501,   502,   549,   881,   886,
     507,   890,   506,   549,   346,   926,   162,   505,   507,   510,
     516,   510,   515,   499,   553,   890,   846,   845,   845,   816,
     846,   846,   846,   846,   846,   846,   846,   846,     5,   555,
     942,   420,    45,   407,   916,   938,   846,   846,   506,   717,
     904,   128,   155,   268,   273,   278,   429,   440,   846,   273,
     506,   846,   422,    53,   172,   189,   194,   232,   385,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,    30,
      38,   390,   880,   504,   508,   914,   176,   158,   858,   359,
     506,   872,   920,   167,   783,   892,   783,   506,   551,   549,
     548,   948,   540,   548,   846,   510,   507,   245,   268,   731,
     448,   653,   548,   688,   506,   549,   693,   703,   704,   706,
      41,   122,   744,   510,   448,   744,   259,   719,   359,   360,
     497,   498,   759,   761,   848,   383,   222,   284,   306,   306,
     510,   501,     4,   760,   934,   760,   359,   360,   761,   548,
     927,   272,   387,   780,   506,   929,   930,   510,   176,   448,
     194,   176,   215,   775,   747,   507,   344,   537,   506,   187,
     600,   931,   222,   268,   222,   448,   506,   593,   815,   816,
     931,   549,   187,   931,   187,   549,    26,   133,   380,   533,
     536,   555,   584,   598,   931,   555,   592,   611,   931,   534,
     931,   344,   380,   523,   537,   525,   938,   931,   525,   938,
     931,   525,   344,   380,   537,   931,   931,   931,   931,   344,
     380,   537,   931,   931,   498,   846,   911,   740,   740,   740,
     456,   893,   188,   349,   739,   846,   846,   327,   562,   507,
     510,   281,   167,   422,   557,   635,   460,   548,   548,   623,
     548,   548,   638,   548,   288,   619,   506,   717,   506,   148,
     148,   232,   549,   590,   600,   603,   606,   616,   618,   468,
     470,   595,   147,   716,   148,   468,   684,   148,   507,   892,
      40,   148,   549,   639,   640,   268,   283,   890,   507,   507,
     658,   507,   504,   489,   489,   507,   507,   816,   507,   510,
     507,   934,   505,   934,   507,   507,   838,   840,   841,   842,
     841,   842,   842,   658,   554,   658,   283,   658,   663,   846,
     563,   499,   506,   525,   564,   674,   851,   507,   510,    40,
     561,   551,   561,   268,   273,   330,   561,    59,   561,   816,
     507,   846,   846,   846,   901,   816,   847,   847,   847,   847,
     847,   847,   128,   268,   278,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   507,   510,    40,   807,   846,
     846,   902,   901,   816,   507,   507,   507,   890,   816,   929,
     507,   306,   501,   306,   360,   501,   506,   506,   732,   414,
     416,   414,   416,   548,   734,   734,   734,   846,   176,   763,
     802,   786,   846,   506,   786,   162,   506,   550,   793,   802,
     816,   507,   510,   810,   507,   958,   816,   507,   505,   846,
     135,   907,   908,   507,   516,   510,   515,   508,   507,   507,
     929,   506,   846,   923,   549,   846,   846,   873,   922,   507,
     507,   489,   847,   847,   141,   890,   167,   128,   155,   273,
     278,   429,   440,   506,   141,   886,   846,   407,   916,   846,
     904,   846,   422,   506,   717,   846,   911,   554,   506,   506,
     151,   859,   784,   785,   809,   740,   809,   934,   845,   940,
     940,   245,   506,   785,   465,   652,    40,    59,   689,   699,
     706,   912,   510,   783,   495,   491,   745,   743,   285,   881,
     884,   745,     4,   934,   761,   284,   445,   758,   510,   239,
     929,   725,    59,   919,   506,   550,    59,   259,   422,   846,
     268,   615,   506,   148,   506,   593,   198,   612,   613,   574,
      40,   171,   583,   609,   574,    26,   133,   348,   350,   380,
     530,   531,   532,   538,   539,   148,   658,   148,   658,   584,
     598,   584,   507,   510,   551,   577,   495,   508,   507,   510,
     422,   364,    91,   422,   715,   364,   422,   422,   422,   364,
     516,   505,   516,   739,   739,   739,   893,   275,   275,   507,
     397,   398,   551,   571,   607,   562,   548,   645,   506,    40,
     608,   633,   506,   635,   346,   410,   551,   647,   648,   612,
     548,   548,   623,   548,   507,   510,   281,   588,   281,   283,
     587,   931,   468,   622,   548,   588,    40,   548,   507,   410,
     846,   638,     5,   504,   549,   507,   510,   148,   548,   507,
     817,   934,   836,   836,   817,   549,   817,   505,   505,   938,
     559,   570,   674,   565,   551,   551,   273,   612,   499,   612,
     551,   499,   612,   551,   507,   507,   902,   167,   128,   278,
     506,   808,   805,   506,   507,   507,   507,   549,   750,   809,
     734,   734,   734,   734,   548,   548,   548,    59,   181,   772,
     802,   929,   506,   790,   791,   792,   849,   932,   929,   162,
      78,   812,   811,   507,   418,   846,   139,   846,   876,   886,
     507,   846,   923,   924,   925,    40,   194,   507,   926,   845,
     846,    36,    36,   846,   507,   846,   167,   506,   894,   846,
     507,   141,   847,   847,   141,   141,   846,   846,   505,   516,
     506,   913,   741,   465,   846,   294,   863,   510,   763,   739,
     763,   507,   713,   846,   352,   697,   549,   259,   314,   113,
     297,   506,   687,   716,   507,   510,   693,   652,   846,   159,
     226,   506,   745,   284,   548,   507,   930,   176,   717,   718,
     919,   930,   931,   931,   507,   148,   613,   600,   613,   574,
     602,   510,   507,   115,   202,   266,   268,   599,   506,    33,
      59,   620,   609,    72,    78,    91,   113,   115,   202,   268,
     273,   322,   338,   439,   448,   579,   580,   594,   171,   113,
     186,   268,   588,   524,   105,   113,   171,   268,   396,   399,
     526,   588,   380,   532,   433,   931,   549,   536,     3,    37,
      42,    49,    55,    79,    81,    87,    99,   166,   168,   171,
     172,   189,   204,   217,   218,   220,   230,   232,   242,   262,
     267,   271,   285,   293,   295,   315,   355,   374,   381,   385,
     403,   412,   432,   438,   458,   497,   498,   525,   551,   575,
     614,   624,   630,   816,   884,   935,   555,   611,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   911,   911,
     507,   507,   507,   740,   524,   571,   506,   606,   716,   684,
      40,   640,   619,   187,   548,   507,   510,   507,   645,   506,
      40,   597,   595,   603,    84,   665,   105,   266,   608,   716,
     633,   716,   506,     5,   641,   642,   639,   602,   448,   681,
     505,   816,   658,   507,   510,   612,   847,   167,   506,   894,
     810,   507,   510,   507,   763,   548,   548,   548,   548,    30,
     101,   177,   358,   506,   764,   765,   766,   767,   768,   769,
     770,   846,   846,   467,   860,   507,   848,   887,   888,   194,
     176,   787,   791,   506,   507,   793,   794,   795,   938,   846,
     510,   507,   549,   846,   848,   846,   846,   846,   894,   507,
     846,    36,    36,   846,   846,   141,   507,   498,   911,   507,
     892,   507,   846,   507,   506,   549,   864,   772,   507,   772,
     551,   507,   918,   454,   409,   447,   698,   549,   692,   702,
     283,   695,   495,   706,   697,   886,    59,   507,   507,   453,
     454,   722,   574,   600,   507,   507,   468,   605,   116,   190,
     200,   115,   450,   846,   113,    40,   506,   938,   931,   847,
     116,   190,   115,   273,   222,   548,   605,    86,   620,   187,
     273,   525,   846,   620,   273,   497,   498,   528,   549,   816,
     658,   658,   242,   403,   935,   939,   495,   422,   422,   505,
     505,   739,   563,   448,   558,   560,   612,   507,   622,    40,
     410,   846,   507,   410,   268,   506,   551,   684,   606,   147,
     716,   145,   196,   587,   118,   133,   321,   622,   105,   684,
     468,   967,    40,   640,   505,   510,   283,   549,   680,   506,
     570,   847,   894,   507,   507,     9,   345,   756,   772,   506,
     382,   506,   507,   510,   549,   861,   862,   329,   773,   510,
     507,   506,   550,    59,   507,   892,   194,   507,   794,   923,
     505,   187,   507,   846,   846,   846,   516,   505,   516,   507,
     507,   549,   865,   860,   551,   860,   510,   453,   912,   507,
     510,    89,   697,   846,   507,   930,   930,   338,   605,   506,
     596,   574,   507,   186,   506,   846,   268,   580,   605,   608,
     931,    40,   148,   812,   939,   501,   575,   931,   931,   507,
     524,   120,   507,   595,   716,   716,   548,   148,    40,   507,
     931,   622,    30,    83,    92,   114,   186,   199,   396,   399,
     591,   591,   360,   360,    40,    64,    72,   236,   410,   846,
     507,   641,   548,   506,   549,   696,   705,   854,   507,   507,
     506,   860,   890,   506,   890,   766,    40,   510,   846,   448,
     751,   848,   919,   929,   798,   740,   506,   798,   846,   911,
     911,   303,   866,   773,   773,   716,   297,   716,   692,   283,
     506,   690,   548,   574,   555,   601,   604,   400,   462,   581,
     582,   506,   576,   846,   507,   244,   617,   186,   448,   535,
     501,   433,   563,   551,   684,   587,   967,   506,   548,   716,
     595,   665,   716,    72,   286,    72,   716,   681,   846,    78,
     700,   507,   510,   700,     9,   773,   507,   765,   507,   864,
     862,   362,   507,   739,   919,   505,   505,   505,    59,   740,
     751,   751,   698,    91,   705,   129,   608,   495,   507,   510,
     523,   507,   266,   589,   168,   302,   386,   283,   585,   586,
     610,   576,   846,   433,    40,   506,   967,   587,   622,   967,
     286,   286,   506,   507,   938,   701,   938,   684,   696,   701,
     507,   751,   507,   753,   507,   507,   889,   179,   331,   360,
     867,   453,   931,   507,   269,   445,   617,   575,   604,   507,
     582,   200,   118,   445,   283,   610,   283,   585,   716,   705,
     700,   744,   809,   744,    53,   102,   435,   846,   868,   869,
     868,   868,   507,   716,   809,   380,   586,    63,   266,   351,
     380,   578,   578,   967,   507,   701,   745,   745,   869,   359,
     161,   317,   161,   317,   144,   870,   870,   870,   704,   574,
      25,   113,   273,   684,   744,    36,   102,   176,   266,   419,
     809,   809,   745,   869,   359,   291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   517,   518,   519,   519,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   529,   529,   529,   529,   529,
     529,   529,   529,   530,   530,   531,   531,   532,   532,   532,
     532,   533,   533,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   535,   535,   536,   536,   536,   536,   537,   537,
     538,   539,   539,   539,   649,   649,   649,   649,   548,   548,
     549,   549,   549,   550,   550,   551,   552,   552,   553,   554,
     555,   555,   555,   555,   714,   714,   714,   714,   714,   714,
     714,   714,   714,   714,   714,   714,   714,   715,   715,   686,
     687,   687,   687,   687,   687,   688,   688,   689,   689,   689,
     690,   690,   690,   691,   691,   692,   693,   693,   694,   694,
     694,   695,   695,   695,   696,   696,   696,   697,   697,   698,
     698,   699,   699,   700,   700,   701,   701,   702,   702,   703,
     703,   704,   704,   705,   705,   706,   646,   646,   646,   647,
     647,   648,   648,   710,   710,   710,   644,   644,   644,   645,
     645,   637,   637,   637,   638,   638,   639,   639,   639,   640,
     640,   641,   642,   642,   643,   643,   643,   662,   662,   662,
     663,   663,   664,   664,   665,   665,   522,   522,   523,   523,
     524,   524,   524,   525,   525,   525,   525,   526,   526,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   527,   527,   528,   528,   528,   661,   661,   943,   943,
     943,   943,   943,   943,   944,   944,   944,   946,   573,   573,
     573,   574,   574,   575,   575,   575,   575,   575,   575,   576,
     576,   577,   578,   578,   578,   578,   578,   579,   579,   579,
     579,   580,   580,   580,   580,   580,   580,   580,   580,   581,
     581,   582,   582,   583,   583,   583,   584,   585,   586,   586,
     586,   586,   586,   587,   587,   587,   587,   588,   589,   589,
     590,   590,   591,   591,   591,   591,   591,   591,   591,   591,
     592,   592,   593,   594,   594,   594,   594,   595,   595,   595,
     595,   596,   597,   597,   597,   598,   599,   599,   599,   599,
     599,   599,   600,   600,   601,   601,   602,   603,   603,   603,
     604,   604,   605,   605,   606,   606,   606,   607,   608,   608,
     609,   609,   610,   611,   611,   611,   611,   612,   612,   613,
     613,   614,   614,   614,   615,   615,   615,   615,   615,   615,
     616,   616,   617,   617,   617,   617,   618,   619,   619,   619,
     619,   619,   619,   619,   619,   620,   620,   654,   654,   654,
     654,   654,   654,   654,   654,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   656,   656,   656,   656,   656,   656,   657,   657,
     658,   658,   658,   659,   659,   659,   660,   660,   631,   631,
     631,   631,   631,   631,   632,   632,   633,   633,   945,   556,
     556,   557,   557,   558,   558,   559,   559,   560,   560,   561,
     561,   562,   562,   563,   563,   564,   564,   564,   564,   564,
     564,   565,   566,   566,   567,   567,   568,   568,   569,   569,
     569,   569,   569,   569,   569,   569,   569,   569,   569,   569,
     569,   569,   569,   569,   570,   571,   571,   571,   572,   572,
     716,   716,   717,   717,   718,   718,   718,   718,   718,   718,
     718,   718,   719,   719,   720,   720,   721,   721,   721,   721,
     721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
     721,   721,   721,   721,   721,   722,   722,   723,   723,   724,
     724,   725,   725,   725,   726,   726,   727,   727,   728,   728,
     728,   729,   729,   730,   731,   731,   731,   732,   732,   733,
     733,   733,   733,   733,   733,   733,   733,   733,   734,   734,
     735,   735,   735,   736,   737,   737,   738,   738,   739,   739,
     739,   740,   740,   741,   741,   742,   742,   743,   743,   744,
     744,   744,   745,   745,   745,   746,   746,   746,   746,   747,
     747,   748,   748,   748,   748,   749,   749,   750,   750,   750,
     750,   750,   750,   751,   751,   752,   752,   753,   753,   753,
     753,   754,   755,   755,   756,   756,   757,   757,   757,   757,
     757,   758,   759,   759,   759,   760,   760,   761,   761,   762,
     762,   763,   763,   763,   764,   764,   765,   765,   766,   766,
     766,   766,   766,   767,   768,   769,   770,   771,   771,   772,
     772,   773,   773,   774,   774,   775,   775,   776,   776,   777,
     778,   778,   778,   778,   779,   779,   780,   780,   780,   781,
     781,   782,   782,   783,   783,   784,   784,   785,   785,   786,
     786,   786,   786,   786,   786,   786,   786,   786,   786,   787,
     787,   788,   788,   788,   789,   789,   790,   790,   791,   791,
     792,   792,   793,   793,   794,   795,   795,   796,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   797,   797,
     797,   797,   798,   798,   799,   799,   799,   799,   799,   800,
     800,   800,   800,   800,   800,   801,   801,   802,   802,   803,
     803,   803,   803,   804,   804,   805,   806,   806,   807,   807,
     808,   808,   809,   809,   810,   810,   811,   812,   812,   813,
     813,   814,   814,   815,   815,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   817,   817,   817,   818,   818,   818,
     818,   818,   818,   818,   819,   819,   819,   819,   820,   821,
     821,   822,   822,   822,   822,   822,   822,   822,   822,   822,
     822,   822,   823,   823,   824,   824,   825,   825,   826,   827,
     828,   828,   829,   829,   830,   831,   832,   832,   832,   832,
     832,   832,   833,   833,   834,   834,   834,   834,   835,   836,
     836,   836,   837,   837,   838,   838,   839,   839,   840,   840,
     841,   841,   842,   842,   843,   843,   844,   844,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   848,
     848,   848,   849,   849,   849,   849,   849,   849,   849,   849,
     849,   849,   849,   849,   849,   850,   850,   850,   850,   850,
     850,   851,   852,   852,   852,   852,   852,   852,   853,   853,
     854,   854,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   856,   856,   857,   857,
     858,   858,   858,   859,   859,   860,   860,   861,   861,   862,
     863,   863,   863,   864,   865,   865,   866,   866,   867,   867,
     867,   867,   868,   868,   869,   869,   869,   869,   869,   870,
     870,   870,   870,   870,   871,   871,   872,   872,   873,   874,
     874,   875,   875,   876,   877,   877,   878,   878,   879,   879,
     880,   880,   880,   881,   881,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   882,   882,   882,   882,   882,   883,
     883,   884,   884,   885,   885,   885,   885,   885,   885,   885,
     885,   886,   886,   887,   887,   888,   888,   889,   889,   890,
     890,   891,   891,   892,   892,   893,   893,   893,   894,   894,
     895,   895,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   897,   897,   898,   899,   899,   900,   900,   900,
     900,   900,   900,   901,   902,   903,   903,   903,   904,   904,
     905,   906,   906,   907,   908,   908,   909,   909,   910,   910,
     553,   553,   553,   553,   911,   911,   912,   912,   913,   913,
     913,   914,   914,   914,   914,   914,   915,   915,   916,   916,
     917,   917,   918,   918,   919,   919,   920,   920,   920,   921,
     921,   922,   922,   923,   924,   924,   925,   925,   926,   926,
     926,   927,   927,   928,   928,   929,   929,   930,   930,   931,
     932,   932,   933,   933,   933,   933,   933,   933,   933,   933,
     933,   933,   933,   933,   933,   933,   934,   935,   935,   935,
     936,   936,   936,   937,   937,   937,   938,   938,   939,   939,
     940,   940,   941,   942,   942,   711,   712,   712,   713,   713,
     713,   713,   713,   634,   634,   634,   635,   635,   636,   636,
     636,   636,   679,   679,   680,   681,   681,   682,   682,   683,
     683,   684,   684,   685,   685,   521,   521,   521,   521,   521,
     521,   546,   546,   547,   547,   677,   677,   678,   666,   666,
     666,   666,   667,   667,   668,   668,   668,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   670,   670,   670,
     671,   671,   672,   672,   673,   673,   674,   674,   674,   674,
     675,   676,   676,   955,   955,   955,   955,   956,   956,   956,
     956,   957,   957,   957,   957,   958,   958,   959,   959,   959,
     959,   959,   959,   959,   960,   960,   707,   707,   707,   707,
     707,   708,   708,   709,   709,   947,   947,   947,   947,   947,
     948,   948,   948,   948,   948,   949,   949,   950,   950,   951,
     951,   650,   650,   651,   651,   651,   652,   652,   653,   653,
     540,   540,   541,   542,   542,   543,   543,   544,   544,   952,
     952,   952,   952,   953,   953,   954,   954,   954,   961,   961,
     961,   961,   961,   961,   961,   961,   962,   962,   963,   963,
     964,   964,   965,   965,   545,   966,   966,   966,   966,   966,
     967,   967,   967,   967,   621,   621,   621,   622,   622,   622,
     623,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     1,     0,     2,     3,     2,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,     9,
       1,     4,     4,     7,     2,     1,     3,     2,     2,     0,
       4,     3,     0,     1,     0,     2,     3,     5,     2,     2,
       0,     8,     5,     0,     5,     5,     7,     2,     0,     1,
       1,     1,     3,     2,     0,     1,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     2,     6,     8,     5,     1,
       0,     1,     3,     2,     4,     5,     5,     8,     7,     1,
       0,     7,    10,     9,     0,     1,     2,     2,     4,     1,
       3,     1,     1,     3,     0,     1,     1,     3,     9,    12,
       1,     3,     1,     3,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     3,     5,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     2,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     4,     6,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     1,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     3,     3,     1,     2,     4,     4,     2,     3,
       5,     5,     1,     1,     3,     0,    11,    11,    10,    12,
       1,     2,     5,     4,     4,     4,     4,     7,     5,     4,
       7,     6,     9,     9,     4,     1,     1,     1,     1,     1,
       1,     1,     5,     1,     1,     3,     1,     2,     2,     2,
       3,     1,     3,     7,     1,     2,     0,     2,     0,     3,
       3,     4,     4,     4,     4,     3,     2,     1,     1,     0,
       1,     1,     0,     2,     1,     5,     1,     0,     2,     2,
       0,     1,     0,     3,     5,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     2,     2,
       2,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     3,     3,     0,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     2,     4,     4,     5,     1,     1,     2,
       0,     2,     0,     1,     3,     1,     0,     1,     2,     3,
       2,     4,     2,     3,     2,     0,     1,     2,     0,     4,
       5,     1,     2,     2,     0,     1,     3,     1,     2,     3,
       3,     3,     3,     3,     3,     1,     4,     9,     9,     3,
       0,     2,     2,     0,     5,     3,     1,     3,     5,     3,
       1,     2,     1,     3,     5,     1,     2,     3,     4,     5,
       4,     5,     4,     6,     5,     4,     5,     5,     5,     2,
       4,     1,     1,     0,     1,     4,     5,     4,     0,     2,
       2,     2,     1,     1,     1,     1,     0,     4,     2,     1,
       2,     2,     4,     2,     6,     2,     1,     3,     4,     0,
       2,     0,     2,     0,     1,     3,     3,     2,     0,     2,
       4,     1,     1,     1,     0,     2,     3,     5,     6,     2,
       3,     5,     5,     5,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     4,     3,     5,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     5,     6,     6,     7,     1,
       1,     2,     1,     1,     2,     2,     3,     1,     2,     4,
       1,     1,     2,     2,     4,     1,     1,     3,     1,     4,
       1,     3,     3,     6,     7,     9,     7,     7,     5,     1,
       1,     1,     5,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     7,     9,     5,     0,
       5,     4,     0,     1,     0,     2,     0,     1,     3,     3,
       2,     2,     0,     6,     1,     0,     3,     0,     3,     3,
       3,     0,     1,     4,     2,     2,     2,     2,     2,     3,
       2,     2,     3,     0,     4,     3,     1,     5,     3,     1,
       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
       3,     5,     7,     7,     1,     0,     0,     2,     0,     2,
       3,     3,     3,     5,     7,     7,     0,     2,     1,     0,
       1,     0,     1,     3,     1,     2,     3,     2,     1,     4,
       2,     1,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,
       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
       8,     3,     2,     1,     0,     4,     6,     3,     2,     4,
       3,     5,     1,     0,     1,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     3,     3,     3,     1,     3,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     2,     2,     3,     4,
       5,     1,     1,     1,     1,     4,     6,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     7,     3,     1,     2,     3,     2,     0,     2,     0,
       2,     4,     5,     3,     5,     1,     0,     2,     0,     2,
       3,     3,     3,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     3,     1,     1,     1,     1,     0,
       1,     3,     1,     3,     2,     9,    12,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 499 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 515 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 527 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* stmt: %empty  */
#line 575 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name '(' secret_key_val ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name '(' secret_key_val ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-8].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name '(' secret_key_val ')'  */
#line 26 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_secret_name: %empty  */
#line 37 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_secret_name: ColId  */
#line 38 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* secret_key: ColId SCONST  */
#line 43 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 20132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* secret_key: ColId ColId  */
#line 44 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* secret_key: ColId '[' scope_list_val ']'  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = list_make2((yyvsp[-3].str), (yyvsp[-1].list)); }
#line 20144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* secret_key_val: secret_key  */
#line 49 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* secret_key_val: secret_key_val ',' secret_key  */
#line 50 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* scope_list_val_item: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.value) = makeString((yyvsp[0].str)); }
#line 20162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* scope_list_val: scope_list_val_item  */
#line 59 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].value)); }
#line 20168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* scope_list_val: scope_list_val ',' scope_list_val_item  */
#line 60 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].value)); }
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: %empty  */
#line 65 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_persist: TEMPORARY  */
#line 66 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_persist: PERMANENT  */
#line 67 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = strdup("permanent"); }
#line 20192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* DropSecretStmt: DROP SECRET ColId  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->secret_name = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* DropSecretStmt: DROP SECRET ColId IF_P EXISTS  */
#line 15 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->secret_name = (yyvsp[-2].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 20538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* opt_slice_bound: a_expr  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_slice_bound: %empty  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_indirection: opt_indirection indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_func_arguments: %empty  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_func_arguments: '(' ')'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* extended_indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_extended_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_target_list_opt_comma: %empty  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* target_list: target_el  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* target_list: target_list ',' target_el  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* target_list_opt_comma: target_list  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* target_list_opt_comma: target_list ','  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* target_el: a_expr AS ColLabelOrString  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* target_el: a_expr IDENT  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* target_el: a_expr  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* except_list: EXCLUDE ColId  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_except_list: except_list  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_except_list: %empty  */
#line 3842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* replace_list_el: a_expr AS ColId  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* replace_list: replace_list_el  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* replace_list: replace_list ',' replace_list_el  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* replace_list_opt_comma: replace_list  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* replace_list_opt_comma: replace_list ','  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* opt_replace_list: REPLACE replace_list_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* opt_replace_list: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* qualified_name_list: qualified_name  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* name_list: name  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* name_list: name_list ',' name  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* name_list_opt_comma: name_list  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* name_list_opt_comma: name_list ','  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* name: ColIdOrString  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_name: function_name_token  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* func_name: ColId indirection  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* AexprConst: Iconst  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* AexprConst: FCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* AexprConst: Sconst opt_indirection  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* AexprConst: BCONST  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* AexprConst: XCONST  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* AexprConst: func_name Sconst  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* AexprConst: ConstTypename Sconst  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* AexprConst: TRUE_P  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* AexprConst: FALSE_P  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* AexprConst: NULL_P  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* Iconst: ICONST  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* type_function_name: IDENT  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* type_function_name: unreserved_keyword  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* type_function_name: type_func_name_keyword  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* function_name_token: IDENT  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* function_name_token: unreserved_keyword  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* function_name_token: func_name_keyword  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* type_name_token: IDENT  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* type_name_token: unreserved_keyword  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* type_name_token: type_name_keyword  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* any_name: ColId  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* any_name: ColId attrs  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* attrs: '.' attr_name  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* attrs: attrs '.' attr_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* opt_name_list: %empty  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* ColLabelOrString: ColLabel  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* ColLabelOrString: SCONST  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30352 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
