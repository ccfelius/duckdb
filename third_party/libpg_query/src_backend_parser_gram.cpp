/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 157,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 181,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 182,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 183,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 184,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 185,                  /* HANDLER  */
  YYSYMBOL_HAVING = 186,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 187,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 188,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 189,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 190,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 191,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 192,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 193,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 194,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 195,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 196,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 197,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 198,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 199,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 200,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 201,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 202,                /* INCREMENT  */
  YYSYMBOL_INDEX = 203,                    /* INDEX  */
  YYSYMBOL_INDEXES = 204,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 205,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 206,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 207,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 208,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 209,                  /* INNER_P  */
  YYSYMBOL_INOUT = 210,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 211,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 212,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 213,                   /* INSERT  */
  YYSYMBOL_INSTALL = 214,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 215,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 216,                    /* INT_P  */
  YYSYMBOL_INTEGER = 217,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 218,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 219,                 /* INTERVAL  */
  YYSYMBOL_INTO = 220,                     /* INTO  */
  YYSYMBOL_INVOKER = 221,                  /* INVOKER  */
  YYSYMBOL_IS = 222,                       /* IS  */
  YYSYMBOL_ISNULL = 223,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 224,                /* ISOLATION  */
  YYSYMBOL_JOIN = 225,                     /* JOIN  */
  YYSYMBOL_JSON = 226,                     /* JSON  */
  YYSYMBOL_KEY = 227,                      /* KEY  */
  YYSYMBOL_LABEL = 228,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 229,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 230,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 231,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 232,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 233,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 234,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 235,                     /* LEFT  */
  YYSYMBOL_LEVEL = 236,                    /* LEVEL  */
  YYSYMBOL_LIKE = 237,                     /* LIKE  */
  YYSYMBOL_LIMIT = 238,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 239,                   /* LISTEN  */
  YYSYMBOL_LOAD = 240,                     /* LOAD  */
  YYSYMBOL_LOCAL = 241,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 242,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 243,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 244,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 245,                   /* LOGGED  */
  YYSYMBOL_MACRO = 246,                    /* MACRO  */
  YYSYMBOL_MAP = 247,                      /* MAP  */
  YYSYMBOL_MAPPING = 248,                  /* MAPPING  */
  YYSYMBOL_MATCH = 249,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 250,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 251,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 252,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 253,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 254,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 255,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 256,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 257,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 258,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 259,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 260,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 261,                 /* MINVALUE  */
  YYSYMBOL_MODE = 262,                     /* MODE  */
  YYSYMBOL_MONTH_P = 263,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 264,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 265,                     /* MOVE  */
  YYSYMBOL_NAME_P = 266,                   /* NAME_P  */
  YYSYMBOL_NAMES = 267,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 268,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 269,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 270,                    /* NCHAR  */
  YYSYMBOL_NEW = 271,                      /* NEW  */
  YYSYMBOL_NEXT = 272,                     /* NEXT  */
  YYSYMBOL_NO = 273,                       /* NO  */
  YYSYMBOL_NONE = 274,                     /* NONE  */
  YYSYMBOL_NOT = 275,                      /* NOT  */
  YYSYMBOL_NOTHING = 276,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 277,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 278,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 279,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 280,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 281,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 282,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 283,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 284,                 /* OBJECT_P  */
  YYSYMBOL_OF = 285,                       /* OF  */
  YYSYMBOL_OFF = 286,                      /* OFF  */
  YYSYMBOL_OFFSET = 287,                   /* OFFSET  */
  YYSYMBOL_OIDS = 288,                     /* OIDS  */
  YYSYMBOL_OLD = 289,                      /* OLD  */
  YYSYMBOL_ON = 290,                       /* ON  */
  YYSYMBOL_ONLY = 291,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 292,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 293,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 294,                  /* OPTIONS  */
  YYSYMBOL_OR = 295,                       /* OR  */
  YYSYMBOL_ORDER = 296,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 297,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 298,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 299,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 300,                  /* OUTER_P  */
  YYSYMBOL_OVER = 301,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 302,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 303,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 304,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 305,                    /* OWNED  */
  YYSYMBOL_OWNER = 306,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 307,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 308,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 309,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 310,                /* PARTITION  */
  YYSYMBOL_PASSING = 311,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 312,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 313,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 314,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 315,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 316,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 317,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 318,                  /* PLACING  */
  YYSYMBOL_PLANS = 319,                    /* PLANS  */
  YYSYMBOL_POLICY = 320,                   /* POLICY  */
  YYSYMBOL_POSITION = 321,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 322,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 323,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 324,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 325,                /* PRECISION  */
  YYSYMBOL_PREPARE = 326,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 327,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 328,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 329,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 330,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 331,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 332,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 333,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 334,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 335,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 336,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 337,                    /* QUOTE  */
  YYSYMBOL_RANGE = 338,                    /* RANGE  */
  YYSYMBOL_READ_P = 339,                   /* READ_P  */
  YYSYMBOL_REAL = 340,                     /* REAL  */
  YYSYMBOL_REASSIGN = 341,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 342,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 343,                /* RECURSIVE  */
  YYSYMBOL_REF = 344,                      /* REF  */
  YYSYMBOL_REFERENCES = 345,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 346,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 347,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 348,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 349,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 350,                  /* RELEASE  */
  YYSYMBOL_RENAME = 351,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 352,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 353,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 354,                  /* REPLICA  */
  YYSYMBOL_RESET = 355,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 356,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 357,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 358,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 359,                /* RETURNING  */
  YYSYMBOL_RETURNS = 360,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 361,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 362,                    /* RIGHT  */
  YYSYMBOL_ROLE = 363,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 364,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 365,                   /* ROLLUP  */
  YYSYMBOL_ROW = 366,                      /* ROW  */
  YYSYMBOL_ROWS = 367,                     /* ROWS  */
  YYSYMBOL_RULE = 368,                     /* RULE  */
  YYSYMBOL_SAMPLE = 369,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 370,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 371,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 372,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 373,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 374,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 375,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 376,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 377,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 378,                   /* SECRET  */
  YYSYMBOL_SECURITY = 379,                 /* SECURITY  */
  YYSYMBOL_SELECT = 380,                   /* SELECT  */
  YYSYMBOL_SEMI = 381,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 382,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 383,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 384,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 385,                   /* SERVER  */
  YYSYMBOL_SESSION = 386,                  /* SESSION  */
  YYSYMBOL_SET = 387,                      /* SET  */
  YYSYMBOL_SETOF = 388,                    /* SETOF  */
  YYSYMBOL_SETS = 389,                     /* SETS  */
  YYSYMBOL_SHARE = 390,                    /* SHARE  */
  YYSYMBOL_SHOW = 391,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 392,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 393,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 394,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 395,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 396,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 397,                     /* SOME  */
  YYSYMBOL_SQL_P = 398,                    /* SQL_P  */
  YYSYMBOL_STABLE = 399,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 400,             /* STANDALONE_P  */
  YYSYMBOL_START = 401,                    /* START  */
  YYSYMBOL_STATEMENT = 402,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 403,               /* STATISTICS  */
  YYSYMBOL_STDIN = 404,                    /* STDIN  */
  YYSYMBOL_STDOUT = 405,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 406,                  /* STORAGE  */
  YYSYMBOL_STORED = 407,                   /* STORED  */
  YYSYMBOL_STRICT_P = 408,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 409,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 410,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 411,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 412,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 413,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 414,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 415,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 416,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 417,                    /* TABLE  */
  YYSYMBOL_TABLES = 418,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 419,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 420,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 421,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 422,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 423,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 424,                   /* TEXT_P  */
  YYSYMBOL_THEN = 425,                     /* THEN  */
  YYSYMBOL_TIES = 426,                     /* TIES  */
  YYSYMBOL_TIME = 427,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 428,                /* TIMESTAMP  */
  YYSYMBOL_TO = 429,                       /* TO  */
  YYSYMBOL_TRAILING = 430,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 431,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 432,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 433,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 434,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 435,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 436,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 437,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 438,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 439,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 440,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 441,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 442,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 443,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 444,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 445,                    /* UNION  */
  YYSYMBOL_UNIQUE = 446,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 447,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 448,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 449,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 450,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 451,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 452,                   /* UPDATE  */
  YYSYMBOL_USE_P = 453,                    /* USE_P  */
  YYSYMBOL_USER = 454,                     /* USER  */
  YYSYMBOL_USING = 455,                    /* USING  */
  YYSYMBOL_VACUUM = 456,                   /* VACUUM  */
  YYSYMBOL_VALID = 457,                    /* VALID  */
  YYSYMBOL_VALIDATE = 458,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 459,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 460,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 461,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 462,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 463,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 464,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 465,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 466,                /* VERSION_P  */
  YYSYMBOL_VIEW = 467,                     /* VIEW  */
  YYSYMBOL_VIEWS = 468,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 469,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 470,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 471,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 472,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 473,                     /* WHEN  */
  YYSYMBOL_WHERE = 474,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 475,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 476,                   /* WINDOW  */
  YYSYMBOL_WITH = 477,                     /* WITH  */
  YYSYMBOL_WITHIN = 478,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 479,                  /* WITHOUT  */
  YYSYMBOL_WORK = 480,                     /* WORK  */
  YYSYMBOL_WRAPPER = 481,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 482,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 483,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 484,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 485,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 486,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 487,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 488,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 489,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 490,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 491,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 492,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 493,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 494,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 495,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 496,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 497,                    /* YES_P  */
  YYSYMBOL_ZONE = 498,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 499,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 500,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 501,                  /* WITH_LA  */
  YYSYMBOL_502_ = 502,                     /* '<'  */
  YYSYMBOL_503_ = 503,                     /* '>'  */
  YYSYMBOL_504_ = 504,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 505,                /* POSTFIXOP  */
  YYSYMBOL_506_ = 506,                     /* '+'  */
  YYSYMBOL_507_ = 507,                     /* '-'  */
  YYSYMBOL_508_ = 508,                     /* '*'  */
  YYSYMBOL_509_ = 509,                     /* '/'  */
  YYSYMBOL_510_ = 510,                     /* '%'  */
  YYSYMBOL_511_ = 511,                     /* '^'  */
  YYSYMBOL_UMINUS = 512,                   /* UMINUS  */
  YYSYMBOL_513_ = 513,                     /* '['  */
  YYSYMBOL_514_ = 514,                     /* ']'  */
  YYSYMBOL_515_ = 515,                     /* '('  */
  YYSYMBOL_516_ = 516,                     /* ')'  */
  YYSYMBOL_517_ = 517,                     /* '.'  */
  YYSYMBOL_518_ = 518,                     /* ';'  */
  YYSYMBOL_519_ = 519,                     /* ','  */
  YYSYMBOL_520_ = 520,                     /* '?'  */
  YYSYMBOL_521_ = 521,                     /* '{'  */
  YYSYMBOL_522_ = 522,                     /* '}'  */
  YYSYMBOL_523_ = 523,                     /* '#'  */
  YYSYMBOL_524_ = 524,                     /* '$'  */
  YYSYMBOL_525_ = 525,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 526,                 /* $accept  */
  YYSYMBOL_stmtblock = 527,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 528,                /* stmtmulti  */
  YYSYMBOL_stmt = 529,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 530,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 531,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 532,               /* SeqOptList  */
  YYSYMBOL_opt_with = 533,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 534,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 535,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 536,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 537,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 538,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 539, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 540,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 541, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 542, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 543,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 544,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 545, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 546,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 547,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 548,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 549,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 550,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 551,               /* DetachStmt  */
  YYSYMBOL_opt_database = 552,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 553,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 554,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 555,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 556,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 557,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 558,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 559, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 560,           /* qualified_name  */
  YYSYMBOL_ColId = 561,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 562,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 563,                   /* Sconst  */
  YYSYMBOL_indirection = 564,              /* indirection  */
  YYSYMBOL_indirection_el = 565,           /* indirection_el  */
  YYSYMBOL_attr_name = 566,                /* attr_name  */
  YYSYMBOL_ColLabel = 567,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 568,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 569,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 570,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 571,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 572, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 573,                /* opt_using  */
  YYSYMBOL_opt_as = 574,                   /* opt_as  */
  YYSYMBOL_opt_program = 575,              /* opt_program  */
  YYSYMBOL_copy_options = 576,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 577,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 578,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 579,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 580,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 581,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 582,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 583, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 584,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 585,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 586,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 587,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 588,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 589, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 590,       /* generic_option_arg  */
  YYSYMBOL_key_action = 591,               /* key_action  */
  YYSYMBOL_ColConstraint = 592,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 593,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 594,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 595,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 596,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 597,      /* generic_option_elem  */
  YYSYMBOL_key_update = 598,               /* key_update  */
  YYSYMBOL_key_actions = 599,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 600,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 601,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 602,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 603,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 604,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 605,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 606,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 607,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 608,                  /* OptWith  */
  YYSYMBOL_definition = 609,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 610,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 611,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 612,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 613,                /* columnDef  */
  YYSYMBOL_def_list = 614,                 /* def_list  */
  YYSYMBOL_index_name = 615,               /* index_name  */
  YYSYMBOL_TableElement = 616,             /* TableElement  */
  YYSYMBOL_def_elem = 617,                 /* def_elem  */
  YYSYMBOL_opt_definition = 618,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 619,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 620,               /* columnElem  */
  YYSYMBOL_opt_column_list = 621,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 622,              /* ColQualList  */
  YYSYMBOL_key_delete = 623,               /* key_delete  */
  YYSYMBOL_reloption_elem = 624,           /* reloption_elem  */
  YYSYMBOL_columnList = 625,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 626,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 627,                /* func_type  */
  YYSYMBOL_ConstraintElem = 628,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 629,         /* TableElementList  */
  YYSYMBOL_key_match = 630,                /* key_match  */
  YYSYMBOL_TableLikeClause = 631,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 632,                  /* OptTemp  */
  YYSYMBOL_generated_when = 633,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 634,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 635,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 636,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 637,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 638,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 639,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 640,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 641,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 642,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 643,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 644,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 645,              /* macro_alias  */
  YYSYMBOL_param_list = 646,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 647,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 648,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 649,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 650,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 651,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 652,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 653,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 654,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 655,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 656,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 657,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 658,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 659,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 660,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 661,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 662,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 663,             /* using_clause  */
  YYSYMBOL_DropStmt = 664,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 665,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 666,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 667,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 668,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 669, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 670,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 671, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 672,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 673,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 674,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 675,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 676,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 677,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 678,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 679,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 680,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 681, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 682,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 683,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 684,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 685,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 686,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 687,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 688,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 689,                /* IndexStmt  */
  YYSYMBOL_access_method = 690,            /* access_method  */
  YYSYMBOL_access_method_clause = 691,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 692,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 693,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 694,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 695,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 696,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 697,              /* insert_rest  */
  YYSYMBOL_insert_target = 698,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 699,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 700,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 701,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 702,       /* insert_column_item  */
  YYSYMBOL_set_clause = 703,               /* set_clause  */
  YYSYMBOL_opt_or_action = 704,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 705,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 706,               /* index_elem  */
  YYSYMBOL_returning_clause = 707,         /* returning_clause  */
  YYSYMBOL_override_kind = 708,            /* override_kind  */
  YYSYMBOL_set_target_list = 709,          /* set_target_list  */
  YYSYMBOL_opt_collate = 710,              /* opt_collate  */
  YYSYMBOL_opt_class = 711,                /* opt_class  */
  YYSYMBOL_insert_column_list = 712,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 713,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 714, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 715,             /* index_params  */
  YYSYMBOL_set_target = 716,               /* set_target  */
  YYSYMBOL_LoadStmt = 717,                 /* LoadStmt  */
  YYSYMBOL_file_name = 718,                /* file_name  */
  YYSYMBOL_opt_from_repo = 719,            /* opt_from_repo  */
  YYSYMBOL_opt_ext_version = 720,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 721,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 722,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 723,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 724,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 725,               /* RenameStmt  */
  YYSYMBOL_opt_column = 726,               /* opt_column  */
  YYSYMBOL_SelectStmt = 727,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 728,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 729,         /* select_no_parens  */
  YYSYMBOL_select_clause = 730,            /* select_clause  */
  YYSYMBOL_opt_select = 731,               /* opt_select  */
  YYSYMBOL_simple_select = 732,            /* simple_select  */
  YYSYMBOL_value_or_values = 733,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 734,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 735,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 736,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 737, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 738,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 739,              /* with_clause  */
  YYSYMBOL_cte_list = 740,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 741,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 742,         /* opt_materialized  */
  YYSYMBOL_into_clause = 743,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 744,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 745,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 746,          /* all_or_distinct  */
  YYSYMBOL_by_name = 747,                  /* by_name  */
  YYSYMBOL_distinct_clause = 748,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 749,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 750,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 751,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 752,              /* sort_clause  */
  YYSYMBOL_sortby_list = 753,              /* sortby_list  */
  YYSYMBOL_sortby = 754,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 755,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 756,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 757,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 758,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 759,             /* limit_clause  */
  YYSYMBOL_offset_clause = 760,            /* offset_clause  */
  YYSYMBOL_sample_count = 761,             /* sample_count  */
  YYSYMBOL_sample_clause = 762,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 763,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 764,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 765,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 766,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 767,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 768,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 769,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 770, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 771,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 772,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 773,            /* first_or_next  */
  YYSYMBOL_group_clause = 774,             /* group_clause  */
  YYSYMBOL_group_by_list = 775,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 776,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 777,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 778,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 779,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 780,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 781,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 782,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 783,            /* having_clause  */
  YYSYMBOL_qualify_clause = 784,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 785,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 786,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 787,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 788,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 789,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 790,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 791,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 792,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 793,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 794,              /* from_clause  */
  YYSYMBOL_from_list = 795,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 796,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 797,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 798,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 799,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 800,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 801,             /* pivot_header  */
  YYSYMBOL_pivot_value = 802,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 803,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 804,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 805,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 806,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 807,             /* joined_table  */
  YYSYMBOL_alias_clause = 808,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 809,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 810,        /* func_alias_clause  */
  YYSYMBOL_join_type = 811,                /* join_type  */
  YYSYMBOL_join_outer = 812,               /* join_outer  */
  YYSYMBOL_join_qual = 813,                /* join_qual  */
  YYSYMBOL_relation_expr = 814,            /* relation_expr  */
  YYSYMBOL_func_table = 815,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 816,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 817,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 818,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 819,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 820,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 821,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 822,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 823,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 824,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 825,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 826,             /* opt_Typename  */
  YYSYMBOL_Typename = 827,                 /* Typename  */
  YYSYMBOL_qualified_typename = 828,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 829,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 830,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 831,            /* ConstTypename  */
  YYSYMBOL_GenericType = 832,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 833,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 834,                  /* Numeric  */
  YYSYMBOL_opt_float = 835,                /* opt_float  */
  YYSYMBOL_Bit = 836,                      /* Bit  */
  YYSYMBOL_ConstBit = 837,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 838,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 839,         /* BitWithoutLength  */
  YYSYMBOL_Character = 840,                /* Character  */
  YYSYMBOL_ConstCharacter = 841,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 842,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 843,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 844,                /* character  */
  YYSYMBOL_opt_varying = 845,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 846,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 847,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 848,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 849,             /* year_keyword  */
  YYSYMBOL_month_keyword = 850,            /* month_keyword  */
  YYSYMBOL_day_keyword = 851,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 852,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 853,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 854,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 855,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 856,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 857,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 858,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 859,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 860,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 861,             /* opt_interval  */
  YYSYMBOL_a_expr = 862,                   /* a_expr  */
  YYSYMBOL_b_expr = 863,                   /* b_expr  */
  YYSYMBOL_c_expr = 864,                   /* c_expr  */
  YYSYMBOL_d_expr = 865,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 866, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 867,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 868,              /* struct_expr  */
  YYSYMBOL_func_application = 869,         /* func_application  */
  YYSYMBOL_func_expr = 870,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 871,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 872, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 873,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 874,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 875,            /* filter_clause  */
  YYSYMBOL_export_clause = 876,            /* export_clause  */
  YYSYMBOL_window_clause = 877,            /* window_clause  */
  YYSYMBOL_window_definition_list = 878,   /* window_definition_list  */
  YYSYMBOL_window_definition = 879,        /* window_definition  */
  YYSYMBOL_over_clause = 880,              /* over_clause  */
  YYSYMBOL_window_specification = 881,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 882, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 883,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 884,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 885,             /* frame_extent  */
  YYSYMBOL_frame_bound = 886,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 887, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 888,            /* qualified_row  */
  YYSYMBOL_row = 889,                      /* row  */
  YYSYMBOL_dict_arg = 890,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 891,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 892, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 893,                  /* map_arg  */
  YYSYMBOL_map_arguments = 894,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 895,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 896, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 897,                 /* sub_type  */
  YYSYMBOL_all_Op = 898,                   /* all_Op  */
  YYSYMBOL_MathOp = 899,                   /* MathOp  */
  YYSYMBOL_qual_Op = 900,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 901,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 902,              /* subquery_Op  */
  YYSYMBOL_any_operator = 903,             /* any_operator  */
  YYSYMBOL_c_expr_list = 904,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 905,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 906,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 907,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 908,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 909,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 910,            /* func_arg_expr  */
  YYSYMBOL_type_list = 911,                /* type_list  */
  YYSYMBOL_extract_list = 912,             /* extract_list  */
  YYSYMBOL_extract_arg = 913,              /* extract_arg  */
  YYSYMBOL_overlay_list = 914,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 915,          /* overlay_placing  */
  YYSYMBOL_position_list = 916,            /* position_list  */
  YYSYMBOL_substr_list = 917,              /* substr_list  */
  YYSYMBOL_substr_from = 918,              /* substr_from  */
  YYSYMBOL_substr_for = 919,               /* substr_for  */
  YYSYMBOL_trim_list = 920,                /* trim_list  */
  YYSYMBOL_in_expr = 921,                  /* in_expr  */
  YYSYMBOL_case_expr = 922,                /* case_expr  */
  YYSYMBOL_when_clause_list = 923,         /* when_clause_list  */
  YYSYMBOL_when_clause = 924,              /* when_clause  */
  YYSYMBOL_case_default = 925,             /* case_default  */
  YYSYMBOL_case_arg = 926,                 /* case_arg  */
  YYSYMBOL_columnref = 927,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 928,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 929,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 930,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 931,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 932, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 933,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 934, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 935,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 936,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 937,                /* target_el  */
  YYSYMBOL_except_list = 938,              /* except_list  */
  YYSYMBOL_opt_except_list = 939,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 940,          /* replace_list_el  */
  YYSYMBOL_replace_list = 941,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 942,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 943,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 944,      /* qualified_name_list  */
  YYSYMBOL_name_list = 945,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 946,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 947, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 948,                     /* name  */
  YYSYMBOL_func_name = 949,                /* func_name  */
  YYSYMBOL_AexprConst = 950,               /* AexprConst  */
  YYSYMBOL_Iconst = 951,                   /* Iconst  */
  YYSYMBOL_type_function_name = 952,       /* type_function_name  */
  YYSYMBOL_function_name_token = 953,      /* function_name_token  */
  YYSYMBOL_type_name_token = 954,          /* type_name_token  */
  YYSYMBOL_any_name = 955,                 /* any_name  */
  YYSYMBOL_attrs = 956,                    /* attrs  */
  YYSYMBOL_opt_name_list = 957,            /* opt_name_list  */
  YYSYMBOL_param_name = 958,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 959,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 960,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 961,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 962,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 963,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 964,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 965,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 966,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 967,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 968,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 969,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 970,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 971,            /* generic_reset  */
  YYSYMBOL_reset_rest = 972,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 973,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 974,                 /* set_rest  */
  YYSYMBOL_generic_set = 975,              /* generic_set  */
  YYSYMBOL_var_value = 976,                /* var_value  */
  YYSYMBOL_zone_value = 977,               /* zone_value  */
  YYSYMBOL_var_list = 978,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 979,         /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 980,         /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 981,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 982,               /* opt_tables  */
  YYSYMBOL_var_name = 983,                 /* var_name  */
  YYSYMBOL_table_id = 984,                 /* table_id  */
  YYSYMBOL_ViewStmt = 985,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 986          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  870
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73056

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  526
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  461
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2124
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3531

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   758


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   523,   524,   510,     2,     2,
     515,   516,   508,   506,   519,   507,   517,   509,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   525,   518,
     502,   504,   503,   520,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   513,     2,   514,   511,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   521,     2,   522,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   505,   512
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   505,   505,   521,   533,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   584,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       9,    13,    44,    45,    46,    50,    51,    55,    59,    60,
      64,    70,    75,    76,    77,    78,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     9,    23,    29,    36,    42,    49,    59,    63,    71,
      72,    73,    77,    86,    95,   102,   103,   108,   120,   125,
     150,   155,   160,   166,   176,   186,   192,   203,   214,   229,
     230,   236,   237,   242,   243,   249,   250,   254,   255,   260,
     262,   268,   269,   273,   274,   277,   278,   283,     7,    16,
      25,    46,    47,    50,    54,     7,    14,    22,     9,    19,
      29,    42,    43,     7,    17,    27,    40,    41,    45,    46,
      47,    51,    52,     7,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     7,    16,    28,    29,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      95,    96,    97,    98,    99,   100,   105,   106,   111,   112,
     113,   118,   119,   120,     8,    20,    33,    46,    58,    70,
      86,    87,    91,    95,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   126,   134,   138,   143,   144,   149,   153,   158,   162,
     166,   170,   174,   178,   182,   186,   190,   194,   198,   202,
     206,   210,   214,   218,   226,   231,   232,   233,   234,   235,
     241,   245,    47,    48,    52,    53,    54,    72,    73,    80,
      88,    96,   104,   112,   120,   131,   132,   159,   164,   172,
     188,   205,   222,   239,   240,   259,   263,   267,   271,   275,
     285,   296,   306,   315,   326,   337,   349,   364,   382,   382,
     386,   386,   390,   390,   394,   400,   407,   411,   412,   416,
     417,   431,   438,   445,   455,   456,   459,   472,   473,   474,
     478,   489,   497,   502,   507,   512,   517,   525,   533,   538,
     543,   550,   551,   555,   556,   557,   561,   568,   569,   573,
     574,   578,   579,   580,   584,   585,   589,   590,   606,   607,
     610,   619,   630,   631,   632,   635,   636,   637,   641,   642,
     643,   644,   648,   649,   653,   655,   671,   673,   678,   681,
     689,   693,   697,   701,   705,   709,   716,   721,   728,   729,
     733,   738,   742,   746,   754,   761,   762,   767,   768,   772,
     773,   778,   780,   782,   787,   807,   808,   810,   815,   816,
     820,   821,   824,   825,   850,   851,   856,   860,   861,   865,
     866,   870,   871,   872,   873,   874,   878,   891,   898,   905,
     912,   913,   917,   918,   922,   923,   927,   928,   932,   933,
     937,   938,   942,   953,   954,   955,   956,   960,   961,   966,
     967,   968,   977,   983,   992,   993,  1006,  1007,  1011,  1012,
    1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,  1076,
    1081,  1092,  1106,  1107,  1110,  1111,  1112,  1115,  1123,  1132,
    1133,  1134,  1135,  1138,  1146,  1155,  1159,  1166,  1167,  1171,
    1180,  1184,  1209,  1213,  1226,  1240,  1255,  1267,  1280,  1294,
    1308,  1321,  1336,  1355,  1361,  1366,  1372,  1379,  1380,  1388,
    1392,  1396,  1402,  1409,  1414,  1415,  1416,  1417,  1418,  1419,
    1423,  1424,  1436,  1437,  1442,  1449,  1456,  1463,  1495,  1506,
    1519,  1524,  1525,  1528,  1529,  1532,  1533,  1538,  1539,  1544,
    1548,  1554,  1575,  1583,  1596,  1599,  1603,  1603,  1606,  1607,
    1609,  1614,  1621,  1626,  1632,  1637,  1643,  1647,  1654,  1661,
    1671,  1672,  1676,  1678,  1681,  1685,  1686,  1687,  1688,  1689,
    1690,  1695,  1715,  1716,  1717,  1718,  1729,  1743,  1744,  1750,
    1755,  1760,  1765,  1770,  1775,  1780,  1785,  1791,  1797,  1803,
    1810,  1832,  1841,  1845,  1853,  1857,  1865,  1877,  1898,  1902,
    1908,  1912,  1925,  1933,  1943,  1945,  1947,  1949,  1951,  1953,
    1958,  1959,  1966,  1975,  1983,  1992,  2003,  2011,  2012,  2013,
    2017,  2017,  2020,  2020,  2023,  2023,  2026,  2026,  2029,  2029,
    2032,  2032,  2035,  2035,  2038,  2038,  2041,  2041,  2044,  2044,
    2047,  2047,  2050,  2050,  2053,  2055,  2057,  2059,  2061,  2063,
    2065,  2067,  2069,  2071,  2073,  2075,  2077,  2082,  2087,  2093,
    2100,  2105,  2111,  2117,  2148,  2150,  2152,  2160,  2175,  2177,
    2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2208,  2210,  2212,  2215,  2217,  2219,
    2221,  2223,  2228,  2233,  2240,  2245,  2252,  2257,  2264,  2269,
    2277,  2285,  2293,  2301,  2319,  2327,  2335,  2343,  2351,  2359,
    2367,  2371,  2387,  2395,  2403,  2411,  2419,  2427,  2435,  2439,
    2443,  2447,  2451,  2459,  2467,  2475,  2483,  2503,  2525,  2536,
    2543,  2557,  2565,  2573,  2593,  2595,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2635,  2639,  2643,  2647,  2661,
    2662,  2676,  2677,  2678,  2689,  2713,  2724,  2734,  2738,  2742,
    2749,  2753,  2760,  2764,  2781,  2785,  2787,  2791,  2794,  2805,
    2810,  2817,  2825,  2834,  2838,  2845,  2853,  2861,  2872,  2892,
    2928,  2939,  2940,  2947,  2953,  2955,  2957,  2961,  2970,  2975,
    2982,  2997,  3004,  3008,  3012,  3016,  3020,  3030,  3039,  3061,
    3062,  3066,  3067,  3068,  3072,  3073,  3080,  3081,  3085,  3086,
    3091,  3099,  3101,  3115,  3118,  3145,  3146,  3149,  3150,  3158,
    3166,  3174,  3183,  3193,  3211,  3257,  3266,  3275,  3284,  3293,
    3305,  3306,  3307,  3308,  3309,  3323,  3324,  3327,  3328,  3332,
    3342,  3343,  3347,  3348,  3352,  3359,  3360,  3365,  3366,  3371,
    3372,  3375,  3376,  3377,  3380,  3381,  3384,  3385,  3386,  3387,
    3388,  3389,  3390,  3391,  3392,  3393,  3394,  3395,  3396,  3397,
    3400,  3402,  3407,  3409,  3414,  3416,  3418,  3420,  3422,  3424,
    3426,  3428,  3442,  3444,  3449,  3453,  3460,  3465,  3471,  3475,
    3482,  3487,  3494,  3499,  3507,  3511,  3517,  3521,  3530,  3541,
    3542,  3546,  3550,  3557,  3558,  3559,  3560,  3561,  3562,  3563,
    3564,  3565,  3566,  3567,  3568,  3569,  3570,  3580,  3584,  3591,
    3598,  3599,  3615,  3619,  3624,  3628,  3643,  3648,  3652,  3655,
    3658,  3659,  3660,  3663,  3670,  3680,  3694,  3695,  3699,  3710,
    3711,  3714,  3715,  3718,  3722,  3729,  3737,  3745,  3753,  3763,
    3764,  3769,  3770,  3774,  3775,  3776,  3780,  3789,  3797,  3805,
    3814,  3829,  3830,  3835,  3836,  3846,  3847,  3851,  3852,  3856,
    3857,  3860,  3876,  3884,  3894,  3895,  3898,  3899,  3902,  3906,
    3907,  3911,  3912,  3915,  3916,  3917,  3927,  3928,  3932,  3934,
    3940,  3941,  3945,  3946,  3949,  3960,  3963,  3974,  3978,  3982,
    3994,  3998,  4007,  4014,  4052,  4056,  4060,  4064,  4068,  4072,
    4076,  4082,  4099,  4100,  4101,  4104,  4105,  4106,  4109,  4110,
    4111,  4114,  4115,  4118,  4120,  4125,  4126,  4129,  4133,  4134,
       7,    18,    19,    23,    24,    25,    26,    27,    28,     7,
      26,    50,    73,    80,    85,    86,    87,    88,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,     7,    16,    25,    34,    43,    52,     5,    12,    22,
      23,     7,    15,    26,    27,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,     7,    19,    33,     9,    16,
      26,    33,    44,    45,    50,    51,    52,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    91,    92,
      93,    98,    99,   104,   108,   116,   117,   122,   123,   124,
     130,   135,   143,   144,    10,    16,    22,    28,    38,    39,
      47,    58,    70,    78,    89,    95,    99,   103,   118,   125,
     126,   127,   131,   132,     7,    16,    24,    34,    35,    41,
      42,    43,    46,    47,    48,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    18,    31,    35,    42,    53,    54,    60,    61,
       9,    19,     7,    16,    28,    35,    42,    51,    52,    56,
      57,     2,     7,    12,    17,    26,    33,    43,    44,    51,
       3,    10,    17,    24,    31,    38,    45,    52,    61,    61,
      63,    63,    65,    65,    67,    68,    72,    73,     6,     8,
      21,    34,    47,    65,    87,    88,    89,    90,    11,    24,
      37,    54,    55,    56,    61,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD",
  "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
  "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET", "SECURITY",
  "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'?'", "'{'", "'}'", "'#'",
  "'$'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "opt_from_repo",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr_or_a_expr", "indirection_expr", "struct_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt",
  "UpdateExtensionsStmt", "UseStmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "VariableShowStmt",
  "describe_or_desc", "show_or_describe", "opt_tables", "var_name",
  "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3002)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2050)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6854,   331,   626, -3002, -3002,   663,   331, 49811, 65172,   135,
     331,   179,  3386, 51795, -3002, -3002, 46339,  7167,   331, 55267,
   72523,   305,   283, 32227,   547, 55763, 55763, -3002, -3002, -3002,
   65172, 55267, 56259,   331,   351, 65668, -3002,   331, 34707, 52291,
     352, -3002, 55267,    53,   301, 56755, 55267,  3924,   884,   413,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002,   475, -3002, -3002, -3002, -3002,   152,
   -3002, -3002, -3002, -3002, -3002,   145, -3002,   164,   154, 32227,
   32227,  1950,   433, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, 34211, -3002, -3002, -3002, -3002, 57251, 55267,
   57747, 52787, 58243, -3002,   695,  1005, -3002,   186, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
     187, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002,   539, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002,   197, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,   394,   202,
   -3002, -3002, -3002,   554, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002,  1096, -3002, -3002,   967,  3759, 55267,   877,   924,
     770, -3002, 58739, -3002,   757, 55267, -3002, -3002,  1606,   776,
     961, -3002, -3002, 53283, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   46835, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,   923,
   -3002, -3002,   753, -3002,   189, -3002, -3002,   780,   745, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,   795, -3002,
   -3002, -3002,   849, 66164, 59235, 59731, -3002,   754,  2156,  5604,
   72541, 31233, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,   475,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, 55763, 65172, 55763,   768,   772,
    1127,   792, 32723,   798, 35204,   807,   811,  1162,   823,   855,
     888,   894,   301, 31730,   891,   394, -3002, 60227, 60227,   -81,
    3483, -3002, 60227, 60723, -3002,   917, -3002,  1005, -3002, -3002,
   -3002,  1258, -3002,   322,   919, -3002, 61219, 61219, 61219,   939,
    1224, -3002, -3002, -3002,   941, -3002, -3002,  1173, 20882, 20882,
   66660, 66660,  1005, 66660,   971, -3002, -3002,    65, -3002, -3002,
   -3002,  1950,   956,   394, -3002, -3002, 52291, -3002, -3002,   171,
    1308, 20882, 55267,   978, -3002,   988,   978,  1052,  1057,  1066,
   -3002,  6854, -3002, 55267,  1415,  1226, 53779,   368,   368,  1542,
     368,  1028,  1036,  2706,  1931, -3002,  1044, -3002,  1137,  1206,
    1148,  1432, -3002,   956,  1518,   878,  1324,  1527,  2461,  1530,
    1130,  1549,  1329,  1551,  1665, 20882, 47331,   394, -3002, 12008,
   20882, -3002, -3002, -3002,  1300, -3002, -3002, -3002, -3002, -3002,
   55267, 65172,  1203,  1210, -3002, -3002, -3002, -3002,  1562,  1467,
   -3002,  1721, -3002, -3002,  1298, 61715, 62211, 62707, 63203, 67156,
    1678, -3002, -3002,  1619, -3002, -3002, -3002,  1309, -3002, -3002,
   -3002,   157, 67652,  1621,  1262,   185, -3002,  1629,   220, -3002,
    1633,  1509, 15662, -3002,  1451, -3002, -3002, -3002,   301, -3002,
   -3002, -3002,   603, -3002, -3002, 43416, 72541,  1378,  1295, -3002,
    1258, 20882, 20882,  1305,  7727, 60227, 60723, 20882, 55267, -3002,
   20882, 25580,  1319, 20882, 20882, 13052, 20882, 30241, 60227,  3483,
    1322, -3002,   679, 55267,  1327, -3002,  1427,  1427,   351, 32227,
    1624, -3002,   239,  1628,  1555, -3002, 32227,  1555,  1171,  1345,
    1640,  1555, -3002,   599,  1642,  1427, 35700,  1354, -3002,  1427,
    1581, -3002, -3002, 55763,  1414, 20882, 15662, 70132,  1853, -3002,
   -3002, -3002, -3002,  1659, 65172,  1383, -3002, -3002, -3002, -3002,
   -3002, -3002,   838,  1902,   183,  1913, 20882,   183,   183,  1405,
     203,   203, -3002,  1597,  1410, -3002,   209,  1413,  1417,  1936,
    1937,   192,   141,  1108,   183, 20882, -3002,   203,  1429,  1940,
    1431,  1942,   167,   173, -3002,   210, 20882, 20882, 20882,  1804,
   20882, 10964, -3002, 55267,  1944, 47331,   548, -3002,   394,  1443,
    1005, -3002, -3002, -3002, -3002, -3002, -3002, -3002,  1449, -3002,
     195,  6841, -3002, -3002, -3002, -3002, -3002,  1488, -3002, -3002,
   -3002, -3002,  1669, 20882, -3002, -3002,  1448,  1624, -3002,   211,
   -3002, -3002,  1624, -3002, -3002, -3002, -3002, -3002,   153,  1870,
   20882, 20882, 65172,   394, -3002, 68148, -3002, -3002, -3002, -3002,
   -3002, -3002,   683, -3002,   475, 45058,  1460,  1462,   978, 55267,
   55267,  1935, -3002, -3002, -3002, -3002,   988, 52291,   162,  1761,
     136,  1599, -3002, -3002,  1950,  1950, 16184,  1268,   244,    87,
   16706, 21404,  1824,  1705,   184,   627,  1826, -3002,  1709,  1938,
   25580, 20882, 20882,  1028,  1036, 20882, -3002, -3002, -3002,  1759,
   55267, 50307,   341,   784,  1483,  1570,  1485,    22,  1908, -3002,
    1484, -3002,  1573, 55267, 72071,   224, -3002,  1948,   224,   224,
     247,  1949,  1583,   271,  1744,    32,   327,  2484, -3002,  1484,
   52291,   142,    96,  1484, 55267,  1584,   529,  1484,  1909, 65172,
    1295,  4395,  1500, -3002, -3002, -3002,   166, 15662, -3002,   427,
    1094,  1250,   360,   163,  1304,  1349, 15662,  1376,  1477,   170,
    1497,  1526,  1564,  1580,  1605,  1681,  1686,  1696,   150,  1698,
    1700,  1714,  1719,  1743,  1745, -3002,  1756,   176,  1763,   199,
   15662,  1779, -3002,   182, -3002, 45058,    83, -3002, -3002,  1800,
   45105, -3002,  1805,  1601,  1602, 65172,  1552, 55267,  1644,  1650,
    1882,  1939, 70613, 55267,  1762,  2484,  1765,  1521,  2001,  1770,
    1210,  1771,  1532,  1774, -3002,  1843, -3002, 68644, 47331, -3002,
   -3002, -3002, -3002, -3002,  1899,  1881, 65172, 47331,  1538, -3002,
   -3002, 65172, -3002, 55267, 55267, -3002, 55267, 65172, -3002,   703,
   45058,  2044,   925, 72541, 48819, -3002, -3002, -3002, -3002,   926,
    1067, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
    1005, 47331, -3002,  2192,  1414, 44034,  1544, 20882, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002,  1546,  1894, -3002, -3002,
    6290,  1553, 44081,  1554, 25580, 25580,   394,  1816, -3002, -3002,
   25580,  1558, 49315, 43948,  1548,  1559, 44424, 17228, 20882, 17228,
   17228, 44550, -3002,  1560, 44589, 60227,  1563, 55267, 54275, -3002,
   -3002, -3002, 20882, 20882,  3483, 54771,  1594, -3002, 32227, -3002,
    1852, 32227, -3002, -3002,  2792, -3002, 32227,  1854, 20882, 32227,
   -3002,  1798,  1803,  1571, 32227, -3002, 55267,  1572, 55267, -3002,
   -3002, -3002, -3002, 55763, -3002, 45058, -3002,  1576,   704,  1574,
   -3002, -3002, -3002, -3002, -3002,  1626, -3002,  1626,  1626, -3002,
   -3002, -3002, -3002,  1582,  1582,  1585, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,  1586,
    1108, -3002,  1626, -3002,  1582, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, 72071, -3002, -3002, -3002, -3002,   404,   562, -3002,
    1587, -3002, -3002, -3002, -3002,  1588, -3002,  1589,  2060, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,  8838,   731,
    1582,  3445, -3002, -3002, 20882, 20882, -3002, -3002,  1590, 45058,
    1636, -3002, -3002, 20882, 20882, -3002, -3002, -3002, -3002,  2104,
   -3002, 20882,  1626,  1626, -3002,   311, -3002, 40166, 17750,  1687,
    1688,  2104, -3002,  2104, -3002,   311,  2105,  2105, 38180, -3002,
    1764, 44671, -3002,  1607,  1063,  7957,  1608,  1595, -3002,  1611,
    1603, -3002, -3002, 41928,   160,   394,   394, 20882, -3002,  2104,
   20882,  7557,  7557, -3002,   221, 70132, 20882, 20882, 20882, 20882,
   20882, 20882, 20882, 20882, 45843,  1692,   128, 65172, 20882, 20882,
    1609,  1029, -3002, 20882,  1846, -3002,  1617, 20882,  1704,   193,
   20882, 20882, 20882, 20882, 20882, 20882, 20882, 20882, 20882, -3002,
   -3002, 29234,   324,   584,  1953,  1974,   -58,   514, 20882,  1967,
   12008, -3002,  1967, -3002, -3002, -3002, -3002, -3002,   214, -3002,
   -3002,  1576,  1576, -3002, 65172, -3002, 55267,   171, 51299, 20882,
   -3002, -3002,  1623,  1632,   646, -3002,  1689, -3002, -3002, 55267,
   -3002, 38676,  1933, -3002,   375,  1645, -3002, 43909,  1897,  1933,
    1950, -3002, -3002, 26624,  1775,  1943,  1878, -3002, -3002,  1858,
    1860, -3002,  1655, 45305, 21926, 21926, -3002,  1456, 45058,  1459,
   -3002, -3002, -3002, -3002, -3002, -3002,   148, -3002, 55267,    56,
   36196, -3002,  1656,    98, -3002,  2919,  1999,  1969,  1824,   627,
    1671, -3002,  1351,  1675, 69140, 55267,  1965,  1919,  1970,   -59,
   70132, -3002, -3002, -3002, -3002, 55267, 65172, 63699, 69636, 47827,
   55267, 47331, -3002, -3002, -3002, -3002, 55267,   921, 55267,  4790,
   -3002, -3002, -3002, -3002,   224, -3002, -3002, -3002, -3002, -3002,
   65172, 55267, -3002, -3002,   224, 65172, 55267,   224, -3002,  1461,
   55267, 55267, 55267, 55267,  1492, 55267, 55267,  1005, -3002, -3002,
   -3002, 22448,   118,   118,  1903, 13574,   146, -3002, 20882, 20882,
     946,   252, 65172,  1864, -3002, -3002,   736,  1917,   115, -3002,
    1734, 55267, 55267, 55267, 55267, 65172, 55267,  1428, -3002, -3002,
   -3002, -3002, -3002,  1693, -3002,  1694,  2055,  2484, -3002,  2059,
   50803,   985,  2580,  2063,  1739,  2066, 14096,  2180,  2070,  2223,
    1712,  1954, -3002, -3002,  1945, -3002, 65172,  2227, -3002,   185,
   -3002, 47331, -3002,   220, -3002,  1946,   168, -3002, 15662, 20882,
   -3002, -3002, -3002, -3002, -3002, -3002,  1295, 29741, -3002,   737,
   -3002, -3002,  2198,  1005,  2198,   126, -3002, -3002,  2198, -3002,
    2189,  2198, -3002, -3002, 70132, -3002,  8122, -3002, 20882, 20882,
   -3002, 20882,  2067, -3002,  2238,  2238, 70132, 25580, 25580, 25580,
   25580, 25580, 25580,   506,  1429, 25580, 25580, 25580, 25580, 25580,
   25580, 25580, 25580, 25580, 27146,   525, -3002, -3002,   738,  2210,
   20882, 20882,  2084,  2067, 20882, -3002, 70132,  1736, -3002,  1738,
    1740, 20882, -3002, 70132, -3002, 55267,  1741,    -3,    11, -3002,
    1747,  1749, -3002,  1624, -3002,   981,  1139, 55267,  5322,  5726,
    5980, -3002, -3002, 20882,  2074,  2792, 32227, -3002, 20882,  1754,
   -3002, -3002, 32227,  2091, -3002, -3002, -3002, 36692,  2792, 70132,
     742, -3002, 55267, 70132,   759, -3002, -3002, 20882, -3002, 15662,
    2256, 70132,  2221, 65172, 65172,  2271,  1766,  1773,  2104,  1848,
   -3002,  1849,  1855,  1861, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, 70132, -3002, -3002, -3002, -3002,   180, -3002,
   -3002, -3002, -3002,  1776,  1769, 20882, 20882,    91, -3002,  8314,
    1780,  1781,  6168, -3002,  1772, -3002,  1753, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002,  1778, -3002,  1782, -3002,  1783,  1789,
    1791,  1784,  1785, 55267, -3002, 22970, -3002, 65172, -3002, -3002,
   20882, 20882, 55267, -3002,  1804, -3002,  1786,  1787,  8479, -3002,
   -3002, -3002,   227,   369,  7498,   514,  2661,  2661,  2661,   311,
   -3002, -3002, -3002,  1809, -3002, 25580, 25580, -3002,  1651,  2756,
   10964, -3002, -3002,  2138, -3002,  1301, -3002,  1796, -3002, -3002,
    3559, -3002, 40166, 45353, 20882,   177, -3002, 20882,  1609, 20882,
    1892,  2661,  2661,  2661,   249,   249,   227,   227,   227,   369,
     514, -3002, -3002, -3002,  1813, 20882, 47331, -3002,  1814,  1821,
    2126,  1431, 20882, -3002, -3002, 32227,  1594,    83,  1594,  2104,
    7557, -3002,   988, -3002, -3002,   988, 45058, 55267, -3002, -3002,
    2081,  1823, 32227,  1865,  2300,  2282, 65172, -3002, -3002,  1825,
    1967,  1838, -3002, -3002,  1847, 20882,   735,  1847, -3002,  1933,
       7,  2052,  1086,  1086,  1456,  2057, -3002, -3002,  1898, -3002,
   -3002, -3002, 20882, 14618,  1463, -3002,  1474, -3002, -3002, -3002,
   -3002, -3002,  1827, -3002,  2107, -3002, 55267, -3002, -3002, 25580,
    2293, 20882, 37188,  2294,  2088, -3002, -3002, -3002,  1927,  1484,
   20882,  2082, -3002,   144,  1851,  2206,   125,  2158, 65172, -3002,
     316,   336, -3002,  1379,  2212,   168,  2218,   168, 47331, 47331,
   47331,   761, -3002, -3002, -3002,  1005, -3002,   291,   814, -3002,
   -3002, -3002, -3002,  1947,   671,  2484,  1484, -3002, -3002, -3002,
   -3002, -3002, -3002, -3002,   159,   880,  1484,  1955, -3002,  1956,
   -3002,  1958,  1026,  1484, -3002, -3002,  1665,  9396, 45058,   383,
     146,   146,   146, 15662, -3002,  2090,  2095,  1862, 45058, 45058,
     151, -3002, -3002, -3002, -3002,  1867, -3002,   237, -3002, 65172,
   -3002, -3002, -3002,  1864,  1939, 55267,  2484,  1868,  2348,  1210,
    1532,  1843, -3002,  2036,  1333,  1274, -3002, 65172, 55267, 55267,
   55267, 64195, -3002, -3002, -3002,  1874,  1872, -3002,     9,  2108,
    2111, 55267,  1918, 55267,  1485,  2358, 55267, -3002,   859, 18272,
   65172, -3002, 47331,  2247, 55267,  1881, -3002, -3002, -3002, -3002,
   65172, -3002, -3002, 45058, -3002, -3002, 48323, -3002, -3002, -3002,
   -3002, -3002, 47331, -3002,  1005, -3002,  1005,  2122, 65172, 42424,
    1005, 42920,  1005,  1887, -3002, 45058,  8566, 45058,  2084, -3002,
     216,  2238,   782,   782,   782,  3755,  2232,   205,  1890,   782,
     782,   782,   503,   503,   216,   216,   216,  2238,   525,   917,
   49315,  1891, -3002, 45058, 45058, -3002, -3002,  1893, -3002, -3002,
   -3002, -3002,  1896,  1900, -3002, -3002, -3002, -3002, -3002, -3002,
   65172,  1101,  1594,   352,   352,   352,   352, -3002, 55267, 55267,
   55267, 45058,  2349,  2224, -3002,  2792, 45058, 55267, -3002, 28190,
   55267, -3002,  2240, -3002,  2334, -3002, 55267,   869, -3002, -3002,
   -3002,   875,  1904,  1773, 70132,   900,   909, -3002,  2104,   139,
    1905,  1600,   883,   840,  1496, -3002, 52291, -3002, -3002,  1906,
   44718, 20882, -3002,  2272, -3002, -3002, -3002, 20882, 20882, -3002,
   40166, -3002, -3002, -3002, -3002,   -72,   -72,  1907, 10964, 44968,
   -3002,  2219,  8633, 45058, -3002,  1764, -3002, -3002,  7557, 20882,
    2629,  3281, 20882,  1910, 20882,  2248, -3002, -3002,  1914, -3002,
   -3002, 70132, 20882,  1912,  3679, 25580, 25580,  5567, -3002,  6243,
   20882, 10964, -3002,  8884,  1915,  1923,  1903, 18794, -3002,  2118,
    1911, -3002,  2074,   146,  2074,  1926, -3002, -3002, -3002, -3002,
    3445, -3002, 20882,  2065, 65172,   522,  1767,   910, -3002,   394,
   38676,  1865, 20882,   581, -3002, -3002,  1930, -3002,  1847, -3002,
   -3002, -3002,  2134, -3002, -3002, -3002, 55267, -3002,  1941, -3002,
   36196,  2250, 11486, -3002, 36196, 55267, 55267, 40670,  2281, -3002,
   65172, 65172, 65172, -3002, 65172,  1963,  1951,   853,  1959,   733,
   -3002,  1916,   853,  2270,   242,  1485,   271,  3201,    52, -3002,
   -3002, -3002,  2015, 55267, -3002, 65172, -3002, -3002, -3002, -3002,
   -3002, 47827, -3002, -3002, 39669, 47331, -3002, 47331, 55267, 55267,
   55267, 55267, 55267, 55267, 55267, 55267, 55267, 55267,  1295, 20882,
   -3002, 20882,  1957,  1968,  1973,  1903, -3002, -3002, -3002,   264,
   -3002,  1952, -3002, -3002, -3002,   327, -3002,   237,  1960, -3002,
   50803,  3759,  1739,  2412,  1975,  1939,   918, 64676, -3002,  1978,
    1964,   940,  2484,  1976,  2418, -3002,   985, 50803, -3002, -3002,
   -3002,  2373, -3002,   754,   226, -3002,  1210, -3002,  3759,  1532,
   -3002,  3759, 45058,  1843,   952, 65172,  2005, -3002,   168,   958,
   -3002, -3002, -3002, -3002, -3002, 65172,  1966, -3002,  1966, -3002,
   -3002,  1966, -3002, -3002, -3002, -3002, 25580,  2289,  1981, 70132,
   -3002, -3002, 55267, -3002, -3002, -3002,   964,  1982,  2074, 55267,
   55267, 55267, 55267, -3002, -3002, -3002, 19316, 20882,  1986, -3002,
    1983, 12530,  2267, -3002, 27668, -3002, -3002,  1984, 36692, 65172,
   -3002, -3002, -3002, -3002,  2104, -3002, -3002, 65172, -3002,  1989,
   -3002,  1992, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, 20882, 45058, -3002, 45058, -3002, -3002, -3002, -3002, -3002,
    7416, -3002,  1991,  1995, 65172, 20882, -3002, -3002, -3002,   379,
   20882, 20882,  1651, -3002,  7363, 20882, 70132,   976,  1651,   339,
   20882,  3650,  4523, 20882, 20882,  6691, 40709, -3002, 23492, 15140,
   -3002,  1996, 20882, 40748, 39172, -3002, 32227,  2224,  2000,  2224,
    1005,  2006, 45058, 20882, -3002, -3002, -3002, -3002,  2054,   -30,
   33715,  2233, -3002,  2013, 65172, -3002,  2065, 45058, -3002, -3002,
   40166, -3002, -3002, -3002, -3002, -3002,  2466,  1579,  2010,  2014,
   -3002,  1425, -3002, -3002, 65172,  2016, -3002,  2018,   853, -3002,
   65172,  2051, -3002,   232,  2326,   106, -3002, 20882, -3002,  2419,
    2498,  1916,  2024, 65172, 55267, 25580, -3002,   439,   190, -3002,
    2313, 55267,  2051,  2453, -3002, -3002, -3002,   733, -3002,  2350,
    2266, -3002,   224, -3002, 20882,   733,  2269,   273, 65172, -3002,
   -3002,  2012, -3002, 70132,   168,   168, -3002,  1574,  2030,  2035,
    2037,  2040,  2042,  2053,  2069,  2075,  2076,  2077, -3002,  2078,
    2080,  2083,  2086,  2089,  2092,  2094,  2096,  1586,  2098, -3002,
    2099,  1930,  2100,  2106,  2110,  2112,  2113, 71094,  2114,  2117,
    2119,  2121,  1587,  2124,   926,  1067, -3002, -3002, -3002, -3002,
    2125, -3002, -3002, -3002,  1262,  2049, -3002, -3002, -3002,  2143,
   -3002,  2147, -3002, -3002, -3002, -3002, -3002, -3002,  2073,  2085,
   -3002, -3002, -3002,   146,  2064,  2068, 65172,  1295,   120, 65172,
    2127,  1918,  2551, 19838, 47331,  1439,  2308,  2097, -3002,  1005,
    1739, -3002, 50803,  3182,   658,  2111, -3002,   178,  1918, -3002,
    2494,  1739,  2144,  2585, -3002,  2120, -3002,  2338, 65172,  2132,
   -3002, -3002, 48323,  1966,  4275, 25580, 70132,   986,  1019, -3002,
    2649,  2309,  2224, -3002, -3002, -3002, -3002, -3002,  2149,   -61,
    2151, 10442,  2148, -3002, -3002, -3002, -3002, -3002, -3002, 45058,
   45058, 65172,  2335, -3002, -3002,  2154,  2146, 37684,  2611,  2159,
   -3002, -3002,  2475, -3002, 30737, -3002,  1773,  2164,  1773, 70132,
    1773, -3002, -3002, 45058, 20882, -3002, -3002, 41349,  2487,  1651,
    1651,  7363,  1030, -3002,  1651, 20882, 20882,  1651,  1651, 20882,
   -3002,  9919,   492, -3002,  1035, -3002, 40795, -3002, 71575, -3002,
   -3002,  1986,  1005,  1986, -3002, -3002,  2165, -3002, -3002, -3002,
    2229, -3002, -3002,  1042,  2599,  2065, 20882, -3002, -3002,  2167,
   36196, -3002, -3002, -3002, -3002, 36196,   853, -3002,  2347,  2051,
    2179, -3002, -3002, -3002, -3002, -3002, -3002, 40834, -3002,    72,
   20882, -3002,  1275,  3755, -3002, -3002, -3002, -3002,  2051,  1210,
   -3002, 55267,  2655,  2545, -3002, -3002, 45058, -3002, -3002,  2104,
    2104, -3002, -3002,  2334, -3002, -3002,  2181, -3002, -3002,  1262,
     328, 39669, 55267, 55267, -3002, -3002,  2184, -3002, -3002, -3002,
   -3002, -3002,   327,  2577,  1051,   985, -3002,  3759,  3759, 45058,
    1076, 55267,  2552, 50803, -3002,  2663,  2190, 55267,  1918,   358,
     358, -3002,  2341, -3002,  2342, -3002, -3002,  2665,   398, -3002,
   20360, 47331, 55267, -3002, -3002, 33219, -3002,  4275,  1083, -3002,
   -3002,  2194,  2196, -3002,  1986, 20882,  2200, 20882, -3002, 24014,
    2673,  2197, -3002, 20882,  2273, 28712, -3002, 20882, -3002, 55267,
   60227,  2211, 60227, -3002, -3002, -3002, -3002, -3002, 20882, -3002,
    1651,  1651,  1651, 20882, -3002, 20882, -3002, -3002, -3002,  2411,
    2335, -3002,  2335, 20882,  3759,   394,  3512, 65172,    13, -3002,
   45058, -3002, -3002, -3002, 55267, -3002, 47331, -3002,   853,   -24,
    2214, 20882, 41185,  2445, -3002, -3002,  2481, -3002,  2541, -3002,
    2278,   509,  2296, -3002, -3002, -3002, -3002,  1295,  1005,  1739,
    2111,  2144, -3002, -3002,  2222, 55267,  3759,   985,   754, -3002,
   -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002, -3002,  3759,  2664,  2446,  2666,  3759, 45058,  1109,  2005,
   20882,   269, -3002,  1131,  2662, -3002, -3002,  2737,  2335,  2231,
   24014,  2235, -3002,  2234, 65172, 45058,  2384, -3002, -3002,  2242,
   -3002, -3002, 20882, -3002, 41435,  2245,  2246,  2697,  1903,  2273,
    2273, -3002,   -30, -3002, -3002,  2669, 33219,  2630,  1210,   853,
    2261,  1141, -3002, -3002, -3002, -3002, -3002,  2484, -3002, 41271,
    2496,   312,  2480,  2214, 20882, -3002,  2336, -3002, -3002, -3002,
    2735, -3002, -3002, 50803,  2265,  2144,  2111,  1918,  2144,  2489,
   -3002,  2495, -3002, -3002,  2275, 41310, 65172, 65172,  1739, 33219,
   65172,  2277,  2273, -3002,  2284, -3002, -3002, -3002, 54275, -3002,
    2285, -3002, -3002, -3002, 20882,   117, -3002, -3002,  2343, 55267,
    1142,    41,  2481, 39669, -3002, 47331,  1292,   -24,  2589, -3002,
   -3002, -3002, -3002,    99,  2514, -3002,  2515, -3002, 45058, -3002,
    3759, 50803, -3002, -3002, -3002, -3002, -3002, -3002, 33219,  2662,
   -3002,   375, -3002,  1594, -3002,   375, -3002, -3002, -3002, -3002,
   -3002,  1548, 24536, 24536, 24536,  2292,  3759, -3002,  1594, -3002,
    2423,  2480, -3002, -3002, -3002, -3002, -3002,   218,   218,  2689,
   -3002,  2361, -3002,  2144,  1152, 65172,  1847, -3002,  1847, 26102,
    2448,   155, 43987,  2667, -3002,  2667,  2667, -3002, -3002, -3002,
   38676, -3002, -3002,  2794, -3002,   223, -3002, -3002, -3002,  1739,
     375, -3002, -3002,  2781, -3002, -3002, -3002, -3002, -3002,   285,
   -3002, -3002, -3002,  1594,   853, -3002, -3002, -3002,  1594,  1847,
   25058,  2455, -3002,  2524, -3002, -3002, -3002, -3002, -3002, -3002,
   -3002
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     156,   265,     0,  1386,  1385,  1458,   265,     0,  1320,     0,
     265,   487,   403,     0,  1479,  1478,     0,   208,   265,     0,
     156,     0,     0,     0,     0,     0,     0,   550,   553,   551,
       0,     0,     0,   265,   590,     0,  1480,   265,     0,     0,
     582,   552,     0,  1436,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    23,    10,    11,    12,
      13,    19,    14,    15,    16,    17,    18,    20,    21,    22,
      25,    24,    26,    27,  1343,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,   526,   512,   595,   525,     0,
       0,   155,   694,   533,    37,    39,    38,    40,    41,    42,
      43,    44,  1481,  1477,    45,   264,   263,   257,     0,     0,
       0,     0,     0,  1457,     0,     0,   258,   112,  1505,  1506,
    1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1880,
    1516,  1517,  1518,  1519,  1520,  1881,  1521,  1522,  1523,  1826,
    1827,  1882,  1828,  1829,  1524,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,  1533,  1830,  1831,  1534,  1535,  1536,  1537,
    1538,  1832,  1883,  1833,  1539,  1540,  1541,  1542,  1543,  1884,
    1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1885,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
    1834,  1563,  1564,  1835,  1565,  1566,  1567,  1568,  1569,  1570,
    1571,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,
    1591,  1836,  1592,  1593,  1594,  1595,  1596,  1597,  1837,  1598,
    1599,  1600,  1838,  1601,  1602,  1603,  1886,  1887,  1604,  1605,
    1839,  1889,  1606,  1607,  1840,  1841,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  1890,  1617,  1618,  1619,  1620,
    1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1891,  1842,
    1629,  1630,  1631,  1632,  1633,  1843,  1844,  1845,  1634,  1892,
    1893,  1635,  1894,  1636,  1637,  1638,  1639,  1640,  1641,  1642,
    1895,  1643,  1896,  1644,  1645,  1646,  1647,  1648,  1649,  1650,
    1651,  1846,  1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,
    1670,  1671,  1847,  1898,  1848,  1672,  1673,  1674,  1849,  1675,
    1676,  1899,  1677,  1850,  1678,  1851,  1679,  1680,  1681,  1682,
    1683,  1684,  1685,  1686,  1687,  1688,  1852,  1900,  1689,  1901,
    1853,  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,
    1699,  1700,  1701,  1702,  1854,  1902,  1703,  1704,  1855,  1705,
    1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,
    1716,  1856,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
    1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,
    1735,  1903,  1736,  1737,  1738,  1857,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1756,  1757,  1858,  1758,  1759,  1904,  1760,
    1761,  1859,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
    1770,  1771,  1772,  1773,  1774,  1860,  1775,  1861,  1776,  1777,
    1778,  1906,  1779,  1780,  1781,  1782,  1783,  1784,  1862,  1863,
    1785,  1786,  1864,  1787,  1865,  1788,  1789,  1866,  1790,  1791,
    1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,  1805,  1806,  1867,  1868,  1807,  1907,  1808,
    1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
    1819,  1820,  1821,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1822,  1823,  1824,  1825,     0,   113,
     114,  1267,  1488,     0,  1245,   112,  1839,  1846,  1860,  1318,
    1319,   113,     0,   260,   486,     0,     0,     0,     0,     0,
       0,   210,     0,   397,   396,     0,  1309,   402,     0,     0,
       0,   116,   108,  1705,   115,  1244,   106,   122,  2050,  2051,
    2052,  2053,  1937,  2054,  2055,  2056,  2057,  1938,  2058,  1939,
    1940,  1941,  1942,  1943,  1944,  2059,  2060,  2061,  1946,  1945,
    2062,  1947,  2063,  1948,  2064,  1949,  1950,  2065,  2066,  1951,
    1559,  1952,  1953,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
    2074,  2075,  1954,  1955,  2076,  2077,  1956,  2078,  2079,  1957,
    2080,  1958,  1959,  1960,  2081,  2082,  1961,  1962,  2083,  1963,
    2084,  2085,  1964,  1965,  1968,  1966,  2086,  1967,  2087,  1969,
    1970,  1971,  2088,  2089,  1972,  1973,  2090,  1974,  1975,  1976,
    1977,  1978,  2091,  1979,  2092,  1980,  1981,  2093,  2094,  2095,
    2096,  2097,  1983,  1982,  1984,  1985,  2098,  2099,  2100,  2101,
    1986,  1987,  1988,  2102,  2103,  1989,  2104,  2105,  1990,  1991,
    2106,  1992,  1993,  2107,  1994,  1995,  2108,  1996,  1997,  2109,
    2110,  2111,  1998,  2112,  1999,  2000,  2113,  2114,  2001,  2002,
    2115,  2003,  2116,  2117,  2118,  2119,  2004,  2005,  2120,  2006,
    2121,  2122,  2123,  2124,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  1454,   124,   123,   125,     0,
     421,   422,     0,   432,     0,   414,   419,   415,     0,   441,
     434,   442,   423,   413,   435,   424,   412,   209,     0,   443,
     429,   417,     0,     0,     0,     0,   261,   222,   403,     0,
     156,     0,  1347,  1348,  1349,  1350,  1351,  1352,  1357,  1353,
    1354,  1355,  1356,  1358,  1359,  1360,  1361,  1362,  1338,  1343,
    1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,
    1373,  1374,  1375,  1376,  1377,     0,  1320,     0,     0,  1832,
    1883,  1837,     0,  1850,     0,  1853,  1854,  1739,  1861,  1864,
    1865,  1866,  1867,     0,   764,   115,   110,   748,     0,   528,
     698,   708,   748,   753,  1031,   776,  1032,     0,   117,  1418,
    1417,  1419,  1414,   195,  1282,  1466,  1606,  1646,  1756,  1862,
    1785,  1484,  1467,  1461,  1465,   262,   589,   587,     0,  1216,
    1606,  1646,  1743,  1756,  1862,  1394,  1398,     0,   259,  1486,
    1471,     0,  1472,   115,   534,   581,     0,   266,  1435,     0,
    1440,     0,  1719,   561,   564,  1276,   562,   526,     0,     0,
       1,   156,  1342,  1450,     0,   162,     0,   585,   585,     0,
     585,     0,   518,     0,     0,   526,   521,   525,   695,  1483,
    1862,  1785,  1470,  1473,  1615,     0,     0,  1615,     0,  1615,
       0,  1615,     0,     0,  1460,  1200,     0,  1246,   118,     0,
       0,  1331,  1327,  1332,  1328,  1333,  1326,  1325,  1334,  1330,
       0,     0,     0,   368,   401,   400,   399,   398,   403,  1615,
    1293,     0,   450,   451,     0,     0,     0,     0,     0,   206,
    1304,   109,   107,  1615,  1455,   430,   431,     0,   420,   416,
     418,     0,     0,  1615,  1271,   440,   436,  1615,   440,  1238,
    1615,     0,     0,   214,     0,   396,  1340,  1378,  2004,  1379,
    1380,  1392,     0,  1393,  1383,  1346,   156,     0,   485,  1317,
    1419,     0,     0,     0,  1152,   748,   753,     0,     0,   766,
       0,  1171,     0,  1177,     0,     0,     0,   748,   533,     0,
     708,   765,   111,     0,   746,   747,   636,   636,   590,     0,
     571,   758,     0,     0,   761,   759,     0,   761,     0,     0,
       0,   761,   757,   716,     0,   636,     0,   746,   749,   636,
       0,   768,  1337,     0,  1422,     0,     0,     0,     0,  1464,
    1462,  1463,  1468,     0,     0,     0,  1248,  1250,  1251,  1120,
    1261,  1011,     0,  1827,  1828,  1829,  1192,  1830,  1831,  1833,
    1834,  1835,   970,  1579,  1836,  1259,  1838,  1840,  1841,  1843,
    1844,  1845,  1846,  1847,  1848,     0,  1260,  1851,  1684,  1856,
    1857,  1859,  1862,  1863,  1258,  1868,     0,     0,     0,  1227,
    1143,     0,  1010,     0,     0,     0,  1193,  1201,  1003,     0,
       0,   812,   813,   834,   835,   814,   840,   841,   843,   815,
       0,  1223,   904,   999,  1211,  1008,  1012,  1050,  1014,  1030,
    1017,  1087,  1009,     0,  1015,  1001,  1219,   571,  1217,     0,
    1002,  1247,   571,  1215,  1397,  1395,  1401,  1396,     0,     0,
       0,     0,     0,   111,  1442,  1443,  1434,  1432,  1433,  1431,
    1430,  1437,     0,  1439,  1343,  1138,  1140,     0,   563,     0,
       0,     0,   515,   514,   516,     3,  1276,     0,     0,     0,
    1596,     0,   583,   584,     0,     0,     0,     0,     0,     0,
       0,     0,   679,   610,   611,   613,   676,   680,   688,     0,
       0,     0,     0,     0,   522,     0,  1482,  1476,  1474,     0,
       0,     0,   140,   140,     0,     0,     0,     0,     0,   100,
      49,    93,     0,     0,     0,     0,   236,   249,     0,     0,
       0,     0,     0,   246,     0,     0,   229,   223,   225,    51,
       0,   140,     0,    47,     0,     0,     0,    53,  1458,     0,
     485,  1199,     0,   120,   121,   119,   112,     0,  2018,  1880,
    1881,  1882,  1883,  1833,  1884,  1885,     0,  1886,  1887,  1839,
    1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1846,  1898,
    1899,  1900,  1901,  1902,  1903,  2044,  1904,  1860,  1906,  1866,
       0,  1907,  1023,   113,  1264,  1146,   595,  1144,  1277,     0,
       0,  1329,     0,     0,     0,     0,   483,     0,     0,     0,
       0,  1289,     0,     0,  1615,   202,  1615,   368,     0,  1615,
     368,  1615,     0,  1615,   207,   211,  1303,  1306,     0,   433,
     428,   426,   425,   427,  1615,   255,     0,     0,  1272,   438,
     439,     0,   407,     0,     0,   409,     0,     0,   219,     0,
     217,     0,   403,   156,     0,   230,  1388,  1389,  1387,     0,
       0,  1345,   233,  1382,  1391,  1381,  1390,  1344,   250,  1339,
       0,     0,  1335,   473,  1422,     0,     0,     0,  1153,   881,
     880,   864,   865,   878,   879,   866,   867,   874,   875,   883,
     882,   872,   873,   868,   869,   862,   863,   870,   871,   876,
     877,   860,   861,  1166,  1154,  1155,  1156,  1157,  1158,  1159,
    1160,  1161,  1162,  1163,  1164,  1165,     0,     0,   707,   705,
       0,     0,     0,     0,     0,     0,  1193,     0,   974,  1009,
       0,     0,     0,  1138,  1176,     0,     0,     0,     0,     0,
       0,  1138,  1182,     0,     0,   732,   744,     0,   629,   635,
     706,   704,     0,  1216,   699,     0,   778,   758,     0,   757,
       0,     0,   760,   754,     0,   755,     0,     0,     0,     0,
     756,     0,     0,     0,     0,   702,     0,   744,     0,   703,
     775,  1421,  1420,     0,  1415,  1404,  1412,   196,     0,  1268,
    1908,  1909,  1910,   822,  1911,   851,   829,   851,   851,  1912,
    1913,  1914,  1915,   818,   818,   831,  1916,  1917,  1918,  1919,
    1920,   819,   820,   856,  1921,  1922,  1923,  1924,  1925,     0,
       0,  1926,   851,  1927,   818,  1928,  1929,  1930,   823,  1931,
     786,  1932,     0,  1933,   821,   787,  1934,   859,   859,  1935,
       0,   846,  1936,  1269,  1270,     0,  1149,   796,   804,   805,
     806,   807,   832,   833,   808,   838,   839,   809,   903,     0,
     818,   156,  1469,  1485,     0,  1143,  1018,   850,   837,  1191,
       0,   845,   844,     0,  1143,   827,   826,   825,  1005,     0,
     824,  1100,   851,   851,   849,   929,   828,     0,     0,     0,
       0,     0,   855,     0,   853,   930,   908,   909,     0,  1226,
    1235,  1138,  1142,     0,  1003,  1138,     0,     0,  1090,  1092,
       0,  1020,  1021,     0,  1194,  1249,  1004,     0,  1254,     0,
       0,   903,   903,  1222,  1120,     0,  1110,  1113,     0,     0,
    1117,  1118,  1119,     0,     0,     0,  1214,     0,  1128,  1130,
       0,     0,   945,  1126,     0,   948,     0,     0,     0,     0,
    1114,  1115,  1116,  1106,  1107,  1108,  1109,  1111,  1112,  1124,
    1105,   926,     0,  1000,     0,  1053,     0,   925,  1220,   697,
       0,  1252,   697,  1406,  1410,  1411,  1409,  1405,     0,  1400,
    1399,  1402,  1403,  1487,     0,  1444,  1428,     0,  1425,  1141,
     692,   565,  1240,     0,   569,  1451,  1449,   161,   160,     0,
     213,     0,   538,   537,   604,   596,   598,   604,     0,   536,
       0,   652,   653,     0,     0,     0,     0,   685,   683,  1248,
    1261,   640,   614,   639,     0,     0,   618,     0,   644,   904,
     678,   520,   608,   609,   612,   519,     0,   681,     0,   691,
       0,   557,   559,   542,   556,   554,   539,   547,   679,   613,
       0,  1475,     0,     0,     0,     0,     0,  1615,     0,     0,
     789,    84,    65,   320,   139,     0,     0,     0,     0,     0,
       0,     0,    92,    89,    90,    91,     0,     0,     0,     0,
    1268,   234,   235,   248,     0,   239,   240,   237,   241,   242,
       0,     0,   227,   228,     0,     0,     0,     0,   226,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1459,  1452,
    1195,  1200,   595,   595,   595,     0,   593,   594,     0,     0,
       0,     0,     0,   472,   366,   376,     0,     0,     0,  1293,
       0,     0,     0,     0,     0,   206,     0,   403,  1294,  1292,
    1296,  1295,  1297,  1585,   190,     0,     0,   201,   198,     0,
     365,   339,     0,     0,  1308,     0,     0,     0,     0,     0,
       0,  1615,   355,  1305,     0,  1456,     0,     0,   253,   440,
    1273,     0,   437,   440,  1239,     0,   440,   221,     0,     0,
    1341,  1384,   231,   251,   232,   252,   485,   480,   510,     0,
     488,   493,   470,     0,   470,     0,   490,   494,   470,   489,
       0,   470,   484,  1416,     0,  1046,     0,  1036,     0,     0,
     767,     0,     0,  1037,   976,   977,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   994,   993,  1038,   771,     0,   774,
       0,     0,  1174,  1175,     0,  1039,     0,     0,  1181,     0,
       0,     0,  1044,     0,   709,     0,     0,     0,   624,   628,
     631,     0,   634,   571,   527,  1606,  1646,     0,   582,   582,
     582,   580,   570,     0,   656,     0,     0,   733,     0,     0,
     735,   737,     0,     0,   740,   715,   714,     0,     0,     0,
       0,   779,     0,  1244,     0,  1424,  1423,     0,   197,     0,
       0,     0,   804,     0,     0,     0,   794,   790,     0,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   810,  1281,     0,   816,  1286,  1287,  1284,     0,  1280,
    1283,  1285,  1288,     0,     0,     0,     0,  1190,  1186,     0,
       0,     0,     0,  1095,  1097,  1099,     0,   848,   847,  1104,
    1110,  1113,  1117,  1118,  1119,  1114,  1115,  1116,  1106,  1107,
    1108,  1109,  1111,  1112,     0,  1132,     0,  1086,     0,     0,
       0,     0,     0,     0,  1225,     0,   972,     0,  1016,  1007,
       0,     0,  1093,  1022,  1227,  1202,     0,     0,     0,  1257,
    1256,   905,   914,   917,   949,   950,   921,   922,   923,   927,
    1279,  1278,  1221,     0,  1213,     0,     0,   906,   931,   936,
       0,  1183,   966,     0,   954,     0,   944,     0,   952,   956,
     932,   947,     0,   928,     0,  1214,  1129,  1131,     0,  1127,
       0,   918,   919,   920,   910,   911,   912,   913,   915,   916,
     924,  1103,  1101,  1102,     0,  1200,     0,  1212,     0,     0,
    1055,     0,     0,   951,  1218,     0,   778,   595,   778,     0,
     903,  1445,  1276,  1438,  1427,  1276,  1139,  1241,  1275,   567,
       0,     0,     0,  1447,   147,   151,     0,  1201,   181,   183,
     697,     0,   602,   603,   607,     0,     0,   607,   586,   535,
    1857,  1739,     0,     0,     0,     0,   645,   686,     0,   677,
     642,   643,     0,   641,  1248,   646,  1247,   647,   650,   651,
     619,  1236,   687,   689,     0,   682,     0,  1242,   541,   560,
       0,     0,     0,     0,     0,   524,   523,   693,     0,    50,
       0,  1615,    67,     0,     0,     0,     0,     0,     0,   270,
       0,   370,   270,   105,  1615,   440,  1615,   440,  1509,  1580,
    1757,     0,    63,   344,    96,     0,   133,   373,     0,   329,
      86,   101,   126,     0,     0,   224,    52,   238,   243,   129,
     247,   244,  1313,   245,   140,     0,    48,     0,   127,     0,
    1311,     0,     0,    54,   131,  1315,  1460,     0,  1199,     0,
     593,   593,   593,     0,  1145,     0,     0,     0,  1147,  1148,
     944,  1322,  1323,  1324,  1321,   458,   471,     0,   367,     0,
     482,   461,   462,   472,  1291,     0,   202,   368,     0,   368,
       0,   211,  1293,     0,     0,   192,   188,     0,     0,     0,
       0,   366,   358,   356,   389,     0,   363,   357,     0,     0,
     315,     0,  1503,     0,     0,     0,     0,   452,     0,     0,
     206,   212,     0,     0,     0,   255,   256,   406,  1274,   408,
       0,   410,   220,   218,  1336,   477,     0,   476,   481,   475,
     479,   474,     0,   469,     0,   503,     0,     0,     0,     0,
       0,     0,     0,     0,  1033,  1151,     0,  1169,  1168,   975,
     982,   985,   989,   990,   991,  1170,     0,     0,     0,   986,
     987,   988,   978,   979,   980,   981,   983,   984,   992,   776,
       0,     0,   770,  1179,  1178,  1172,  1173,     0,  1041,  1042,
    1043,  1180,     0,     0,   745,   622,   620,   623,   625,   621,
       0,     0,   778,   582,   582,   582,   582,   579,     0,     0,
       0,   777,     0,   673,   739,     0,   763,     0,   736,   719,
       0,   727,     0,   734,   783,   750,     0,     0,   752,  1413,
     800,     0,   795,   791,     0,     0,     0,   801,     0,     0,
       0,     0,     0,     0,     0,  1150,     0,   588,  1019,     0,
       0,     0,  1187,     0,   971,   817,   830,     0,  1098,  1013,
       0,  1121,  1085,   858,   857,   859,   859,     0,     0,     0,
    1234,     0,  1139,  1089,  1091,  1235,  1006,   842,   903,     0,
       0,     0,     0,     0,     0,     0,   955,   946,     0,   953,
     957,     0,     0,     0,   940,     0,     0,   938,   967,   934,
       0,     0,   968,  1199,     0,  1203,     0,     0,  1054,  1063,
     700,   696,   656,   593,   656,     0,  1407,  1429,  1426,   568,
     156,  1448,     0,   170,     0,     0,     0,     0,   173,   187,
     184,  1447,     0,     0,   597,   599,     0,  1122,   607,   601,
     649,   648,     0,   617,   684,   615,     0,   690,     0,   558,
       0,   544,     0,   718,     0,     0,     0,     0,     0,   319,
       0,     0,     0,   270,     0,   378,     0,   385,     0,     0,
     370,   351,    85,     0,     0,     0,    59,   104,    77,    69,
      55,    83,     0,     0,    88,     0,    81,    98,    99,    97,
     102,     0,   280,   305,     0,     0,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   485,  1200,
    1196,  1200,     0,     0,     0,   595,   591,   592,  1024,     0,
     457,   509,   506,   507,   505,   229,   377,     0,     0,   200,
     365,     0,  1308,     0,     0,  1290,   403,     0,   193,     0,
     191,     0,   202,   368,     0,   343,   339,   364,   337,   336,
     338,     0,  1504,   222,     0,  1498,   368,  1307,     0,     0,
     453,     0,   447,   211,     0,     0,  1302,   254,   440,     0,
     465,   504,   511,   491,   496,     0,   502,   498,   497,   492,
     500,   499,   495,  1034,  1045,  1167,     0,     0,     0,     0,
     769,   772,     0,  1040,  1035,   743,     0,     0,   656,     0,
       0,     0,     0,   573,   572,   578,     0,     0,  1057,   738,
       0,     0,     0,   725,   713,   720,   721,     0,     0,     0,
     781,   780,   751,   804,     0,   784,   804,     0,   804,     0,
     802,     0,   811,   896,   897,   898,   899,   900,   901,   902,
     836,     0,  1189,  1185,  1094,  1096,  1133,   854,   852,  1224,
    1138,  1229,  1231,     0,     0,     0,  1088,   973,  1255,   907,
       0,     0,   937,  1184,   958,     0,     0,     0,   933,  1121,
       0,     0,     0,     0,     0,   942,     0,  1207,  1200,     0,
    1206,     0,     0,     0,     0,  1029,   701,   673,     0,   673,
       0,     0,  1446,     0,  1441,   148,   149,   150,     0,     0,
       0,   165,   142,     0,     0,   182,   170,   158,   605,   606,
       0,   600,   616,  1237,  1243,   543,     0,  1003,     0,     0,
     540,     0,   134,   270,     0,     0,    66,     0,   387,   331,
     379,   362,   346,     0,     0,     0,   271,     0,   404,     0,
       0,   352,     0,     0,     0,     0,   332,     0,     0,   291,
       0,     0,   362,     0,   369,   287,   288,     0,    58,    78,
       0,    74,     0,   103,     0,     0,     0,     0,     0,    61,
      73,     0,    56,     0,   440,   440,    64,  1268,  1908,  1909,
    1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  2028,  1918,
    1919,  1920,  1921,  1922,  1923,  1924,  1925,  2037,  1926,   277,
    1927,  1684,  1928,  1929,  1930,  1931,  1932,     0,  1933,   787,
    1934,  1935,  2116,  1936,  1106,  1107,   275,   276,   372,   272,
    1269,   273,   380,   274,     0,   375,   330,   130,  1314,     0,
     128,     0,  1312,   137,   135,   132,  1316,  1453,     0,     0,
    1027,  1028,  1025,   593,     0,     0,     0,   485,   464,     0,
       0,  1503,     0,     0,     0,     0,  1615,     0,   189,     0,
    1308,   199,   365,     0,   395,   315,   390,     0,  1503,  1501,
       0,  1308,  1497,     0,   444,     0,   203,     0,     0,     0,
     411,   478,     0,   501,   995,     0,     0,     0,     0,   632,
       0,   638,   673,   577,   576,   575,   574,   655,  1554,  1840,
    1738,     0,   659,   654,   657,   662,   664,   663,   665,   661,
     672,     0,   675,   762,  1134,  1136,     0,     0,     0,     0,
     726,   728,     0,   730,     0,   782,   798,     0,   799,     0,
     797,   792,   803,  1188,  1232,  1233,  1228,     0,   904,   964,
     962,   959,     0,   960,   941,     0,     0,   939,   935,     0,
     969,     0,     0,  1204,     0,  1049,     0,  1052,  1066,  1062,
    1061,  1057,  1024,  1057,  1408,   566,   169,   146,   172,   171,
       0,  1201,   179,     0,     0,   170,     0,   174,   454,     0,
       0,   555,   717,   548,   549,     0,   383,    68,     0,   362,
       0,   270,   348,   347,   350,   345,   349,     0,   405,     0,
       0,   289,     0,   296,   334,   335,   333,   290,   362,   368,
     292,     0,     0,     0,    70,    60,    57,    62,    71,     0,
       0,    72,    75,   783,    87,    80,  1268,  2037,  2046,     0,
       0,     0,     0,     0,  1198,  1197,     0,   460,   459,   508,
     456,   467,   229,     0,     0,   339,  1500,     0,     0,   449,
       0,     0,     0,   365,   194,     0,     0,     0,  1503,     0,
       0,   267,     0,   312,     0,   215,  1502,     0,     0,  1489,
       0,     0,     0,  1300,  1301,     0,   466,   996,     0,   997,
     773,     0,     0,   630,  1057,     0,     0,     0,   666,   660,
       0,  1056,  1058,     0,   627,  1137,   722,     0,   724,     0,
     748,     0,   748,   731,   793,   785,  1230,  1047,     0,   961,
     965,   963,   943,  1200,  1208,  1200,  1205,  1051,  1065,  1068,
     675,  1253,   675,     0,     0,   157,     0,     0,   154,   141,
     159,  1123,   545,   546,     0,   270,     0,   361,   384,   301,
     279,     0,     0,     0,   286,   293,   394,   295,     0,    79,
      95,     0,     0,   374,   138,   136,  1026,   485,     0,  1308,
     315,  1497,   446,   205,     0,     0,     0,   339,   222,  1499,
     328,   321,   322,   323,   324,   325,   326,   327,   342,   341,
     313,   314,     0,     0,     0,     0,     0,   448,     0,  1302,
       0,   176,   185,     0,   176,   998,   633,     0,   675,     0,
       0,     0,   658,     0,     0,   674,     0,   531,  1135,     0,
     712,   710,     0,   711,     0,     0,     0,     0,   595,   627,
     627,   143,     0,   144,   180,     0,     0,     0,   368,   386,
     360,     0,   353,   299,   298,   300,   304,     0,   302,     0,
     318,     0,   311,   279,     0,    82,     0,   381,   455,   463,
       0,   269,  1491,   365,     0,  1497,   315,  1503,  1497,     0,
    1494,     0,   445,   204,     0,     0,     0,   178,  1308,     0,
     178,     0,   627,   668,     0,   667,  1060,  1059,   629,   723,
       0,  1048,  1210,  1209,     0,  1072,   530,   529,     0,     0,
       0,     0,   394,     0,   340,     0,     0,   301,     0,   294,
     391,   392,   393,     0,   307,   297,   308,    76,    94,   382,
       0,   365,  1492,   268,   216,  1490,  1495,  1496,     0,   176,
     175,   604,   177,   778,   186,   604,   637,   532,   669,   626,
     729,  1067,     0,     0,     0,     0,     0,   153,   778,   164,
       0,   311,   359,   354,   278,   303,   317,     0,     0,     0,
     309,     0,   310,  1497,     0,   178,   607,  1298,   607,  1826,
    1555,  1792,     0,  1084,  1073,  1084,  1084,  1064,   145,   152,
       0,   270,   283,     0,   282,     0,   371,   306,  1493,  1308,
     604,   166,   167,     0,  1077,  1076,  1075,  1079,  1078,     0,
    1071,  1069,  1070,   778,   388,   281,   285,   284,   778,   607,
       0,     0,  1081,     0,  1082,   163,  1299,   168,  1074,  1080,
    1083
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3002, -3002, -3002,  1962,    85,    86,  -878, -1185,  -927, -1210,
   -3002,   -64,    88, -3002, -3002,   228, -3002,  1060, -3002,   213,
    -793,   597, -3002,  1153, -3002, -3002,  1604,   559,    89,    92,
    2058, -3002,  1034, -3002,  3707,  2543,  3660,    71,  -515,  -871,
   -1249,     3,     8, -3002, -3002, -3002, -3002, -3002,  -802,   534,
   -1218, -3002,   477, -3002, -3002, -3002, -3002,  -162,   200, -2274,
       1, -2163, -2867,  -517, -3002,  -619, -3002,  -270, -3002,  -564,
   -3002,  -633,  -569,  -598, -2819, -1152, -3002,  1660,  -316, -3002,
     639, -3002, -2550, -3002, -3002,   628, -3002, -1167, -3002, -2216,
     204,  -546, -2578, -2546, -2158,  -892,   280,  -552,   256, -2100,
    -894, -3002,   651, -3002,  -537, -3002,  -884, -1940,    93, -2732,
   -1662,    -7, -3002, -3002, -3002,  -714, -3002, -2501,    94,  1578,
   -2081,    95, -1616, -3002, -3002, -1673,    49, -2113,     2, -2097,
     100, -3002, -3002,   102,    18,  -601,   329, -3002,   108, -3002,
   -3002,  1556,  -925, -3002, -3002,   533,   110,  1015, -3002, -2548,
   -3002,  -600, -3002,  -615,  -629, -3002, -3002,    12,  -910,  1545,
   -3002, -3002, -3002,     4, -3002,  -421, -3002, -3002, -2538, -3002,
      21, -3002, -3002, -3002, -3002, -1492,  -357,   342, -3002, -3002,
    -498, -2560,  -448, -3002, -2971, -2691, -3002, -3002,  -591, -3001,
   -2054,   111,    80,  1920,  1539,   119,   121, -3002,   362,   123,
   -1147,   147,  1768,   -35,   -45, -3002,   -17, -3002, -3002, -3002,
     697, -3002, -3002,    15,    31,  1748, -3002, -1029, -3002, -1386,
     812, -3002,  1901,  1921, -2138,  -875,   -77, -3002,   729, -1667,
   -2107,  -632,  1169,  1726,  1728,   491, -2477, -3002,  -485, -3002,
     -71, -3002, -3002,   722,  1215, -1554, -1558, -3002, -2209, -3002,
    -398,  -286, -3002, -3002, -3002, -3002, -3002, -2489, -2840,  -596,
    1186, -3002,  1742, -3002, -3002, -3002, -3002,    -9, -1480,  2902,
     764,   -83, -3002, -3002, -3002, -3002,   198, -3002,   959,  -107,
   -3002,  2141,  -693,  -786,  1971,  -144,    97, -1742,   -12,  2157,
     546, -3002, -3002,   549, -2086, -1415,   505,  -191,   965, -3002,
   -3002, -1230, -3002, -1913, -1174, -3002, -3002,  -727,  1166, -3002,
   -3002, -3002,  1654,  2109, -3002, -3002,  2592,  2783, -3002,  -864,
    2864,  1011, -1032,  1979,  -939,  1980,  -937,  -935,  -932,  1985,
    1987,  1988,  1990,  1994,  1997, -1536,  4973,  2226,  -771, -2150,
   -3002, -2135,  1081,    48, -3002, -1384,    78, -3002, -3002, -3002,
   -3002, -2594, -3002,  -356, -3002,  -353, -3002, -3002, -3002, -1557,
   -2679, -1555, -3002,  3635,   901, -3002, -3002,   498, -3002, -3002,
   -3002, -3002, -1487, -3002,  5988,   803, -3002, -1994, -3002, -3002,
    -965,  -832,  -716,  -994, -1213, -1904, -3002, -3002, -3002, -3002,
   -3002, -3002, -1505, -1762,  -262,   862, -3002, -3002,   955, -3002,
   -3002, -3002, -1751, -2106, -3002, -3002, -3002,   868,  1541,   172,
    -825, -1600, -3002,   913, -2359, -3002, -3002,   493, -3002,  -614,
   -1121, -2421,   386,    50, -3002,  -663, -2523, -3002, -3002,  -718,
   -2638, -1102,  -899, -3002,   124,  1195,    24,   127, -3002,   132,
    1314, -3002, -3002, -3002,   133, -3002,   408,   134,   272, -3002,
    1013, -3002,   797,    23, -3002, -3002, -3002,    82,  2889,     5,
   -2529
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   752,   753,  1837,  1784,  2936,  1228,
    1774,  1352,   754,  2598,  2599,  2600,  2241,  1209,  3365,  2242,
    1210,  1211,  2602,    54,    55,    56,   115,  1240,   755,   756,
     529,    59,  2291,   920,   804,  1096,   806,  1097,  1606,   908,
    1243,  1244,   757,  2640,  2303,  3162,  2689,  3163,  2364,  2297,
    1362,  2358,  1878,  1818,  1363,   537,  1892,  2690,  2645,  1879,
     758,  2587,  2938,  3358,  2613,  3496,  2874,  2875,  3355,  3356,
    2590,  2244,  3424,  3425,  2672,  1765,  3419,  2322,  3298,  2248,
    2229,  2876,  2330,  3257,  2984,  2245,  2856,  2323,  3351,  1853,
    2324,  3352,  3111,  2325,  1815,  1841,  2591,  3426,  2249,  1816,
    2586,  2939,  1753,  2326,  3362,  2327,   548,  2860,   759,  2675,
    1308,   531,   520,   521,  1534,   717,  1284,   718,   760,   938,
    1847,   761,  1301,  1829,    65,  1315,   549,  1850,   762,  1838,
     763,  2659,  2660,   764,   765,  1171,  2543,  2163,   766,   743,
     744,   955,  1332,   745,    71,  1858,   767,  1338,  1339,   963,
      73,   873,  1354,   768,  1355,  1356,   972,    74,  2691,   974,
     975,    75,    76,   770,  3194,  2999,  1317,  1854,  2335,   550,
     771,  2821,  2165,  2546,  3347,    79,  3092,  2168,  1169,  3095,
    3312,  2814,  3090,  2547,  3387,  3441,  3093,  2169,  2170,  3313,
    2171,   772,   821,  1034,  1474,   773,   774,  1038,  2019,   775,
    1756,   776,  1098,    86,    87,  1010,    88,  3105,    89,    90,
    1731,  1732,  1733,   851,   863,   864,  2161,  1446,  1962,   856,
    1174,  1700,   838,   839,  2287,   881,  1807,  1695,  1696,  2174,
    2554,  1724,  1725,  1183,  1184,  1950,  3327,  1951,  1952,  1439,
    1440,  3203,  1712,  1716,  1717,  2195,  2185,  1703,  2433,  3022,
    3023,  3024,  3025,  3026,  3027,  3028,  1099,  2728,  3214,  1720,
    1721,  1186,  1187,  1188,  1729,  2205,    92,    93,  2146,  2530,
    2531,   810,  3039,  1463,  1734,  2732,  2733,  2734,  3042,  3043,
    3044,   811,  1005,  1006,  1029,  1024,  1453,  1970,   812,   813,
    1927,  1928,  2402,  1031,  1964,  1980,  1981,  2740,  2455,  1535,
    2230,  1536,  1537,  1997,  1538,  1100,  1539,  1565,  1101,  1570,
    1541,  1102,  1103,  1104,  1544,  1105,  1106,  1107,  1108,  1558,
    1109,  1110,  1582,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
    2006,  2007,  2008,  2009,  2010,  2011,  1155,  1735,  1112,  1113,
    1114,  1115,  1116,  1117,  1118,   815,  1119,  1120,  1655,  2140,
    2529,  3032,  3211,  3212,  2805,  3080,  3239,  3338,  3455,  3483,
    3484,  3510,  1121,  1122,  1598,  1599,  1600,  2033,  2034,  2035,
    2036,  2134,  1649,  1650,  1123,  2943,  1652,  2056,  3035,  3036,
    1156,  1432,  1593,  1286,  1287,  1549,  1406,  1407,  1413,  1902,
    1421,  1425,  1932,  1933,  1433,  2102,  1124,  2027,  2028,  2473,
    1560,  1125,  1242,  1605,  2800,  2137,  1653,  2096,  1132,  1126,
    1133,  1128,  1589,  1590,  2490,  2772,  2773,  2066,  2202,  1682,
    2207,  2208,   959,  1129,  1130,  1131,  1288,   524,  1550,  3442,
    1328,  1161,  1289,  2092,   777,   107,   778,   779,    97,   780,
    1151,   860,  1152,  1154,   781,   832,   833,   782,   845,   846,
    1476,  1669,  1477,   869,   102,   103,  1197,   834,   852,   784,
    3189
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     519,    61,    66,   907,    77,   104,   883,   884,    60,   716,
     882,  1193,   868,  1127,   808,    91,   519,  1788,    69,   715,
    1227,    78,  1799,   101,    95,   956,  1025,   854,  1424,  1157,
    2177,  1296,   769,  1335,  1752,    91,  1245,   970,  1929,  1683,
    1771,  1787,  1478,   783,  1298,  1395,   886,  1397,  1351,  1398,
    2279,  1584,  1399,  1984,  1762,   522,  1758,   523,  2144,  2018,
    2532,  2549,  2534,  1341,  1685,  1357,   742,  1804,  2684,  2592,
    2559,   814,  1834,   523,   887,  2079,  2080,   866,  1860,  2453,
     808,   808,   519,   519,  1792,    51,    52,  2451,    53,    57,
    2055,  2944,    58,    62,    63,    64,   820,   820,  1659,   900,
      67,   816,    68,  1662,  2970,  1229,   822,  1233,    70,  1237,
      72,    80,  2548,  2941,  2972,  1007,  2985,   847,  2513,    81,
    1028,    82,   971,    83,    94,  2988,  1596,    96,  2585,  2771,
     958,  1245,    98,    99,   100,   966,  -368,   814,   814,   523,
     523,  2646,  2632,  2633,  2634,  -513, -1897,    84,  1050,  2835,
    1366, -1324,  2311,  2840,  -517, -1897,  1663,  1345,   818,  2200,
    2308,  2197,  1050, -2037, -2037, -1246,  3181,   816,   816,   976,
    2405, -1265,  -859,  2094,  1146, -1888, -2023, -2023,  -859, -1262,
   -1262, -1905,  2148, -2028, -2028,   850,   904, -1266,  -851, -2046,
   -2046, -1265, -1888,  1561,  1562, -1263, -1263,  -856,  2654,  1408,
     818,  -856, -1905,  2304,  1050,     3,     4, -1266,  -818,  2649,
    1574,  1666, -2048, -2048,  -831,  -846,   818,  2661,  1743,   818,
    1418,  3467,  2094,  2434,  1754,  3115,   858,  1906,  1345,  2653,
    2471,  1329,  1908,  1050,   534,  1790,  2443,  1139,  1615,  3166,
    2641,  1754,   818,  1617,  -468,  -513,  2115,  1320,  1329,  1182,
     892, -1104,  2620,  1802,  -517,  1144,  3185,   818,  1592, -1104,
    1615,   970,  1803,  3260,  1616,  1617,  3098,  1763,  2696,  2698,
    1664,  2701,  1245,  1625,   874,  -229,  1447,  1763,  1690,  2210,
    -229,  3492,  1050,  1329,  3273,  1185,  1321,  2301,  1772,  2735,
    1002,  1775,  1776,  1028,  3130,  1625,   947,  2668,  -650,  1008,
    3182,  3452,   874,  3345,  2736,  1007,  3150,  1627,  2141,  3126,
    2415,   877,  1358,  1746,  1704,  3183,  1946,  3459,  3081,  1614,
    3083,  3505,  1615,  2807,  2417,  2809,  1616,  1617,  3206,  1627,
    1620,  1621,  1622,  2989,  1566,  2203,  2718,  2707,  1143,  2285,
    3516,  1763,  1147,  3390,  1148,  3410,  1178,  1946,  1992,  3386,
    1576,   535,  3112,  1777,  2131,  1687,  2588,  1625,   786,  2878,
    1705,  1359,  2132,  1740,  1626,   875,  1736,  1737,  2849, -1125,
    2116,  2964,  1503, -2022, -2022,  1704,  -788, -1125,  2418,   879,
    1615,   836,   878,  3353,  2524,  2081,  3088,  2117,  3290,  3521,
    1615,  1627,  2118,   875,  1665,  2808,  2227,  2378,  1172,   556,
    3339,  2367,  3340,  1786,  3149,   747,  2368,  1579,  1701,  2596,
    1719,  1806,  1014,   785,   879,  1625,  2172,   824,  1844,  1418,
    2848,  1705,  1180,  1754,  3089,   532,  1706,  3113,  2406,  1580,
    2119,   865,   865,  2879,  1755,  -513,  3176,  3474,  1009,  2891,
   -2019, -2019,  3175,  3291,  -517,  3354,  3289,  1612,  1015,  1627,
    2204,  2831,  3292,  3187,  -670,  3453,  2228,  2142,  1298,  1627,
     879,  3371,  3303,  2369,  1448,  1322,  3522,  1793,  3475,  2997,
    3127,  1764,  3304,  1748,  1017,  1358,  3293,  1707,  3392,  3506,
    2585,  1764,  2585,   837,  3454,  3420,  2766,  3240,  1628,  3242,
    2708,  3493,  2589,  3460,  1140,   896,  1584,   787,  1778,  2990,
    1173,  2173,  2286,  3517,  -513,  1629,  3184,  2416,  1779,  3012,
    1630,  3271,  -788,  -517,  1906,  1688,  1702,  2880,  1907,  1908,
    2231,  2419,  1578,  3204,  1761,  1615,  1330,   983,  3346,  1616,
    1617,  3255,  2293,  1631,  1632,  3249,  1906,  1761,  1707,  1708,
    1907,  1908,  2095,  1330,  2302,  1764,  3462,  1761,  1633,  3294,
    3265,  3468,  1358,  2211,  1678,  1358,  1358,  3433,  3523,  3124,
    1625,  1738,  3295,  3116,  2026,  2981,  1686,  2447,   859,  1141,
    2995,  1791,  2428,  2429,  2430,  3161,  3494,  2222,  1330,  1323,
    2227,  1604,  1044,   716,  2735,  2120,  1634,  3261,  2621,  1635,
    1749,  2515,  2284,   944,  1627,  3003,  1938,  1739,  2993,  2736,
    1708,  1021,  1805,  1636,   876,  3495,   948,  2787,   956,   880,
    3318,  1761,  2348,  1862,  2536,  3280,  2705,  1953, -1104,  1866,
    1449,  3421,  -513,  1561,  1562,  2055,  2562,  1788,  2944,  2197,
     970,  -517,  2466,  1973,  3125,  2965,  1149,  1989,  2386,  3305,
    2582,  2642,  2643,  1418,  1418,  3434,  1579,  1557,  1574,  1418,
    2941,  1295,  1579,  2750,  -368,   817, -1897,  2664,  2354,  1349,
    1350,  -513,  1571,  -513,  2373, -1897,  2147,  2683,  1580, -1324,
    -517,  1571,  -517,   905,  1580, -1246,  2379,   906,  1563,  3252,
    3106, -1265,  1581,   922,  3253, -1888,  1873,  1875,  1583,  2557,
    2551, -1905,  2646,  2729,   536,  3226,  2655, -1266,  -851,  3445,
    3170, -1265, -1888,  1638,  1331,  3422,  2407,  -856,  2037,  2038,
    1610,  3524, -1905,  2412,   996,   971,   868, -1266,  1564,  1863,
     999,  2133,  2023,  1592,  1569,  -846,  1660,  1923,  1870,  2149,
    1349,  1350,  1592,  1245,  2075,  1245, -1125,  3376,  1648,  1334,
    3377,  3370,  1944,  2039,   969,  2828,  2058,  1461,  1782,  2444,
    2040,  2041,  3372,  2444,  2042,  2043,  2044,  1645,  1646,  1647,
    1648,  3296,   105,   973,  3297,    91,  2858,  1566,   868,   855,
    3097,   113,  1783,   783,  1763,  2076,  2284,  -229,  -229,  3139,
    3140,  2387,   905,  2465,  3500,   519,   906,  1576,  2816,  1178,
    1049,  2388,  2859,  1906,   998,  2614,   519,  1907,  1908,  1462,
    3503, -2050, -2050, -2050,  1782,  3007,   886,  3179,  2615,  1194,
    1639,   106,  2829,  1640,  1641,  1642,   861,  1643,  1644,  1645,
    1646,  1647,  1648,  2014,  2413,  3156,  1035,  2970,  1783,   108,
    3046,   519,   519,  3048,   887,  3050,  3099,  1036,  3272,  2024,
     814,  3528,   523,  2817,  1145,  1861,  3432,  2257,  2030,  3435,
    3443,   814,  2338,   523,   519,   114,   978,  2260,   820,  3180,
    2263,  2413,  3406,  3407,  1145,  1180,  1754,   980,  1450,  3164,
     816,  1150,    61,    66,  1457,    77,   104,  1757,  2958,    60,
    2959,   816,  3062,  1579,   870,  3176,    91,  2525,  1032,    69,
    2944,  2255,    78,  1158,   101,    95,  2159,  2630,   519,   716,
    1796,  1604,  1283,   519,  1201,  1580,  2031,   905,  2631,  2097,
    1202,   906,  2941,  1136,  1181,  3447,  1763,  3308,  2061,  1581,
    2062,  2160,   847,   847,  2422,   847,  1444,  2280,  2281,  2282,
    1872,   871,  2186,  1454,  2347,  1050,  1441,  3132,  2349,   942,
     872,  2351,  2487,  2314,  3498,  3137,  2077,  1201,  3258,  2219,
    2357,   818,   888,  1202,  1465,  1283,    51,    52,  1469,    53,
      57,  3518,  2778,    58,    62,    63,    64,  2359,   969,  1341,
     903,    67,  2852,    68,   519,   519,  2256,  1299,  1764,    70,
     519,    72,    80,   519,   519,  3245,   519,   519,   519,   519,
      81,    91,    82,  2055,    83,    94,  2266,   109,    96,   783,
     808,  2273,   519,    98,    99,   100,  3234,   808,   110,   519,
     818,  1920,  1921,  1922,  1923,  1203,  1929,  3235,    84,  3366,
    1643,  1644,  1645,  1646,  1647,  1648,  1861,  2556,   519,  1283,
    1533,  1918,  1919,  1920,  1921,  1922,  1923,  2719,  2720,  2721,
    2722,  1579,  2619,   111,  1761,  1788,  1353,  3072,  2018,   519,
    2537,  2196,  2196,  2538, -1897,  1393,   868,   814,  1203,   523,
    2853,   905,  2258,  1580,   814,  1603,   523,  2261,   519,   909,
    2635,  1874,  1375,  1376,  1914,   921,  1050,  1583,  2103,   519,
     519,   519,  2366,   519,   519,  2568,  2370,   816,   716,  2372,
    2560,  2231,  3349,   112,   816,  1050,   538,  2135,  1602,  1383,
    1384,  2136,  3198,   538,  1472,  1947,  2104, -2020, -2020,  2411,
    1948,  1358,  1134,  1135,  1455,  1137,   519,  2622,  1460,  1343,
    1764,  1358,  1344,   928,  1358,  1763,  2854,  2557,  2855,  1692,
    1693,   961,  1699,   519,   519,  -209,  1418,  1418,  1418,  1418,
    1418,  1418,  1383,  1384,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,   939,  1145,  1201,   887,   887,   539,
     887,  2103,  1202,   970,   940,  1937,   539,  1939,  1940,   519,
     951,  1608,  1204,   519,   519,   945,  2669,  1596,   910,  1572,
    1573,  1611,  2677,   519,   519,   519,  1761,   946,   519,  2104,
    1178,   877,   905,  2469, -1246,  1179,   906,   949,  -594,  1676,
    1661,   116,  1677,  -594,   911,   533,  -595,  1533,  1447,  1667,
    -526,  -595,   950,   746,  1358,  1204,  1387,  1388,  1789,  1867,
    1988,  2105,  1868,  1989,  2745,  -526,  2290,   952,   835,  1205,
    -526,  2107,   848,  1206,  1039,  1040,  1041,  2045,  2046,  2047,
    1283,  2048,  2049,  2050,  2051,  2052,  2053,  2012,   865,  1283,
    2013,  2623,  2298,  2361,  2399,  2299,  2362,  2400,  2445,  1387,
    1388,  2446,   878, -2021, -2021,  1207,  1180,  1203,  2503,   962,
     912,  1763,  2533,  1283,  -594,  2448,  1206,  2610,  2446,   818,
    2611,  -526,  -595,   981, -2050, -2050, -2050,   982,  1918,  1919,
    1920,  1921,  1922,  1923,   983,  1533,  1297,  3008,   924,   913,
     925,  -526,  1828,  1830,  2105,  1831,  1832,   984,  1207,  2106,
    2604,   716,  2606,   987,  2107,  1181,  2730, -2024, -2024,  2737,
     716,  1855,   990,  -594,  1418,  1418,   991,  1698,  3514,  1764,
    2616,  -595,  1214,  2617,   992,  2460,  1208,   969,   993,   543,
     879,   965,   914,  2055,  1014,   926,   543,   927,   965,  2862,
    -526,  1555,  1215,    47,   716,  1201,   973,  3477,    91,  -526,
     519,  1202, -2025, -2025,  1877,  1965,   783,   547,  1967,  3501,
     994,  3502,  3489,  1971,   547,  2680,  1974,  1201,  1989,  1208,
    1015,  1978,  2108,  1202,  2942,  2742,  2571,  2889,  2446, -2026,
   -2026,  2743,  2865,  2109,  2013,  1761,  1456,  2627,  1216,  1001,
      14,    15,  2423,   995,  2424,  2593,  1017,   519,   519,   996,
    2957,  2882,  3527,   519,  2846,   519,  2746,  2652,  1030,  2747,
     519,   519,   519,   519,  1204,  2748,  2823,  3525,  2747,  2824,
    1033,  1876,  3526,  2505,  1037,   519,   519,  1042,  1418,   808,
      23,   519,   808,  2881,   519,  2890,    23,   808,  1043,   519,
     808,   519,   519,  2767,  2768,   808,  2980,   519,  1044,  2299,
    2967,  2506,  2328,  1045,  2329,  2108,  1203,   915,  2996,  1138,
     814,  2362,   523,  1142,  3001,  1764,  2109,  3002,   916,  1153,
    3009,  1231,  3335,  3010,  3336,  1206,  2535,  1201,  1203,   880,
   -2027, -2027,  3063,  1202,  1217,  2013,   814,  1159,   523,   814,
     816,   523,  3199,  1160,   814,  2013,   523,   814,  -526,   523,
   -2029, -2029,   814,   917,   523,  1533,  2594,  1232,  1201,  2561,
    2561,  1168,  2753,  1596,  1202,  2754,   816,  2755,  2757,   816,
    2756,  2758,  2759,  1021,   816,  3200,   918,   816,  2446, -2030,
   -2030,  1761,   816,  1218,  1986,   865,  3229,   519,   519,  2013,
    3263,  3236,  1449,  1219,  1989,  2869,   519,   519,  3246,  2015,
    2425,  3247,  2426,   919,   519,  1220,    91,  3279,  1162,  2016,
    2299,   519,  2017,  1163,  2022,  2021,   905, -2031, -2031,  1162,
     906,  2507,  1164,    27,    28,    29,  2508,  1167,  1208,    27,
      28,    29,  3283, -2032, -2032,  2362,   716,  1221,  1203,  3315,
     519,  1176,  2013,   519,  2870,  2607,   538,  2609,  1533,   519,
     519,   519,   519,   519,   519,   519,   519,   716, -2033, -2033,
    2871,   519,   519,  1204,  1196,  3383,   519,  2091,  2362,  1203,
     519, -1310,  2688,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   970,  2144,   519,  1204,  1198,  3388,    34,  1223,
    3389,   519,  1195,  1283,    34,  2179,  1199,  3414,  3458,  1614,
    3415,  3389,  1615,  3143,  2557,    36,  1616,  1617,  3499,   539,
    1200,  3389,   519,  1204,  1224,  1212,   934,  3107,  2075,  1213,
    1235,  2889,  1230,   887,  1206,    39,  2845,    38,  2847,  1150,
    1175,    39,  1177,  1226, -2034, -2034,   519,  1625,  2020, -2035,
   -2035,  1234,  2218,  1238, -2050,  1239,  1206,   519,   519, -2036,
   -2036, -2038, -2038, -2039, -2039,   935,  1236,  1291,    41,  1294,
    1864,  2872,  1865,  2313,    41,  1295,  -526, -2040, -2040,    44,
    2873,  1627, -2041, -2041,  2595,    44,  2596,  2509,  1207,  2150,
     538,  -526,  1300,  1533,  1418,  1418,  -526,  2839,  2510,  3160,
    2657,    45,   716,  1992,   716,  1204, -2042, -2042, -2043, -2043,
    2963,  1302,  2243,  3000,  2247,  1303,  2597,  1316,    85, -2045,
   -2045,  1318,  2975,  1326,  3476,    46, -2047, -2047,  3478,  1327,
     932,  1333,  1820,    47,  2991,  1336,  1204,  1208,    85,    47,
    1319,   807, -2049, -2049,   519,  2749,  2751,  -526,  1283,  1337,
     937,   519,   519,   539,  1342,  3074,    85,  1360,  3464,  1208,
    1361,  3314,  2264,  1808,  1809,   867,  1206,  -526,   932,  3225,
    1367,  1821,  2198,  2199,  1049,  -645,  -645,  1906, -2050,  -649,
    -649,  1907,  1908,  3519,  1422,  1909,  1910,  1911,  1435,  1283,
    -648,  -648,  1437,  2271,  1445, -2050,  1438,  1206,  2265,   543,
   -2050,   965,   933,  1451,   716,  1452,  3171,   807,   807,   885,
    1458,  1283,   519,  1385,  1386,  1459,  -526,  1464,  2276,  1468,
     969,    85,  1387,  1388,   546,  -526,   541,   547,  1470,  2272,
    1473,  2292,  2292,  2435,  2818,  3103,  3104,  1533, -2050,  2438,
     933,   519,   519,  1551,   519,  1552,  3485,  3486,  1554,  1533,
     519,   519,   519,   519,   519,   519,  1823,  -822,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,  -829,  1208,
    1563,  2942,  1567,   519,   519,    47,  2557,   519,  -670,  1533,
    3511,  3512,  -671,  1297,   519,  1418,  1533,  1671,  1672,    23,
    -208,  -819,  -820,  1636,  1577,  -823,  1578,  -821,  1353,   934,
    1208,  1358,  1588,  1601,  2365,  3135,   519,   808,  1607,   519,
    3034,   519,  3314,   808,  1609,   519,  1654,  1658,  1011,  3144,
    3145,  1656,  1533,  1012,  1670,  1684,  1533,  3277,  1680,  1679,
     519,  1689,  1283,   543,  1533,   544,  1691,  1820,   935,  2332,
    2862,  1179,  1181,  1726,  1728,  1741,  2863,  1730,  1759,  1760,
    1761,  1766,  1768,  1767,  3058,  3314,  1533,  1773,  1780,  2864,
    1785,   547,  1781,  1795,   814,  1912,   523,   113,   519,   519,
     814,  3045,   523,   936,  -526,  1801,  1821,  1811,  1825,  1817,
    1812,  1813,  1013,  2865,  1826,  2866,  1840,  1836,  1913,  1827,
    1839,  1842,  1849, -2050,   816,  1843,  1845,  1846,  1548,  1848,
     816,  1856,  1214,  1857,  3314,  1861,  1596,  1869,   519,  3368,
    1895,  1822,  1897,   519,   519,   868,  1898,  1934,  1963,  1900,
    1903,  2819,  1215,   937,  1926,  1935,  1942,  1966,  1945,  1972,
    1975,  3047,    27,    28,    29,  1976,  1977,  1982,   519,   519,
    1557,  1990,   905,   519,  1418,  1987,   906,  1564,  3330,  1996,
    1569,  1991,  1993,  1994,  1014,  2025,  1995,   519,  1914,  2026,
     519,  1823,   519,  1050,  2059,  2060,  1615,  2065,  1216,  2093,
    2071,  2068,    23,  2867,  2100,  2073,  2111,  2070,   519,   716,
    2072,  2223,  2112,  2114,  2138,   519,   808,  2139,   519,  2145,
    1015,  2232,  2157,  2235,  2162,  3121,  2246,    34,  2158,  1668,
   -2050,   878,  2250,   808,  2252,   519,  1016,  1643,  1644,  1645,
    1646,  1647,  1648,  2178,  2175,  2187,  1017,  2259,   519,  2189,
    2188,  2190,  2262,  2191,  2192,  2209,  2267,  2268,  2269,  2270,
    2213,  2274,  2275,  2942,    39,   519,   519,  2217,  2885,  2214,
    2220,  2868,  2224,   814,  2225,   523,  2869,  2226,  2296,   879,
    1018,  2305,   519,  1540,   519,  2300,  1788,  2318,  2315,  2317,
     814,  2319,   523,   519,  1217,  2333,  2334,    41,  2336,  1358,
    2339,  1192,  2340,   816,  1358,  1548,  2341,  2342,    44,  2343,
    2346,   716,   716,   716,  1418,  2344,  2350,  3266,  2363,  1931,
     816,  2243,  2243,  2243,    45,  2870,  1019,  1880,  2371,  1906,
    2401,  1930,  2408,  1020,  2409,  2432,  2410,  2414,  2439,  2450,
    2452,  2871,  2420,  1218,  2421,    27,    28,    29,    46,  2437,
     519,  1873,  1875,  1219,  2457,  2479,  1283,  2461,  2462,  2458,
     868,  2528,  2820,  2468,  2463,  1220,  2459,  2483,   970,  2484,
    2464,  2478,  2467,  1021,  1881,  2480,  2475,  2476,  2481,  2482,
    2485,  2486,  2496,  2497,    85,  1828,  1830,  2499,  1831,  1832,
    2504,  2511,  1022,  1548,  1533,  1882,  2612,  1221,  1915,  1916,
    1917,  2520,  1918,  1919,  1920,  1921,  1922,  1923,  2521,  2526,
      34,  2539,   519,  1883,   538,   716,  2527,  1884,  2540,  2542,
    2544,  2545,  2552,  -651,  2550,  1877,  2566,  2553,  2563,   969,
    2564,  2567,  2570,  2574,  2575,   716,  2576,  2578,  2581, -1310,
    1885,  2584,  2872,  1886,  2603,  1877,  2580,    39,  2644,  1223,
    2605,  2873,  2636,  3319,  2075,  3321,  2618,  2637,  2638,  1887,
    1540,  1023,  2639,  2650,  2624,  2625,  2658,  2626,  2651,  2656,
    2666,  2667,  3329,   519,  1224,  2674,  2670,   539,  2678,  2685,
      41,  2671,  2695,  2703,  2706,  2709,  2712,  2738,  2726,  2713,
    2727,    44,  2714,  1226,  2739,  2763,  2715,  2744,  2775,  2804,
    2785,  2752,  2760,  2769,  2813,  2832,  2783,  1353,  2789,  2786,
    2806,  2836,   519,  2844,  3331,  2693,  3333,  2694,  2799,  3451,
    2798,  2699,  2810,  2702,  3328,  2830,  2877,  1533,   814,  2801,
     523,   964,  2973,   868,  1145,  2893,  3412,  2834,  2983,  2987,
    2998,  3005,  3031,  3405,   519,    47,  3037,  2851,  1540,  2966,
     519,   519,  1888,  2960,  2857,  2969,  1873,  1875,   816,  3416,
    1889,   519,  2850,  2979,  2961,  2299,   868,  1201,  1358,  2962,
    2974,  2982,   519,  1202,  2978,   519,  3006,   519,  3011,  3033,
    3041,  1214,  1890,  3051,  1533,   519,  3052,  3400,   519,   519,
    3054,  3055,  3075,   519,   519,  3087,  3082,  3096,    85,   867,
     519,  1215,  3085,  3094,  1214,  3100,  3101,   542,  3110,  1891,
    3102,  3114,  3108,  1548,  3109,   519,  3118,  2838,  3119,  3120,
    3128,  3131,  3133,  1864,  1215,   519,  3134, -2018,  2015,  3138,
     518,   530, -2019,  3151, -2020,    91,   554, -2021,  2016, -2022,
     985,  2017,   554,  2022,  2021,   519,   805,  1216,   819,   819,
   -2023,   997,  3152,   823,   554,   831,  3153,   543,   831,   965,
    3157,   849,   853,  3172,  3158,   853, -2024,  3154,   554,   554,
    1216,  3167, -2025, -2026, -2027, -2029,   545, -2030,  1203,  3155,
   -2031,  3186,   546, -2032,   716,   547, -2033,  2940,   716, -2034,
     716, -2035,  3173, -2036,  2243, -2038, -2039, -2040,  2945,   885,
    2247,  3188,   519, -2041,   519,  3190,  1548, -2042,  3192, -2043,
   -2044, -2045,   805,   805, -2046,  3191, -2047,  1049, -2048,    85,
    1906, -2049, -1263,  3165,  1907,  1908,   849,  3195,  1909,  1910,
    1911,   853,   554,   853,   853,   853,  1828,  1830,  3201,  1831,
    1832,  3202,  3216,  1217,  3205,  2780,  3207,  3209,  3440,  1614,
    3219,  3213,  1615,  3215,  3221,  3220,  1616,  1617,  3224,  3228,
   -2050, -2050, -2050,  3251,  3243,  2937,  1217,  2020,  1540,  3244,
    3248,  1542,  3254,  2822,  3256,  3268,   868,  3269, -1262,   519,
    3276,  3278,  1533,  3286,  3285,  3302,  3287,  1625,  3300,  3301,
    3316,  3317,  1218,  3323,  1626,  3320,  3324,  2673,  2644,   519,
     519,  3337,  1219,  1444,   519,  3127,  3332,   519,  3326,  3357,
    3361,  2331,  3363,  3364,  1220,  1218,  3367,  3373,  3379,  3380,
    3381,  1627,  3386,  1011,    85,  1219,  3391,  3393,  1012,  3078,
    1358,  3395,    23,  3398,   519,  1204,  3404,  1220,  3399,  3402,
    3403,  1548,  3409,  3411,  1614,  3413,  1221,  1615,   519,  3418,
    3423,  1616,  1617,   519,   519,  3430,  3429,   807,   519,  1533,
    3431,  1540,  3436,   519,   807,   868,   519,   519,  3437,  1221,
    3438,   519,  1283,  3446,  3466,   519,   907,   808,  2971,   519,
    3448,  3450,  1625,  3456,  3469,  3471,   519,  1013,  3487, -2050,
    3490,  3467,  1222,  3468,  3504,  3509,  1206,  3520,  1223,  3515,
    1556,  3529,  3530,  3141,  2896,  2992,  2892,  2251,  2994,  1011,
    2601,  2154,  1568,  1165,  1012,  2628,  1627,  2647,  1628,  2692,
    3196,  1223,  1797,  1224,   979,  2294,  3427,  2968,  1225,  3497,
     519,  1913,  3264,  3465,   814,  1629,   523,  3472,   519,  1594,
    1630,  1751,  1226,  3491,  3299,  2583,  1224,  2608,  1542,  3463,
    2861,  2986,  3470,  2946,  2579,  3461,  1824,   519,  2687,  1014,
    2826,  3084,  1859,  2352,   816,  1226,  1533,  1189,  3384,  1871,
    3344,  3444,  2825,  1013,  3408,    27,    28,    29,  1633,  3513,
    1364,  2502,  2811,  1893,  2555,  1548,  2569,  1681,  2216,  1442,
    1723,  1722,  2717,  3449,  2565,  1015,  1540,  1548,  2184,  1208,
    2940,  1914,  3394,  3322,  2215,   809,  2541,  1049,  1727,  1443,
    1906,  1016,  3040, -2050,  1907,  1908,  2442,  3223,  1909,  1910,
    1911,  1017,   885,   885,  1000,   885,  2711,  1548,  2710,   986,
   -2050,  2741,  3270,  1636,  1548, -2050,  1542,  1409,  2360,  2456,
      34,  2841,  2842,  1394,  1396,  1014,   519,   716,  3397,  1400,
    3396,  1401,  1402,  2494,  1403,  1018,  2765,  1877,  1404,  2558,
    2518,  1405,  2472,  2516,  1954,  3086,   868,  2495,  2777,  2894,
    1548,  2153,   893, -2050,  1548,   969,  1190,    39,   519,  1533,
    2449,  1015,  1548,     0,  2947,  2948,  2949,  2950,  2951,  2952,
    2953,  2954,  2955,  2956,   519,     0,     0,  1016,     0,     0,
       0,  1019,     0,     0,  1548,     0,     0,  1017,  1020,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,  1533,     0,     0,     0,     0,   519,  1636,     0,
    3174,     0,     0,  1638,     0,     0,     0,    45,   519,   519,
    1540,  1018,   519,     0,   519,     0,     0,     0,  1021,     0,
       0,     0,  1540,  1353,     0,     0,     0,     0,     0,     0,
     853,    46,  1968,     0,     0,   853,     0,  1022,   853,   519,
       0,     0,     0,     0,     0,    47,   554,     0,     0,     0,
       0,     0,  1540,     0,     0,     0,     0,  1019,     0,  1540,
       0,    85,     0,   519,  1020,     0,     0,     0,  2212,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3178,  1915,  1916,  1917,     0,  1918,  1919,  1920,  1921,  1922,
    1923,  1913,     0,     0,  2940,  1540,  1543,     0, -2050,  1540,
       0,     0,     0,  3241,  1021,     0,  1023,  1540,     0,     0,
    1639,  1191,     0, -2050, -2050, -2050,     0,  1643,  1644,  1645,
    1646,  1647,  1648,  1022,     0,     0,  1542,     0,     0,  1540,
       0,     0,     0,   519,   716,     0,     0,     0,   519,     0,
       0,     0,     0,     0,  1877,     0,     0,     0,   519,     0,
     519,     0,   519,     0,     0,     0,   519,     0,   519,     0,
     519,  1914,     0,     0,     0,     0,   807,  1417,     0,   807,
       0,   519,  2937,     0,   807,     0,   519,   807,   519,     0,
       0,     0,   807,     0,     0,     0,   519,     0,     0,     0,
       0,  1214,  1023,   814,     0,   523,     0,  1969,     0,   716,
    3122,     0,     0,     0,   519, -2050,     0,     0,     0,  3350,
       0,  1215,  1643,  1644,  1645,  1646,  1647,  1648,     0,  1542,
       0,     0,     0,   816,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   954,   554,   554,  1049,
       0,     0,  1906,     0,     0,     0,  1907,  1908,     0,     0,
    1909,  1910,  1911,   519,     0,     0,     0,  1216,  2883,     0,
       0,     0,     0,   519,  3281,  3282,     0,  2781,  2884,    85,
       0,     0,     0,  1543,     0,   519,     0,     0,   977,   530,
     819,     0,  1548,  3177,     0,   518,     0,   853,     0,   519,
       0,     0,     0,     0,     0,     0,   805,     0,     0,  3369,
    1004,  1004,     0,     0,    23,  1004,  1027,   519,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   831,
     831,   831,     0,     0,     0,     0,     0,  2885,     0,     0,
       0,     0,   519,   831,   831,     0,   831,     0,     0,     0,
       0,  3341,     0,  3343,   814,     0,   523,   519,  2101,   853,
       0,     0,     0,  1217,  1542,   554,  2940,     0,   716,     0,
       0,  1543,     0,     0,     0,     0,   853,     0,  3350,   853,
       0,  1915,  1916,  1917,   816,  1918,  1919,  1920,  1921,  1922,
    1923,   519,     0,  3375,     0,     0,     0,   814,     0,   523,
       0,     0,     0,     0,     0,   519,   519,   519,     0,  3378,
       0,     0,  1218,  3382,     0,     0,     0,     0,     0,     0,
       0,     0,  1219,   853,  1293,  1548,     0,   816,   885,     0,
       0,     0,   519,     0,  1220,     0,  2886,     0,   853,   853,
     853,   853,  1314,     0,  2937,     0,   814,  1540,   523,     0,
       0,     0,     0,     0,     0,  1325,     0,    27,    28,    29,
       0,     0,     0,  1913,     0,     0,  1221,     0,     0,     0,
       0,     0,     0,   519,     0,     0,   816,  3267,     0,     0,
    1011,     0,  1548,     0,     0,  1012,     0,     0,  1004,  1027,
       0,   853,     0,     0,  1416,     0,     0,     0,  3274,  3275,
    1004,  1004,     0,    11,     0,     0,   554,     0,  1542,     0,
       0,     0,   805,     0,     0,     0,     0,     0,  1223,   805,
    1542,     0,    34,  3288,   538,     0,     0,  1614,     0,   554,
    1615,    14,    15,  1914,  1616,  1617,  1471,  3473,     0,     0,
       0,     0,     0,  1224,  1013,     0,     0,  1553,     0, -1310,
    1542,     0,     0,     0,     0,     0,     0,  1542,     0,    39,
       0,  2316,  1226,  3488,  2887,  1625,     0,  2888,     0,     0,
      85,     0, -2050,     0,     0,     0,     0,    23,     0,     0,
    1540,     0,     0,     0,     0,  1548,     0,   539,     0,  1545,
       0,  1543,    41,  1542,     0,     0,   554,  1542,     0,  1627,
    1904,  1905,     0,    44,     0,  1542,  1925,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1014,     0,  1049,    45,
       0,  1906,     0,     0,     0,  1907,  1908,  1542,     0,  1909,
    1910,  1911,     0,   555,     0,     0,     0,  1540,     0,   555,
       0,   540,     0,    46,    23,  1673,  3065,  1614,  1675,     0,
    1615,   555,  1015,     0,  1616,  1617,     0,    47,     0,     0,
     541,     0,   554,   554,  2512,   555,   555,     0,  1016,     0,
     853,     0,     0,     0,     0,     0,  1761,     0,  1017,     0,
    1548,     0,     0,     0,  1543,  1625,     0,     0,     0,     0,
       0,     0, -2050,  1416,   807,     0, -2050,     0,     0,     0,
     807,     0,     0,   853,  1750,     0,     0,     0,     0,   857,
       0,     0,  1018, -2050,     0,     0,   853,   542, -2050,  1627,
      27,    28,    29,  1049,  -208,     0,  1906,     0,     0,   555,
    1907,  1908,     0,   853,  1909,  1910,  1911,   853,     0,     0,
    1540,     0,  1798,  1915,  1916,  1917,     0,  1918,  1919,  1920,
    1921,  1922,  1923,     0,     0,  3457, -2050,  1548,  1019,     0,
       0,     0,     0,     0,     0,  1020,  1545,   543,     0,   544,
       0,     0,     0,     0,     0,   895,  3342,   898,     0,   902,
    1546,     0,     0,     0,  2790,    34,   545,    27,    28,    29,
       0,     0,   546,     0,     0,   547,    36,     0,  1814,     0,
     853,     0,     0,     0,     0,  1021,   853,     0,     0,     0,
       0,  1636,     0,     0,     0,     0, -2050,     0,    38,  1543,
    1852,     0,    39,     0,  1022,     0,     0,     0,  1594,   954,
       0,     0,  1913, -2050,   954,  1540,   554,   554, -2050,   554,
     954,     0,    40,     0,     0,     0,  2101,     0,     0,     0,
       0,     0,    34,     0,  1545,    41,     0,     0,     0,     0,
       0,  1547,  2522,     0,  1548,     0,    44,     0,     0,     0,
       0,     0,     0,   807,     0,     0, -2050,     0,     0,     0,
       0,     0,    45,     0,     0,     0,     0,     0,     0,    39,
     807,    23,     0,  1023,     0,     0,     0,     0,  1548,     0,
       0,     0,  1914,     0,     0,     0,    46,     0,     0,     0,
       0, -2050,  1540,     0,     0,     0,     0,  1416,  1416,     0,
      47,     0,    41,  1416,     0,   518,     0,     0,     0,     0,
       0,  1636,     0,    44,     0,  1542,     0,  1913,  1004,     0,
     554,  1949,     0,     0,     0,     0,     0,     0,   853,    45,
       0,   805,     0,     0,   805,     0,     0,  1546,     0,   805,
       0,     0,   805,  1543,     0,     0,     0,   805,     0,   554,
       0,   554,     0,    46,     0,  1543,  1985,  1548,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1543,     0,  1914,     0,     0,
      14,    15,  1543,     0,     0,     0,     0,     0, -2050,  1540,
    1548,     0,     0,     0,     0,  1643,  1644,  1645,  1646,  1647,
    1648, -2050,     0,     0,    27,    28,    29,     0,  1547,     0,
       0,     0,     0,   867,     0,  1546,     0,     0,  1543,     0,
       0,     0,  1543,  1540,     0,     0,    23,     0,     0,     0,
    1543,     0,     0,     0,     0,     0,     0,     0,  1542,     0,
       0,     0,     0,     0,  1545,     0,     0,     0,     0,     0,
    2054,     0,  1543,     0,     0,     0,     0,     0,     0,     0,
       0,  2064,     0,  2380,  2381,  2382,  2383,  2384,  2385,    34,
       0,  2389,  2390,  2391,  2392,  2393,  2394,  2395,  2396,  2397,
    2398,     0,  1915,  1916,  1917,     0,  1918,  1919,  1920,  1921,
    1922,  1923,  1548,     0,     0,  1542,  1547,     0,     0,     0,
     954,     0,  1540,     0,     0,     0,    39,     0, -2050,     0,
       0,     0,     0,     0,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1545,     0,    41,
       0,     0,     0,   555,     0,  1540,     0,  2151,     0,   853,
      44,   853,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   853,     0,  2167,     0,    45,     0,     0,    27,
      28,    29,     0,     0,   923,     0,  1416,     0,     0,   930,
       0,     0,   931,     0,     0,     0,  1594,  1915,  1916,  1917,
      46,  1918,  1919,  1920,  1921,  1922,  1923,     0,  1542,     0,
       0,   853,     0,   554,    47,     0,     0,     0,     0,     0,
       0,     0,     0,  1049,     0,     0,  1906,  1750,   554,  1594,
    1907,  1908,     0,     0,  1909,  1910,  1911,     0,   554,  2233,
     554,  2237,     0,   554,    34,  1546,     0,     0,    85,   554,
       0,   554,     0,     0,    85,    36,     0,  1540,     0,     0,
       0,  2500,  2501,   954,   554,     0,     0,     0,   954,   554,
       0,     0,     0,   554,   554,   554,   554,    38,   554,   554,
    2837,    39,  1545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2295,     0,     0,     0,     0,
       0,     0,     0,  1542,   853,   853,   853,   853,  1314,   853,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,  2321,     0,    44,  1547,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1546,  2345,
       0,    45,     0,  1614,   555,   555,  1615,     0,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,    85,
       0,     0,     0,     0,  1548,    46,     0,     0,     0,     0,
    1543,  1623,     0,     0,     0,     0,     0,     0,     0,    47,
    1542,  1625,     0,     0,     0,     0,    85,     0,  1626,    85,
    1416,  1416,  1416,  1416,  1416,  1416,     0,     0,  1416,  1416,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,     0,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,  1547,
       0,     0,     0,     0,     0,     0,  1545,     0,   554,     0,
       0,     0,     0,     0,     0,     0,     0, -2050,  1545,  1594,
     853,   989,     0,     0,     0,     0,     0,     0,     0,   805,
       0,     0,     0,     0,     0,   805,     0,     0,     0,     0,
     554,     0,   555,     0,     0,   554,     0,     0,  1545,     0,
       0,  1049,     0,  1546,  1906,  1545,  2454,  2454,  1907,  1908,
       0,     0,  1909,  1910,  1911,     0,     0,  1542,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3066,
       0,     0,     0,  1543,     0,     0,     0,  1914,     0,     0,
       0,  1545,  1628,     0,   807,  1545,     0,     0,     0,  1540,
    1166,  1542,     0,  1545,     0,     0,     0,     0,   867,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1545,   554,     0,     0,     0,
    2491,     0,     0,     0,  1547,   554,     0,  1631,  1632,     0,
    1543,     0,     0,     0,     0,     0,  1419,  1292,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,     0,  1416,  1416,
       0,     0,  1305,  1307,  1310,  1312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2054,     0,     0,     0,     0,
    1542,     0,     0,  1436,     0,     0,     0,     0,     0,     0,
    1634,     0,     0,  1635,     0,     0,     0,  1546,     0,     0,
       0,     0,     0,     0,     0,     0,  1467,  1636,   805,  1546,
    1637,     0,     0,     0,     0,  1411,     0,     0,     0,     0,
     554,     0,     0,  1542,     0,   805,     0,     0,     0,  2167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1546,
       0,     0,     0,  1543,     0,     0,  1546,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2791,  2792,     0,     0,  1913,     0,     0,     0,   554,
       0,    85,  1416,  1597,     0,   554,     0,     0,  1547,     0,
       0,     0,  1546,     0,     0,     0,  1546,     0,     0,     0,
    1547,  1814,     0,     0,  1546,     0,     0,  1915,  1916,  1917,
       0,  1918,  1919,  1920,  1921,  1922,  1923,  1638,     0,  1594,
       0,     0,     0,     0,     0,     0,  1546,     0,     0,     0,
    1547,     0,     0,     0,     0,  1542,     0,  1547,     0,     0,
       0,     0,     0,     0,     0,  1914,  1201,     0,  1543,   555,
     555,     0,  1202,     0,     0,  1419,     0,     0,     0,     0,
    1214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1814,  1547,     0,     0,     0,  1547,   853,     0,
    1215,     0,     0,     0,     0,  1547,     0,     0,     0,     0,
    1814,   853,   853,   853,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,   853,  1547,     0,   853,
       0,     0,     0,  1314,     0,     0,     0,   853,     0,     0,
       0,     0,     0,   954,  1639,  1543,  1216,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,  1742,     0,  1800,
       0,  1814,  1814,  1545,  1814,     0,     0,     0,     0,     0,
    1769,     0,     0,     0,     0,     0,     0,  1203,     0,     0,
       0,     0,  3004,     0,     0,    85,    85,     0,     0,     0,
       0,  1794,     0,   518,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2716,     0,     0,     0,     0,     0,     0,
       0,   853,   853,   853,     0,     0,     0,     0,     0,     0,
     554,     0,  1416,   554,     0,     0,     0,     0,     0,   554,
       0,     0,  1217,   555,   555,     0,   555,     0,     0,     0,
       0,     0,  1543,     0,  1819,     0,     0,     0,     0,   853,
    1835,     0,    85,     0,    85,     0,     0,     0,     0,     0,
       0,     0,     0,  2054,     0,  1915,  1916,  1917,     0,  1918,
    1919,  1920,  1921,  1922,  1923,     0,  1543,     0,     0,     0,
       0,  1218,     0,     0,     0,     0,  1545,     0,     0,  1419,
    1419,  1219,     0,     0,    85,  1419,     0,     0,  1416,  1416,
       0,     0,     0,  1220,     0,     0,     0,  1542,     0,     0,
      85,     0,     0,     0,    85,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1204,     0,     0,  2815,     0,     0,
       0,  3123,     0,  2167,     0,  1221,     0,   555,     0,     0,
       0,     0,     0,  1545,  1546,     0,     0,     0,     0,   853,
       0,     0,     0,   554,     0,  1543,     0,   554,   554,   554,
       0,     0,     0,  1814,  1750,  1814,  1979,  1852,  1983,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2253,     0,     0,     0,  1206,   554,  1223,  2895,     0,
       0,     0,  1961,     0,     0,     0,     0,     0,  1543,     0,
       0,   554,   554,   554,   554,   554,   554,   554,   554,   554,
     554,     0,  1224,     0,     0,     0,     0,  2254,     0,     0,
       0,     0,     0,     0,     0,  1547,     0,     0,     0,     0,
       0,  1226,     0,  2321,     0,     0,     0,     0,    85,     0,
     853,     0,     0,     0,     0,     0,  1545,     0,     0,     0,
    1750,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    85,     0,     0,     0,  1852,     0,
       0,  3197,     0,     0,     0,     0,     0,  1546,  1814,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1208,  1416,
       0,     0,     0,     0,     0,   554,     0,     0,     0,     0,
    1543,     0,   853,   853,   853,   853,     0,     0,     0,     0,
       0,     0,     0,     0,  1416,     0,     0,  1416,     0,     0,
       0,   554,   954,     0,     0,     0,     0,     0,     0,     0,
    3049,  2143,     0,     0,  1546,     0,     0,     0,     0,     0,
       0,  1545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3056,  1547,     0,
       0,     0, -1780,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1419,     0,
       0,     0,     0,     0,     0,     0,     0,  3079,     0,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3091,     0,     0,     0,  2167,     0,     0,
       0,     0,     0,  2054,     0,  1547,     0,     0,  1545,     0,
       0,     0,     0,  2152,     0,  2155,     0,  1750,     0,     0,
     555,     0,     0,  1814,     0,     0,  2164,  1546,     0,     0,
       0,     0,     0,     0,     0,   555,   954,   554,  1416,     0,
       0,     0,     0,     0,   853,   555,     0,   555,     0,     0,
     555,     0, -1780,     0,     0,     0,   555,     0,   555,     0,
       0,  3142,     0,     0,     0,  2201,     0,     0,     0,     0,
       0,   555,     0,     0,     0,     0,   555,     0,     0,     0,
     555,   555,   555,   555,     0,   555,   555,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1780,
       0,     0,     0,     0,     0,     0,     0,     0,  1547,     0,
       0,     0,     0,     0, -1780,  1545,     0,     0,     0, -1780,
       0,     0,  1546,     0, -1780,     0,     0,     0,     0,     0,
       0,     0,     0, -1780,     0,     0,     0,     0, -1780,  3159,
       0,     0,  1814,     0,     0,     0,     0,     0,     0,  1545,
       0,     0,  1543,     0,     0,  2321,     0,     0,  2306,  2307,
    2309,  2310,     0,  2312,     0,     0,     0,     0,     0,     0,
   -1780,  3193,  1419,  1419,  1419,  1419,  1419,  1419,  1416,     0,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
   -1780,     0,     0,     0,     0,     0,     0,     0,     0,  1546,
       0,     0,     0,  1547,  3210,  1614,     0,     0,  1615,     0,
     554,     0,  1616,  1617,     0,     0,     0,   554,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1545,     0,
       0,     0,     0,     0,     0,   555,     0,     0,     0, -1780,
       0,     0, -1780,  1625,     0,     0,     0,     0, -1780,     0,
   -2050,  3238,     0,     0,     0,     0,     0,     0,   719,     0,
       0,     0,     0,     0,     0,     0,     0,  2441,     0,     0,
       0,  1545,  1983,   554,     0,     0,     0,  1627,   554,     0,
    1547,     0,     0,     0,     0,     0,     0,     0, -1780,     0,
       0,     0,     0,     0,  2427,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   554,     0,  1546,     0,     0,     0,
       0, -1780,     0,     0,     0,   720,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   554,   554,     0,     0,     0,
       0,   721,     0,     0,     0,     0,     0,     0,     0,     0,
    1546,     0,  2793,     0,   853,     0,  1750,     0,     0,     0,
     554,     0,     0,   555,     0,     0, -1782,     0,     0,     0,
    1419,  1419,  1597,     0,     0,   853,     0,     0,  3311,   855,
       0,     0,     0,  1545, -2050,     0,     0,     0,     0,     0,
     722,     0,     0,     0,     0,     0,     0,  1547,  1416,     0,
     723, -2050,   554,  1004,     0,  1004, -2050, -1780,     0,     0,
       0,     0,     0,   724,     0,     0,     0, -1780,   725,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1546,
    3091,  1547,     0,     0,     0,     0, -1780,   853, -1780, -1780,
       0,     0,     0,     0, -2050,     0,     0,   726,     0,     0,
       0,  1111,  1111,     0,     0,     0,     0,   555,     0,     0,
       0,     0,     0,     0,     0,     0, -1782,     0,   853,     0,
       0,     0,  1546,     0,     0, -1780,     0,     0, -1780, -1780,
   -1780,     0,     0,     0,  1419,     0,     0,     0,     0,     0,
     727,     0,     0,     0,   728,     0,     0,     0,     0,  1636,
       0,     0,     0,     0,     0,     0,   555,  3210,     0,     0,
    1547,     0,  2573, -1782,     0,     0,     0,     0,  1241,     0,
       0,     0,  1285,  1290,     0,     0,     0,     0, -1782,  3311,
       0,     0,     0, -1782,     0,     0,     0,     0, -1782,     0,
       0,     0,     0,     0,     0,     0,     0, -1782,     0,     0,
       0,     0, -1782,  1547,     0,     0,  1750,     0,     0,     0,
       0,     0,     0,     0,   729,     0,     0,     0,     0,   954,
     954,     0,  3311,   954,  1546,  1340,     0,     0,     0,   730,
       0,  1949,     0,     0, -1782,     0,     0,     0,     0,     0,
       0,     0,   554,     0,  1365,     0,     0,     0,     0, -2050,
    1410,     0,     0,  1412, -1782,     0,  1423,  1426,  1431,  1434,
       0,     0,   731,     0,  1750,   732,     0,     0,     0,     0,
   -1797,  3311,     0,     0,     0,     0,   733,     0,     0,   734,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1545,     0,   735,  1475,  1285,
       0,     0,  2648, -1782,     0,  1547, -1782,     0,   954,     0,
       0,   736, -1782,     0,     0,  2662,  2663,  2665,   738,  1559,
       0,     0,     0,  2167,     0,     0,     0,     0,   739,     0,
    2676,     0,     0,  2679,   740,     0,     0,     0,  1575,     0,
       0,  2686,     0,     0,     0,     0,     0,     0,     0,  1585,
    1586,  1587, -1782,  1591,  1595,     0, -2050,     0,     0,     0,
       0,   741,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
   -1797,     0,     0,     0,     0, -1782,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,   555,     0,     0,
     555,     0,     0,     0,     0,     0,  1979,     0,     0,     0,
       0,     0,     0,  1475,  1475,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1797,     0,     0,
       0,     0,     0,     0,     0,  2723,  2724,  2725,     0,     0,
       0,     0, -1797,   855,     0,     0,     0, -1797,     0,  1697,
    1419,  1419, -1797,  1713,  1718,     0,     0,     0,     0,     0,
       0, -1797,     0,     0,  1111,  1111, -1797,     0,     0,     0,
       0, -1782,     0,     0,     0,     0,  1614,     0,     0,  1615,
       0, -1782,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,  1546,     0, -1797,     0,
   -1782,     0, -1782, -1782,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,     0, -1797,     0,
    1285,  1626,     0,     0,     0,     0,     0,     0,     0,  1285,
     555,     0,     0,     0,   555,   555,   555,     0,     0, -1782,
       0,     0, -1782, -1782, -1782,     0,     0,     0,  1627,     0,
       0,  1614,     0,  1285,  1615,     0,     0,     0,  1616,  1617,
       0,     0,     0,   555,     0,     0,     0, -1797,     0,     0,
   -1797,     0,     0,  2833,     0,     0, -1797,  1547,   555,   555,
     555,   555,   555,   555,   555,   555,   555,   555,     0,  1625,
       0,     0,     0,     0,     0,     0, -2050,     0,  1614,     0,
       0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,     0,     0,     0, -1797,     0,     0,     0,
       0,     0,     0,  1627,     0,     0,  1623,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1625,     0,     0, -1797,
    1896,  1419,     0,  1626,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,  2977,     0,  1419,  1630,     0,     0,
    1627,     0,  1979,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2794,     0,
    1631,  1632,     0,     0,     0,     0,     0,   855,  2441,     0,
    1431,     0,  1431,  1431,     0,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1111,  1111,     0,     0,     0,
   -2050,     0,     0,     0,     0, -1797,  3013,  3014,  3015,  3016,
       0,  1111,     0,     0,     0, -1797,     0, -2050,     0,     0,
       0,     0, -2050,  1634,     0,     0,  1635,     0,     0,     0,
       0,     0,     0,     0, -1797,     0, -1797, -1797,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2050,     0,     0,     0,  1629,     0,     0,     0,     0,  1630,
       0,     0,     0, -1797,     0,     0, -1797, -1797, -1797,     0,
    1419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   555,     0,     0,  1633,     0,     0,
       0,     0,     0,     0,     0,  1636,  2029,     0,     0,     0,
       0,     0,     0,     0,  2032,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,  1634,     0,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3129,     0,
       0,     0,  1636,  2078,     0,  1637,     0,     0,     0,  2082,
    2083,  2084,  2085,  2086,  2087,  2088,  2089,     0,     0,     0,
       0,  2098,  2099,     0,     0,     0,  2110,     0,     0,     0,
    2113,     0,     0,  2121,  2122,  2123,  2124,  2125,  2126,  2127,
    2128,  2129,     0,     0,  2130,     0,     0,     0,     0,     0,
       0,  1111,     0,  1285,     0, -2050,     0,     0,     0,     0,
    1419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,  1638,     0,     0,     0,     0,  1586,  1587,     0,
       0,     0,     0,  2477,     0,     0,     0,  3218,     0,  1614,
       0,     0,  1615,     0,  2441,     0,  1616,  1617,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1625,     0,     0,
       0,     0, -2050,     0, -2050,     0,     0,     0,     0,  1643,
    1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,     0,
     555,     0,     0,     0,     0,   555,     0,     0,     0,     0,
       0,  1627,     0,     0,  2278,     0,     0,     0,  1285,     0,
       0,  2288,  2289,     0,     0,     0,     0,     0,     0,  1639,
       0,   555,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,     0,     0,     0,  1899,
       0,     0,   555,   555,     0,     0,     0,     0,     0,  1285,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3069,   555,     0,     0,
       0,  1340,  2353,     0,  1613,     0,     0,     0,     0,  1614,
    1419,     0,  1615,     0,   -46,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,     0,     0,     0,     0, -2050,     0,
       0,  2375,  2376,     0,  2377,     0,     1,  1623,  3284,   555,
       0,  1624,     0,     0,     0, -2050,     2,  1625,     3,     4,
   -2050,     0,     0,     0,  1626,     0,     0,     0,     0,  3309,
       0,     5,     0,  2403,  2404,     0,     6,  2156,     0,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,  1627,     0,     0,     0,     0,     0,     0, -2050,     8,
       0,     0,     0,     0,     0,     0,  2431,     0,     9,     0,
      10,  2436,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,    12,     0,     0,     0,     0,     0,
    1475,  3348,  1285,     0,     0,    13,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1420,
      14,    15,    16,  1636,     0,     0,     0,     0,     0,     0,
       0,    17,  3374,     0,     0,     0,     0,    18,     0,  2470,
       0,     0,     0,     0,     0,    19,     0,    20,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,    22,     0,     0,     0,    23,     0,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,  2489,     0,
    1630,     0,     0,  2492,  2493,     0,     0,     0,     0,     0,
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,  1632,     0,     0,     0,    25,   555,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,     0, -2050,     0,     0,     0,  2514,     0,     0,
    2517,     0,  2519,     0,    26,     0,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,  2523,     0,
       0,     0,     0,     0,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,  1651,     0,     0,     0,     0,  1697,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1718,  2128,     0,     0,    27,
      28,    29,     0,     0,     0,     0,     0,    30,  1420,     0,
      31,     0,     0,     0,  1111,     0,     0,     0,     0,     0,
   -2050,   719,     0,  2577,     0,     0,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,  1638,    34,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,    36,     0,     0,   720,     0,
    1587,     0,     0,     0,     0,    37,  1285,     0,     0,     0,
       0,     0,     0,     0,   721,     0,     0,    38,     0,     0,
       0,    39,     0,  1651,     0,     0,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,    42,     0,     0,
      43,     0,  2682,   722,     0,    44,     0,     0,     0,     0,
       0,     0,     0,   723,     0,     0,     0,     0,  1651,     0,
       0,    45,     0,     0,     0,     0,   724,     0,     0,     0,
    1639,   725,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,  1651,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
     726,  1614,   -46,     0,  1615,     0,     0,     0,  1616,  1617,
       0,     0,  1620,  1621,  1622,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1651,     0,
    1651,     0,  1420,  1420,     0,  1924,     0,     0,  1420,  1625,
       0,  1651,     0,   727,  1651,     0,  1626,   728,     0,  1651,
       0,     0,  1651,     0,  1614,     0,     0,  1615,     0,     0,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,  1627,  2762,     0,     0,     0,     0,     0,
    2764,  2032,  1623,     0,     0,     0,  2774,     0,     0,     0,
       0,  2770,  1625,  1651,     0,     0,     0,     0,     0,  1626,
       0,     0,  2779,     0,     0,  2782,     0,  2784,     0,     0,
       0,   541,     0,     0,     0,  2788,     0,   729,     0,     0,
       0,     0,     0,  2795,  2796,     0,  1627,     0,     0,     0,
    2803,     0,   730,     0,     0,     0,  1614,     0,     0,  1615,
       0,     0,     0,  1616,  1617,  2812,     0,  1620,  1621,  1622,
       0,     0,     0,     0,     0,  2827,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,   731,     0,     0,   732,     0,
    1628,     0,     0,     0,  1625,  1111,     0,  1651,     0,   733,
       0,  1626,   734,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,  1630,  1651,     0,     0,     0,     0,     0,     0,
     735,     0,     0,  1651,  1651,  1651,     0,     0,  1627,  1651,
       0,     0,     0,  1651,   736, -2050, -2050,     0,     0,     0,
     737,   738,     0,  1628,     0,     0,     0,     0,     0,     0,
    1633,   739,  2278,     0,  2278,     0,     0,   740,     0,     0,
    1629,     0,     0,     0,     0,  1630,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1369,  1370,     0,     0,     0,
       0,     0,     0,     0,   741,     0,     0,     0,  1631,  1632,
       0, -2050,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,     0,     0,  1633,     0,  1636,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1371,  1372,     0,     0,
    1373,  1374,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,  1634,  1629,     0,  1635,     0,     0,  1630,     0,  3029,
    3030,  1651,     0,     0,     0,     0,  1651,     0,  1636,     0,
       0,  1637,     0,     0,     0,     0,     0,     0,     0,     0,
    1631,  1632,     0,  1924,     0,     0,     0,     0,     0,     0,
    1368,     0,   818,     0,  3053,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1375,  1376,  3057,     0,
       0,     0,     0,  3059,  3060,  1638,     0,     0,  3061,     0,
       0,     0,     0,  3064,     0,     0,  3067,  3068,     0,     0,
       0,  2278,  1285,  1634,     0,  3076,  1635,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1111,     0,     0,     0,
    1636,     0,     0,  1637,     0,  1369,  1370,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1638,     0,
    1377,  1378,  1379,  1380,  1381,  1382,  1383,  1384,     0,     0,
    1385,  1386,     0,     0,     0,     0,     0,     0,     0,     0,
    3117,     0,     0,     0,     0,     0,  1371,  1372,     0,     0,
    1373,  1374,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3136,     0,     0,
       0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,
    1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
    1638,     0,  1924,  1924,     0,  1420,  1420,  1420,  1420,  1420,
    1420,     0,     0,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1924,     0,  1639,  1375,  1376,  1640,  1641,
    1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,
       0,     0,  2069,  1387,  1388,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3169,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1614,     0,     0,  1615,     0,
       0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,
    1377,  1378,  1379,  1380,  1381,  1382,  1383,  1384,     0,     0,
    1385,  1386,     0,  1623,  1595,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,  1625,  1643,  1644,  1645,  1646,  1647,  1648,
    1626,     0,     0,     0,     0,     0,     0,  1651,     0,     0,
    1651,     0,     0,     0,     0,     0,     0,  2489,  1389,  1390,
       0,     0,     0,     0,     0,     0,     0,  1627,  3230,  3231,
       0,     0,  3232,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,  1391,  1392,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,     0,  3250,
    1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,     0,     0,
       0,     0,     0,  1420,  1420,     0,  1651,  1651,     0,     0,
       0,     0,     0,  3262,     0,     0,     0,     0,  1651,     0,
       0,  1651,     0,  1387,  1388,     0,     0,     0,     0,  1651,
    1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1614,     0,     0,  1615,  1628,     0,     0,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,  1651,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,     0,     0,  1630,     0,  1623,     0,
       0,     0,     0,  3307,     0,     0,     0,     0,  1625,     0,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,  1631,
    1632,     0,  3029,     0,     0,     0,  3325,     0,     0,     0,
    1111,     0,     0,     0,  1633,     0,     0,  1420,  1389,  1390,
       0,  3334,  1627,     0,     0,     0,  2278,     0,  2278,     0,
       0,     0,     0,     0,     0,     0,  1111,     0,     0,     0,
       0,     0,  1391,  1392,     0,     0,     0,     0,     0,     0,
       0,     0,  1634,     0,  3359,  1635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,  1651,     0,     0,
       0,     0,     0,  3385,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3029,     0,     0,     0,     0,     0,  1628,
       0,     0,     0,     0,     0,  1111,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,  1630,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,  3428,     0,     0,
       0,  1651,     0,     0,  1631,  1632,     0,     0,     0,  1638,
    1623,     0,     0,     0,     0,     0,     0,     0,     0,  1633,
    1625,     0,     0,  1651,  1651,  1651,     0,  1626,  1924,  1924,
    1924,  1924,  1924,  1924,     0,     0,     0,  1924,  1924,  1924,
    1924,  1924,  1924,  1924,  1924,  1924,  1924,     0,     0,     0,
       0,  1651,  1651,     0,  1627,     0,     0,  1634,     0,     0,
    1635,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1636,     0,     0,  1637,     0,  1651,
       0,     0,     0,     0,  1651,  3482,  3482,  3482,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3482,     0,     0,     0,  1639,     0,  1651,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,     0,     0,  2069,     0,     0,     0,  1651,     0,     0,
    1651,  1651,     0,     0,     0,     0,     0,  1614,  1924,  1924,
    1615,  1628,     0,  3482,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,  1651,  1420,  1420,  1651,     0,  1651,  1629,     0,
       0,  1651,     0,  1630,  1638,  1623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,  1631,  1632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,  1614,     0,     0,  1615,     0,     0,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1623,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,  1626,
       0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,
    1645,  1646,  1647,  1648,     0,     0,     0,     0,  2374,     0,
       0,  1614,     0,     0,  1615,     0,  1627,     0,  1616,  1617,
    1618,  1619,  1620,  1621,  1622,     0,  1628,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1623,
    1651,     0,     0,  1629,     0,     0,     0,     0,  1630,  1625,
       0,     0,     0,     0,     0,     0,  1626,     0,     0,     0,
       0,     0,     0,     0,  1420,     0,     0,     0,     0,     0,
       0,  1631,  1632,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,  1627,     0,     0,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,     0,     0,
    1651,     0,  1651,     0,  1634,     0,     0,  1635,  1651,     0,
    1629,     0,     0,     0,     0,  1630,     0,  1651,     0,     0,
    1651,  1636,  1651,     0,  1637,     0,  1651,     0,     0,  1924,
    1924,     0,     0,  1651,  1651,     0,     0,     0,  1631,  1632,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
    1651,     0,     0,  1633,     0,     0,     0,     0,     0,     0,
    1628,     0,     0,  1639,     0,  1651,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,  1629,     0,     0,
    2474,     0,  1630,     0,     0,     0,     0,     0,     0,     0,
       0,  1634,     0,     0,  1635,     0,     0,     0,     0,     0,
       0,     0,     0,  1420,     0,  1631,  1632,     0,  1636,     0,
       0,  1637,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,  1638,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1369,  1370,  1634,     0,
       0,  1635,     0,     0,     0,     0,     0,     0,     0,     0,
    1623,     0,     0,     0,     0,  1636,     0,     0,  1637,     0,
    1625,     0,     0,     0,     0,     0,     0,  1626,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1371,  1372,     0,
       0,  1373,  1374,     0,     0,     0,     0,     0,  1638,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,  1924,  1420,     0,  2498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1651,  1651,     0,
       0,     0,     0,     0,     0,  1638,     0,  1375,  1376,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1651,     0,     0,     0,  1651,     0,  1651,  1651,  1651,
       0,     0,  1651,     0,     0,  1651,  1651,     0,     0,     0,
       0,  1628,     0,     0,  1651,  1639,     0,     0,  1640,  1641,
    1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,  1629,     0,
       0,     0,  2704,  1630,     0,     0,     0,     0,     0,     0,
       0,  1377,  1378,  1379,  1380,  1381,  1382,  1383,  1384,     0,
       0,  1385,  1386,     0,     0,  1651,  1631,  1632,     0,     0,
       0,  1924,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,
    1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,  2776,
       0,     0,     0,     0,     0,     0,     0,  1651,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,     0,     0,     0,  1924,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1387,  1388,     0,     0,  1651,  1651,
    1651,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1651,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1389,
    1390,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,  1651,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1391,  1392,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1651,     0,     0,
       0,     0,     0,  1998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1651,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,  2797,   117,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
    1651,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,  2629,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1052,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1053,   141,  1054,  1055,     0,   144,   145,
     146,   147,   148,   149,  1056,   788,   150,   151,   152,   153,
    1057,  1058,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,  1059,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1060,   191,   192,  1061,   194,  1062,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1063,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1064,   222,   223,   224,   225,   226,   227,   791,  1065,
     229,     0,   230,   231,  1066,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1067,  1068,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1069,  1070,     0,  1071,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1072,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1073,   323,  1074,
     325,   326,   327,   328,  1075,   329,   330,   331,   332,  1076,
     793,   334,  1077,   336,   337,   338,     0,   339,   340,     0,
       0,  1078,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1079,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,  1080,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,  1081,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,  1082,  1083,     0,     0,
     460,   461,   799,   463,   800,  1084,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,  1085,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1086,     0,
       0,     0,     0,     0,     0,  1087,  1088,  1089,     0,     0,
       0,     0,  1090,     0,  1091,     0,     0,     0,     0,  1092,
    1093,     0,  1094,  1095,  3233,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,    14,    15,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,    23,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    27,    28,    29,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    34,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    36,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,    38,     0,   448,   449,    39,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,    41,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   802,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,    45,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,    46,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,  3208,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
      14,    15,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,    23,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,  1075,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    27,
      28,    29,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    34,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    36,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,    38,     0,   448,
     449,    39,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,    41,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   802,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,    45,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,    46,     0,     0,     0,     0,
    1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,    23,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    27,    28,    29,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    34,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,    39,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,    41,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   802,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,    45,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,    46,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,  1246,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,  1247,   126,
     127,   128,     0,     0,     0,  1248,     0,  1052,     0,     0,
    1249,   130,   131,     0,   132,   133,   134,  1250,   136,   137,
     138,   139,  1053,  1251,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,  1252,
       0,  1253,   164,   165,   166,   167,   168,  1254,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,  1255,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
    1256,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,  1257,
       0,  1258,   238,   239,  1259,  1260,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,  1261,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,  1262,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
    1263,  1264,   281,  1265,   283,   284,   285,   286,   287,   288,
       0,     0,   289,  1266,   291,  1267,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1268,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,  1269,  1074,   325,
     326,   327,   328,  1075,   329,   330,  1270,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,  1271,   348,
    1272,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
    1273,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
    1274,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,  1275,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
    1276,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,  1277,   446,
     798,     0,     0,   448,   449,     0,   450,  1278,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,  1279,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,  1280,   487,  1281,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  1088,  1089,     0,     0,     0,
       0,  1090,     0,  1091,  1282,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,     0,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,    14,    15,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,    23,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,     0,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    27,    28,    29,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      34,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    36,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,    38,     0,   448,   449,    39,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
      41,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   802,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,    45,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,     0,
       0,    46,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1090,     0,  1091,     0,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
    1427,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,  1428,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,  1429,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,  1430,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,  1246,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,  1248,     0,  1052,     0,     0,  1249,   130,   131,     0,
     132,   133,   134,  1250,   136,   137,   138,   139,  1053,  1251,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,  1252,     0,  1253,   164,   165,
     166,   167,   168,  1254,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,  1255,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,  1257,     0,  1258,   238,   239,
    1259,  1260,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,  1261,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,  1262,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,  1263,  1264,   281,  1265,
     283,   284,   285,   286,   287,   288,     0,     0,   289,  1266,
     291,  1267,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1268,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,  1269,  1074,   325,   326,   327,   328,  1075,
     329,   330,  1270,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,  1271,   348,  1272,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,  1273,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,  1274,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,  1275,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,  1276,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  1277,   446,   798,     0,     0,   448,
     449,     0,   450,  1278,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,  1279,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,  2283,   487,  1281,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,     0,     0,     0,     0,     0,
    1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,  1246,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,  1248,     0,  1052,     0,     0,  1249,   130,
     131,     0,   132,   133,   134,  1250,   136,   137,   138,   139,
    1053,  1251,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,  1252,     0,  1253,
     164,   165,   166,   167,   168,  1254,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,  1255,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,  1257,     0,  1258,
     238,   239,  1259,  1260,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
    1261,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,  1262,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,  1263,  1264,
     281,  1265,   283,   284,   285,   286,   287,   288,     0,     0,
     289,  1266,   291,  1267,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1268,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,  1269,  1074,   325,   326,   327,
     328,  1075,   329,   330,  1270,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,  1271,   348,  1272,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,  1273,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,  1274,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,  1275,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,  1276,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,  1277,   446,   798,     0,
       0,   448,   449,     0,   450,  1278,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,  1279,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,  1281,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,  2337,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125, -1111,   126,
     127,   128,     0,     0,     0,     0, -1111,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,  1059,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,  1075,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432, -1111,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  1088,  1089,     0,     0,     0,
       0,  1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,  1246,  1046,   818,  1047,  1048,  1049,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,  1248,     0,  1052,
       0,     0,  1249,   130,   131,     0,   132,   133,   134,  1250,
     136,   137,   138,   139,  1053,  1251,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,  1252,     0,  1253,   164,   165,   166,   167,   168,  1254,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,  1255,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,  1062,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,  1257,     0,  1258,   238,   239,  1259,  1260,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,  1261,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,  1262,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,  1263,  1264,   281,  1265,   283,   284,   285,   286,
     287,   288,     0,     0,   289,  1266,   291,  1267,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1268,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,  1269,
    1074,   325,   326,   327,   328,  1075,   329,   330,  1270,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,  1078,   342,   343,     0,     0,   344,   345,   346,
    1271,   348,  1272,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,  1273,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,  1274,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,  1275,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,  1276,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
    1277,   446,   798,     0,     0,   448,   449,     0,   450,  1278,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,  1279,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,  1281,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,  1086,
       0,     0,     0,     0,     0,     0,  1087,  1088,  1089,     0,
       0,     0,     0,  1090,     0,  1091,  3073,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,  1246,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,  1248,
       0,  1052,     0,     0,  1249,   130,   131,     0,   132,   133,
     134,  1250,   136,   137,   138,   139,  1053,  1251,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,  1252,     0,  1253,   164,   165,   166,   167,
     168,  1254,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,  1255,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,  1257,     0,  1258,   238,   239,  1259,  1260,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,  1261,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,  1262,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,  1263,  1264,   281,  1265,   283,   284,
     285,   286,   287,   288,     0,     0,   289,  1266,   291,  1267,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1268,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,  1269,  1074,   325,   326,   327,   328,  1075,   329,   330,
    1270,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,  1271,   348,  1272,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,  1273,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,  1274,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,  1275,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,  1276,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,  1277,   446,   798,     0,     0,   448,   449,     0,
     450,  1278,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,  1279,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,  1281,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,  1694,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,  1075,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,     0,     0,     0,     0,     0,
    1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    1709,   818,  1047,  1048,  1049,  1710,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,  1711,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,  1059,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
    1428,   237,   238,   239,   240,   241,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,  1075,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  1088,  1089,     0,     0,     0,
       0,  1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,  1059,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,  1062,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,  1075,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,  1078,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,  1086,
       0,     0,     0,     0,     0,     0,  1087,  1088,  1089,     0,
       0,     0,     0,  1090,     0,  1091,  2057,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,  2681,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,  1075,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,  2802,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,     0,     0,     0,     0,     0,
    1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,  3017,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,  3018,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  3019,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,  3020,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  3021,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,  1059,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,  1075,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,  3168,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  1088,  1089,     0,     0,     0,
       0,  1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,  1059,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,  1062,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,  1075,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,  1078,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,  3306,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,  1086,
       0,     0,     0,     0,     0,     0,  1087,  1088,  1089,     0,
       0,     0,     0,  1090,     0,  1091,     0,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,  1075,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,     0,     0,     0,     0,     0,
    1714,  1715,  1089,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    2194,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,  1059,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,  1075,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  2277,  1089,     0,     0,     0,
       0,  1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,  1059,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,  1062,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,  1075,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,  1078,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,  1086,
       0,     0,     0,     0,     0,     0,  1087,  1088,  1089,     0,
       0,     0,     0,  1090,     0,  2488,     0,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,  1075,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,  1086,     0,     0,     0,     0,     0,     0,  1087,  3071,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,  3018,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  3019,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,  1075,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,  3020,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,  1086,     0,     0,     0,     0,     0,     0,
    1087,  1088,  1089,     0,     0,     0,     0,  1090,     0,  3021,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,  3479,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,  1059,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
    3480,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,  1062,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,  1075,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,  3481,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1086,     0,     0,     0,     0,
       0,     0,  1087,  1088,  1089,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,  1049,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,  1059,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,  3480,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,  1062,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,     0,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,  1075,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
    1078,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,  1080,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
    3481,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,  1086,     0,     0,
       0,     0,     0,     0,  1087,  1088,  1089,     0,     0,     0,
       0,  1090,     0,  1091,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,  1049,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,     0,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,  1078,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,  1080,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,     0,
       0,     0,     0,     0,     0,     0,  1414,  1415,     0,     0,
       0,     0,     0,  1090,     0,  1091,     0,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
    1049,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138, -2050,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,  1059,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,  3480,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,  1062,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240, -2050,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254, -2050,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291, -2050,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,     0,   329,   330,
       0,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,  1078,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0, -2050,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,  3481,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517, -2050,     0,     0,     0,     0,     0,     0,  1087,  1088,
    1089,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,     0,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,     0,
     329,   330,   331,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    2180,  2181,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,     0,     0,     0,     0,     0,     0,     0,
    2182,  2183,     0,     0,     0,     0,     0,  1090,     0,  1091,
       0,     0,     0,     0,  1092,  1093,     0,  1094,  1095,   117,
    1046,   818,  1047,  1048,  1049,  1050,  1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,  1052,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
    1053,   141,  1054,  1055,     0,   144,   145,   146,   147,   148,
     149,  1056,   788,   150,   151,   152,   153,  1057,  1058,   156,
       0,   157,   158,   159,   160,   789,     0,   790,     0,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,  1060,   191,
     192,  1061,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,  1063,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,  1064,   222,
     223,   224,   225,   226,   227,   791,  1065,   229,     0,   230,
     231,  1066,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,  1067,  1068,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,  1069,  1070,     0,  1071,     0,   278,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,  1072,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,  1073,   323,  1074,   325,   326,   327,
     328,     0,   329,   330,   331,   332,  1076,   793,   334,  1077,
     336,   337,   338,     0,   339,   340,     0,     0,  1078,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   795,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   796,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1079,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,  1080,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,  1081,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   798,     0,
       0,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,  1082,  1083,     0,     0,   460,   461,   799,
     463,   800,  1084,   465,   466,   801,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,  1085,     0,
     487,   488,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,     0,     0,     0,     0,     0,
       0,     0,  1414,  1415,     0,     0,     0,     0,     0,  1090,
       0,  1091,     0,     0,     0,     0,  1092,  1093,     0,  1094,
    1095,   117,  1046,   818,  1047,  1048,     0,  1050,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,  1052,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,  1053,   141,  1054,  1055,     0,   144,   145,   146,
     147,   148,   149,  1056,   788,   150,   151,   152,   153,  1057,
    1058,   156,     0,   157,   158,   159,   160,   789,     0,   790,
       0,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1060,   191,   192,  1061,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1063,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
    1064,   222,   223,   224,   225,   226,   227,   791,  1065,   229,
       0,   230,   231,  1066,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,  3038,
    1067,  1068,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,  -719,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,  1069,  1070,     0,  1071,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,  1072,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1073,   323,  1074,   325,
     326,   327,   328,     0,   329,   330,   331,   332,  1076,   793,
     334,  1077,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   795,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   796,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1079,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,  1081,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     798,     0,     0,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,     0,   457,  1082,  1083,     0,     0,   460,
     461,   799,   463,   800,  1084,   465,   466,   801,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
    1085,     0,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1090,     0,  2731,     0,     0,     0,     0,  1092,  1093,
       0,  1094,  1095,   117,  1046,   818,  1047,  1048,     0,  1050,
    1051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,  1052,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,  1053,   141,  1054,  1055,     0,   144,
     145,   146,   147,   148,   149,  1056,   788,   150,   151,   152,
     153,  1057,  1058,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1060,   191,   192,  1061,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1063,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,  1064,   222,   223,   224,   225,   226,   227,   791,
    1065,   229,     0,   230,   231,  1066,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,  1067,  1068,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,  1069,  1070,     0,  1071,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1072,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1073,   323,
    1074,   325,   326,   327,   328,     0,   329,   330,   331,   332,
    1076,   793,   334,  1077,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1079,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,  1081,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,     0,     0,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,  1082,  1083,     0,
       0,   460,   461,   799,   463,   800,  1084,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,  1085,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1090,     0,  2731,     0,     0,     0,     0,
    1092,  1093,     0,  1094,  1095,   117,  1046,   818,  1047,  1048,
       0,  1050,  1051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1052,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1053,   141,  1054,  1055,
       0,   144,   145,   146,   147,   148,   149,  1056,   788,   150,
     151,   152,   153,  1057,  1058,   156,     0,   157,   158,   159,
     160,   789,     0,   790,     0,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1060,   191,   192,  1061,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1064,   222,   223,   224,   225,   226,
     227,   791,  1065,   229,     0,   230,   231,  1066,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1067,  1068,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1069,  1070,
       0,  1071,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1072,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1073,   323,  1074,   325,   326,   327,   328,     0,   329,   330,
     331,   332,  1076,   793,   334,  1077,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   795,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   796,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1079,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,   404,  1080,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,  1081,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   798,     0,     0,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,  1082,
    1083,     0,     0,   460,   461,   799,   463,   800,  1084,   465,
     466,   801,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,  1085,     0,   487,   488,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1090,     0,  1091,     0,     0,
       0,     0,  1092,  1093,     0,  1094,  1095,   117,  1046,   818,
    1047,  1048,  1049,  1050,  1051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,  1052,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,     0,  1053,   141,
    1054,  1055,     0,   144,   145,   146,   147,   148,   149,  1056,
     788,   150,   151,   152,   153,  1057,  1058,   156,     0,   157,
     158,   159,   160,   789,     0,   790,     0,  1059,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1060,   191,   192,  1061,
     194,  1062,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,     0,
     216,     0,   217,   218,   219,   220,  1064,   222,   223,   224,
     225,   226,   227,   791,  1065,   229,     0,   230,   231,  1066,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,     0,   242,     0,   243,     0,  1067,  1068,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
    1069,  1070,     0,  1071,     0,   278,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1072,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1073,   323,  1074,   325,   326,   327,   328,     0,
     329,   330,     0,   332,  1076,   793,   334,  1077,   336,   337,
     338,     0,   339,   340,     0,     0,  1078,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   795,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   796,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1079,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,   404,
    1080,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,  1081,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   798,     0,     0,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,  1082,  1083,     0,     0,   460,   461,   799,   463,   800,
    1084,   465,   466,   801,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,  1085,     0,   487,   488,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,     0,     0,     0,     0,     0,     0,     0,
    1087,  1088,  1089,     0,   967,  1345,   818,  1090,     0,  1091,
    1050,     0,     0,     0,  1092,  1093,     0,  1094,  1095,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,   562,     0,
       0,     0,     0,   567,   130,   131,     0,   132,   133,   134,
     569,   136,   137,   138,   570,   571,   572,   573,   574,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   578,   579,   156,     0,   157,   158,   159,   160,
     581,     0,   583,     0,   585,   164,   165,   166,   167,   168,
     586,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   589,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   591,   191,   192,   592,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   602,   222,   223,   224,   225,   226,   227,
     603,  1346,   229,     0,   230,   231,   606,   233,     0,   234,
       0,   235,   609,     0,   611,   238,   239,   612,   613,   242,
       0,   243,     0,   616,   617,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   619,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     622,   623,   270,   271,   272,   273,   274,   624,   625,     0,
     627,     0,   278,   629,   630,   281,   631,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   634,   291,   635,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   637,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   638,
     639,   640,   325,   326,   327,   641,     0,   329,   330,   643,
     332,     0,   645,   334,   646,   336,   337,   338,     0,   339,
     340,  1347,     0,   341,   342,   343,     0,     0,   344,   345,
     652,   653,   348,   654,   655,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   660,   661,   366,   367,   662,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   665,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   668,   402,   403,   404,   669,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,   671,   419,   420,   421,   422,   423,   424,   672,
     426,   427,     0,   674,   429,   430,   675,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   677,   446,   678,     0,     0,   448,   449,     0,   450,
     682,   452,   453,   454,   455,   456,     0,   457,   684,   685,
       0,     0,   460,   461,   688,   463,   689,  1348,   465,   466,
     691,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   696,   697,     0,   487,   699,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   704,   705,   706,   707,   708,
     709,   710,   711,   712,   713,   714,   514,   515,   516,   517,
       0,     0,     0,     0,   525,     0,     0,  1349,  1350,  2355,
       0,     0,     0,     0,     0,     0,  2356,     0,     0,     0,
       0,     0,  1093,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,  1003,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,  -526,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,  -526,   230,   231,   232,   233,  -526,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  -526,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,  -526,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,  -526,   339,
     340,     0,     0,   341,   342,   343,     0,  -526,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,  -526,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1162,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   967,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2440,  3222,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     3,     4,     0,
     562,     0,     0,     0,     0,   567,   130,   131,     0,   132,
     133,   134,   569,   136,   137,   138,   570,   571,   572,   573,
     574,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   578,   579,   156,     0,   157,   158,
     159,   160,   581,     0,   583,     0,   585,   164,   165,   166,
     167,   168,   586,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   589,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   591,   191,   192,   592,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,    14,
      15,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   602,   222,   223,   224,   225,
     226,   227,   603,     0,   229,     0,   230,   231,   606,   233,
       0,   234,     0,   235,   609,    23,   611,   238,   239,   612,
     613,   242,     0,   243,     0,   616,   617,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   619,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   622,   623,   270,   271,   272,   273,   274,   624,
     625,     0,   627,     0,   278,   629,   630,   281,   631,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   634,   291,
     635,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     637,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   638,   639,   640,   325,   326,   327,   641,     0,   329,
     330,   643,   332,     0,   645,   334,   646,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   652,   653,   348,   654,   655,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    27,    28,
      29,     0,   362,   363,   660,   661,   366,   367,   662,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   665,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   668,   402,   403,   404,   669,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    34,   671,   419,   420,   421,   422,   423,
     424,   672,   426,   427,    36,   674,   429,   430,   675,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   677,   446,   678,    38,     0,   448,   449,
      39,   450,   682,   452,   453,   454,   455,   456,     0,   457,
     684,   685,     0,     0,   460,   461,   688,   463,   689,     0,
     465,   466,   691,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,    41,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   968,   697,     0,   487,   699,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
      45,   497,   498,   499,   500,   501,   502,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   713,   714,   514,   515,
     516,   517,     0,   117,    46,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    47,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,   788,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   789,
       0,   790,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,    14,    15,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   791,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,   236,    23,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   792,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
       0,   793,   334,   335,   336,   337,   338,     0,   339,   340,
       0,   794,   341,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   795,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    27,    28,    29,     0,   362,
     363,   796,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,   404,   405,   797,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      34,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    36,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   798,    38,     0,   448,   449,    39,   450,   451,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   799,   463,   800,     0,   465,   466,   801,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
      41,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   802,   486,     0,   487,   488,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,    45,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,     0,
     117,    46,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,   788,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   789,     0,   790,     0,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   791,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   792,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,     0,   793,   334,
     335,   336,   337,   338,     0,   339,   340,     0,   794,   341,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     795,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   796,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,   797,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   798,
       0,     0,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     799,   463,   800,     0,   465,   466,   801,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   802,   486,
       0,   487,   488,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   117,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   803,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,   788,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   789,     0,   790,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   791,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,     0,   793,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   795,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   796,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
     797,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   798,     0,     0,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   799,   463,   800,     0,
     465,   466,   801,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,   488,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    47,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,   788,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   789,     0,
     790,     0,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   791,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,     0,
     793,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   795,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     796,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   798,     0,     0,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   799,   463,   800,     0,   465,   466,   801,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,   488,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3310,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,    14,    15,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,    23,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      27,    28,    29,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    34,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    36,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,    38,     0,
     448,   449,    39,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,    41,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   802,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,    45,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,    46,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      47,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   889,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,    23,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    27,    28,    29,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    34,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,    39,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   890,   459,
       0,     0,   891,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,    41,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   802,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,    45,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    47,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,    23,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    27,    28,    29,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    34,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,    39,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,    41,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   802,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,    45,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,     0,   525,    46,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   988,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1466,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,   551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2206,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2440,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2572,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3217,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2063,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2166,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,     0,  2897,  1345,   818,     0,     0,  2039,  1050,     0,
       0,     0,     0,     0,  2040,  2041,     0,  3078,  2042,  2043,
    2044,   118,   119,   120,   121,   122,   123,   124,   125,   558,
     126,   127,   128,   559,   560,   561,  2898,   563,   564,   565,
     566,  2899,   130,   131,   568,   132,   133,   134,  2900,   136,
     137,   138,     0,  1483,  2901,  1485,  1486,   575,   144,   145,
     146,   147,   148,   149,   576,   577,   150,   151,   152,   153,
    1487,  1488,   156,   580,   157,   158,   159,   160,     0,   582,
    2902,   584,  2903,   164,   165,   166,   167,   168,  2904,   170,
     171,   172,   587,   173,   174,   175,   176,   177,   178,   588,
    2905,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1493,   191,   192,  1494,   194,   593,   195,   594,   196,
     197,   198,   199,   200,   201,   595,   596,   202,   203,   204,
     205,   597,   598,   206,   207,  1063,   209,   210,   599,   211,
     212,   213,   600,   214,   215,   216,   601,   217,   218,   219,
     220,     0,   222,   223,   224,   225,   226,   227,     0,   604,
     229,   605,   230,   231,  1495,   233,   607,   234,   608,   235,
    2906,   610,  2907,   238,   239,  2908,  2909,   242,   614,   243,
     615,     0,     0,   246,   247,   618,   248,   249,   250,   251,
     252,   253,   254,  2910,   256,   257,   258,   259,   620,   260,
     261,   262,   263,   264,   265,   266,   621,   267,  2911,     0,
     270,   271,   272,   273,   274,  1501,  1502,   626,  1503,   628,
     278,  2912,  2913,   281,  2914,   283,   284,   285,   286,   287,
     288,   632,   633,   289,  2915,   291,  2916,   636,   293,   294,
     295,   296,   297,   298,   299,   300,  2917,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1510,  2918,  1512,
     325,   326,   327,  2919,   642,   329,   330,  2920,   332,   644,
       0,   334,  1514,   336,   337,   338,   647,   339,   340,   648,
     649,  2921,   342,   343,   650,   651,   344,   345,     0,  2922,
     348,  2923,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   656,   657,   658,   659,   362,   363,
       0,  2924,   366,   367,     0,   369,   370,   371,   663,   372,
     373,   374,   375,   376,   377,   664,   378,   379,   380,  1518,
     382,   383,   384,   385,   666,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   667,   399,
     400,  2925,   402,   403,   404,  1520,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   670,
    2926,   419,   420,   421,   422,   423,   424,  2927,   426,   427,
     673,  2928,   429,   430,  1524,   432,   676,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,  2929,
     446,     0,   679,   680,   448,   449,   681,   450,  2930,   452,
     453,   454,   455,   456,   683,   457,  1527,  1528,   686,   687,
     460,   461,     0,   463,     0,   690,   465,   466,  2931,   468,
     469,   470,   471,   472,  2932,   693,   473,   474,   475,   694,
     476,   477,   478,   479,   695,   480,   481,   482,   483,   484,
       0,  1531,   698,   487,  2933,   489,   490,   491,   492,   493,
     494,   495,   700,   701,   496,   702,   703,   497,   498,   499,
     500,   501,   502,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   514,   515,   516,   517,     0,   525,
       0,  2045,  2046,  2047,  2039,  2934,  2935,  2050,  2051,  2052,
    2053,  2040,  2041,     0,     0,  2042,  2043,  2044,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,     0,     0,     0,  2045,  2046,
    2047,     0,  2048,  2049,  2050,  2051,  2052,  2053,  1614,     0,
       0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1623,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1625,  1614,     0,     0,
    1615,     0,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1623,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  1625,  1614,     0,     0,  1615,
       0,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
       0,  1626,     0,  1614,     0,     0,  1615,     0,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,  1623,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,  1614,     0,     0,  1615,     0,  1628,  1626,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,     0,
       0,     0,     0,     0,  1629,     0,     0,     0,     0,  1630,
    1623,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
    1625,     0,     0,     0,     0,     0,  1628,  1626,     0,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,  1633,  1630,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,  1631,  1632,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,  1634,  1633,  1630,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,     0,     0,
    1631,  1632,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1634,  1633,     0,  1635,     0,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,     0,     0,     0,  1631,  1632,     0,
       0,     0,     0,  1634,     0,     0,  1635,     0,  1629,     0,
       0,     0,  1633,  1630,     0,     0,     0,     0,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1631,  1632,     0,     0,
       0,     0,  1638,     0,     0,     0,     0,     0,     0,     0,
    1634,  1633,     0,  1635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,  2843,  1638,     0,     0,
       0,     0,     0,  1614,     0,     0,  1615,     0,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,  1623,     0,     0,     0,  3070,  1638,     0,     0,     0,
       0,  1625,     0,     0,     0,     0,     0,     0,  1626,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,     0,     0,  3077,  1627,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,  1623,     0,     0,
       0,  3237,     0,     0,     0,     0,     0,  1625,  1614,     0,
       0,  1615,     0,     0,  1626,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,  1623,     0,     0,     0,
    3259,  1627,     0,     0,     0,     0,  1625,  1614,     0,     0,
    1615,     0,  1628,  1626,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,  1630,  1623,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,     0,  1631,  1632,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1614,     0,     0,  1615,     0,  1628,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,
    1634,     0,     0,  1635,     0,  1629,     0,     0,     0,     0,
    1630,  1623,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,  1625,     0,     0,     0,     0,     0,  1628,  1626,     0,
       0,     0,     0,  1631,  1632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1629,     0,     0,     0,  1633,  1630,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1628,     0,     0,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,  1634,  1633,  1630,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,  1631,  1632,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,  1634,  1633,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1634,     0,     0,  1635,     0,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1631,  1632,     0,
       0,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,
       0,  3360,  1638,     0,     0,     0,     0,     0,     0,     0,
    1634,     0,     0,  1635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,  3417,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,  3439,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,  3227,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,  3401,
     118,   119,   120,   121,   122,   123,   124,   125,   558,   126,
     127,   128,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   130,   131,   568,   132,   133,   134,   569,   136,   137,
     138,   570,   571,   572,   573,   574,   575,   144,   145,   146,
     147,   148,   149,   576,   577,   150,   151,   152,   153,   578,
     579,   156,   580,   157,   158,   159,   160,   581,   582,   583,
     584,   585,   164,   165,   166,   167,   168,   586,   170,   171,
     172,   587,   173,   174,   175,   176,   177,   178,   588,   589,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     591,   191,   192,   592,   194,   593,   195,   594,   196,   197,
     198,   199,   200,   201,   595,   596,   202,   203,   204,   205,
     597,   598,   206,   207,   208,   209,   210,   599,   211,   212,
     213,   600,   214,   215,   216,   601,   217,   218,   219,   220,
     602,   222,   223,   224,   225,   226,   227,   603,   604,   229,
     605,   230,   231,   606,   233,   607,   234,   608,   235,   609,
     610,   611,   238,   239,   612,   613,   242,   614,   243,   615,
     616,   617,   246,   247,   618,   248,   249,   250,   251,   252,
     253,   254,   619,   256,   257,   258,   259,   620,   260,   261,
     262,   263,   264,   265,   266,   621,   267,   622,   623,   270,
     271,   272,   273,   274,   624,   625,   626,   627,   628,   278,
     629,   630,   281,   631,   283,   284,   285,   286,   287,   288,
     632,   633,   289,   634,   291,   635,   636,   293,   294,   295,
     296,   297,   298,   299,   300,   637,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   638,   639,   640,   325,
     326,   327,   641,   642,   329,   330,   643,   332,   644,   645,
     334,   646,   336,   337,   338,   647,   339,   340,   648,   649,
     341,   342,   343,   650,   651,   344,   345,   652,   653,   348,
     654,   655,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   656,   657,   658,   659,   362,   363,   660,
     661,   366,   367,   662,   369,   370,   371,   663,   372,   373,
     374,   375,   376,   377,   664,   378,   379,   380,   665,   382,
     383,   384,   385,   666,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   667,   399,   400,
     668,   402,   403,   404,   669,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   670,   671,
     419,   420,   421,   422,   423,   424,   672,   426,   427,   673,
     674,   429,   430,   675,   432,   676,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   677,   446,
     678,   679,   680,   448,   449,   681,   450,   682,   452,   453,
     454,   455,   456,   683,   457,   684,   685,   686,   687,   460,
     461,   688,   463,   689,   690,   465,   466,   691,   468,   469,
     470,   471,   472,   692,   693,   473,   474,   475,   694,   476,
     477,   478,   479,   695,   480,   481,   482,   483,   484,   696,
     697,   698,   487,   699,   489,   490,   491,   492,   493,   494,
     495,   700,   701,   496,   702,   703,   497,   498,   499,   500,
     501,   502,   704,   705,   706,   707,   708,   709,   710,   711,
     712,   713,   714,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,  2074,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,  2697,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   967,
    1345,   818,     0,     0,     0,  1050,     0,     0,  2700,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,   562,     0,     0,     0,     0,   567,   130,
     131,     0,   132,   133,   134,   569,   136,   137,   138,   570,
     571,   572,   573,   574,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   578,   579,   156,
       0,   157,   158,   159,   160,   581,     0,   583,     0,   585,
     164,   165,   166,   167,   168,   586,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   589,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   591,   191,
     192,   592,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   602,   222,
     223,   224,   225,   226,   227,   603,  1346,   229,     0,   230,
     231,   606,   233,     0,   234,     0,   235,   609,     0,   611,
     238,   239,   612,   613,   242,     0,   243,     0,   616,   617,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     619,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   622,   623,   270,   271,   272,
     273,   274,   624,   625,     0,   627,     0,   278,   629,   630,
     281,   631,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   634,   291,   635,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   637,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   638,   639,   640,   325,   326,   327,
     641,     0,   329,   330,   643,   332,     0,   645,   334,   646,
     336,   337,   338,     0,   339,   340,  1347,     0,   341,   342,
     343,     0,     0,   344,   345,   652,   653,   348,   654,   655,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   660,   661,   366,
     367,   662,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   665,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,   668,   402,
     403,   404,   669,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,   671,   419,   420,
     421,   422,   423,   424,   672,   426,   427,     0,   674,   429,
     430,   675,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   677,   446,   678,     0,
       0,   448,   449,     0,   450,   682,   452,   453,   454,   455,
     456,     0,   457,   684,   685,     0,     0,   460,   461,   688,
     463,   689,  1348,   465,   466,   691,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   696,   697,     0,
     487,   699,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     704,   705,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   514,   515,   516,   517,     0,     0,  1614,     0,     0,
    1615,     0,  1349,  1350,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1623,     0,     0,     0,     0,
    2172,     0,     0,     0,     0,  1625,  1614,     0,     0,  1615,
       0,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,  1625,  1614,     0,     0,  1615,     0,
       0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1623,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,  1625,     0,  2173,     0,     0,     0,     0,
    1626,     0,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1627,     0,     0,
    1623,     0,     0,     0,  1894,     0,     0,     0,     0,     0,
    1625,     0,     0,     0,     0,     0,  1628,  1626,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,  1629,     0,     0,     0,     0,  1630,     0,
       0,     0,     0,     0,  1627,  1930,     0,  1623,     0,     0,
    1931,     0,     0,     0,     0,  1628,     0,  1625,     0,     0,
       0,  1631,  1632,     0,  1626,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,  1633,  1630,     0,     0,
       0,     0,     0,  3507,     0,     0,     0,     0,     0,     0,
       0,  1627,     0,     0,  1628,     0,     0,     0,     0,     0,
    1631,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,  1634,  1633,  1630,  1635,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,  1631,
    1632,  1628,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1634,  1633,     0,  1635,     0,  1629,     0,
       0,     0,     0,  1630,     0,     0,     0,     0,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1631,  1632,  1628,     0,
       0,     0,  1634,     0,     0,  1635,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,  1629,     0,     0,     0,  1636,
    1630,     0,  1637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,  1631,  1632,     0,     0,     0,     0,  1634,
       0,  3508,  1635,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,     0,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,  2176,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1901,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
    1623,     0,     0,     0,  1936,     0,     0,     0,     0,     0,
    1625,     0,     0,  1638,     0,     0,     0,  1626,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1614,     0,
       0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,  1623,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,  1625,  1614,     0,     0,
    1615,  1628,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,     0,     0,     0,  1629,     0,
       0,     0,     0,  1630,     0,  1623,     0,     0,     0,  1943,
    1627,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,  1631,  1632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,  1623,     0,     0,
       0,     0,     0,     0,     0,     0,  1636,  1625,     0,  1637,
       0,     0,  1941,     0,  1626,     0,  1614,  1628,     0,  1615,
       0,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,  1629,     0,     0,     0,     0,  1630,
       0,  1627,     0,     0,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,  1628,     0,     0,     0,
       0,  1626,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,  1633,  1630,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1631,  1632,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,  1633,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2067,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1634,  1629,     0,  1635,     0,     0,
    1630,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,  1632,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,  1629,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,
    1631,  1632,  1638,     0,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,     0,  1633,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1614,     0,     0,  1615,
       0,  1638,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,  1634,     0,     0,  1635,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,  2774,     0,
    1636,     0,     0,  1637,  1625,     0,     0,     0,     0,     0,
       0,  1626,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,  1638,     0,     0,  1614,     0,     0,  1615,
       0,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,  1623,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
    1638,  1626,     0,  1614,     0,     0,  1615,     0,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,  1623,     0,  2761,     0,  1628,     0,     0,     0,     0,
       0,  1625,     0,     0,     0,     0,     0,     0,  1626,     0,
       0,     0,  1629,     0,     0,     0,     0,  1630,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,  1627,     0,     0,     0,     0,
    1631,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,  1635,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,     0,  1630,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1631,  1632,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1633,     0,     0,     0,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
       0,     0,     0,  1614,     0,     0,  1615,     0,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,  1810,  1632,     0,
       0,     0,     0,  1634,     0,     0,  1635,     0,     0,     0,
       0,  1623,  1633,     0,     0,     0,     0,     0,     0,     0,
    1636,  1625,     0,  1637,     0,     0,     0,     0,  1626,     0,
    1638,  1614,     0,     0,  1615,     0,     0,     0,  1616,  1617,
       0,     0,  1620,  1621,  1622,     0,     0,     0,     0,     0,
    1634,     0,     0,  1635,     0,  1627,     0,     0,     0,  1623,
       0,     0,     0,     0,     0,     0,     0,  1636,     0,  1625,
    1637,     0,     0,     0,     0,     0,  1626,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1627,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1631,  1632,     0,
    1628,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,  1630,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,     0,     0,     0,  1631,  1632,     0,     0,     0,
    1634,     0,     0,  1635,     0,     0,     0,     0,     0,     0,
    1633,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1634,     0,
       0,  1635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1636,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1638,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  2193,  1648,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,  2090,     0,
       0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,
    1644,  1645,  1646,  1647,  1648,   118,   119,   120,   121,   122,
     123,   124,   125,   558,   126,   127,   128,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   130,   131,   568,   132,
     133,   134,   569,   136,   137,   138,   570,   571,   572,   573,
     574,   575,   144,   145,   146,   147,   148,   149,   576,   577,
     150,   151,   152,   153,   578,   579,   156,   580,   157,   158,
     159,   160,   581,   582,   583,   584,   585,   164,   165,   166,
     167,   168,   586,   170,   171,   172,   587,   173,   174,   175,
     176,   177,   178,   588,   589,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   591,   191,   192,   592,   194,
     593,   195,   594,   196,   197,   198,   199,   200,   201,   595,
     596,   202,   203,   204,   205,   597,   598,   206,   207,   208,
     209,   210,   599,   211,   212,   213,   600,   214,   215,   216,
     601,   217,   218,   219,   220,   602,   222,   223,   224,   225,
     226,   227,   603,   604,   229,   605,   230,   231,   606,   233,
     607,   234,   608,   235,   609,   610,   611,   238,   239,   612,
     613,   242,   614,   243,   615,   616,   617,   246,   247,   618,
     248,   249,   250,   251,   252,   253,   254,   619,   256,   257,
     258,   259,   620,   260,   261,   262,   263,   264,   265,   266,
     621,   267,   622,   623,   270,   271,   272,   273,   274,   624,
     625,   626,   627,   628,   278,   629,   630,   281,   631,   283,
     284,   285,   286,   287,   288,   632,   633,   289,   634,   291,
     635,   636,   293,   294,   295,   296,   297,   298,   299,   300,
     637,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   638,   639,   640,   325,   326,   327,   641,   642,   329,
     330,   643,   332,   644,   645,   334,   646,   336,   337,   338,
     647,   339,   340,   648,   649,   341,   342,   343,   650,   651,
     344,   345,   652,   653,   348,   654,   655,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   656,   657,
     658,   659,   362,   363,   660,   661,   366,   367,   662,   369,
     370,   371,   663,   372,   373,   374,   375,   376,   377,   664,
     378,   379,   380,   665,   382,   383,   384,   385,   666,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   667,   399,   400,   668,   402,   403,   404,   669,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   670,   671,   419,   420,   421,   422,   423,
     424,   672,   426,   427,   673,   674,   429,   430,   675,   432,
     676,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   677,   446,   678,   679,   680,   448,   449,
     681,   450,   682,   452,   453,   454,   455,   456,   683,   457,
     684,   685,   686,   687,   460,   461,   688,   463,   689,   690,
     465,   466,   691,   468,   469,   470,   471,   472,   692,   693,
     473,   474,   475,   694,   476,   477,   478,   479,   695,   480,
     481,   482,   483,   484,   696,   697,   698,   487,   699,   489,
     490,   491,   492,   493,   494,   495,   700,   701,   496,   702,
     703,   497,   498,   499,   500,   501,   502,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   713,   714,   514,   515,
     516,   517,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   558,
     126,   127,   128,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   130,   131,   568,   132,   133,   134,   569,   136,
     137,   138,   570,   571,   572,   573,   574,   575,   144,   145,
     146,   147,   148,   149,   576,   577,   150,   151,   152,   153,
     578,   579,   156,   580,   157,   158,   159,   160,   581,   582,
     583,   584,   585,   164,   165,   166,   167,   168,   586,   170,
     171,   172,   587,   173,   174,   175,   176,   177,   178,   588,
     589,   180,   181,   182,   183,   184,   185,   590,   187,   188,
     189,   591,   191,   192,   592,   194,   593,   195,   594,   196,
     197,   198,   199,   200,   201,   595,   596,   202,   203,   204,
     205,   597,   598,   206,   207,   208,   209,   210,   599,   211,
     212,   213,   600,   214,   215,   216,   601,   217,   218,   219,
     220,   602,   222,   223,   224,   225,   226,   227,   603,   604,
     229,   605,   230,   231,   606,   233,   607,   234,   608,   235,
     609,   610,   611,   238,   239,   612,   613,   242,   614,   243,
     615,   616,   617,   246,   247,   618,   248,   249,   250,   251,
     252,   253,   254,   619,   256,   257,   258,   259,   620,   260,
     261,   262,   263,   264,   265,   266,   621,   267,   622,   623,
     270,   271,   272,   273,   274,   624,   625,   626,   627,   628,
     278,   629,   630,   281,   631,   283,   284,   285,   286,   287,
     288,   632,   633,   289,   634,   291,   635,   636,   293,   294,
     295,   296,   297,   298,   299,   300,   637,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   638,   639,   640,
     325,   326,   327,   641,   642,   329,   330,   643,   332,   644,
     645,   334,   646,   336,   337,   338,   647,   339,   340,   648,
     649,   341,   342,   343,   650,   651,   344,   345,   652,   653,
     348,   654,   655,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   656,   657,   658,   659,   362,   363,
     660,   661,   366,   367,   662,   369,   370,   371,   663,   372,
     373,   374,   375,   376,   377,   664,   378,   379,   380,   665,
     382,   383,   384,   385,   666,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   667,   399,
     400,   668,   402,   403,   404,   669,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   670,
     671,   419,   420,   421,   422,   423,   424,   672,   426,   427,
     673,   674,   429,   430,   675,   432,   676,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   677,
     446,   678,   679,   680,   448,   449,   681,   450,   682,   452,
     453,   454,   455,   456,   683,   457,   684,   685,   686,   687,
     460,   461,   688,   463,   689,   690,   465,   466,   691,   468,
     469,   470,   471,   472,   692,   693,   473,   474,   475,   694,
     476,   477,   478,   479,   695,   480,   481,   482,   483,   484,
     696,   697,   698,   487,   699,   489,   490,   491,   492,   493,
     494,   495,   700,   701,   496,   702,   703,   497,   498,   499,
     500,   501,   502,   704,   705,   706,   707,   708,   709,   710,
     711,   712,   713,   714,   514,   515,   516,   517,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   558,   126,   127,   128,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   130,   131,
     568,   132,   133,   134,   569,   136,   137,   138,   570,   571,
     572,   573,   574,   575,   144,   145,   146,   147,   148,   149,
     576,   577,   150,   151,   152,   153,   578,   579,   156,   580,
     157,   158,   159,   160,   581,   582,   583,   584,   585,   164,
     165,   166,   167,   168,   586,   170,   171,   172,   587,   173,
     174,   175,   176,   177,   178,   588,   589,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   591,   191,   192,
     592,   194,   593,   195,   594,   196,   197,   198,   199,   200,
     201,   595,   596,   202,   203,   204,   205,   597,   598,   206,
     207,   208,   209,   210,   599,   211,   212,   213,   600,   214,
     215,   216,   601,   217,   218,   219,   220,   602,   222,   223,
     224,   225,   226,   227,   603,   604,   229,   605,   230,   231,
     606,   233,   607,   234,   608,   235,   609,   610,   611,   238,
     239,   612,   613,   242,   614,   243,   615,   616,   617,   246,
     247,   618,   248,   249,   250,   251,   252,   943,   254,   619,
     256,   257,   258,   259,   620,   260,   261,   262,   263,   264,
     265,   266,   621,   267,   622,   623,   270,   271,   272,   273,
     274,   624,   625,   626,   627,   628,   278,   629,   630,   281,
     631,   283,   284,   285,   286,   287,   288,   632,   633,   289,
     634,   291,   635,   636,   293,   294,   295,   296,   297,   298,
     299,   300,   637,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   638,   639,   640,   325,   326,   327,   641,
     642,   329,   330,   643,   332,   644,   645,   334,   646,   336,
     337,   338,   647,   339,   340,   648,   649,   341,   342,   343,
     650,   651,   344,   345,   652,   653,   348,   654,   655,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     656,   657,   658,   659,   362,   363,   660,   661,   366,   367,
     662,   369,   370,   371,   663,   372,   373,   374,   375,   376,
     377,   664,   378,   379,   380,   665,   382,   383,   384,   385,
     666,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   667,   399,   400,   668,   402,   403,
     404,   669,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   670,   671,   419,   420,   421,
     422,   423,   424,   672,   426,   427,   673,   674,   429,   430,
     675,   432,   676,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   677,   446,   678,   679,   680,
     448,   449,   681,   450,   682,   452,   453,   454,   455,   456,
     683,   457,   684,   685,   686,   687,   460,   461,   688,   463,
     689,   690,   465,   466,   691,   468,   469,   470,   471,   472,
     692,   693,   473,   474,   475,   694,   476,   477,   478,   479,
     695,   480,   481,   482,   483,   484,   696,   697,   698,   487,
     699,   489,   490,   491,   492,   493,   494,   495,   700,   701,
     496,   702,   703,   497,   498,   499,   500,   501,   502,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     514,   515,   516,   517,   557,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   558,   126,   127,   128,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   130,   131,   568,   132,   133,   134,
     569,   136,   137,   138,   570,   571,   572,   573,   574,   575,
     144,   145,   146,   147,   148,   149,   576,   577,   150,   151,
     152,   153,   578,   579,   156,   580,   157,   158,   159,   160,
     581,   582,   583,   584,   585,   164,   165,   166,   167,   168,
     586,   170,   171,   172,   587,   173,   174,   175,   176,   177,
     178,   588,   589,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   591,   191,   192,   592,   194,   593,   195,
     594,   196,   197,   198,   199,   200,   201,   595,   596,   202,
     203,   204,   205,   597,   598,   206,   207,   208,   209,   210,
     599,   211,   212,   213,   600,   214,   215,   216,   601,   217,
     218,   219,   220,   602,   222,   223,   224,   225,   226,   227,
     603,   604,   229,   605,   230,   231,   606,   233,   607,   234,
     608,   235,   609,   610,   611,   238,   239,   612,   613,   242,
     614,   243,   615,   616,   617,   246,   247,   618,   248,   249,
     250,   251,   252,   253,   254,   619,   256,   257,   258,   259,
     620,   260,   261,   262,   263,   264,   265,   266,   621,   267,
     622,   623,   270,   271,   272,   273,   274,   624,   625,   626,
     627,   628,   278,   629,   630,   281,   631,   283,   284,   285,
     286,   287,   288,   632,   633,   289,   634,   291,   635,   636,
     293,   294,   295,   296,   297,   298,   299,   300,   637,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   638,
     639,   640,   325,   326,   327,   641,   642,   329,   330,   643,
     332,   644,   645,   334,   646,   336,   337,   338,   647,   339,
     340,   648,   649,   341,   342,   343,   650,   651,   344,   345,
     652,   653,   348,   654,   655,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   656,   657,   658,   659,
     362,   363,   660,   661,   366,   367,   662,   369,   370,   371,
     663,   372,   373,   374,   375,   376,   377,   664,   378,   379,
     380,   665,   382,   383,   384,   385,   666,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     667,   399,   400,   668,   402,   403,   404,   669,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   670,   671,   419,   420,   421,   422,   423,   424,   672,
     426,   427,   673,   674,   429,   430,   675,   432,   676,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   677,   446,   678,   679,   680,   448,   449,   681,   450,
     682,   452,   453,   454,   455,   456,   683,   457,   684,   685,
     686,   687,   460,   461,   688,   463,   689,   690,   465,   466,
     691,   468,   469,   470,   471,   472,   692,   693,   473,   474,
     475,   694,   476,   477,   478,   479,   695,   480,   481,   482,
     483,   484,   696,   697,   698,   487,   699,   489,   490,   491,
     492,   493,   494,   495,   700,   701,   496,   702,   703,   497,
     498,   499,   500,   501,   502,   704,   705,   706,   707,   708,
     709,   710,   711,   712,   713,   714,   514,   515,   516,   517,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,  2238,   123,   124,   125,   558,   126,   127,
     128,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     130,   131,   568,   132,   133,   134,   569,   136,   137,   138,
     570,   571,   572,   573,   574,   575,   144,   145,   146,   147,
     148,   149,   576,   577,   150,   151,   152,   153,   578,   579,
     156,   580,   157,   158,   159,   160,   581,   582,   583,   584,
     585,   164,   165,   166,   167,   168,   586,   170,   171,   172,
     587,   173,   174,   175,   176,   177,   178,   588,   589,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   591,
     191,   192,   592,   194,   593,   195,   594,   196,   197,   198,
     199,   200,   201,   595,   596,   202,   203,   204,   205,   597,
     598,   206,   207,   208,  2239,   210,   599,   211,   212,   213,
     600,   214,   215,   216,   601,   217,   218,   219,   220,   602,
     222,   223,   224,   225,   226,   227,   603,   604,   229,   605,
     230,   231,   606,   233,   607,   234,   608,   235,   609,   610,
     611,   238,   239,   612,   613,   242,   614,   243,   615,   616,
     617,   246,   247,   618,   248,   249,   250,   251,   252,   253,
     254,   619,   256,   257,   258,   259,   620,   260,   261,   262,
     263,   264,   265,   266,   621,   267,   622,   623,   270,   271,
     272,   273,   274,   624,   625,   626,   627,   628,   278,   629,
     630,   281,   631,   283,   284,   285,   286,   287,   288,   632,
     633,   289,   634,   291,   635,   636,   293,   294,   295,   296,
     297,   298,   299,   300,   637,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   638,   639,   640,   325,   326,
     327,   641,   642,   329,   330,   643,   332,   644,   645,   334,
     646,   336,   337,   338,   647,   339,   340,   648,   649,   341,
     342,   343,   650,   651,   344,   345,   652,   653,   348,   654,
     655,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   656,   657,   658,   659,   362,   363,   660,   661,
     366,   367,   662,   369,   370,   371,   663,   372,   373,   374,
     375,   376,   377,   664,   378,   379,   380,   665,   382,   383,
     384,   385,   666,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   667,   399,   400,   668,
     402,   403,   404,   669,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   670,   671,   419,
     420,   421,   422,   423,  2240,   672,   426,   427,   673,   674,
     429,   430,   675,   432,   676,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   677,   446,   678,
     679,   680,   448,   449,   681,   450,   682,   452,   453,   454,
     455,   456,   683,   457,   684,   685,   686,   687,   460,   461,
     688,   463,   689,   690,   465,   466,   691,   468,   469,   470,
     471,   472,   692,   693,   473,   474,   475,   694,   476,   477,
     478,   479,   695,   480,   481,   482,   483,   484,   696,   697,
     698,   487,   699,   489,   490,   491,   492,   493,   494,   495,
     700,   701,   496,   702,   703,   497,   498,   499,   500,   501,
     502,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     713,   714,   514,   515,   516,   517,   967,     0,   818,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
     562,     0,     0,     0,     0,   567,   130,   131,     0,   132,
     133,   134,   569,   136,   137,   138,   570,   571,   572,   573,
     574,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   578,   579,   156,     0,   157,   158,
     159,   160,   581,     0,   583,     0,   585,   164,   165,   166,
     167,   168,   586,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   589,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   591,   191,   192,   592,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   602,   222,   223,   224,   225,
     226,   227,   603,  1346,   229,     0,   230,   231,   606,   233,
       0,   234,     0,   235,   609,     0,   611,   238,   239,   612,
     613,   242,     0,   243,     0,   616,   617,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   619,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   622,   623,   270,   271,   272,   273,   274,   624,
     625,     0,   627,     0,   278,   629,   630,   281,   631,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   634,   291,
     635,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     637,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   638,   639,   640,   325,   326,   327,   641,     0,   329,
     330,   643,   332,     0,   645,   334,   646,   336,   337,   338,
       0,   339,   340,  1347,     0,   341,   342,   343,     0,     0,
     344,   345,   652,   653,   348,   654,   655,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   660,   661,   366,   367,   662,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   665,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,   668,   402,   403,   404,   669,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,   671,   419,   420,   421,   422,   423,
     424,   672,   426,   427,     0,   674,   429,   430,   675,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   677,   446,   678,     0,     0,   448,   449,
       0,   450,   682,   452,   453,   454,   455,   456,     0,   457,
     684,   685,     0,     0,   460,   461,   688,   463,   689,  1348,
     465,   466,   691,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   696,   697,     0,   487,   699,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   713,   714,   514,   515,
     516,   517,   967,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     3,     4,     0,   562,     0,     0,     0,
       0,   567,   130,   131,     0,   132,   133,   134,   569,   136,
     137,   138,   570,   571,   572,   573,   574,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     578,   579,   156,     0,   157,   158,   159,   160,   581,     0,
     583,     0,   585,   164,   165,   166,   167,   168,   586,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     589,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   591,   191,   192,   592,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   602,   222,   223,   224,   225,   226,   227,   603,     0,
     229,     0,   230,   231,   606,   233,     0,   234,     0,   235,
     609,     0,   611,   238,   239,   612,   613,   242,     0,   243,
       0,   616,   617,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   619,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   622,   623,
     270,   271,   272,   273,   274,   624,   625,     0,   627,     0,
     278,   629,   630,   281,   631,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   634,   291,   635,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   637,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   638,   639,   640,
     325,   326,   327,   641,     0,   329,   330,   643,   332,     0,
     645,   334,   646,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   652,   653,
     348,   654,   655,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     660,   661,   366,   367,   662,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   665,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,   668,   402,   403,   404,   669,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
     671,   419,   420,   421,   422,   423,   424,   672,   426,   427,
       0,   674,   429,   430,   675,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   677,
     446,   678,     0,     0,   448,   449,     0,   450,   682,   452,
     453,   454,   455,   456,     0,   457,   684,   685,     0,     0,
     460,   461,   688,   463,   689,     0,   465,   466,   691,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     696,   697,     0,   487,   699,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   704,   705,   706,   707,   708,   709,   710,
     711,   712,   713,   714,   514,   515,   516,   517,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,   788,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   789,     0,   790,     0,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   791,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,     0,   793,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   795,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   796,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   798,     0,     0,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   799,   463,
     800,     0,   465,   466,   801,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,   488,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,  1743,   157,   158,   159,   160,   161,     0,     0,  1744,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
    1745,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,  1746,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  1747,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,  1748,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,  1749,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,  1743,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,  1745,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,  1746,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
    2320,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,  1748,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,  1749,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     3,     4,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   552,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   553,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,   794,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   899,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,   794,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   941,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,  1170,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
     794,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,  1947,
       0,     0,     0,     0,  1948,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,  1955,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,  1956,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,  1957,   450,
       0,   452,  1958,   454,  1959,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
    1960,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,   818,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   825,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   826,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     827,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   828,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   829,   459,     0,     0,
     830,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   862,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   894,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   897,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   901,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   929,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   957,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   960,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,  1003,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,  1026,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   825,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   829,   459,     0,     0,
     830,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   525,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,  1304,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   525,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   526,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,  1306,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   527,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,     0,   429,   430,   431,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   528,   446,   447,     0,     0,   448,   449,     0,   450,
       0,   452,   453,   454,   455,   456,     0,   457,   458,   459,
       0,     0,   460,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,   485,   486,     0,   487,     0,   489,   490,   491,
     492,   493,   494,   495,     0,     0,   496,     0,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     525,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   526,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  1309,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   527,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,     0,
     429,   430,   431,   432,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   528,   446,   447,
       0,     0,   448,   449,     0,   450,     0,   452,   453,   454,
     455,   456,     0,   457,   458,   459,     0,     0,   460,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,   473,   474,   475,     0,   476,   477,
     478,   479,     0,   480,   481,   482,   483,   484,   485,   486,
       0,   487,     0,   489,   490,   491,   492,   493,   494,   495,
       0,     0,   496,     0,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   525,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   526,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,  1311,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     527,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,     0,   429,   430,   431,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   528,   446,   447,     0,     0,   448,   449,
       0,   450,     0,   452,   453,   454,   455,   456,     0,   457,
     458,   459,     0,     0,   460,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,   485,   486,     0,   487,     0,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   525,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   526,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,  2234,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   527,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,     0,   429,   430,   431,   432,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   528,
     446,   447,     0,     0,   448,   449,     0,   450,     0,   452,
     453,   454,   455,   456,     0,   457,   458,   459,     0,     0,
     460,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,   472,     0,     0,   473,   474,   475,     0,
     476,   477,   478,   479,     0,   480,   481,   482,   483,   484,
     485,   486,     0,   487,     0,   489,   490,   491,   492,   493,
     494,   495,     0,     0,   496,     0,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,  1479,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,  1480,     0,     0,  -789,     0,  1481,   130,   131,
       0,   132,   133,   134,  1482,   136,   137,   138,     0,  1483,
    1484,  1485,  1486,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,  1487,  1488,   156,     0,
     157,   158,   159,   160,     0,     0,  1489,     0,  1490,   164,
     165,   166,   167,   168,  1491,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,  1492,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1493,   191,   192,
    1494,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1063,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   229,     0,   230,   231,
    1495,   233,     0,   234,     0,   235,  1496,     0,  1497,   238,
     239,  -789,  1498,   242,     0,   243,     0,     0,     0,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,  1499,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,  1500,     0,   270,   271,   272,   273,
     274,  1501,  1502,     0,  1503,     0,   278,  1504,  1505,   281,
    1506,   283,   284,   285,   286,   287,   288,     0,     0,   289,
    1507,   291,  1508,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1509,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1510,  1511,  1512,   325,   326,   327,     0,
       0,   329,   330,  1513,   332,     0,     0,   334,  1514,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,     0,  1515,   348,  1516,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,     0,  1517,   366,   367,
       0,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1518,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,  1519,   402,   403,
     404,  1520,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,  1521,   419,   420,   421,
     422,   423,   424,  1522,   426,   427,     0,  1523,   429,   430,
    1524,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,  1525,   446,     0,     0,     0,
     448,   449,     0,   450,  1526,   452,   453,   454,   455,   456,
       0,   457,  1527,  1528,     0,     0,   460,   461,     0,   463,
       0,     0,   465,   466,  1529,   468,   469,   470,   471,   472,
    1530,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,     0,  1531,     0,   487,
    1532,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   525,
       0,   551,     0,     0,     0,     0,     0,     0,     0,     0,
     514,   515,   516,   517,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  2976,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   840,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   841,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   842,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   843,   424,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   844,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   953,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   842,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   844,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  1313,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   525,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   526,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,  1324,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   527,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,     0,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   528,   446,   447,     0,     0,   448,   449,     0,
     450,     0,   452,   453,   454,   455,   456,     0,   457,   458,
     459,     0,     0,   460,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,   485,   486,     0,   487,     0,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   525,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,  1674,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   526,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   527,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,   423,     0,   425,   426,   427,     0,
       0,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   528,   446,
     447,     0,     0,   448,   449,     0,   450,     0,   452,   453,
     454,   455,   456,     0,   457,   458,   459,     0,     0,   460,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,   474,   475,     0,   476,
     477,   478,   479,     0,   480,   481,   482,   483,   484,   485,
     486,     0,   487,     0,   489,   490,   491,   492,   493,   494,
     495,     0,     0,   496,     0,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     526,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,  1851,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   527,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,     0,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   528,   446,   447,     0,     0,   448,
     449,     0,   450,     0,   452,   453,   454,   455,   456,     0,
     457,   458,   459,     0,     0,   460,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,   485,   486,     0,   487,     0,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   525,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   526,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,  2221,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   527,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,     0,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     528,   446,   447,     0,     0,   448,   449,     0,   450,     0,
     452,   453,   454,   455,   456,     0,   457,   458,   459,     0,
       0,   460,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,   474,   475,
       0,   476,   477,   478,   479,     0,   480,   481,   482,   483,
     484,   485,   486,     0,   487,     0,   489,   490,   491,   492,
     493,   494,   495,     0,     0,   496,     0,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   525,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   526,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  2236,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   527,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,     0,   429,
     430,   431,   432,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   528,   446,   447,     0,
       0,   448,   449,     0,   450,     0,   452,   453,   454,   455,
     456,     0,   457,   458,   459,     0,     0,   460,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,   474,   475,     0,   476,   477,   478,
     479,     0,   480,   481,   482,   483,   484,   485,   486,     0,
     487,     0,   489,   490,   491,   492,   493,   494,   495,     0,
       0,   496,     0,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,  1479,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,  1480,
       0,     0,     0,     0,  1481,   130,   131,     0,   132,   133,
     134,  1482,   136,   137,   138,     0,  1483,  1484,  1485,  1486,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,  1487,  1488,   156,     0,   157,   158,   159,
     160,     0,     0,  1489,     0,  1490,   164,   165,   166,   167,
     168,  1491,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,  1492,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1493,   191,   192,  1494,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1063,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   229,     0,   230,   231,  1495,   233,     0,
     234,     0,   235,  1496,     0,  1497,   238,   239,     0,  1498,
     242,     0,   243,     0,     0,     0,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,  1499,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,  1500,     0,   270,   271,   272,   273,   274,  1501,  1502,
       0,  1503,     0,   278,  1504,  1505,   281,  1506,   283,   284,
     285,   286,   287,   288,     0,     0,   289,  1507,   291,  1508,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1509,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1510,  1511,  1512,   325,   326,   327,     0,     0,   329,   330,
    1513,   332,     0,     0,   334,  1514,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,     0,  1515,   348,  1516,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,     0,  1517,   366,   367,     0,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1518,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,  1519,   402,   403,   404,  1520,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,     0,  1521,   419,   420,   421,   422,   423,   424,
    1522,   426,   427,     0,  1523,   429,   430,  1524,   432,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,  1525,   446,     0,     0,     0,   448,   449,     0,
     450,  1526,   452,   453,   454,   455,   456,     0,   457,  1527,
    1528,     0,     0,   460,   461,     0,   463,     0,     0,   465,
     466,  1529,   468,   469,   470,   471,   472,  1530,     0,   473,
     474,   475,     0,   476,   477,   478,   479,     0,   480,   481,
     482,   483,   484,     0,  1531,     0,   487,  1532,   489,   490,
     491,   492,   493,   494,   495,     0,     0,   496,     0,     0,
     497,   498,   499,   500,   501,   502,  1479,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,   515,   516,
     517,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
    1480,     0,     0,     0,     0,  1481,   130,   131,     0,   132,
     133,   134,  1482,   136,   137,   138,     0,  1483,  1484,  1485,
    1486,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,  1487,  1488,   156,     0,   157,   158,
     159,   160,     0,     0,  1489,     0,  1490,   164,   165,   166,
     167,   168,  1491,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,  1492,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1493,   191,   192,  1494,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1063,
     209,   210,     0,   211,   212,   213,     0,  1833,   215,   216,
       0,   217,   218,   219,   220,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   229,     0,   230,   231,  1495,   233,
       0,   234,     0,   235,  1496,     0,  1497,   238,   239,     0,
    1498,   242,     0,   243,     0,     0,     0,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,  1499,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,  1500,     0,   270,   271,   272,   273,   274,  1501,
    1502,     0,  1503,     0,   278,  1504,  1505,   281,  1506,   283,
     284,   285,   286,   287,   288,     0,     0,   289,  1507,   291,
    1508,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1509,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1510,  1511,  1512,   325,   326,   327,     0,     0,   329,
     330,  1513,   332,     0,     0,   334,  1514,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,     0,  1515,   348,  1516,     0,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,     0,  1517,   366,   367,     0,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1518,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,  1519,   402,   403,   404,  1520,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,  1521,   419,   420,   421,   422,   423,
     424,  1522,   426,   427,     0,  1523,   429,   430,  1524,   432,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,  1525,   446,     0,     0,     0,   448,   449,
       0,   450,  1526,   452,   453,   454,   455,   456,     0,   457,
    1527,  1528,     0,     0,   460,   461,     0,   463,     0,     0,
     465,   466,  1529,   468,   469,   470,   471,   472,  1530,     0,
     473,   474,   475,     0,   476,   477,   478,   479,     0,   480,
     481,   482,   483,   484,     0,  1531,     0,   487,  1532,   489,
     490,   491,   492,   493,   494,   495,     0,     0,   496,     0,
       0,   497,   498,   499,   500,   501,   502,  3146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   514,   515,
     516,   517,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,  2898,     0,     0,     0,     0,  2899,   130,   131,     0,
     132,   133,   134,  2900,   136,   137,   138,     0,  1483,  2901,
    1485,  1486,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,  1487,  1488,   156,     0,   157,
     158,   159,   160,     0,     0,  2902,     0,  2903,   164,   165,
     166,   167,   168,  2904,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,  2905,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1493,   191,   192,  1494,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1063,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   229,     0,   230,   231,  1495,
     233,     0,   234,     0,   235,  2906,     0,  2907,   238,   239,
    2908,  2909,   242,     0,   243,     0,     0,     0,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,  2910,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,  2911,     0,   270,   271,   272,   273,   274,
    1501,  1502,     0,  1503,     0,   278,  2912,  2913,   281,  2914,
     283,   284,   285,   286,   287,   288,     0,     0,   289,  2915,
     291,  2916,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  3147,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1510,  2918,  1512,   325,   326,   327,     0,     0,
     329,   330,  2920,   332,     0,     0,   334,  1514,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,     0,  2922,   348,  2923,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,     0,  2924,   366,   367,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1518,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,  2925,   402,   403,   404,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,     0,  2926,   419,   420,   421,   422,
     423,   424,     0,   426,   427,     0,  2928,   429,   430,  1524,
     432,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,  3148,   446,     0,     0,     0,   448,
     449,     0,   450,  2930,   452,   453,   454,   455,   456,     0,
     457,  1527,  1528,     0,     0,   460,   461,     0,   463,     0,
       0,   465,   466,  2931,   468,   469,   470,   471,   472,     0,
       0,   473,   474,   475,     0,   476,   477,   478,   479,     0,
     480,   481,   482,   483,   484,     0,  1531,     0,   487,  2933,
     489,   490,   491,   492,   493,   494,   495,     0,     0,   496,
       0,     0,   497,   498,   499,   500,   501,   502,   525,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   514,
     515,   516,   517,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   526,     0,   242,     0,   243,     0,   244,   245,     0,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   527,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,     0,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   402,   403,
     404,   405,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,   429,   430,
     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   528,   446,   447,     0,     0,
     448,   449,     0,   450,     0,   452,   453,   454,   455,   456,
       0,   457,   458,   459,     0,     0,   460,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,   474,   475,     0,   476,   477,   478,   479,
       0,   480,   481,   482,   483,   484,   485,   486,     0,   487,
       0,   489,   490,   491,   492,   493,   494,   495,     0,     0,
     496,     0,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,  1770,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,  1480,     0,
       0,     0,     0,  1481,   130,   131,     0,   132,   133,   134,
    1482,   136,   137,   138,     0,  1483,  1484,  1485,  1486,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,  1487,  1488,   156,     0,   157,   158,   159,   160,
       0,     0,  1489,     0,  1490,   164,   165,   166,   167,   168,
    1491,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,  1492,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1493,   191,   192,  1494,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1063,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   229,     0,   230,   231,  1495,   233,     0,   234,
       0,   235,  1496,     0,  1497,   238,   239,     0,  1498,   242,
       0,   243,     0,     0,     0,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,  1499,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
    1500,     0,   270,   271,   272,   273,   274,  1501,  1502,     0,
    1503,     0,   278,  1504,  1505,   281,  1506,   283,   284,   285,
     286,   287,   288,     0,     0,   289,  1507,   291,  1508,     0,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1510,
    1511,  1512,   325,   326,   327,     0,     0,   329,   330,  1513,
     332,     0,     0,   334,  1514,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
       0,  1515,   348,  1516,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,     0,  1517,   366,   367,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1518,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  1519,   402,   403,   404,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,     0,  1521,   419,   420,   421,   422,   423,   424,     0,
     426,   427,     0,  1523,   429,   430,  1524,   432,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   446,     0,     0,     0,   448,   449,     0,   450,
    1526,   452,   453,   454,   455,   456,     0,   457,  1527,  1528,
       0,     0,   460,   461,     0,   463,     0,     0,   465,   466,
    1529,   468,   469,   470,   471,   472,     0,     0,   473,   474,
     475,     0,   476,   477,   478,   479,     0,   480,   481,   482,
     483,   484,     0,  1531,     0,   487,  1532,   489,   490,   491,
     492,   493,   494,   495,     0,     1,   496,     0,     0,   497,
     498,   499,   500,   501,   502,     2,     0,     3,     4,     0,
       0,     0,     0,     1,     0,     0,   514,   515,   516,   517,
       0,     0,     0,     2,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     0,     6,     0,     0,     0,     0,     8,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,    10,
       0,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,    11,     0,   748,     0,     0,     0,    10,     0,     0,
       0,     0,     0,     0,    13,     0,     0,     0,     0,    11,
       0,   748,     0,     0,     0,     0,     0,     0,     0,    14,
      15,     0,    13,     0,     0,     0,     0,     0,     0,     0,
     749,     0,     0,     0,     0,     0,    18,    14,    15,     0,
       0,     0,     0,     0,    19,     0,     0,     0,   749,     0,
       0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
       0,    22,    19,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,    28,
      29,     0,     0,     0,     0,     0,    30,     0,     0,    31,
       0,     0,     0,     0,     0,     0,    27,    28,    29,     0,
       0,     0,     0,     0,    30,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,     0,     0,    34,     0,    33,     0,     0,     0,     0,
      35,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,    34,     0,     0,    37,     0,     0,     0,    35,     0,
       0,     0,    36,     0,     0,     0,    38,     0,     0,     0,
      39,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,     0,     0,    39,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,    40,    43,
       0,     0,     0,     0,    44,     0,     0,     0,   750,     0,
       0,    41,     0,     0,     0,     0,     0,    43,     0,     0,
      45,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   751,     0,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    47
};

static const yytype_int16 yycheck[] =
{
       7,     0,     0,   518,     0,     0,    89,    90,     0,    16,
      87,   886,    47,   838,    23,     0,    23,  1227,     0,    16,
     898,     0,  1240,     0,     0,   743,   812,    39,   993,   861,
    1697,   923,    20,   958,  1201,    20,   907,   751,  1422,  1160,
    1214,  1226,  1036,    20,   928,   984,    91,   984,   975,   984,
    1801,  1083,   984,  1468,  1206,     7,  1203,     7,  1658,  1551,
    2146,  2167,  2148,   962,  1166,   975,    17,  1280,  2342,  2232,
    2177,    23,  1302,    23,    91,  1611,  1612,    46,  1327,  1992,
      89,    90,    89,    90,  1231,     0,     0,  1991,     0,     0,
    1577,  2614,     0,     0,     0,     0,    25,    26,  1127,   111,
       0,    23,     0,  1132,  2650,   898,    26,   900,     0,   902,
       0,     0,  2166,  2614,  2652,   808,  2666,    35,  2112,     0,
     813,     0,   751,     0,     0,  2673,  1091,     0,  2228,  2488,
     744,  1002,     0,     0,     0,   750,     0,    89,    90,    89,
      90,  2299,  2280,  2281,  2282,     0,     5,     0,     9,  2570,
     982,     0,  1825,  2574,     0,     5,     3,     4,     5,  1717,
    1822,  1715,     9,    13,    14,     5,  2985,    89,    90,   769,
    1932,     5,     5,    45,     3,     5,    13,    14,     5,    13,
      14,     5,  1662,    13,    14,    38,   115,     5,     5,    13,
      14,     5,     5,  1057,  1058,    13,    14,     5,  2311,   985,
       5,     9,     5,  1819,     9,    34,    35,     5,     5,  2306,
    1074,  1138,    13,    14,     5,     5,     5,  2317,    74,     5,
     991,   122,    45,  1965,    82,   119,   173,    11,     4,  2310,
     139,    63,    16,     9,    55,    93,  1978,   172,    11,  2971,
       3,    82,     5,    16,   124,   100,    53,    90,    63,   881,
     103,    30,    93,  1247,   100,   856,  2988,     5,  1090,    38,
      11,   975,  1256,   191,    15,    16,  2826,   245,  2368,  2369,
     117,  2371,  1143,    46,   122,     4,    37,   245,  1170,   181,
       9,    63,     9,    63,  3151,   881,   129,   172,  1215,  2439,
     805,  1218,  1219,   986,  2872,    46,   107,   288,   291,   380,
     122,   184,   122,   290,  2439,   998,  2944,    80,   366,   119,
     313,   147,   975,   169,   227,   137,  1437,   276,  2807,     8,
    2809,   166,    11,  2532,   313,  2534,    15,    16,   389,    80,
      19,    20,    21,   107,  1061,   279,  2422,   132,   853,   193,
     117,   245,   171,  3314,   173,  3346,   162,  1468,  1522,    80,
    1077,   172,   120,   106,    30,   193,    40,    46,    75,   117,
     273,   976,    38,  1195,    53,   213,  1191,  1192,  2584,    30,
     177,   107,   219,    13,    14,   227,    40,    38,   367,   296,
      11,    30,   218,   407,  2135,  1615,   416,   194,    30,   104,
      11,    80,   199,   213,   241,  2533,   455,  1902,    30,    13,
    3240,   275,  3242,   371,  2927,    19,   280,   479,   164,   357,
    1181,  1286,   173,   108,   296,    46,    41,    31,  1310,  1190,
    2583,   273,   238,    82,   454,   290,   339,   195,  1933,   501,
     237,    45,    46,   191,    93,   290,  2982,  3438,   519,   387,
      13,    14,  2980,    85,   290,   469,  3178,  1110,   209,    80,
     394,  2558,    94,  2991,   515,   338,   515,   515,  1342,    80,
     296,  3280,    64,   337,   225,   308,   181,   371,  3439,  2685,
     280,   449,    74,   329,   235,  1138,   118,   390,  3318,   324,
    2580,   449,  2582,   132,   367,   173,  2480,  3081,   177,  3083,
     285,   273,   176,   452,   429,   109,  1528,   214,   251,   273,
     132,   126,   356,   280,   359,   194,   328,   510,   261,  2718,
     199,  3149,   176,   359,    11,   353,   272,   275,    15,    16,
    1750,   510,   515,  3012,   515,    11,   358,   167,   515,    15,
      16,  3109,   280,   222,   223,  3095,    11,   515,   390,   452,
      15,    16,   414,   358,   429,   449,  3413,   515,   237,   191,
    3128,   452,  1215,   455,  1154,  1218,  1219,  3376,   273,   120,
      46,  1193,   204,   457,   473,  2662,  1167,  1982,   515,   504,
    2683,   429,  1958,  1959,  1960,   455,   358,  1744,   358,   422,
     455,  1096,   517,   590,  2734,   392,   275,   515,   429,   278,
     446,   414,  1805,   590,    80,  2695,  1428,  1193,  2679,  2734,
     452,   362,   519,   292,   452,   387,   417,  2511,  1326,   445,
    3204,   515,  1861,  1331,  2150,  3165,  2378,  1442,   397,  1337,
     381,   309,   477,  1487,  1488,  2112,  2184,  1837,  3151,  2183,
    1344,   477,   452,  1458,   195,   371,   465,   519,   132,   241,
     515,   404,   405,  1414,  1415,  3377,   479,   464,  1512,  1420,
    3151,   515,   479,   514,   518,   108,   515,  2319,  1876,   506,
     507,   516,   521,   518,  1894,   515,  1660,  2340,   501,   518,
     516,   521,   518,   513,   501,   515,  1906,   517,   515,  3100,
    2843,   515,   515,   536,  3105,   515,  1349,  1350,   515,  2176,
    2170,   515,  2850,  2435,   515,  3054,  2312,   515,   515,  3390,
    2974,   515,   515,   392,   519,   393,  1936,   515,  1572,  1573,
     515,   426,   515,  1943,   515,  1344,   751,   515,   515,  1333,
     803,   397,  1554,  1555,   515,   515,   515,   511,  1343,   515,
     506,   507,  1564,  1604,  1605,  1606,   397,  3287,   511,   519,
    3288,  3279,  1435,     8,   751,   164,  1578,   148,   477,  1979,
      15,    16,  3281,  1983,    19,    20,    21,   508,   509,   510,
     511,   403,   431,   751,   406,   750,    33,  1494,   803,   417,
    2824,   108,   501,   750,   245,  1607,  1989,   506,   507,   506,
     507,   275,   513,  2013,  3475,   792,   517,  1514,   266,   162,
       8,   285,    59,    11,   803,   504,   803,    15,    16,   200,
    3479,    19,    20,    21,   477,  2709,   851,   149,   517,   886,
     499,   480,   231,   502,   503,   504,   515,   506,   507,   508,
     509,   510,   511,  1550,  1945,  2963,   504,  3373,   501,   203,
    2743,   838,   839,  2746,   851,  2748,  2830,   515,   510,  1555,
     792,  3520,   792,   321,   856,   517,  3375,  1774,  1564,  3378,
    3388,   803,  1846,   803,   861,   192,   785,  1784,   787,   201,
    1787,  1982,  3339,  3340,   876,   238,    82,   787,  1012,  2969,
     792,   859,   871,   871,  1018,   871,   871,    93,  2629,   871,
    2631,   803,  2786,   479,     0,  3431,   871,  2136,   817,   871,
    3413,  1769,   871,   862,   871,   871,   250,   514,   905,   906,
     371,  1416,   909,   910,    26,   501,  1569,   513,   525,  1627,
      32,   517,  3413,   842,   287,  3392,   245,  3191,  1581,   515,
    1583,   275,   840,   841,  1953,   843,  1009,  1802,  1803,  1804,
       4,   518,  1703,  1016,  1859,     9,  1007,  2877,  1863,   553,
     465,  1866,  2063,  1827,  3473,  2885,  1609,    26,  3111,  1742,
    1877,     5,   519,    32,  1025,   962,   871,   871,  1029,   871,
     871,  3499,  2498,   871,   871,   871,   871,  1877,   975,  1868,
     275,   871,   119,   871,   981,   982,  1769,   928,   449,   871,
     987,   871,   871,   990,   991,  3091,   993,   994,   995,   996,
     871,   976,   871,  2480,   871,   871,  1789,   371,   871,   976,
    1009,  1794,  1009,   871,   871,   871,   514,  1016,   382,  1016,
       5,   508,   509,   510,   511,   137,  2400,   525,   871,   510,
     506,   507,   508,   509,   510,   511,   517,   292,  1035,  1036,
    1037,   506,   507,   508,   509,   510,   511,  2423,  2424,  2425,
    2426,   479,   371,   417,   515,  2255,   975,  2798,  2540,  1056,
    2152,  1714,  1715,  2155,   515,   984,  1091,  1009,   137,  1009,
     207,   513,  1780,   501,  1016,   517,  1016,  1785,  1075,   515,
    2283,     4,   189,   190,   292,   108,     9,   515,   132,  1086,
    1087,  1088,  1884,  1090,  1091,  2206,  1888,  1009,  1095,  1891,
       4,  2321,  3255,   467,  1016,     9,   178,   513,  1095,   259,
     260,   517,  3006,   178,  1033,     4,   160,    13,    14,  1941,
       9,  1774,   840,   841,  1017,   843,  1123,  2264,  1021,   516,
     449,  1784,   519,   353,  1787,   245,   273,  2614,   275,  1174,
    1175,   745,  1177,  1140,  1141,   378,  1907,  1908,  1909,  1910,
    1911,  1912,   259,   260,  1915,  1916,  1917,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,   378,  1167,    26,  1174,  1175,   241,
    1177,   132,    32,  1877,   203,  1427,   241,  1429,  1430,  1176,
     375,  1100,   294,  1180,  1181,   252,  2328,  2142,    82,    71,
      72,  1110,  2334,  1190,  1191,  1192,   515,   434,  1195,   160,
     162,   147,   513,  2025,   515,   167,   517,   417,   162,   516,
    1129,     6,   519,   167,   108,    10,   162,  1214,    37,  1138,
     147,   167,   467,    18,  1877,   294,   376,   377,  1230,   516,
     516,   275,   519,   519,  2454,   162,   280,   378,    33,   351,
     167,   285,    37,   355,   826,   827,   828,   502,   503,   504,
    1247,   506,   507,   508,   509,   510,   511,   516,   862,  1256,
     519,   371,   516,   516,   516,   519,   519,   519,   516,   376,
     377,   519,   218,    13,    14,   387,   238,   137,  2100,   515,
     174,   245,  2147,  1280,   238,   516,   355,   516,   519,     5,
     519,   218,   238,   515,   502,   503,   504,   515,   506,   507,
     508,   509,   510,   511,   167,  1302,   371,  2712,   421,   203,
     423,   238,  1301,  1301,   275,  1301,  1301,   515,   387,   280,
    2235,  1318,  2237,   515,   285,   287,  2437,    13,    14,  2440,
    1327,  1318,   515,   287,  2095,  2096,   515,    59,  3491,   449,
     516,   287,    40,   519,   172,  1998,   458,  1344,   515,   421,
     296,   423,   246,  2830,   173,   421,   421,   423,   423,    74,
     287,   513,    60,   515,  1361,    26,  1344,  3443,  1343,   296,
    1367,    32,    13,    14,  1361,  1448,  1343,   449,  1451,  3476,
     515,  3478,  3458,  1456,   449,   516,  1459,    26,   519,   458,
     209,  1464,   436,    32,  2614,   516,  2211,  2597,   519,    13,
      14,   516,   117,   447,   519,   515,   225,   371,   106,   508,
     126,   127,   421,   515,   423,    26,   235,  1414,  1415,   515,
    2628,  2596,  3519,  1420,  2581,  1422,   516,  2309,   501,   519,
    1427,  1428,  1429,  1430,   294,   516,   516,  3513,   519,   519,
     172,  1360,  3518,   132,   515,  1442,  1443,   498,  2209,  1448,
     172,  1448,  1451,  2595,  1451,  2597,   172,  1456,   224,  1456,
    1459,  1458,  1459,  2485,  2486,  1464,   516,  1464,   517,   519,
    2645,   160,   477,   290,   479,   436,   137,   371,   516,   498,
    1422,   519,  1422,   517,   516,   449,   447,   519,   382,   171,
     516,   351,  3233,   519,  3235,   355,  2149,    26,   137,   445,
      13,    14,   516,    32,   202,   519,  1448,   519,  1448,  1451,
    1422,  1451,   516,   515,  1456,   519,  1456,  1459,   445,  1459,
      13,    14,  1464,   417,  1464,  1522,   137,   387,    26,  2182,
    2183,   295,  2461,  2488,    32,  2462,  1448,  2462,  2463,  1451,
    2462,  2463,  2464,   362,  1456,   516,   440,  1459,   519,    13,
      14,   515,  1464,   251,  1473,  1159,   516,  1554,  1555,   519,
     275,   516,   381,   261,   519,   280,  1563,  1564,   516,  1551,
     421,   519,   423,   467,  1571,   273,  1551,   516,   516,  1551,
     519,  1578,  1551,   516,  1551,  1551,   513,    13,    14,   516,
     517,   280,   516,   315,   316,   317,   285,   172,   458,   315,
     316,   317,   516,    13,    14,   519,  1603,   305,   137,   516,
    1607,    59,   519,  1610,   329,  2238,   178,  2240,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,    13,    14,
     345,  1628,  1629,   294,   418,   516,  1633,  1624,   519,   137,
    1637,   203,  2350,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  2356,  3243,  1651,   294,   498,   516,   380,   357,
     519,  1658,   515,  1660,   380,  1700,   224,   516,   516,     8,
     519,   519,    11,  2893,  3151,   391,    15,    16,   516,   241,
     152,   519,  1679,   294,   382,   351,   343,  2844,  2549,   152,
     351,  2891,   152,  1700,   355,   417,  2580,   413,  2582,  1677,
     878,   417,   880,   401,    13,    14,  1703,    46,  1551,    13,
      14,   152,   351,   152,    53,    40,   355,  1714,  1715,    13,
      14,    13,    14,    13,    14,   382,   387,   417,   450,   516,
    1334,   446,  1336,   295,   450,   515,   147,    13,    14,   461,
     455,    80,    13,    14,   355,   461,   357,   436,   387,  1668,
     178,   162,   275,  1750,  2515,  2516,   167,  2572,   447,  2967,
     417,   477,  1759,  2927,  1761,   294,    13,    14,    13,    14,
    2635,    40,  1759,  2688,  1761,   467,   387,    89,     0,    13,
      14,   152,  2656,   152,  3441,   501,    13,    14,  3445,   517,
     174,   152,   343,   515,  2676,   152,   294,   458,    20,   515,
     481,    23,    13,    14,  1801,  2458,  2459,   218,  1805,   290,
     467,  1808,  1809,   241,   353,  2799,    38,   429,   516,   458,
     515,  3195,   351,    13,    14,    47,   355,   238,   174,  3049,
     515,   382,   366,   367,     8,   366,   367,    11,   177,   366,
     367,    15,    16,  3500,   515,    19,    20,    21,   516,  1846,
     366,   367,   515,   351,   220,   194,   419,   355,   387,   421,
     199,   423,   246,   225,  1861,   300,   417,    89,    90,    91,
     515,  1868,  1869,   263,   264,   225,   287,   225,  1797,   515,
    1877,   103,   376,   377,   446,   296,   314,   449,   297,   387,
     466,  1810,  1811,  1966,   117,   460,   461,  1894,   237,  1972,
     246,  1898,  1899,    40,  1901,   236,  3453,  3454,   515,  1906,
    1907,  1908,  1909,  1910,  1911,  1912,   467,     5,  1915,  1916,
    1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,     5,   458,
     515,  3151,   325,  1930,  1931,   515,  3413,  1934,   515,  1936,
    3485,  3486,   515,   371,  1941,  2706,  1943,  1140,  1141,   172,
     378,     5,     5,   292,   515,     5,   515,     5,  1877,   343,
     458,  2614,   148,     9,  1883,  2882,  1963,  1966,   515,  1966,
    2731,  1968,  3346,  1972,   515,  1972,   478,   519,    37,  2894,
    2895,   302,  1979,    42,   104,    40,  1983,  3162,   516,   519,
    1987,   220,  1989,   421,  1991,   423,   387,   343,   382,  1842,
      74,   167,   287,   167,   285,   236,    80,    59,   515,   429,
     515,    93,   429,   519,  2775,  3389,  2013,    59,    59,    93,
     266,   449,   429,   429,  1966,   199,  1966,   108,  2025,  2026,
    1972,  2739,  1972,   417,   445,   525,   382,   222,   378,   477,
     429,   429,   101,   117,   152,   119,   515,   275,   222,   100,
     275,    40,   199,   392,  1966,   275,   275,   515,  1037,   275,
    1972,   152,    40,   172,  3438,   517,  3021,    13,  2065,  3277,
     516,   417,   516,  2070,  2071,  2100,   172,   519,   474,   516,
     516,   304,    60,   467,   516,   516,   516,   225,   515,   225,
     282,  2744,   315,   316,   317,   282,   515,   515,  2095,  2096,
     464,   517,   513,  2100,  2865,   519,   517,   515,  3219,    39,
     515,   515,   515,   515,   173,   515,   517,  2114,   292,   473,
    2117,   467,  2119,     9,   427,   427,    11,   353,   106,   427,
     525,   514,   172,   207,   515,   522,   280,   519,  2135,  2136,
     519,  1745,   515,   429,   181,  2142,  2145,   163,  2145,   172,
     209,  1755,   519,  1757,   455,  2863,  1760,   380,   516,  1138,
     499,   218,  1766,  2162,  1768,  2162,   225,   506,   507,   508,
     509,   510,   511,   266,   519,   390,   235,  1781,  2175,   291,
     227,   313,  1786,   313,   519,   519,  1790,  1791,  1792,  1793,
     181,  1795,  1796,  3413,   417,  2192,  2193,   516,   176,   220,
     515,   275,   227,  2145,   275,  2145,   280,   227,   334,   296,
     269,   467,  2209,  1037,  2211,   288,  3416,   152,   515,   515,
    2162,   152,  2162,  2220,   202,   152,   477,   450,   152,  2882,
      40,   290,   152,  2145,  2887,  1214,     3,   515,   461,   275,
       3,  2238,  2239,  2240,  3005,   290,   290,  3129,    40,   172,
    2162,  2238,  2239,  2240,   477,   329,   315,    55,    59,    11,
      40,   167,   516,   322,   516,   181,   516,   516,   167,     3,
      39,   345,   515,   251,   515,   315,   316,   317,   501,   515,
    2277,  2934,  2935,   261,     3,   522,  2283,   429,   429,   513,
    2315,   155,   515,   514,   429,   273,   513,   498,  3002,   498,
     429,   519,   516,   362,   102,   517,   516,   516,   516,   516,
     516,   516,   516,   516,   536,  2304,  2304,   498,  2304,  2304,
     172,   515,   381,  1302,  2321,   123,  2245,   305,   502,   503,
     504,   429,   506,   507,   508,   509,   510,   511,   515,   515,
     380,   250,  2339,   141,   178,  2342,   515,   145,   515,   474,
      40,    59,   504,   291,   519,  2342,   519,   500,   291,  2356,
     452,   244,    59,    59,   266,  2362,   429,   275,   152,   203,
     168,   203,   446,   171,   152,  2362,   515,   417,  2297,   357,
     152,   455,   282,  3205,  3245,  3207,   429,   282,   516,   187,
    1214,   450,   515,   515,   429,   429,  2315,   429,    40,   353,
     516,   519,  3217,  2400,   382,   477,   288,   241,    40,   152,
     450,   290,   280,   516,   172,   515,   515,   167,    59,   516,
     186,   461,   516,   401,    80,   143,   516,   513,   199,   301,
     172,   516,   516,   516,   359,   291,   516,  2356,   516,   515,
     519,   181,  2439,   152,  3220,  2364,  3222,  2366,   515,  3404,
     525,  2370,   516,  2372,  3215,   515,   176,  2454,  2400,  2526,
    2400,   295,    40,  2488,  2466,   440,  3348,   516,    40,    86,
     455,   172,   476,  3338,  2471,   515,   199,   516,  1302,   517,
    2477,  2478,   280,   516,   515,   515,  3139,  3140,  2400,  3357,
     288,  2488,   519,   519,   516,   519,  2521,    26,  3151,   516,
     515,   515,  2499,    32,   516,  2502,   515,  2504,   516,   516,
     516,    40,   310,   514,  2511,  2512,   514,  3332,  2515,  2516,
     519,   516,   516,  2520,  2521,   461,   516,   504,   750,   751,
    2527,    60,   516,   290,    40,    59,   516,   371,   477,   337,
     516,   205,   516,  1522,   516,  2542,   117,  2572,    40,   515,
     227,    88,   192,  2157,    60,  2552,   280,   517,  2540,   280,
       7,     8,   517,   504,   517,  2540,    13,   517,  2540,   517,
     792,  2540,    19,  2540,  2540,  2572,    23,   106,    25,    26,
     517,   803,   429,    30,    31,    32,   429,   421,    35,   423,
     516,    38,    39,   275,   516,    42,   517,   514,    45,    46,
     106,    40,   517,   517,   517,   517,   440,   517,   137,   514,
     517,   107,   446,   517,  2611,   449,   517,  2614,  2615,   517,
    2617,   517,   515,   517,  2611,   517,   517,   517,  2615,   851,
    2617,   477,  2629,   517,  2631,    40,  1615,   517,   290,   517,
     517,   517,    89,    90,   517,   515,   517,     8,   517,   871,
      11,   517,   517,   516,    15,    16,   103,   515,    19,    20,
      21,   108,   109,   110,   111,   112,  2655,  2655,     9,  2655,
    2655,   352,   516,   202,   515,    36,   515,   519,  3386,     8,
      59,   336,    11,   519,   199,   516,    15,    16,   514,   192,
      19,    20,    21,   516,   519,  2614,   202,  2540,  1522,   460,
      91,  1037,   345,  2546,   515,    40,  2731,   152,   517,  2706,
     516,   124,  2709,    40,   152,    40,   516,    46,   367,   367,
     516,   515,   251,    40,    53,   515,   519,  2331,  2647,  2726,
    2727,   310,   261,  2806,  2731,   280,   515,  2734,   455,   515,
     249,   151,   191,   455,   273,   251,   440,   515,    74,   293,
      74,    80,    80,    37,   976,   261,     9,   516,    42,   515,
    3413,   516,   172,   369,  2761,   294,    59,   273,   516,   514,
     514,  1750,    93,   133,     8,   504,   305,    11,  2775,   273,
     290,    15,    16,  2780,  2781,    40,   440,  1009,  2785,  2786,
     515,  1615,   293,  2790,  1016,  2820,  2793,  2794,   293,   305,
     515,  2798,  2799,   516,   205,  2802,  3311,  2806,  2651,  2806,
     516,   516,    46,   460,   290,   290,  2813,   101,   516,    53,
     387,   122,   351,   452,   366,   148,   355,    36,   357,    25,
    1052,   366,   298,  2887,  2611,  2678,  2598,  1767,  2681,    37,
    2233,  1678,  1064,   871,    42,  2276,    80,  2303,   177,  2362,
    3002,   357,  1238,   382,   786,  1811,  3363,  2647,   387,  3468,
    2857,   222,  3122,  3417,  2806,   194,  2806,  3426,  2865,  1091,
     199,  1201,   401,  3461,  3180,  2226,   382,  2239,  1214,  3415,
    2590,  2667,  3424,  2617,  2223,  3412,  1298,  2884,  2345,   173,
    2551,  2810,  1326,  1868,  2806,   401,  2893,   181,  3309,  1344,
    3247,  3389,  2550,   101,  3342,   315,   316,   317,   237,  3490,
     980,   145,  2540,  1364,  2175,  1894,  2209,  1159,  1739,  1008,
    1184,  1183,  2421,  3398,  2192,   209,  1750,  1906,  1703,   458,
    2927,   292,  3320,  3209,  1738,    23,  2162,     8,  1186,  1008,
      11,   225,  2734,   177,    15,    16,  1977,  3044,    19,    20,
      21,   235,  1174,  1175,   803,  1177,  2400,  1936,  2399,   792,
     194,  2446,  3143,   292,  1943,   199,  1302,   986,  1877,  1994,
     380,  2575,  2576,   984,   984,   173,  2973,  2974,  3324,   984,
    3323,   984,   984,  2072,   984,   269,  2478,  2974,   984,  2176,
    2118,   984,  2027,  2115,  1443,  2813,  3021,  2074,  2495,  2603,
    1979,  1677,   103,   237,  1983,  3002,   290,   417,  3005,  3006,
    1987,   209,  1991,    -1,  2618,  2619,  2620,  2621,  2622,  2623,
    2624,  2625,  2626,  2627,  3021,    -1,    -1,   225,    -1,    -1,
      -1,   315,    -1,    -1,  2013,    -1,    -1,   235,   322,    -1,
     450,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   461,  3049,    -1,    -1,    -1,    -1,  3054,   292,    -1,
    2979,    -1,    -1,   392,    -1,    -1,    -1,   477,  3065,  3066,
    1894,   269,  3069,    -1,  3071,    -1,    -1,    -1,   362,    -1,
      -1,    -1,  1906,  3002,    -1,    -1,    -1,    -1,    -1,    -1,
     537,   501,   290,    -1,    -1,   542,    -1,   381,   545,  3096,
      -1,    -1,    -1,    -1,    -1,   515,   553,    -1,    -1,    -1,
      -1,    -1,  1936,    -1,    -1,    -1,    -1,   315,    -1,  1943,
      -1,  1343,    -1,  3120,   322,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2983,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,   222,    -1,    -1,  3151,  1979,  1037,    -1,   392,  1983,
      -1,    -1,    -1,  3082,   362,    -1,   450,  1991,    -1,    -1,
     499,   455,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   381,    -1,    -1,  1522,    -1,    -1,  2013,
      -1,    -1,    -1,  3190,  3191,    -1,    -1,    -1,  3195,    -1,
      -1,    -1,    -1,    -1,  3191,    -1,    -1,    -1,  3205,    -1,
    3207,    -1,  3209,    -1,    -1,    -1,  3213,    -1,  3215,    -1,
    3217,   292,    -1,    -1,    -1,    -1,  1448,   991,    -1,  1451,
      -1,  3228,  3151,    -1,  1456,    -1,  3233,  1459,  3235,    -1,
      -1,    -1,  1464,    -1,    -1,    -1,  3243,    -1,    -1,    -1,
      -1,    40,   450,  3195,    -1,  3195,    -1,   455,    -1,  3256,
    2864,    -1,    -1,    -1,  3261,   499,    -1,    -1,    -1,  3256,
      -1,    60,   506,   507,   508,   509,   510,   511,    -1,  1615,
      -1,    -1,    -1,  3195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   743,   744,   745,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,  3310,    -1,    -1,    -1,   106,   107,    -1,
      -1,    -1,    -1,  3320,  3167,  3168,    -1,    36,   117,  1551,
      -1,    -1,    -1,  1214,    -1,  3332,    -1,    -1,   785,   786,
     787,    -1,  2321,   151,    -1,   792,    -1,   794,    -1,  3346,
      -1,    -1,    -1,    -1,    -1,    -1,   803,    -1,    -1,  3278,
     807,   808,    -1,    -1,   172,   812,   813,  3364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   826,
     827,   828,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,  3389,   840,   841,    -1,   843,    -1,    -1,    -1,
      -1,  3244,    -1,  3246,  3346,    -1,  3346,  3404,  1630,   856,
      -1,    -1,    -1,   202,  1750,   862,  3413,    -1,  3415,    -1,
      -1,  1302,    -1,    -1,    -1,    -1,   873,    -1,  3415,   876,
      -1,   502,   503,   504,  3346,   506,   507,   508,   509,   510,
     511,  3438,    -1,  3286,    -1,    -1,    -1,  3389,    -1,  3389,
      -1,    -1,    -1,    -1,    -1,  3452,  3453,  3454,    -1,  3302,
      -1,    -1,   251,  3306,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   261,   920,   921,  2454,    -1,  3389,  1700,    -1,
      -1,    -1,  3479,    -1,   273,    -1,   275,    -1,   935,   936,
     937,   938,   939,    -1,  3413,    -1,  3438,  2321,  3438,    -1,
      -1,    -1,    -1,    -1,    -1,   952,    -1,   315,   316,   317,
      -1,    -1,    -1,   222,    -1,    -1,   305,    -1,    -1,    -1,
      -1,    -1,    -1,  3520,    -1,    -1,  3438,  3131,    -1,    -1,
      37,    -1,  2511,    -1,    -1,    42,    -1,    -1,   985,   986,
      -1,   988,    -1,    -1,   991,    -1,    -1,    -1,  3152,  3153,
     997,   998,    -1,    98,    -1,    -1,  1003,    -1,  1894,    -1,
      -1,    -1,  1009,    -1,    -1,    -1,    -1,    -1,   357,  1016,
    1906,    -1,   380,  3177,   178,    -1,    -1,     8,    -1,  1026,
      11,   126,   127,   292,    15,    16,  1033,  3430,    -1,    -1,
      -1,    -1,    -1,   382,   101,    -1,    -1,  1044,    -1,   203,
    1936,    -1,    -1,    -1,    -1,    -1,    -1,  1943,    -1,   417,
      -1,  1833,   401,  3456,   403,    46,    -1,   406,    -1,    -1,
    1842,    -1,    53,    -1,    -1,    -1,    -1,   172,    -1,    -1,
    2454,    -1,    -1,    -1,    -1,  2614,    -1,   241,    -1,  1037,
      -1,  1522,   450,  1979,    -1,    -1,  1093,  1983,    -1,    80,
    1414,  1415,    -1,   461,    -1,  1991,  1420,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,     8,   477,
      -1,    11,    -1,    -1,    -1,    15,    16,  2013,    -1,    19,
      20,    21,    -1,    13,    -1,    -1,    -1,  2511,    -1,    19,
      -1,   295,    -1,   501,   172,  1142,    36,     8,  1145,    -1,
      11,    31,   209,    -1,    15,    16,    -1,   515,    -1,    -1,
     314,    -1,  1159,  1160,   145,    45,    46,    -1,   225,    -1,
    1167,    -1,    -1,    -1,    -1,    -1,   515,    -1,   235,    -1,
    2709,    -1,    -1,    -1,  1615,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,  1190,  1966,    -1,   177,    -1,    -1,    -1,
    1972,    -1,    -1,  1200,  1201,    -1,    -1,    -1,    -1,    42,
      -1,    -1,   269,   194,    -1,    -1,  1213,   371,   199,    80,
     315,   316,   317,     8,   378,    -1,    11,    -1,    -1,   109,
      15,    16,    -1,  1230,    19,    20,    21,  1234,    -1,    -1,
    2614,    -1,  1239,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,  3409,   237,  2786,   315,    -1,
      -1,    -1,    -1,    -1,    -1,   322,  1214,   421,    -1,   423,
      -1,    -1,    -1,    -1,    -1,   108,   304,   110,    -1,   112,
    1037,    -1,    -1,    -1,   145,   380,   440,   315,   316,   317,
      -1,    -1,   446,    -1,    -1,   449,   391,    -1,  1295,    -1,
    1297,    -1,    -1,    -1,    -1,   362,  1303,    -1,    -1,    -1,
      -1,   292,    -1,    -1,    -1,    -1,   177,    -1,   413,  1750,
    1317,    -1,   417,    -1,   381,    -1,    -1,    -1,  2100,  1326,
      -1,    -1,   222,   194,  1331,  2709,  1333,  1334,   199,  1336,
    1337,    -1,   437,    -1,    -1,    -1,  2118,    -1,    -1,    -1,
      -1,    -1,   380,    -1,  1302,   450,    -1,    -1,    -1,    -1,
      -1,  1037,  2134,    -1,  2893,    -1,   461,    -1,    -1,    -1,
      -1,    -1,    -1,  2145,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,   417,
    2162,   172,    -1,   450,    -1,    -1,    -1,    -1,  2927,    -1,
      -1,    -1,   292,    -1,    -1,    -1,   501,    -1,    -1,    -1,
      -1,   392,  2786,    -1,    -1,    -1,    -1,  1414,  1415,    -1,
     515,    -1,   450,  1420,    -1,  1422,    -1,    -1,    -1,    -1,
      -1,   292,    -1,   461,    -1,  2321,    -1,   222,  1435,    -1,
    1437,  1438,    -1,    -1,    -1,    -1,    -1,    -1,  1445,   477,
      -1,  1448,    -1,    -1,  1451,    -1,    -1,  1214,    -1,  1456,
      -1,    -1,  1459,  1894,    -1,    -1,    -1,  1464,    -1,  1466,
      -1,  1468,    -1,   501,    -1,  1906,  1473,  3006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1936,    -1,   292,    -1,    -1,
     126,   127,  1943,    -1,    -1,    -1,    -1,    -1,   499,  2893,
    3049,    -1,    -1,    -1,    -1,   506,   507,   508,   509,   510,
     511,   392,    -1,    -1,   315,   316,   317,    -1,  1214,    -1,
      -1,    -1,    -1,  2315,    -1,  1302,    -1,    -1,  1979,    -1,
      -1,    -1,  1983,  2927,    -1,    -1,   172,    -1,    -1,    -1,
    1991,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2454,    -1,
      -1,    -1,    -1,    -1,  1522,    -1,    -1,    -1,    -1,    -1,
    1577,    -1,  2013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1588,    -1,  1907,  1908,  1909,  1910,  1911,  1912,   380,
      -1,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
    1924,    -1,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,  3151,    -1,    -1,  2511,  1302,    -1,    -1,    -1,
    1627,    -1,  3006,    -1,    -1,    -1,   417,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1615,    -1,   450,
      -1,    -1,    -1,   553,    -1,  3049,    -1,  1674,    -1,  1676,
     461,  1678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1689,    -1,  1691,    -1,   477,    -1,    -1,   315,
     316,   317,    -1,    -1,   537,    -1,  1703,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,  2488,   502,   503,   504,
     501,   506,   507,   508,   509,   510,   511,    -1,  2614,    -1,
      -1,  1728,    -1,  1730,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,  1744,  1745,  2521,
      15,    16,    -1,    -1,    19,    20,    21,    -1,  1755,  1756,
    1757,  1758,    -1,  1760,   380,  1522,    -1,    -1,  2540,  1766,
      -1,  1768,    -1,    -1,  2546,   391,    -1,  3151,    -1,    -1,
      -1,  2095,  2096,  1780,  1781,    -1,    -1,    -1,  1785,  1786,
      -1,    -1,    -1,  1790,  1791,  1792,  1793,   413,  1795,  1796,
    2572,   417,  1750,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2709,  1821,  1822,  1823,  1824,  1825,  1826,
      -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1840,    -1,   461,  1522,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1615,  1856,
      -1,   477,    -1,     8,   744,   745,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,  2651,
      -1,    -1,    -1,    -1,  3413,   501,    -1,    -1,    -1,    -1,
    2321,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
    2786,    46,    -1,    -1,    -1,    -1,  2678,    -1,    53,  2681,
    1907,  1908,  1909,  1910,  1911,  1912,    -1,    -1,  1915,  1916,
    1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,  1615,
      -1,    -1,    -1,    -1,    -1,    -1,  1894,    -1,  1945,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,  1906,  2731,
    1957,   794,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1966,
      -1,    -1,    -1,    -1,    -1,  1972,    -1,    -1,    -1,    -1,
    1977,    -1,   862,    -1,    -1,  1982,    -1,    -1,  1936,    -1,
      -1,     8,    -1,  1750,    11,  1943,  1993,  1994,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,  2893,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,  2454,    -1,    -1,    -1,   292,    -1,    -1,
      -1,  1979,   177,    -1,  2806,  1983,    -1,    -1,    -1,  3413,
     873,  2927,    -1,  1991,    -1,    -1,    -1,    -1,  2820,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2013,  2063,    -1,    -1,    -1,
    2067,    -1,    -1,    -1,  1750,  2072,    -1,   222,   223,    -1,
    2511,    -1,    -1,    -1,    -1,    -1,   991,   920,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,  2095,  2096,
      -1,    -1,   935,   936,   937,   938,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2112,    -1,    -1,    -1,    -1,
    3006,    -1,    -1,  1003,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,  1894,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1026,   292,  2145,  1906,
     295,    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,    -1,
    2157,    -1,    -1,  3049,    -1,  2162,    -1,    -1,    -1,  2166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1936,
      -1,    -1,    -1,  2614,    -1,    -1,  1943,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2515,  2516,    -1,    -1,   222,    -1,    -1,    -1,  2206,
      -1,  2983,  2209,  1093,    -1,  2212,    -1,    -1,  1894,    -1,
      -1,    -1,  1979,    -1,    -1,    -1,  1983,    -1,    -1,    -1,
    1906,  2228,    -1,    -1,  1991,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,   392,    -1,  3021,
      -1,    -1,    -1,    -1,    -1,    -1,  2013,    -1,    -1,    -1,
    1936,    -1,    -1,    -1,    -1,  3151,    -1,  1943,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    26,    -1,  2709,  1159,
    1160,    -1,    32,    -1,    -1,  1190,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2299,  1979,    -1,    -1,    -1,  1983,  2305,    -1,
      60,    -1,    -1,    -1,    -1,  1991,    -1,    -1,    -1,    -1,
    2317,  2318,  2319,  2320,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2331,    -1,  2333,  2013,    -1,  2336,
      -1,    -1,    -1,  2340,    -1,    -1,    -1,  2344,    -1,    -1,
      -1,    -1,    -1,  2350,   499,  2786,   106,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,  1200,    -1,   514,
      -1,  2368,  2369,  2321,  2371,    -1,    -1,    -1,    -1,    -1,
    1213,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,  2706,    -1,    -1,  3167,  3168,    -1,    -1,    -1,
      -1,  1234,    -1,  2400,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2420,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2428,  2429,  2430,    -1,    -1,    -1,    -1,    -1,    -1,
    2437,    -1,  2439,  2440,    -1,    -1,    -1,    -1,    -1,  2446,
      -1,    -1,   202,  1333,  1334,    -1,  1336,    -1,    -1,    -1,
      -1,    -1,  2893,    -1,  1297,    -1,    -1,    -1,    -1,  2466,
    1303,    -1,  3244,    -1,  3246,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2480,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,  2927,    -1,    -1,    -1,
      -1,   251,    -1,    -1,    -1,    -1,  2454,    -1,    -1,  1414,
    1415,   261,    -1,    -1,  3286,  1420,    -1,    -1,  2515,  2516,
      -1,    -1,    -1,   273,    -1,    -1,    -1,  3413,    -1,    -1,
    3302,    -1,    -1,    -1,  3306,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,  2544,    -1,    -1,
      -1,  2865,    -1,  2550,    -1,   305,    -1,  1437,    -1,    -1,
      -1,    -1,    -1,  2511,  2321,    -1,    -1,    -1,    -1,  2566,
      -1,    -1,    -1,  2570,    -1,  3006,    -1,  2574,  2575,  2576,
      -1,    -1,    -1,  2580,  2581,  2582,  1466,  2584,  1468,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,    -1,    -1,    -1,   355,  2603,   357,  2605,    -1,
      -1,    -1,  1445,    -1,    -1,    -1,    -1,    -1,  3049,    -1,
      -1,  2618,  2619,  2620,  2621,  2622,  2623,  2624,  2625,  2626,
    2627,    -1,   382,    -1,    -1,    -1,    -1,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2321,    -1,    -1,    -1,    -1,
      -1,   401,    -1,  2650,    -1,    -1,    -1,    -1,  3430,    -1,
    2657,    -1,    -1,    -1,    -1,    -1,  2614,    -1,    -1,    -1,
    2667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3456,    -1,    -1,    -1,  2685,    -1,
      -1,  3005,    -1,    -1,    -1,    -1,    -1,  2454,  2695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   458,  2706,
      -1,    -1,    -1,    -1,    -1,  2712,    -1,    -1,    -1,    -1,
    3151,    -1,  2719,  2720,  2721,  2722,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2731,    -1,    -1,  2734,    -1,    -1,
      -1,  2738,  2739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2747,  1656,    -1,    -1,  2511,    -1,    -1,    -1,    -1,    -1,
      -1,  2709,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2774,  2454,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2804,    -1,  2806,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2820,    -1,    -1,    -1,  2824,    -1,    -1,
      -1,    -1,    -1,  2830,    -1,  2511,    -1,    -1,  2786,    -1,
      -1,    -1,    -1,  1676,    -1,  1678,    -1,  2844,    -1,    -1,
    1730,    -1,    -1,  2850,    -1,    -1,  1689,  2614,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1745,  2863,  2864,  2865,    -1,
      -1,    -1,    -1,    -1,  2871,  1755,    -1,  1757,    -1,    -1,
    1760,    -1,   100,    -1,    -1,    -1,  1766,    -1,  1768,    -1,
      -1,  2888,    -1,    -1,    -1,  1728,    -1,    -1,    -1,    -1,
      -1,  1781,    -1,    -1,    -1,    -1,  1786,    -1,    -1,    -1,
    1790,  1791,  1792,  1793,    -1,  1795,  1796,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2614,    -1,
      -1,    -1,    -1,    -1,   162,  2893,    -1,    -1,    -1,   167,
      -1,    -1,  2709,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,   186,  2966,
      -1,    -1,  2969,    -1,    -1,    -1,    -1,    -1,    -1,  2927,
      -1,    -1,  3413,    -1,    -1,  2982,    -1,    -1,  1821,  1822,
    1823,  1824,    -1,  1826,    -1,    -1,    -1,    -1,    -1,    -1,
     218,  2998,  1907,  1908,  1909,  1910,  1911,  1912,  3005,    -1,
    1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
     238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2786,
      -1,    -1,    -1,  2709,  3031,     8,    -1,    -1,    11,    -1,
    3037,    -1,    15,    16,    -1,    -1,    -1,  3044,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3006,    -1,
      -1,    -1,    -1,    -1,    -1,  1945,    -1,    -1,    -1,   287,
      -1,    -1,   290,    46,    -1,    -1,    -1,    -1,   296,    -1,
      53,  3078,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1977,    -1,    -1,
      -1,  3049,  1982,  3100,    -1,    -1,    -1,    80,  3105,    -1,
    2786,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,  1957,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3131,    -1,  2893,    -1,    -1,    -1,
      -1,   359,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3152,  3153,    -1,    -1,    -1,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2927,    -1,   145,    -1,  3171,    -1,  3173,    -1,    -1,    -1,
    3177,    -1,    -1,  2063,    -1,    -1,     0,    -1,    -1,    -1,
    2095,  2096,  2072,    -1,    -1,  3192,    -1,    -1,  3195,   417,
      -1,    -1,    -1,  3151,   177,    -1,    -1,    -1,    -1,    -1,
     146,    -1,    -1,    -1,    -1,    -1,    -1,  2893,  3215,    -1,
     156,   194,  3219,  3220,    -1,  3222,   199,   445,    -1,    -1,
      -1,    -1,    -1,   169,    -1,    -1,    -1,   455,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3006,
    3247,  2927,    -1,    -1,    -1,    -1,   474,  3254,   476,   477,
      -1,    -1,    -1,    -1,   237,    -1,    -1,   203,    -1,    -1,
      -1,   838,   839,    -1,    -1,    -1,    -1,  2157,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,  3285,    -1,
      -1,    -1,  3049,    -1,    -1,   513,    -1,    -1,   516,   517,
     518,    -1,    -1,    -1,  2209,    -1,    -1,    -1,    -1,    -1,
     246,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,  2206,  3324,    -1,    -1,
    3006,    -1,  2212,   147,    -1,    -1,    -1,    -1,   905,    -1,
      -1,    -1,   909,   910,    -1,    -1,    -1,    -1,   162,  3346,
      -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,   186,  3049,    -1,    -1,  3373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,  3386,
    3387,    -1,  3389,  3390,  3151,   962,    -1,    -1,    -1,   335,
      -1,  3398,    -1,    -1,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3409,    -1,   981,    -1,    -1,    -1,    -1,   392,
     987,    -1,    -1,   990,   238,    -1,   993,   994,   995,   996,
      -1,    -1,   368,    -1,  3431,   371,    -1,    -1,    -1,    -1,
       0,  3438,    -1,    -1,    -1,    -1,   382,    -1,    -1,   385,
      -1,  2331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3413,    -1,   403,  1035,  1036,
      -1,    -1,  2305,   287,    -1,  3151,   290,    -1,  3475,    -1,
      -1,   417,   296,    -1,    -1,  2318,  2319,  2320,   424,  1056,
      -1,    -1,    -1,  3490,    -1,    -1,    -1,    -1,   434,    -1,
    2333,    -1,    -1,  2336,   440,    -1,    -1,    -1,  1075,    -1,
      -1,  2344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1086,
    1087,  1088,   336,  1090,  1091,    -1,   499,    -1,    -1,    -1,
      -1,   467,    -1,   506,   507,   508,   509,   510,   511,    -1,
     100,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1123,  2437,    -1,    -1,
    2440,    -1,    -1,    -1,    -1,    -1,  2446,    -1,    -1,    -1,
      -1,    -1,    -1,  1140,  1141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2428,  2429,  2430,    -1,    -1,
      -1,    -1,   162,   417,    -1,    -1,    -1,   167,    -1,  1176,
    2515,  2516,   172,  1180,  1181,    -1,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,  1191,  1192,   186,    -1,    -1,    -1,
      -1,   445,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,   455,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,  3413,    -1,   218,    -1,
     474,    -1,   476,   477,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,   238,    -1,
    1247,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,
    2570,    -1,    -1,    -1,  2574,  2575,  2576,    -1,    -1,   513,
      -1,    -1,   516,   517,   518,    -1,    -1,    -1,    80,    -1,
      -1,     8,    -1,  1280,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    -1,  2603,    -1,    -1,    -1,   287,    -1,    -1,
     290,    -1,    -1,  2566,    -1,    -1,   296,  3413,  2618,  2619,
    2620,  2621,  2622,  2623,  2624,  2625,  2626,  2627,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,   359,
    1367,  2706,    -1,    53,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,  2657,    -1,  2731,   199,    -1,    -1,
      80,    -1,  2712,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,   417,  2738,    -1,
    1427,    -1,  1429,  1430,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1442,  1443,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,   445,  2719,  2720,  2721,  2722,
      -1,  1458,    -1,    -1,    -1,   455,    -1,   194,    -1,    -1,
      -1,    -1,   199,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   474,    -1,   476,   477,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,
    2865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2864,    -1,    -1,   237,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,  1563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1571,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2871,    -1,
      -1,    -1,   292,  1610,    -1,   295,    -1,    -1,    -1,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,    -1,    -1,    -1,
      -1,  1628,  1629,    -1,    -1,    -1,  1633,    -1,    -1,    -1,
    1637,    -1,    -1,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,    -1,    -1,  1651,    -1,    -1,    -1,    -1,    -1,
      -1,  1658,    -1,  1660,    -1,   392,    -1,    -1,    -1,    -1,
    3005,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,   392,    -1,    -1,    -1,    -1,  1714,  1715,    -1,
      -1,    -1,    -1,   525,    -1,    -1,    -1,  3037,    -1,     8,
      -1,    -1,    11,    -1,  3044,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,   499,    -1,    53,    -1,    -1,    -1,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
    3100,    -1,    -1,    -1,    -1,  3105,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,  1801,    -1,    -1,    -1,  1805,    -1,
      -1,  1808,  1809,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,  3131,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,
      -1,    -1,  3152,  3153,    -1,    -1,    -1,    -1,    -1,  1846,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   145,  3177,    -1,    -1,
      -1,  1868,  1869,    -1,     3,    -1,    -1,    -1,    -1,     8,
    3215,    -1,    11,    -1,     0,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,  1898,  1899,    -1,  1901,    -1,    22,    36,  3171,  3219,
      -1,    40,    -1,    -1,    -1,   194,    32,    46,    34,    35,
     199,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,  3192,
      -1,    47,    -1,  1930,  1931,    -1,    52,  1934,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,   237,    75,
      -1,    -1,    -1,    -1,    -1,    -1,  1963,    -1,    84,    -1,
      86,  1968,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,    -1,    -1,    -1,    -1,
    1987,  3254,  1989,    -1,    -1,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   991,
     126,   127,   128,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,  3285,    -1,    -1,    -1,    -1,   143,    -1,  2026,
      -1,    -1,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,  2065,    -1,
     199,    -1,    -1,  2070,  2071,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   214,  3409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   392,    -1,    -1,    -1,  2114,    -1,    -1,
    2117,    -1,  2119,    -1,   240,    -1,    -1,    -1,    -1,  1111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,  1155,    -1,    -1,    -1,    -1,  2175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2192,  2193,    -1,    -1,   315,
     316,   317,    -1,    -1,    -1,    -1,    -1,   323,  1190,    -1,
     326,    -1,    -1,    -1,  2211,    -1,    -1,    -1,    -1,    -1,
     499,    24,    -1,  2220,    -1,    -1,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1241,
      -1,    -1,    -1,   392,   380,    -1,    -1,    -1,    -1,    -1,
      -1,   387,    -1,    -1,    -1,   391,    -1,    -1,    81,    -1,
    2277,    -1,    -1,    -1,    -1,   401,  2283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    -1,    -1,   413,    -1,    -1,
      -1,   417,    -1,  1285,    -1,    -1,    -1,    -1,  1290,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   437,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   450,    -1,    -1,   453,    -1,    -1,
     456,    -1,  2339,   146,    -1,   461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,  1340,    -1,
      -1,   477,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,
     499,   174,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,  1365,    -1,   501,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
     203,     8,   518,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1410,    -1,
    1412,    -1,  1414,  1415,    -1,  1417,    -1,    -1,  1420,    46,
      -1,  1423,    -1,   246,  1426,    -1,    53,   250,    -1,  1431,
      -1,    -1,  1434,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    80,  2471,    -1,    -1,    -1,    -1,    -1,
    2477,  2478,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,  2488,    46,  1475,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,  2499,    -1,    -1,  2502,    -1,  2504,    -1,    -1,
      -1,   314,    -1,    -1,    -1,  2512,    -1,   320,    -1,    -1,
      -1,    -1,    -1,  2520,  2521,    -1,    80,    -1,    -1,    -1,
    2527,    -1,   335,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,  2542,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,  2552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,   368,    -1,    -1,   371,    -1,
     177,    -1,    -1,    -1,    46,  2572,    -1,  1559,    -1,   382,
      -1,    53,   385,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,  1575,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,  1585,  1586,  1587,    -1,    -1,    80,  1591,
      -1,    -1,    -1,  1595,   417,   222,   223,    -1,    -1,    -1,
     423,   424,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
     237,   434,  2629,    -1,  2631,    -1,    -1,   440,    -1,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,   222,   223,
      -1,   278,    -1,    -1,    -1,  1657,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   237,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
     113,   114,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1697,    -1,    -1,    -1,    -1,
      -1,   275,   194,    -1,   278,    -1,    -1,   199,    -1,  2726,
    2727,  1713,    -1,    -1,    -1,    -1,  1718,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,  1735,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,     5,    -1,  2761,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,   190,  2775,    -1,
      -1,    -1,    -1,  2780,  2781,   392,    -1,    -1,  2785,    -1,
      -1,    -1,    -1,  2790,    -1,    -1,  2793,  2794,    -1,    -1,
      -1,  2798,  2799,   275,    -1,  2802,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2813,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2857,    -1,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
     113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2884,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1896,    -1,    -1,    -1,    -1,    -1,
     392,    -1,  1904,  1905,    -1,  1907,  1908,  1909,  1910,  1911,
    1912,    -1,    -1,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,    -1,   499,   189,   190,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,   516,   376,   377,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2973,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,    -1,
     263,   264,    -1,    36,  3021,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    46,   506,   507,   508,   509,   510,   511,
      53,    -1,    -1,    -1,    -1,    -1,    -1,  2029,    -1,    -1,
    2032,    -1,    -1,    -1,    -1,    -1,    -1,  3054,   471,   472,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,  3065,  3066,
      -1,    -1,  3069,    -1,  3071,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2078,    -1,    -1,  3096,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,    -1,    -1,
      -1,    -1,    -1,  2095,  2096,    -1,  2098,  2099,    -1,    -1,
      -1,    -1,    -1,  3120,    -1,    -1,    -1,    -1,  2110,    -1,
      -1,  2113,    -1,   376,   377,    -1,    -1,    -1,    -1,  2121,
    2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,   177,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,  2156,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    36,    -1,
      -1,    -1,    -1,  3190,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   222,
     223,    -1,  3209,    -1,    -1,    -1,  3213,    -1,    -1,    -1,
    3217,    -1,    -1,    -1,   237,    -1,    -1,  2209,   471,   472,
      -1,  3228,    80,    -1,    -1,    -1,  3233,    -1,  3235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3243,    -1,    -1,    -1,
      -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,  3261,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2288,  2289,    -1,    -1,
      -1,    -1,    -1,  3310,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3320,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,  3332,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,  3364,    -1,    -1,
      -1,  2353,    -1,    -1,   222,   223,    -1,    -1,    -1,   392,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      46,    -1,    -1,  2375,  2376,  2377,    -1,    53,  2380,  2381,
    2382,  2383,  2384,  2385,    -1,    -1,    -1,  2389,  2390,  2391,
    2392,  2393,  2394,  2395,  2396,  2397,  2398,    -1,    -1,    -1,
      -1,  2403,  2404,    -1,    80,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,  2431,
      -1,    -1,    -1,    -1,  2436,  3452,  3453,  3454,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3479,    -1,    -1,    -1,   499,    -1,  2470,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,   516,    -1,    -1,    -1,  2489,    -1,    -1,
    2492,  2493,    -1,    -1,    -1,    -1,    -1,     8,  2500,  2501,
      11,   177,    -1,  3520,    15,    16,    17,    18,    19,    20,
      21,    -1,  2514,  2515,  2516,  2517,    -1,  2519,   194,    -1,
      -1,  2523,    -1,   199,   392,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,  2577,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,   516,    -1,
      -1,     8,    -1,    -1,    11,    -1,    80,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
    2682,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2706,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
    2762,    -1,  2764,    -1,   275,    -1,    -1,   278,  2770,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,  2779,    -1,    -1,
    2782,   292,  2784,    -1,   295,    -1,  2788,    -1,    -1,  2791,
    2792,    -1,    -1,  2795,  2796,    -1,    -1,    -1,   222,   223,
      -1,  2803,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2812,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,   499,    -1,  2827,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,   194,    -1,    -1,
     516,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2865,    -1,   222,   223,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    68,    69,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,   113,   114,    -1,    -1,    -1,    -1,    -1,   392,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,  3004,  3005,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3029,  3030,    -1,
      -1,    -1,    -1,    -1,    -1,   392,    -1,   189,   190,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3053,    -1,    -1,    -1,  3057,    -1,  3059,  3060,  3061,
      -1,    -1,  3064,    -1,    -1,  3067,  3068,    -1,    -1,    -1,
      -1,   177,    -1,    -1,  3076,   499,    -1,    -1,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   194,    -1,
      -1,    -1,   516,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
      -1,   263,   264,    -1,    -1,  3117,   222,   223,    -1,    -1,
      -1,  3123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,  3136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3169,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,  3197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,    -1,    -1,  3230,  3231,
    3232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3250,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3307,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
     472,    -1,    -1,  3325,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3359,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3428,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    3482,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,   525,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,   524,   525,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,   516,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,   501,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,   501,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,   516,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
      -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,   516,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,
      -1,    -1,    -1,   513,    -1,   515,   516,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,
      -1,    -1,    -1,   513,    -1,   515,   516,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,
      -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,   508,    -1,
      -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
     508,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,
      -1,   515,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
     524,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,   524,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,   524,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,   524,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,    -1,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,   508,    -1,     3,     4,     5,   513,    -1,   515,
       9,    -1,    -1,    -1,   520,   521,    -1,   523,   524,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   506,   507,   508,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,   521,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,    -1,   292,   293,   294,    -1,   296,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,   445,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,   516,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,    -1,     3,   501,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,   291,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,    -1,
       3,   501,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,   172,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,   501,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     515,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,   172,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,    -1,     3,   501,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    15,    16,    -1,   515,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   495,   496,   497,   498,    -1,     3,
      -1,   502,   503,   504,     8,   506,   507,   508,   509,   510,
     511,    15,    16,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,    -1,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,    -1,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,     8,    -1,    -1,    11,    -1,   177,    53,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,
      36,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   177,    53,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,   237,   199,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,   275,   237,   199,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
     222,   223,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   237,    -1,   278,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,   194,    -1,
      -1,    -1,   237,   199,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   237,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    -1,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,   516,   392,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    36,    -1,    -1,    -1,   516,   392,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,   516,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    36,    -1,    -1,
      -1,   516,    -1,    -1,    -1,    -1,    -1,    46,     8,    -1,
      -1,    11,    -1,    -1,    53,    15,    16,    17,    18,    19,
      20,    21,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    36,    -1,    -1,    -1,
     516,    80,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,    -1,   177,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,   199,    36,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   177,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,   194,    -1,    -1,    -1,    -1,
     199,    36,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    46,    -1,    -1,    -1,    -1,    -1,   177,    53,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   237,   199,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,   275,   237,   199,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,   392,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,   237,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,   516,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,   516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    -1,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,   516,   392,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,   514,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,   508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,     8,    -1,    -1,
      11,    -1,   506,   507,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
      -1,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,   126,    -1,    -1,    -1,    -1,
      53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   177,    53,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    80,   167,    -1,    36,    -1,    -1,
     172,    -1,    -1,    -1,    -1,   177,    -1,    46,    -1,    -1,
      -1,   222,   223,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,
      -1,    -1,    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,   275,   237,   199,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,   222,
     223,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,   237,    -1,   278,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,   177,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,   194,    -1,    -1,    -1,   292,
     199,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,   222,   223,    -1,    -1,    -1,    -1,   275,
      -1,   324,   278,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,   392,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,   392,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,   502,   503,   504,    36,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,   177,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    36,    -1,    -1,    -1,    40,
      80,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    46,    -1,   295,
      -1,    -1,   172,    -1,    53,    -1,     8,   177,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,   177,    -1,    -1,    -1,
      -1,    53,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,   237,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,   237,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,   194,    -1,   278,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   222,   223,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
     222,   223,   392,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,   392,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
     292,    -1,    -1,   295,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,   499,
      -1,    -1,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,   392,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,   502,   503,   504,    36,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     392,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    36,    -1,   425,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
     499,    -1,    -1,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    80,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     222,   223,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,   222,   223,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    36,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    46,    -1,   295,    -1,    -1,    -1,    -1,    53,    -1,
     392,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    80,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    46,
     295,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,   169,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,   291,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
     291,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,     4,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,    -1,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,    -1,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,    -1,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,    -1,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,    -1,    -1,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,    -1,   322,   323,   324,
      -1,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,    -1,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,    -1,   462,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,    -1,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,   475,    -1,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,    -1,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,    -1,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,    -1,    -1,   475,    -1,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,    -1,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
     158,    -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,    -1,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,    -1,   276,   277,
     278,   279,    -1,    -1,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,    -1,   322,   323,   324,    -1,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,   432,    -1,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,    -1,   462,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,   475,    -1,    -1,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,    -1,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,    -1,   322,   323,   324,    -1,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,   432,    -1,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,    -1,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,    -1,   462,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
      -1,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,    -1,    -1,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,    -1,   322,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,   432,    -1,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,    -1,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,   475,
      -1,    -1,   478,   479,   480,   481,   482,   483,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,    -1,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,    -1,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,    -1,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
     475,    -1,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,    -1,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,    -1,    -1,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,    -1,   322,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,    -1,    -1,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,   432,    -1,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,    -1,   462,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    22,   475,    -1,    -1,   478,
     479,   480,   481,   482,   483,    32,    -1,    34,    35,    -1,
      -1,    -1,    -1,    22,    -1,    -1,   495,   496,   497,   498,
      -1,    -1,    -1,    32,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,   143,   126,   127,    -1,
      -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,   168,   151,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,
     317,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,   326,
      -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,    -1,
      -1,    -1,    -1,    -1,   323,    -1,    -1,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,   364,    -1,    -1,    -1,    -1,
     387,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,   401,    -1,    -1,    -1,   387,    -1,
      -1,    -1,   391,    -1,    -1,    -1,   413,    -1,    -1,    -1,
     417,    -1,   401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,   417,    -1,
     437,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,    -1,   437,   456,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   450,    -1,    -1,    -1,    -1,    -1,   456,    -1,    -1,
     477,    -1,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   143,   151,
     153,   154,   168,   172,   198,   214,   240,   315,   316,   317,
     323,   326,   355,   364,   380,   387,   391,   401,   413,   417,
     437,   450,   453,   456,   461,   477,   501,   515,   527,   528,
     529,   530,   531,   538,   549,   550,   551,   554,   555,   557,
     568,   586,   634,   644,   647,   650,   654,   656,   659,   660,
     664,   670,   672,   676,   683,   687,   688,   689,   696,   701,
     717,   721,   722,   725,   727,   728,   729,   730,   732,   734,
     735,   739,   792,   793,   960,   962,   963,   964,   965,   970,
     973,   979,   980,   981,   985,   431,   480,   961,   203,   371,
     382,   417,   467,   108,   192,   552,   961,     3,    22,    23,
      24,    25,    26,    27,    28,    29,    31,    32,    33,    42,
      43,    44,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    59,    60,    61,    62,    63,    64,
      67,    68,    69,    70,    71,    72,    73,    75,    76,    77,
      78,    79,    81,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    94,    95,    96,    97,    98,    99,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   118,   120,   121,   122,   123,
     124,   125,   128,   129,   130,   131,   134,   135,   136,   137,
     138,   140,   141,   142,   144,   145,   146,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   161,
     163,   164,   165,   166,   168,   170,   171,   173,   174,   175,
     176,   177,   178,   180,   182,   183,   184,   185,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     200,   201,   202,   203,   204,   205,   206,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   219,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   234,
     235,   236,   237,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   276,
     277,   278,   279,   281,   282,   283,   284,   285,   286,   288,
     289,   292,   293,   294,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   330,   331,   332,   333,   334,   335,   337,   338,
     339,   340,   341,   342,   343,   344,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   392,   393,
     394,   395,   396,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   415,   416,
     418,   419,   420,   421,   422,   423,   424,   426,   427,   428,
     431,   432,   433,   434,   435,   437,   438,   439,   440,   441,
     442,   443,   444,   447,   448,   449,   451,   452,   453,   454,
     456,   457,   458,   459,   460,   461,   462,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   475,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   561,   637,
     638,   639,   869,   949,   953,     3,   176,   247,   410,   556,
     561,   637,   290,   961,    55,   172,   515,   581,   178,   241,
     295,   314,   371,   421,   423,   440,   446,   449,   632,   652,
     695,     5,    30,   326,   561,   562,   948,     3,    30,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    45,    49,
      53,    54,    55,    56,    57,    58,    65,    66,    71,    72,
      74,    79,    80,    81,    82,    83,    89,    93,   100,   101,
     108,   112,   115,   117,   119,   126,   127,   132,   133,   139,
     143,   147,   152,   159,   160,   162,   165,   167,   169,   171,
     172,   173,   176,   177,   179,   181,   182,   183,   186,   194,
     199,   207,   209,   210,   216,   217,   218,   219,   220,   222,
     223,   225,   232,   233,   235,   237,   238,   247,   268,   269,
     270,   274,   275,   278,   280,   281,   283,   287,   290,   291,
     295,   296,   299,   300,   302,   303,   315,   316,   317,   318,
     321,   322,   325,   329,   336,   340,   345,   359,   362,   366,
     380,   381,   388,   391,   392,   395,   397,   410,   412,   413,
     414,   417,   419,   425,   427,   428,   429,   430,   433,   435,
     436,   439,   445,   446,   450,   455,   461,   462,   463,   465,
     473,   474,   476,   477,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   567,   637,   641,   643,    24,
      81,    97,   146,   156,   169,   174,   203,   246,   250,   320,
     335,   368,   371,   382,   385,   403,   417,   423,   424,   434,
     440,   467,   652,   665,   666,   669,   961,   948,   100,   137,
     465,   515,   530,   531,   538,   554,   555,   568,   586,   634,
     644,   647,   654,   656,   659,   660,   664,   672,   679,   683,
     689,   696,   717,   721,   722,   725,   727,   960,   962,   963,
     965,   970,   973,   979,   985,   108,    75,   214,    66,    79,
      81,   159,   232,   281,   291,   303,   321,   367,   412,   433,
     435,   439,   461,   515,   560,   561,   562,   728,   793,   795,
     797,   807,   814,   815,   869,   871,   872,   108,     5,   561,
     563,   718,   718,   561,   948,    30,   178,   241,   386,   427,
     431,   561,   971,   972,   983,   961,    30,   132,   748,   749,
     178,   241,   371,   386,   427,   974,   975,   983,   961,   561,
     727,   739,   984,   561,   814,   417,   745,   560,   173,   515,
     967,   515,   343,   740,   741,   948,   740,   728,   729,   979,
       0,   518,   465,   677,   122,   213,   452,   147,   218,   296,
     445,   751,   752,   797,   797,   728,   730,   732,   519,    30,
     427,   431,   727,   984,   192,   560,   948,   192,   560,   192,
     814,   192,   560,   275,   563,   513,   517,   564,   565,   515,
      82,   108,   174,   203,   246,   371,   382,   417,   440,   467,
     559,   108,   727,   560,   421,   423,   421,   423,   353,   192,
     560,   560,   174,   246,   343,   382,   417,   467,   645,   378,
     203,    30,   948,   192,   567,   252,   434,   107,   417,   417,
     467,   375,   378,   192,   561,   667,   955,   192,   945,   948,
     192,   948,   515,   675,   295,   423,   679,     3,   461,   637,
     641,   680,   682,   683,   685,   686,   677,   561,   563,   556,
     718,   515,   515,   167,   515,   728,   815,   515,   515,   560,
     515,   515,   172,   515,   515,   515,   515,   728,   793,   797,
     807,   508,   564,    40,   561,   808,   809,   808,   380,   519,
     731,    37,    42,   101,   173,   209,   225,   235,   269,   315,
     322,   362,   381,   450,   811,   809,    40,   561,   808,   810,
     501,   819,   563,   172,   719,   504,   515,   515,   723,   972,
     972,   972,   498,   224,   517,   290,     4,     6,     7,     8,
       9,    10,    39,    54,    56,    57,    65,    71,    72,    83,
     112,   115,   117,   136,   152,   160,   165,   182,   183,   216,
     217,   219,   247,   268,   270,   275,   280,   283,   292,   340,
     366,   395,   427,   428,   436,   462,   499,   506,   507,   508,
     513,   515,   520,   521,   523,   524,   561,   563,   728,   782,
     831,   834,   837,   838,   839,   841,   842,   843,   844,   846,
     847,   862,   864,   865,   866,   867,   868,   869,   870,   872,
     873,   888,   889,   900,   922,   927,   935,   936,   937,   949,
     950,   951,   934,   936,   974,   974,   563,   974,   498,   172,
     429,   504,   517,   564,   661,   814,     3,   171,   173,   465,
     683,   966,   968,   171,   969,   862,   906,   907,   740,   519,
     515,   957,   516,   516,   516,   529,   560,   172,   295,   704,
     157,   661,    30,   132,   746,   746,    59,   746,   162,   167,
     238,   287,   757,   759,   760,   785,   787,   788,   789,   181,
     290,   455,   290,   751,   752,   515,   418,   982,   498,   224,
     152,    26,    32,   137,   294,   351,   355,   387,   458,   543,
     546,   547,   351,   152,    40,    60,   106,   202,   251,   261,
     273,   305,   351,   357,   382,   387,   401,   532,   535,   546,
     152,   351,   387,   546,   152,   351,   387,   546,   152,    40,
     553,   862,   928,   566,   567,   565,     3,    30,    37,    42,
      49,    55,    81,    83,    89,   101,   132,   171,   173,   176,
     177,   194,   209,   222,   223,   225,   235,   237,   247,   269,
     278,   300,   302,   322,   362,   381,   392,   410,   419,   439,
     463,   465,   516,   637,   642,   862,   909,   910,   952,   958,
     862,   417,   560,   561,   516,   515,   621,   371,   632,   652,
     275,   648,    40,   467,   192,   560,   192,   560,   636,   192,
     560,   192,   560,   192,   561,   651,    89,   692,   152,   481,
      90,   129,   308,   422,   192,   561,   152,   517,   956,    63,
     358,   519,   668,   152,   519,   668,   152,   290,   673,   674,
     862,   958,   353,   516,   519,     4,   160,   290,   436,   506,
     507,   534,   537,   563,   678,   680,   681,   684,   951,   679,
     429,   515,   576,   580,   719,   862,   907,   515,     3,    68,
      69,   109,   110,   113,   114,   189,   190,   253,   254,   255,
     256,   257,   258,   259,   260,   263,   264,   376,   377,   471,
     472,   495,   496,   563,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   912,   913,   809,   810,
     862,   560,   862,   914,   506,   507,   561,   863,   864,   889,
     900,   916,   515,   862,   906,   917,   862,    58,   172,   233,
     430,   862,   907,   920,   862,   516,   562,   515,   419,   765,
     766,   766,   748,   749,   797,   220,   743,    37,   225,   381,
     811,   225,   300,   812,   797,   812,   225,   811,   515,   225,
     812,   148,   200,   799,   225,   766,   515,   562,   515,   766,
     297,   561,   563,   466,   720,   862,   976,   978,   909,     3,
      37,    42,    49,    54,    55,    56,    57,    71,    72,    81,
      83,    89,   101,   112,   115,   165,   171,   173,   177,   194,
     209,   216,   217,   219,   222,   223,   225,   235,   237,   247,
     268,   269,   270,   278,   283,   300,   302,   322,   340,   362,
     366,   381,   388,   392,   395,   410,   419,   427,   428,   439,
     445,   462,   465,   637,   640,   825,   827,   828,   830,   832,
     834,   836,   838,   839,   840,   842,   843,   846,   847,   911,
     954,    40,   236,   561,   515,   513,   728,   464,   845,   862,
     926,   845,   845,   515,   515,   833,   833,   325,   728,   515,
     835,   521,    71,    72,   845,   862,   833,   515,   515,   479,
     501,   515,   848,   515,   848,   862,   862,   862,   148,   938,
     939,   862,   907,   908,   728,   862,   906,   562,   890,   891,
     892,     9,   567,   517,   564,   929,   564,   515,   563,   515,
     515,   563,   951,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    21,    36,    40,    46,    53,    80,   177,   194,
     199,   222,   223,   237,   275,   278,   292,   295,   392,   499,
     502,   503,   504,   506,   507,   508,   509,   510,   511,   898,
     899,   900,   902,   932,   478,   874,   302,   862,   519,   743,
     515,   563,   743,     3,   117,   241,   534,   563,   847,   977,
     104,   978,   978,   561,    40,   561,   516,   519,   677,   519,
     516,   741,   945,   946,    40,   957,   661,   193,   353,   220,
     621,   387,   730,   730,    30,   753,   754,   862,    59,   730,
     747,   164,   272,   773,   227,   273,   339,   390,   452,     4,
       9,    30,   768,   862,   506,   507,   769,   770,   862,   864,
     785,   786,   760,   759,   757,   758,   167,   788,   285,   790,
      59,   736,   737,   738,   800,   863,   936,   936,   757,   785,
     907,   236,   560,    74,    82,    93,   169,   192,   329,   446,
     561,   603,   613,   628,    82,    93,   726,    93,   726,   515,
     429,   515,   601,   245,   449,   601,    93,   519,   429,   560,
       3,   830,   534,    59,   536,   534,   534,   106,   251,   261,
      59,   429,   477,   501,   533,   266,   371,   533,   535,   814,
      93,   429,   726,   371,   560,   429,   371,   552,   561,   576,
     514,   525,   909,   909,   910,   519,   751,   752,    13,    14,
     222,   222,   429,   429,   561,   620,   625,   477,   579,   560,
     343,   382,   417,   467,   645,   378,   152,   100,   586,   649,
     654,   689,   985,   144,   827,   560,   275,   532,   655,   275,
     515,   621,    40,   275,   621,   275,   515,   646,   275,   199,
     653,   192,   561,   615,   693,   567,   152,   172,   671,   667,
     566,   517,   955,   945,   948,   948,   955,   516,   519,    13,
     679,   685,     4,   951,     4,   951,   563,   567,   578,   585,
      55,   102,   123,   141,   145,   168,   171,   187,   280,   288,
     310,   337,   582,   720,    40,   516,   862,   516,   172,   519,
     516,   318,   915,   516,   863,   863,    11,    15,    16,    19,
      20,    21,   199,   222,   292,   502,   503,   504,   506,   507,
     508,   509,   510,   511,   900,   863,   516,   816,   817,   871,
     167,   172,   918,   919,   519,   516,    40,   920,   907,   920,
     920,   172,   516,    40,   808,   515,   946,     4,     9,   561,
     761,   763,   764,   936,   934,   178,   241,   417,   421,   423,
     449,   560,   744,   474,   820,   797,   225,   797,   290,   455,
     813,   797,   225,   936,   797,   282,   282,   515,   797,   562,
     821,   822,   515,   562,   821,   561,   563,   519,   516,   519,
     517,   515,   830,   515,   515,   517,    39,   829,   515,   849,
     850,   851,   852,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   516,   519,   833,   568,   660,   696,   701,   724,
     727,   962,   979,   907,   908,   515,   473,   923,   924,   862,
     908,   951,   862,   893,   894,   895,   896,   845,   845,     8,
      15,    16,    19,    20,    21,   502,   503,   504,   506,   507,
     508,   509,   510,   511,   561,   898,   903,   516,   907,   427,
     427,   951,   951,   515,   561,   353,   943,   167,   514,   516,
     519,   525,   519,   522,   508,   565,   907,   951,   862,   861,
     861,   827,   862,   862,   862,   862,   862,   862,   862,   862,
       5,   567,   959,   427,    45,   414,   933,   955,   862,   862,
     515,   728,   921,   132,   160,   275,   280,   285,   436,   447,
     862,   280,   515,   862,   429,    53,   177,   194,   199,   237,
     392,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,    30,    38,   397,   897,   513,   517,   931,   181,   163,
     875,   366,   515,   889,   937,   172,   794,   909,   794,   515,
     563,   561,   560,   966,   549,   560,   862,   519,   516,   250,
     275,   742,   455,   663,   560,   698,   515,   561,   703,   713,
     714,   716,    41,   126,   755,   519,   455,   755,   266,   730,
     366,   367,   506,   507,   770,   772,   864,   390,   227,   291,
     313,   313,   519,   510,     4,   771,   951,   771,   366,   367,
     772,   560,   944,   279,   394,   791,   515,   946,   947,   519,
     181,   455,   199,   181,   220,   786,   758,   516,   351,   546,
     515,   192,   613,   948,   227,   275,   227,   455,   515,   606,
     826,   827,   948,   561,   192,   948,   192,   561,    26,   137,
     387,   542,   545,   567,   597,   611,   948,   567,   605,   624,
     948,   543,   948,   351,   387,   532,   546,   534,   955,   948,
     534,   955,   948,   534,   351,   387,   546,   948,   948,   948,
     948,   351,   387,   546,   948,   948,   563,   507,   862,   928,
     751,   751,   751,   463,   910,   193,   356,   750,   862,   862,
     280,   558,   563,   280,   558,   561,   334,   575,   516,   519,
     288,   172,   429,   570,   648,   467,   560,   560,   636,   560,
     560,   651,   560,   295,   632,   515,   728,   515,   152,   152,
     237,   561,   603,   613,   616,   619,   629,   631,   477,   479,
     608,   151,   727,   152,   477,   694,   152,   516,   909,    40,
     152,     3,   515,   275,   290,   561,     3,   668,   566,   668,
     290,   668,   673,   862,   576,   508,   515,   534,   577,   684,
     868,   516,   519,    40,   574,   563,   574,   275,   280,   337,
     574,    59,   574,   827,   516,   862,   862,   862,   918,   827,
     863,   863,   863,   863,   863,   863,   132,   275,   285,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   516,
     519,    40,   818,   862,   862,   919,   918,   827,   516,   516,
     516,   907,   827,   946,   516,   313,   510,   313,   367,   510,
     515,   515,   743,   421,   423,   421,   423,   560,   745,   745,
     745,   862,   181,   774,   813,   797,   862,   515,   797,   167,
     515,   562,   804,   813,   827,   516,   519,   821,   516,   976,
       3,   911,    39,   829,   561,   824,   824,     3,   513,   513,
     951,   429,   429,   429,   429,   827,   452,   516,   514,   907,
     862,   139,   924,   925,   516,   516,   516,   525,   519,   522,
     517,   516,   516,   498,   498,   516,   516,   946,   515,   862,
     940,   561,   862,   862,   890,   939,   516,   516,   516,   498,
     863,   863,   145,   907,   172,   132,   160,   280,   285,   436,
     447,   515,   145,   903,   862,   414,   933,   862,   921,   862,
     429,   515,   728,   862,   928,   566,   515,   515,   155,   876,
     795,   796,   820,   751,   820,   951,   861,   957,   957,   250,
     515,   796,   474,   662,    40,    59,   699,   709,   716,   929,
     519,   794,   504,   500,   756,   754,   292,   898,   901,   756,
       4,   951,   772,   291,   452,   769,   519,   244,   946,   736,
      59,   936,   515,   562,    59,   266,   429,   862,   275,   628,
     515,   152,   515,   606,   203,   625,   626,   587,    40,   176,
     596,   622,   587,    26,   137,   355,   357,   387,   539,   540,
     541,   547,   548,   152,   668,   152,   668,   597,   611,   597,
     516,   519,   563,   590,   504,   517,   516,   519,   429,   371,
      93,   429,   726,   371,   429,   429,   429,   371,   553,   525,
     514,   525,   750,   750,   750,   910,   282,   282,   516,   515,
     569,     3,   404,   405,   563,   584,   620,   575,   560,   655,
     515,    40,   621,   646,   653,   648,   353,   417,   563,   657,
     658,   625,   560,   560,   636,   560,   516,   519,   288,   601,
     288,   290,   600,   948,   477,   635,   560,   601,    40,   560,
     516,   417,   862,   651,   585,   152,   560,   671,   955,   572,
     583,   684,   578,   563,   563,   280,   625,   508,   625,   563,
     508,   625,   563,   516,   516,   919,   172,   132,   285,   515,
     819,   816,   515,   516,   516,   516,   561,   761,   820,   745,
     745,   745,   745,   560,   560,   560,    59,   186,   783,   813,
     946,   515,   801,   802,   803,   865,   867,   946,   167,    80,
     823,   822,   516,   516,   513,   827,   516,   519,   516,   951,
     514,   951,   516,   850,   852,   853,   854,   853,   854,   854,
     516,   425,   862,   143,   862,   893,   903,   848,   848,   516,
     862,   940,   941,   942,    40,   199,   516,   943,   861,   862,
      36,    36,   862,   516,   862,   172,   515,   911,   862,   516,
     145,   863,   863,   145,   145,   862,   862,   514,   525,   515,
     930,   752,   474,   862,   301,   880,   519,   774,   750,   774,
     516,   724,   862,   359,   707,   561,   266,   321,   117,   304,
     515,   697,   727,   516,   519,   703,   662,   862,   164,   231,
     515,   756,   291,   560,   516,   947,   181,   728,   729,   936,
     947,   948,   948,   516,   152,   626,   613,   626,   587,   615,
     519,   516,   119,   207,   273,   275,   612,   515,    33,    59,
     633,   622,    74,    80,    93,   117,   119,   207,   275,   280,
     329,   345,   446,   455,   592,   593,   607,   176,   117,   191,
     275,   601,   533,   107,   117,   176,   275,   403,   406,   535,
     601,   387,   541,   440,   948,   561,   545,     3,    37,    42,
      49,    55,    81,    83,    89,   101,   171,   173,   176,   177,
     194,   209,   222,   223,   225,   235,   237,   247,   269,   274,
     278,   292,   300,   302,   322,   362,   381,   388,   392,   410,
     419,   439,   445,   465,   506,   507,   534,   563,   588,   627,
     637,   643,   827,   901,   952,   567,   624,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   576,   928,   928,
     516,   516,   516,   751,   107,   371,   517,   533,   584,   515,
     619,   727,   694,    40,   515,   632,   192,   560,   516,   519,
     516,   655,   515,    40,   610,   608,   616,    86,   675,   107,
     273,   621,   727,   646,   727,   653,   516,   615,   455,   691,
     668,   516,   519,   625,   863,   172,   515,   911,   821,   516,
     519,   516,   774,   560,   560,   560,   560,    30,   103,   182,
     365,   515,   775,   776,   777,   778,   779,   780,   781,   862,
     862,   476,   877,   516,   864,   904,   905,   199,   181,   798,
     802,   516,   804,   805,   806,   955,   829,   951,   829,   561,
     829,   514,   514,   862,   519,   516,   561,   862,   864,   862,
     862,   862,   911,   516,   862,    36,    36,   862,   862,   145,
     516,   507,   928,   516,   909,   516,   862,   516,   515,   561,
     881,   783,   516,   783,   563,   516,   935,   461,   416,   454,
     708,   561,   702,   712,   290,   705,   504,   716,   707,   903,
      59,   516,   516,   460,   461,   733,   587,   613,   516,   516,
     477,   618,   120,   195,   205,   119,   457,   862,   117,    40,
     515,   955,   948,   863,   120,   195,   119,   280,   227,   560,
     618,    88,   633,   192,   280,   534,   862,   633,   280,   506,
     507,   537,   561,   827,   668,   668,     3,   247,   410,   952,
     956,   504,   429,   429,   514,   514,   750,   516,   516,   561,
     576,   455,   571,   573,   625,   516,   635,    40,   417,   862,
     585,   417,   275,   515,   563,   694,   619,   151,   727,   149,
     201,   600,   122,   137,   328,   635,   107,   694,   477,   986,
      40,   515,   290,   561,   690,   515,   583,   863,   911,   516,
     516,     9,   352,   767,   783,   515,   389,   515,   516,   519,
     561,   878,   879,   336,   784,   519,   516,   515,   562,    59,
     516,   199,   516,   805,   514,   827,   940,   514,   192,   516,
     862,   862,   862,   525,   514,   525,   516,   516,   561,   882,
     877,   563,   877,   519,   460,   929,   516,   519,    91,   707,
     862,   516,   947,   947,   345,   618,   515,   609,   587,   516,
     191,   515,   862,   275,   593,   618,   621,   948,    40,   152,
     823,   956,   510,   588,   948,   948,   516,   533,   124,   516,
     608,   727,   727,   516,   560,   152,    40,   516,   948,   635,
      30,    85,    94,   118,   191,   204,   403,   406,   604,   604,
     367,   367,    40,    64,    74,   241,   417,   862,   585,   560,
     515,   561,   706,   715,   871,   516,   516,   515,   877,   907,
     515,   907,   777,    40,   519,   862,   455,   762,   864,   936,
     946,   809,   515,   809,   862,   928,   928,   310,   883,   784,
     784,   727,   304,   727,   702,   290,   515,   700,   560,   587,
     567,   614,   617,   407,   469,   594,   595,   515,   589,   862,
     516,   249,   630,   191,   455,   544,   510,   440,   576,   563,
     694,   600,   986,   515,   560,   727,   608,   675,   727,    74,
     293,    74,   727,   516,   691,   862,    80,   710,   516,   519,
     710,     9,   784,   516,   776,   516,   881,   879,   369,   516,
     936,   514,   514,   514,    59,   751,   762,   762,   708,    93,
     715,   133,   621,   504,   516,   519,   532,   516,   273,   602,
     173,   309,   393,   290,   598,   599,   623,   589,   862,   440,
      40,   515,   986,   600,   635,   986,   293,   293,   515,   516,
     955,   711,   955,   694,   706,   711,   516,   762,   516,   764,
     516,   906,   184,   338,   367,   884,   460,   948,   516,   276,
     452,   630,   588,   617,   516,   595,   205,   122,   452,   290,
     623,   290,   598,   727,   715,   710,   755,   820,   755,    53,
     104,   442,   862,   885,   886,   885,   885,   516,   727,   820,
     387,   599,    63,   273,   358,   387,   591,   591,   986,   516,
     711,   756,   756,   886,   366,   166,   324,   166,   324,   148,
     887,   887,   887,   714,   587,    25,   117,   280,   694,   755,
      36,   104,   181,   273,   426,   820,   820,   756,   886,   366,
     298
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   526,   527,   528,   528,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   538,   538,   538,
     538,   538,   538,   538,   538,   539,   539,   540,   540,   541,
     541,   541,   541,   542,   542,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   544,   544,   545,   545,   545,   545,
     546,   546,   547,   548,   548,   548,   659,   659,   659,   659,
     560,   560,   561,   561,   561,   562,   562,   563,   564,   564,
     565,   566,   567,   567,   567,   567,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   726,
     726,   696,   697,   697,   697,   697,   697,   698,   698,   699,
     699,   699,   700,   700,   700,   701,   701,   702,   703,   703,
     704,   704,   704,   705,   705,   705,   706,   706,   706,   707,
     707,   708,   708,   709,   709,   710,   710,   711,   711,   712,
     712,   713,   713,   714,   714,   715,   715,   716,   656,   656,
     656,   657,   657,   658,   658,   721,   721,   721,   654,   654,
     654,   655,   655,   650,   650,   650,   651,   651,   652,   652,
     652,   653,   653,   963,   672,   672,   672,   673,   673,   674,
     674,   675,   675,   531,   531,   532,   532,   533,   533,   533,
     534,   534,   534,   534,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   536,   536,
     537,   537,   537,   670,   670,   671,   671,   960,   960,   960,
     960,   960,   960,   961,   961,   961,   964,   586,   586,   586,
     587,   587,   588,   588,   588,   588,   588,   588,   589,   589,
     590,   591,   591,   591,   591,   591,   592,   592,   592,   592,
     593,   593,   593,   593,   593,   593,   593,   593,   594,   594,
     595,   595,   596,   596,   596,   597,   598,   599,   599,   599,
     599,   599,   600,   600,   600,   600,   601,   602,   602,   603,
     603,   604,   604,   604,   604,   604,   604,   604,   604,   605,
     605,   606,   607,   607,   607,   607,   608,   608,   608,   608,
     609,   610,   610,   610,   611,   612,   612,   612,   612,   612,
     612,   613,   613,   614,   614,   615,   616,   616,   616,   617,
     617,   618,   618,   619,   619,   619,   620,   621,   621,   622,
     622,   623,   624,   624,   624,   624,   625,   625,   626,   626,
     627,   627,   627,   628,   628,   628,   628,   628,   628,   629,
     629,   630,   630,   630,   630,   631,   632,   632,   632,   632,
     632,   632,   632,   632,   633,   633,   664,   664,   664,   664,
     664,   664,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     666,   666,   666,   666,   666,   666,   667,   667,   668,   668,
     668,   669,   669,   669,   644,   644,   644,   644,   644,   644,
     645,   645,   646,   646,   962,   568,   568,   568,   569,   569,
     569,   570,   570,   571,   571,   572,   572,   573,   573,   574,
     574,   575,   575,   576,   576,   577,   577,   577,   577,   577,
     577,   578,   579,   579,   580,   580,   581,   581,   582,   582,
     582,   582,   582,   582,   582,   582,   582,   582,   582,   582,
     582,   582,   582,   582,   583,   584,   584,   584,   584,   584,
     585,   585,   727,   727,   728,   728,   728,   729,   729,   729,
     729,   729,   729,   729,   729,   730,   730,   731,   731,   732,
     732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   732,   732,   733,   733,
     734,   734,   735,   735,   736,   736,   736,   737,   737,   738,
     738,   739,   739,   739,   740,   740,   741,   742,   742,   742,
     743,   743,   744,   744,   744,   744,   744,   744,   744,   744,
     744,   745,   745,   746,   746,   746,   747,   748,   748,   749,
     749,   750,   750,   750,   751,   751,   752,   752,   753,   753,
     754,   754,   755,   755,   755,   756,   756,   756,   757,   757,
     757,   757,   758,   758,   759,   759,   759,   759,   760,   760,
     761,   761,   761,   761,   761,   761,   762,   762,   763,   763,
     764,   764,   764,   764,   765,   766,   766,   767,   767,   768,
     768,   768,   768,   768,   769,   770,   770,   770,   771,   771,
     772,   772,   773,   773,   774,   774,   774,   775,   775,   776,
     776,   777,   777,   777,   777,   777,   778,   779,   780,   781,
     782,   782,   783,   783,   784,   784,   785,   785,   786,   786,
     787,   787,   788,   789,   789,   789,   789,   790,   790,   791,
     791,   791,   792,   792,   793,   793,   794,   794,   795,   795,
     796,   796,   797,   797,   797,   797,   797,   797,   797,   797,
     797,   797,   798,   798,   799,   799,   799,   800,   800,   801,
     801,   801,   801,   802,   802,   803,   803,   804,   804,   805,
     806,   806,   807,   807,   807,   807,   807,   807,   807,   807,
     807,   807,   807,   808,   808,   808,   808,   809,   809,   810,
     810,   810,   810,   810,   811,   811,   811,   811,   811,   811,
     812,   812,   813,   813,   814,   814,   814,   814,   815,   815,
     816,   817,   817,   818,   818,   819,   819,   820,   820,   821,
     821,   822,   823,   823,   824,   824,   825,   825,   826,   826,
     827,   827,   827,   827,   827,   827,   827,   827,   827,   827,
     828,   828,   829,   829,   829,   830,   830,   830,   830,   830,
     830,   830,   831,   831,   831,   831,   832,   833,   833,   834,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   834,
     835,   835,   836,   836,   837,   837,   838,   839,   840,   840,
     841,   841,   842,   843,   844,   844,   844,   844,   844,   844,
     845,   845,   846,   846,   846,   846,   847,   848,   848,   848,
     849,   849,   850,   850,   851,   851,   852,   852,   853,   853,
     854,   854,   855,   855,   856,   856,   857,   857,   858,   858,
     859,   859,   860,   860,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   864,
     864,   865,   865,   865,   865,   865,   865,   866,   866,   866,
     867,   867,   867,   867,   867,   867,   867,   867,   867,   867,
     867,   867,   868,   869,   869,   869,   869,   869,   869,   870,
     870,   871,   871,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   873,   873,   874,
     874,   875,   875,   875,   876,   876,   877,   877,   878,   878,
     879,   880,   880,   880,   881,   882,   882,   883,   883,   884,
     884,   884,   884,   885,   885,   886,   886,   886,   886,   886,
     887,   887,   887,   887,   887,   888,   888,   889,   889,   890,
     891,   891,   892,   892,   893,   894,   894,   895,   895,   896,
     896,   897,   897,   897,   898,   898,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     900,   900,   901,   901,   902,   902,   902,   902,   902,   902,
     902,   902,   903,   903,   904,   904,   905,   905,   906,   906,
     907,   907,   908,   908,   909,   909,   910,   910,   910,   911,
     911,   912,   912,   913,   913,   913,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   914,   914,   915,
     916,   916,   917,   917,   917,   917,   917,   917,   918,   919,
     920,   920,   920,   921,   921,   922,   923,   923,   924,   925,
     925,   926,   926,   927,   927,   565,   565,   565,   565,   928,
     928,   929,   929,   930,   930,   930,   931,   931,   931,   931,
     931,   932,   932,   933,   933,   934,   934,   935,   935,   936,
     936,   937,   937,   937,   938,   938,   939,   939,   940,   941,
     941,   942,   942,   943,   943,   943,   944,   944,   945,   945,
     946,   946,   947,   947,   948,   949,   949,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   951,   952,   952,   952,   953,   953,   953,   954,   954,
     954,   955,   955,   956,   956,   957,   957,   958,   959,   959,
     722,   723,   723,   724,   724,   724,   724,   724,   724,   647,
     647,   647,   648,   648,   649,   649,   649,   649,   689,   689,
     690,   691,   691,   692,   692,   693,   693,   694,   694,   695,
     695,   530,   530,   530,   530,   530,   530,   555,   555,   556,
     556,   557,   557,   558,   558,   559,   559,   559,   559,   559,
     559,   559,   559,   559,   559,   687,   687,   688,   676,   676,
     676,   676,   677,   677,   678,   678,   678,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   680,   680,
     680,   681,   681,   682,   682,   683,   683,   684,   684,   684,
     684,   685,   686,   686,   973,   973,   973,   973,   974,   974,
     974,   974,   975,   975,   976,   977,   977,   977,   977,   977,
     977,   977,   978,   978,   717,   717,   717,   718,   718,   719,
     719,   719,   720,   720,   720,   965,   965,   965,   965,   965,
     966,   966,   966,   966,   966,   967,   967,   968,   968,   969,
     969,   660,   660,   661,   661,   661,   662,   662,   663,   663,
     549,   549,   550,   550,   551,   551,   551,   552,   552,   553,
     553,   970,   970,   970,   970,   971,   971,   972,   972,   972,
     979,   979,   979,   979,   979,   979,   979,   979,   980,   980,
     981,   981,   982,   982,   983,   983,   984,   984,   554,   985,
     985,   985,   985,   985,   986,   986,   986,   986,   634,   634,
     634,   635,   635,   635,   636,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     9,     1,     4,     4,     7,     2,     1,     3,     2,
       2,     0,     4,     3,     0,     1,     0,     2,     3,     5,
       2,     2,     0,     8,     5,     0,     5,     5,     7,     2,
       0,     1,     1,     1,     3,     2,     0,     1,     0,     1,
       3,     1,     3,     1,     2,     1,     3,     2,     6,     8,
       5,     1,     0,     1,     3,     2,     4,     5,     5,     8,
       7,     1,     0,     8,    11,    10,     0,     1,     0,     1,
       1,     0,     2,     4,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     5,     7,     0,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     8,    11,    10,     7,    10,     9,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     1,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     3,     1,
       1,     3,     1,     1,     3,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     7,     1,     2,     0,
       2,     0,     3,     3,     4,     4,     4,     4,     3,     2,
       1,     1,     0,     1,     1,     0,     2,     1,     5,     1,
       0,     2,     2,     0,     1,     0,     3,     5,     1,     3,
       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     3,     0,     1,     3,     1,
       2,     1,     1,     1,     1,     1,     2,     4,     4,     5,
       1,     1,     2,     0,     2,     0,     1,     3,     1,     0,
       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,
       2,     0,     4,     5,     1,     2,     2,     0,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     1,     4,
       9,     9,     3,     0,     2,     2,     0,     5,     3,     0,
       1,     1,     3,     5,     3,     1,     2,     1,     3,     5,
       1,     2,     3,     4,     5,     4,     5,     4,     6,     5,
       4,     5,     5,     5,     2,     4,     1,     1,     0,     1,
       4,     5,     4,     0,     2,     2,     2,     1,     1,     1,
       1,     0,     4,     2,     1,     2,     2,     4,     2,     6,
       2,     1,     3,     4,     0,     2,     0,     2,     0,     1,
       3,     3,     2,     0,     2,     4,     1,     1,     1,     0,
       2,     3,     5,     6,     2,     3,     1,     5,     5,     5,
       3,     3,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     4,     1,     1,     1,     1,     2,     3,     0,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       3,     0,     1,     1,     1,     1,     5,     2,     1,     1,
       1,     1,     4,     1,     2,     2,     1,     3,     3,     2,
       1,     0,     5,     2,     5,     2,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     4,     3,     5,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     5,     6,     6,     7,     1,
       2,     1,     1,     1,     2,     2,     4,     3,     1,     1,
       1,     1,     1,     4,     1,     1,     3,     1,     2,     4,
       2,     2,     3,     3,     6,     7,     9,     7,     7,     5,
       1,     1,     1,     5,     6,     6,     4,     4,     4,     4,
       6,     5,     5,     5,     4,     6,     4,     7,     9,     5,
       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     3,
       3,     3,     0,     1,     4,     2,     2,     2,     2,     2,
       3,     2,     2,     3,     0,     4,     3,     1,     5,     3,
       1,     3,     1,     2,     3,     1,     3,     1,     2,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     2,     1,     3,
       1,     2,     1,     0,     1,     3,     1,     3,     3,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
       0,     1,     0,     1,     2,     3,     5,     7,     7,     1,
       0,     0,     2,     0,     2,     3,     3,     3,     5,     7,
       7,     0,     2,     1,     0,     1,     0,     1,     3,     1,
       2,     3,     2,     1,     4,     2,     1,     0,     3,     1,
       3,     1,     2,     4,     2,     0,     1,     3,     1,     3,
       1,     2,     1,     3,     1,     1,     2,     1,     1,     2,
       1,     1,     2,     7,     2,     5,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     3,     0,     1,     1,     1,
       5,     3,     0,     1,     1,     1,     1,     1,     1,     4,
       7,     6,     2,     0,     1,     1,     1,     1,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     6,     8,     6,     8,     6,     8,     3,     2,     1,
       0,     6,     6,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     4,     6,     3,     2,     4,
       3,     5,     1,     0,     1,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     3,     3,     3,     1,     3,
       3,     2,     3,     3,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     3,     2,     4,     5,     1,     1,     0,
       2,     2,     0,     2,     2,     4,     6,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     7,     3,     1,     2,     3,     2,     0,     2,     0,
       2,     4,     5,     8,     2,     3,     5,     1,     0,     2,
       0,     2,     3,     3,     3,     1,     1,     1,     2,     3,
       2,     2,     2,     2,     3,     4,     3,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     3,     2,     9,
      12,    11,    12,    14,     3,     4,     4,     0,     7,    10,
       9,     2,     3,     0,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 506 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 522 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 534 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 584 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 20651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 20682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 21032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 22527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: '*'  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: struct_expr  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: %empty  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 127 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* opt_oids: WITH OIDS  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 143 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: %empty  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_binary: BINARY  */
#line 150 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: %empty  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: BINARY  */
#line 159 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: OIDS  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: FREEZE  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: CSV  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: HEADER_P  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: FORCE QUOTE columnList  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE '*'  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: PARTITION BY columnList  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY '*'  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NULL_P columnList  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: ENCODING Sconst  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_file_name: Sconst  */
#line 231 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: STDIN  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDOUT  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_file_name: IDENT '.' ColId  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_file_name: IDENT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 242 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 246 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 23887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_pivot_group_by: %empty  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_include_nulls: %empty  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_header: d_expr  */
#line 1133 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_header: indirection_expr  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* pivot_value_list: pivot_value  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* unpivot_header: ColIdOrString  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1172 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* unpivot_value_list: unpivot_value  */
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: '(' joined_table ')'  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 25067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* alias_clause: AS ColIdOrString  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* alias_clause: ColId  */
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_alias_clause: alias_clause  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_alias_clause: %empty  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* func_alias_clause: alias_clause  */
#line 1389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* func_alias_clause: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_type: FULL join_outer  */
#line 1414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_type: LEFT join_outer  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_type: RIGHT join_outer  */
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_type: SEMI  */
#line 1417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_type: ANTI  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 25211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* join_type: INNER_P  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* join_outer: OUTER_P  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* join_outer: %empty  */
#line 1424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* join_qual: ON a_expr  */
#line 1437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* relation_expr: qualified_name  */
#line 1443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* relation_expr: qualified_name '*'  */
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* relation_expr: ONLY qualified_name  */
#line 1457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* func_table: func_expr_windowless opt_ordinality  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* rowsfrom_list: rowsfrom_item  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* opt_col_def_list: %empty  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_ordinality: %empty  */
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* where_clause: WHERE a_expr  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* where_clause: %empty  */
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* TableFuncElementList: TableFuncElement  */
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_collate_clause: COLLATE any_name  */
#line 1576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_collate_clause: %empty  */
#line 1583 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* colid_type_list: ColId Typename  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* opt_Typename: Typename  */
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_Typename: %empty  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: SimpleTypename opt_array_bounds  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Typename: SimpleTypename ARRAY  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* Typename: qualified_typename  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* qualified_typename: IDENT '.' IDENT  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 25557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* opt_array_bounds: %empty  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* SimpleTypename: GenericType  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SimpleTypename: Numeric  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SimpleTypename: Bit  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* SimpleTypename: Character  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* SimpleTypename: ConstDatetime  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* SimpleTypename: ConstInterval opt_interval  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* ConstTypename: Numeric  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* ConstTypename: ConstBit  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* ConstTypename: ConstCharacter  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* ConstTypename: ConstDatetime  */
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* GenericType: type_name_token opt_type_modifiers  */
#line 1730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* opt_type_modifiers: %empty  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Numeric: INT_P  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: INTEGER  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: SMALLINT  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Numeric: BIGINT  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Numeric: REAL  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Numeric: FLOAT_P opt_float  */
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Numeric: DOUBLE_P PRECISION  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Numeric: DEC opt_type_modifiers  */
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Numeric: BOOLEAN_P  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* opt_float: '(' Iconst ')'  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* opt_float: %empty  */
#line 1832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* Bit: BitWithLength  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* Bit: BitWithoutLength  */
#line 1846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* ConstBit: BitWithLength  */
#line 1854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* ConstBit: BitWithoutLength  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* BitWithoutLength: BIT opt_varying  */
#line 1878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* Character: CharacterWithLength  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* Character: CharacterWithoutLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* ConstCharacter: CharacterWithLength  */
#line 1909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* ConstCharacter: CharacterWithoutLength  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* CharacterWithoutLength: character  */
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* character: CHARACTER opt_varying  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* character: CHAR_P opt_varying  */
#line 1946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* character: VARCHAR  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* character: NATIONAL CHARACTER opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* character: NATIONAL CHAR_P opt_varying  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* character: NCHAR opt_varying  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_varying: VARYING  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_varying: %empty  */
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1967 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* ConstDatetime: TIME opt_timezone  */
#line 1993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* ConstInterval: INTERVAL  */
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 26049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 26055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_timezone: %empty  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_interval: year_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 26067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_interval: month_keyword  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 26073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_interval: day_keyword  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 26079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: hour_keyword  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 26085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* opt_interval: minute_keyword  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 26091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_interval: second_keyword  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_interval: millisecond_keyword  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 26103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_interval: microsecond_keyword  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* opt_interval: week_keyword  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 26115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_interval: decade_keyword  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 26121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_interval: century_keyword  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 26127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_interval: millennium_keyword  */
#line 2076 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 26133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_interval: year_keyword TO month_keyword  */
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_interval: day_keyword TO hour_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* opt_interval: day_keyword TO minute_keyword  */
#line 2088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_interval: day_keyword TO second_keyword  */
#line 2094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* opt_interval: hour_keyword TO second_keyword  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* opt_interval: minute_keyword TO second_keyword  */
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* opt_interval: %empty  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: c_expr  */
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr TYPECAST Typename  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr COLLATE any_name  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: '+' a_expr  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: '-' a_expr  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr '+' a_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr '-' a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr '*' a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr '/' a_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr '%' a_expr  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr '^' a_expr  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr POWER_OF a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr '<' a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr '>' a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr '=' a_expr  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr qual_Op a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: qual_Op a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr qual_Op  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr AND a_expr  */
#line 2216 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr OR a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: NOT a_expr  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: NOT_LA a_expr  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr GLOB a_expr  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr LIKE a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2246 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr ILIKE a_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr IS NULL_P  */
#line 2320 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr ISNULL  */
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr IS NOT NULL_P  */
#line 2336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr NOT NULL_P  */
#line 2344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr NOTNULL  */
#line 2352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2368 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: row OVERLAPS row  */
#line 2372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr IS TRUE_P  */
#line 2388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr IS FALSE_P  */
#line 2404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr IS UNKNOWN  */
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* a_expr: a_expr IN_P in_expr  */
#line 2484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* a_expr: DEFAULT  */
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: c_expr  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr TYPECAST Typename  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: '+' b_expr  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: '-' b_expr  */
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr '+' b_expr  */
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr '-' b_expr  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: b_expr '*' b_expr  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: b_expr '/' b_expr  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* b_expr: b_expr '%' b_expr  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* b_expr: b_expr '^' b_expr  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* b_expr: b_expr POWER_OF b_expr  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* b_expr: b_expr '<' b_expr  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* b_expr: b_expr '>' b_expr  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* b_expr: b_expr '=' b_expr  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* b_expr: b_expr qual_Op b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* b_expr: qual_Op b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* b_expr: b_expr qual_Op  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 27072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* d_expr: columnref  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* d_expr: AexprConst  */
#line 2677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* d_expr: select_with_parens  */
#line 2679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* d_expr: select_with_parens indirection  */
#line 2690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* d_expr: EXISTS select_with_parens  */
#line 2714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2725 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* indirection_expr_or_a_expr: row  */
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 27178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* indirection_expr: '?'  */
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* indirection_expr: PARAM  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* indirection_expr: struct_expr  */
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* indirection_expr: func_expr  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* indirection_expr: case_expr  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* indirection_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* indirection_expr: list_comprehension  */
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 27257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* indirection_expr: ARRAY select_with_parens  */
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* indirection_expr: '#' ICONST  */
#line 2811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* indirection_expr: '$' ColLabel  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 27301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2826 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_application: func_name '(' ')'  */
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* func_expr: func_expr_common_subexpr  */
#line 2929 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* func_expr_windowless: func_application  */
#line 2939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2940 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* within_group_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* filter_clause: %empty  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* export_clause: EXPORT_STATE  */
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* export_clause: %empty  */
#line 3073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* window_clause: WINDOW window_definition_list  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* window_clause: %empty  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* window_definition_list: window_definition  */
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3087 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* window_definition: ColId AS window_specification  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* over_clause: OVER window_specification  */
#line 3100 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* over_clause: OVER ColId  */
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* over_clause: %empty  */
#line 3115 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* opt_existing_window_name: ColId  */
#line 3145 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* opt_existing_window_name: %empty  */
#line 3146 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_partition_clause: %empty  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* opt_frame_clause: %empty  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* frame_extent: frame_bound  */
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* frame_bound: CURRENT_P ROW  */
#line 3276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* frame_bound: a_expr PRECEDING  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* frame_bound: a_expr FOLLOWING  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* opt_window_exclusion_clause: %empty  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* qualified_row: ROW '(' ')'  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* row: qualified_row  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* row: '(' expr_list ',' a_expr ')'  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* dict_arguments: dict_arg  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* dict_arguments_opt_comma: dict_arguments  */
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* map_arg: a_expr ':' a_expr  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 28030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* map_arguments: map_arg  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* map_arguments: map_arguments ',' map_arg  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* map_arguments_opt_comma: map_arguments  */
#line 3365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* map_arguments_opt_comma: map_arguments ','  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* opt_map_arguments_opt_comma: %empty  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 28066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* sub_type: ANY  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* sub_type: SOME  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* sub_type: ALL  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 28084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* all_Op: Op  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* all_Op: MathOp  */
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 28096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* MathOp: '+'  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 28102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* MathOp: '-'  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* MathOp: '*'  */
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 28114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* MathOp: '/'  */
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 28120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* MathOp: INTEGER_DIVISION  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 28126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* MathOp: '%'  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 28132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* MathOp: '^'  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 28138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* MathOp: POWER_OF  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 28144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* MathOp: '<'  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 28150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* MathOp: '>'  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* MathOp: '='  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 28162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* MathOp: LESS_EQUALS  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* MathOp: GREATER_EQUALS  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* MathOp: NOT_EQUALS  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 28180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* qual_Op: Op  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* qual_all_Op: all_Op  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3410 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* subquery_Op: all_Op  */
#line 3415 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* subquery_Op: LIKE  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* subquery_Op: NOT_LA LIKE  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* subquery_Op: GLOB  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* subquery_Op: NOT_LA GLOB  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* subquery_Op: ILIKE  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* subquery_Op: NOT_LA ILIKE  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* any_operator: all_Op  */
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* any_operator: ColId '.' any_operator  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* c_expr_list: c_expr  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* c_expr_list_opt_comma: c_expr_list  */
#line 3461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* expr_list: a_expr  */
#line 3472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* expr_list: expr_list ',' a_expr  */
#line 3476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* expr_list_opt_comma: expr_list  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* expr_list_opt_comma: expr_list ','  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* opt_expr_list_opt_comma: %empty  */
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* func_arg_list: func_arg_expr  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* func_arg_expr: a_expr  */
#line 3518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* type_list: Typename  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* type_list: type_list ',' Typename  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* extract_list: extract_arg FROM a_expr  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* extract_list: %empty  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* extract_arg: IDENT  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* extract_arg: year_keyword  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* extract_arg: month_keyword  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* extract_arg: day_keyword  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* extract_arg: hour_keyword  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* extract_arg: minute_keyword  */
#line 3562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* extract_arg: second_keyword  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* extract_arg: millisecond_keyword  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* extract_arg: microsecond_keyword  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* extract_arg: week_keyword  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 28480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* extract_arg: decade_keyword  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* extract_arg: century_keyword  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 28492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* extract_arg: millennium_keyword  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 28498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* extract_arg: Sconst  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3585 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* overlay_placing: PLACING a_expr  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* position_list: b_expr IN_P b_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 28532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* position_list: %empty  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* substr_list: a_expr substr_from substr_for  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* substr_list: a_expr substr_for substr_from  */
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* substr_list: a_expr substr_from  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* substr_list: a_expr substr_for  */
#line 3629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* substr_list: expr_list  */
#line 3644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* substr_list: %empty  */
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* substr_from: FROM a_expr  */
#line 3652 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* substr_for: FOR a_expr  */
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* trim_list: FROM expr_list_opt_comma  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* trim_list: expr_list_opt_comma  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* in_expr: select_with_parens  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* when_clause_list: when_clause  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* when_clause_list: when_clause_list when_clause  */
#line 3695 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* case_default: ELSE a_expr  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* case_default: %empty  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* case_arg: a_expr  */
#line 3714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* case_arg: %empty  */
#line 3715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* columnref: ColId  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* columnref: ColId indirection  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* indirection_el: '[' a_expr ']'  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3753 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_slice_bound: a_expr  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_slice_bound: %empty  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_indirection: %empty  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_indirection: opt_indirection indirection_el  */
#line 3770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* opt_func_arguments: %empty  */
#line 3774 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* opt_func_arguments: '(' ')'  */
#line 3775 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3776 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* extended_indirection_el: '[' a_expr ']'  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3805 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* opt_extended_indirection: %empty  */
#line 3829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* opt_target_list_opt_comma: %empty  */
#line 3847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* target_list: target_el  */
#line 3851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* target_list: target_list ',' target_el  */
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* target_list_opt_comma: target_list  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* target_list_opt_comma: target_list ','  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* target_el: a_expr AS ColLabelOrString  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* target_el: a_expr IDENT  */
#line 3877 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* target_el: a_expr  */
#line 3885 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* except_list: EXCLUDE ColId  */
#line 3895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* opt_except_list: except_list  */
#line 3898 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* opt_except_list: %empty  */
#line 3899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* replace_list_el: a_expr AS ColId  */
#line 3902 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* replace_list: replace_list_el  */
#line 3906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* replace_list: replace_list ',' replace_list_el  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* replace_list_opt_comma: replace_list  */
#line 3911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* replace_list_opt_comma: replace_list ','  */
#line 3912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3915 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* opt_replace_list: REPLACE replace_list_el  */
#line 3916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* opt_replace_list: %empty  */
#line 3917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* qualified_name_list: qualified_name  */
#line 3927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 29036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3928 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* name_list: name  */
#line 3933 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* name_list: name_list ',' name  */
#line 3935 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* name_list_opt_comma: name_list  */
#line 3940 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* name_list_opt_comma: name_list ','  */
#line 3941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* name: ColIdOrString  */
#line 3949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* func_name: function_name_token  */
#line 3961 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* func_name: ColId indirection  */
#line 3964 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 29099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* AexprConst: Iconst  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 29107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* AexprConst: FCONST  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* AexprConst: Sconst opt_indirection  */
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* AexprConst: BCONST  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* AexprConst: XCONST  */
#line 3999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* AexprConst: func_name Sconst  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4015 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* AexprConst: ConstTypename Sconst  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 29213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 29221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* AexprConst: TRUE_P  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* AexprConst: FALSE_P  */
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 29253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* AexprConst: NULL_P  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 29261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* Iconst: ICONST  */
#line 4082 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* type_function_name: IDENT  */
#line 4099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* type_function_name: unreserved_keyword  */
#line 4100 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* type_function_name: type_func_name_keyword  */
#line 4101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* function_name_token: IDENT  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* function_name_token: unreserved_keyword  */
#line 4105 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* function_name_token: func_name_keyword  */
#line 4106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* type_name_token: IDENT  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* type_name_token: unreserved_keyword  */
#line 4110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* type_name_token: type_name_keyword  */
#line 4111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* any_name: ColId  */
#line 4114 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* any_name: ColId attrs  */
#line 4115 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* attrs: '.' attr_name  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* attrs: attrs '.' attr_name  */
#line 4121 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4125 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* opt_name_list: %empty  */
#line 4126 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* ColLabelOrString: ColLabel  */
#line 4133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* ColLabelOrString: SCONST  */
#line 4134 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 29727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 29739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 29751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 29757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 29781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 29793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 29799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 29805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 29811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* NonReservedWord: IDENT  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* NonReservedWord: unreserved_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* NonReservedWord: other_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 30004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 30030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 30040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 30060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 30087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 30114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 30179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 30196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->version = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 30233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* LoadStmt: INSTALL file_name opt_from_repo opt_ext_version  */
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-2].str);
                    n->repository = (yyvsp[-1].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 30246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* LoadStmt: FORCE INSTALL file_name opt_from_repo opt_ext_version  */
#line 24 "third_party/libpg_query/grammar/statements/load.y"
                                                                                      {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[-1].str);
                      n->version = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* file_name: Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* file_name: ColId  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* opt_from_repo: %empty  */
#line 41 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* opt_from_repo: FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/load.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* opt_from_repo: FROM ColId  */
#line 43 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_ext_version: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_ext_version: VERSION_P Sconst  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_ext_version: VERSION_P ColId  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 30661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 30709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 31038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 31058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 31062 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
