/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 157,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 158,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 159,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 160,                   /* FAMILY  */
  YYSYMBOL_FETCH = 161,                    /* FETCH  */
  YYSYMBOL_FILTER = 162,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 163,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 164,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 165,                /* FOLLOWING  */
  YYSYMBOL_FOR = 166,                      /* FOR  */
  YYSYMBOL_FORCE = 167,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 168,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 169,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 170,                   /* FREEZE  */
  YYSYMBOL_FROM = 171,                     /* FROM  */
  YYSYMBOL_FULL = 172,                     /* FULL  */
  YYSYMBOL_FUNCTION = 173,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 174,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 175,                /* GENERATED  */
  YYSYMBOL_GLOB = 176,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 177,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 178,                    /* GRANT  */
  YYSYMBOL_GRANTED = 179,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 180,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 181,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 182,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 183,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 184,                  /* HANDLER  */
  YYSYMBOL_HAVING = 185,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 186,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 187,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 188,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 189,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 190,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 191,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 192,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 193,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 194,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 195,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 196,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 197,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 198,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 199,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 200,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 201,                /* INCREMENT  */
  YYSYMBOL_INDEX = 202,                    /* INDEX  */
  YYSYMBOL_INDEXES = 203,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 204,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 205,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 206,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 207,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 208,                  /* INNER_P  */
  YYSYMBOL_INOUT = 209,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 210,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 211,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 212,                   /* INSERT  */
  YYSYMBOL_INSTALL = 213,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 214,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 215,                    /* INT_P  */
  YYSYMBOL_INTEGER = 216,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 217,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 218,                 /* INTERVAL  */
  YYSYMBOL_INTO = 219,                     /* INTO  */
  YYSYMBOL_INVOKER = 220,                  /* INVOKER  */
  YYSYMBOL_IS = 221,                       /* IS  */
  YYSYMBOL_ISNULL = 222,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 223,                /* ISOLATION  */
  YYSYMBOL_JOIN = 224,                     /* JOIN  */
  YYSYMBOL_JSON = 225,                     /* JSON  */
  YYSYMBOL_KEY = 226,                      /* KEY  */
  YYSYMBOL_LABEL = 227,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 228,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 229,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 230,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 231,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 232,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 233,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 234,                     /* LEFT  */
  YYSYMBOL_LEVEL = 235,                    /* LEVEL  */
  YYSYMBOL_LIKE = 236,                     /* LIKE  */
  YYSYMBOL_LIMIT = 237,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 238,                   /* LISTEN  */
  YYSYMBOL_LOAD = 239,                     /* LOAD  */
  YYSYMBOL_LOCAL = 240,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 241,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 242,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 243,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 244,                   /* LOGGED  */
  YYSYMBOL_MACRO = 245,                    /* MACRO  */
  YYSYMBOL_MAP = 246,                      /* MAP  */
  YYSYMBOL_MAPPING = 247,                  /* MAPPING  */
  YYSYMBOL_MATCH = 248,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 249,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 250,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 251,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 252,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 253,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 254,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 255,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 256,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 257,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 258,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 259,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 260,                 /* MINVALUE  */
  YYSYMBOL_MODE = 261,                     /* MODE  */
  YYSYMBOL_MONTH_P = 262,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 263,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 264,                     /* MOVE  */
  YYSYMBOL_NAME_P = 265,                   /* NAME_P  */
  YYSYMBOL_NAMES = 266,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 267,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 268,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 269,                    /* NCHAR  */
  YYSYMBOL_NEW = 270,                      /* NEW  */
  YYSYMBOL_NEXT = 271,                     /* NEXT  */
  YYSYMBOL_NO = 272,                       /* NO  */
  YYSYMBOL_NONE = 273,                     /* NONE  */
  YYSYMBOL_NOT = 274,                      /* NOT  */
  YYSYMBOL_NOTHING = 275,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 276,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 277,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 278,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 279,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 280,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 281,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 282,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 283,                 /* OBJECT_P  */
  YYSYMBOL_OF = 284,                       /* OF  */
  YYSYMBOL_OFF = 285,                      /* OFF  */
  YYSYMBOL_OFFSET = 286,                   /* OFFSET  */
  YYSYMBOL_OIDS = 287,                     /* OIDS  */
  YYSYMBOL_OLD = 288,                      /* OLD  */
  YYSYMBOL_ON = 289,                       /* ON  */
  YYSYMBOL_ONLY = 290,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 291,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 292,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 293,                  /* OPTIONS  */
  YYSYMBOL_OR = 294,                       /* OR  */
  YYSYMBOL_ORDER = 295,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 296,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 297,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 298,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 299,                  /* OUTER_P  */
  YYSYMBOL_OVER = 300,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 301,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 302,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 303,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 304,                    /* OWNED  */
  YYSYMBOL_OWNER = 305,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 306,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 307,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 308,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 309,                /* PARTITION  */
  YYSYMBOL_PASSING = 310,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 311,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 312,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 313,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 314,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 315,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 316,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 317,                  /* PLACING  */
  YYSYMBOL_PLANS = 318,                    /* PLANS  */
  YYSYMBOL_POLICY = 319,                   /* POLICY  */
  YYSYMBOL_POSITION = 320,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 321,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 322,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 323,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 324,                /* PRECISION  */
  YYSYMBOL_PREPARE = 325,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 326,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 327,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 328,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 329,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 330,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 331,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 332,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 333,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 334,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 335,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 336,                    /* QUOTE  */
  YYSYMBOL_RANGE = 337,                    /* RANGE  */
  YYSYMBOL_READ_P = 338,                   /* READ_P  */
  YYSYMBOL_REAL = 339,                     /* REAL  */
  YYSYMBOL_REASSIGN = 340,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 341,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 342,                /* RECURSIVE  */
  YYSYMBOL_REF = 343,                      /* REF  */
  YYSYMBOL_REFERENCES = 344,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 345,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 346,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 347,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 348,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 349,                  /* RELEASE  */
  YYSYMBOL_RENAME = 350,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 351,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 352,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 353,                  /* REPLICA  */
  YYSYMBOL_RESET = 354,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 355,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 356,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 357,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 358,                /* RETURNING  */
  YYSYMBOL_RETURNS = 359,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 360,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 361,                    /* RIGHT  */
  YYSYMBOL_ROLE = 362,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 363,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 364,                   /* ROLLUP  */
  YYSYMBOL_ROW = 365,                      /* ROW  */
  YYSYMBOL_ROWS = 366,                     /* ROWS  */
  YYSYMBOL_RULE = 367,                     /* RULE  */
  YYSYMBOL_SAMPLE = 368,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 369,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 370,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 371,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 372,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 373,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 374,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 375,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 376,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 377,                   /* SECRET  */
  YYSYMBOL_SECURITY = 378,                 /* SECURITY  */
  YYSYMBOL_SELECT = 379,                   /* SELECT  */
  YYSYMBOL_SEMI = 380,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 381,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 382,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 383,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 384,                   /* SERVER  */
  YYSYMBOL_SESSION = 385,                  /* SESSION  */
  YYSYMBOL_SET = 386,                      /* SET  */
  YYSYMBOL_SETOF = 387,                    /* SETOF  */
  YYSYMBOL_SETS = 388,                     /* SETS  */
  YYSYMBOL_SHARE = 389,                    /* SHARE  */
  YYSYMBOL_SHOW = 390,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 391,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 392,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 393,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 394,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 395,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 396,                     /* SOME  */
  YYSYMBOL_SQL_P = 397,                    /* SQL_P  */
  YYSYMBOL_STABLE = 398,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 399,             /* STANDALONE_P  */
  YYSYMBOL_START = 400,                    /* START  */
  YYSYMBOL_STATEMENT = 401,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 402,               /* STATISTICS  */
  YYSYMBOL_STDIN = 403,                    /* STDIN  */
  YYSYMBOL_STDOUT = 404,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 405,                  /* STORAGE  */
  YYSYMBOL_STORED = 406,                   /* STORED  */
  YYSYMBOL_STRICT_P = 407,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 408,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 409,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 410,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 411,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 412,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 413,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 414,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 415,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 416,                    /* TABLE  */
  YYSYMBOL_TABLES = 417,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 418,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 419,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 420,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 421,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 422,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 423,                   /* TEXT_P  */
  YYSYMBOL_THEN = 424,                     /* THEN  */
  YYSYMBOL_TIES = 425,                     /* TIES  */
  YYSYMBOL_TIME = 426,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 427,                /* TIMESTAMP  */
  YYSYMBOL_TO = 428,                       /* TO  */
  YYSYMBOL_TRAILING = 429,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 430,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 431,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 432,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 433,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 434,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 435,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 436,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 437,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 438,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 439,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 440,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 441,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 442,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 443,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 444,                    /* UNION  */
  YYSYMBOL_UNIQUE = 445,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 446,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 447,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 448,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 449,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 450,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 451,                   /* UPDATE  */
  YYSYMBOL_USE_P = 452,                    /* USE_P  */
  YYSYMBOL_USER = 453,                     /* USER  */
  YYSYMBOL_USING = 454,                    /* USING  */
  YYSYMBOL_VACUUM = 455,                   /* VACUUM  */
  YYSYMBOL_VALID = 456,                    /* VALID  */
  YYSYMBOL_VALIDATE = 457,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 458,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 459,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 460,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 461,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 462,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 463,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 464,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 465,                /* VERSION_P  */
  YYSYMBOL_VIEW = 466,                     /* VIEW  */
  YYSYMBOL_VIEWS = 467,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 468,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 469,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 470,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 471,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 472,                     /* WHEN  */
  YYSYMBOL_WHERE = 473,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 474,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 475,                   /* WINDOW  */
  YYSYMBOL_WITH = 476,                     /* WITH  */
  YYSYMBOL_WITHIN = 477,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 478,                  /* WITHOUT  */
  YYSYMBOL_WORK = 479,                     /* WORK  */
  YYSYMBOL_WRAPPER = 480,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 481,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 482,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 483,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 484,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 485,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 486,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 487,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 488,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 489,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 490,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 491,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 492,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 493,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 494,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 495,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 496,                    /* YES_P  */
  YYSYMBOL_ZONE = 497,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 498,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 499,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 500,                  /* WITH_LA  */
  YYSYMBOL_501_ = 501,                     /* '<'  */
  YYSYMBOL_502_ = 502,                     /* '>'  */
  YYSYMBOL_503_ = 503,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 504,                /* POSTFIXOP  */
  YYSYMBOL_505_ = 505,                     /* '+'  */
  YYSYMBOL_506_ = 506,                     /* '-'  */
  YYSYMBOL_507_ = 507,                     /* '*'  */
  YYSYMBOL_508_ = 508,                     /* '/'  */
  YYSYMBOL_509_ = 509,                     /* '%'  */
  YYSYMBOL_510_ = 510,                     /* '^'  */
  YYSYMBOL_UMINUS = 511,                   /* UMINUS  */
  YYSYMBOL_512_ = 512,                     /* '['  */
  YYSYMBOL_513_ = 513,                     /* ']'  */
  YYSYMBOL_514_ = 514,                     /* '('  */
  YYSYMBOL_515_ = 515,                     /* ')'  */
  YYSYMBOL_516_ = 516,                     /* '.'  */
  YYSYMBOL_517_ = 517,                     /* ';'  */
  YYSYMBOL_518_ = 518,                     /* ','  */
  YYSYMBOL_519_ = 519,                     /* '#'  */
  YYSYMBOL_520_ = 520,                     /* '$'  */
  YYSYMBOL_521_ = 521,                     /* '?'  */
  YYSYMBOL_522_ = 522,                     /* '{'  */
  YYSYMBOL_523_ = 523,                     /* '}'  */
  YYSYMBOL_524_ = 524,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 525,                 /* $accept  */
  YYSYMBOL_stmtblock = 526,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 527,                /* stmtmulti  */
  YYSYMBOL_stmt = 528,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 529,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 530,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 531,               /* SeqOptList  */
  YYSYMBOL_opt_with = 532,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 533,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 534,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 535,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 536,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 537,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 538, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 539,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 540, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 541, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 542,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 543,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 544, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 545,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 546,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 547,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 548,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 549,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 550,               /* DetachStmt  */
  YYSYMBOL_opt_database = 551,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 552,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 553,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 554,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 555,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 556,           /* qualified_name  */
  YYSYMBOL_ColId = 557,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 558,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 559,                   /* Sconst  */
  YYSYMBOL_indirection = 560,              /* indirection  */
  YYSYMBOL_indirection_el = 561,           /* indirection_el  */
  YYSYMBOL_attr_name = 562,                /* attr_name  */
  YYSYMBOL_ColLabel = 563,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 564,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 565,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 566,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 567,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 568, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 569,                /* opt_using  */
  YYSYMBOL_opt_as = 570,                   /* opt_as  */
  YYSYMBOL_opt_program = 571,              /* opt_program  */
  YYSYMBOL_copy_options = 572,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 573,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 574,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 575,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 576,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 577,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 578,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 579, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 580,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 581,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 582,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 583,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 584,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 585, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 586,       /* generic_option_arg  */
  YYSYMBOL_key_action = 587,               /* key_action  */
  YYSYMBOL_ColConstraint = 588,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 589,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 590,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 591,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 592,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 593,      /* generic_option_elem  */
  YYSYMBOL_key_update = 594,               /* key_update  */
  YYSYMBOL_key_actions = 595,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 596,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 597,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 598,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 599,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 600,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 601,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 602,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 603,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 604,                  /* OptWith  */
  YYSYMBOL_definition = 605,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 606,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 607,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 608,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 609,                /* columnDef  */
  YYSYMBOL_def_list = 610,                 /* def_list  */
  YYSYMBOL_index_name = 611,               /* index_name  */
  YYSYMBOL_TableElement = 612,             /* TableElement  */
  YYSYMBOL_def_elem = 613,                 /* def_elem  */
  YYSYMBOL_opt_definition = 614,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 615,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 616,               /* columnElem  */
  YYSYMBOL_opt_column_list = 617,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 618,              /* ColQualList  */
  YYSYMBOL_key_delete = 619,               /* key_delete  */
  YYSYMBOL_reloption_elem = 620,           /* reloption_elem  */
  YYSYMBOL_columnList = 621,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 622,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 623,                /* func_type  */
  YYSYMBOL_ConstraintElem = 624,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 625,         /* TableElementList  */
  YYSYMBOL_key_match = 626,                /* key_match  */
  YYSYMBOL_TableLikeClause = 627,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 628,                  /* OptTemp  */
  YYSYMBOL_generated_when = 629,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 630,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 631,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 632,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 633,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 634,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 635,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 636,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 637,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 638,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 639,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 640,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 641,              /* macro_alias  */
  YYSYMBOL_param_list = 642,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 643,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 644,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 645,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 646,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 647,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 648,              /* opt_persist  */
  YYSYMBOL_CreateSeqStmt = 649,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 650,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 651,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 652,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 653,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 654,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 655,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 656,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 657,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 658,             /* using_clause  */
  YYSYMBOL_DropStmt = 659,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 660,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 661,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 662,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 663,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 664, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 665,           /* DropSecretStmt  */
  YYSYMBOL_ExecuteStmt = 666,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 667,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 668,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 669,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 670,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 671,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 672,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 673,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 674,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 675, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 676,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 677,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 678,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 679,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 680,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 681,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 682,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 683,                /* IndexStmt  */
  YYSYMBOL_access_method = 684,            /* access_method  */
  YYSYMBOL_access_method_clause = 685,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 686,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 687,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 688,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 689,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 690,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 691,              /* insert_rest  */
  YYSYMBOL_insert_target = 692,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 693,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 694,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 695,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 696,       /* insert_column_item  */
  YYSYMBOL_set_clause = 697,               /* set_clause  */
  YYSYMBOL_opt_or_action = 698,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 699,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 700,               /* index_elem  */
  YYSYMBOL_returning_clause = 701,         /* returning_clause  */
  YYSYMBOL_override_kind = 702,            /* override_kind  */
  YYSYMBOL_set_target_list = 703,          /* set_target_list  */
  YYSYMBOL_opt_collate = 704,              /* opt_collate  */
  YYSYMBOL_opt_class = 705,                /* opt_class  */
  YYSYMBOL_insert_column_list = 706,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 707,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 708, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 709,             /* index_params  */
  YYSYMBOL_set_target = 710,               /* set_target  */
  YYSYMBOL_LoadStmt = 711,                 /* LoadStmt  */
  YYSYMBOL_file_name = 712,                /* file_name  */
  YYSYMBOL_repo_path = 713,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 714,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 715,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 716,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 717,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 718,               /* RenameStmt  */
  YYSYMBOL_opt_column = 719,               /* opt_column  */
  YYSYMBOL_SelectStmt = 720,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 721,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 722,         /* select_no_parens  */
  YYSYMBOL_select_clause = 723,            /* select_clause  */
  YYSYMBOL_opt_select = 724,               /* opt_select  */
  YYSYMBOL_simple_select = 725,            /* simple_select  */
  YYSYMBOL_value_or_values = 726,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 727,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 728,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 729,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 730, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 731,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 732,              /* with_clause  */
  YYSYMBOL_cte_list = 733,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 734,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 735,         /* opt_materialized  */
  YYSYMBOL_into_clause = 736,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 737,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 738,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 739,          /* all_or_distinct  */
  YYSYMBOL_by_name = 740,                  /* by_name  */
  YYSYMBOL_distinct_clause = 741,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 742,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 743,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 744,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 745,              /* sort_clause  */
  YYSYMBOL_sortby_list = 746,              /* sortby_list  */
  YYSYMBOL_sortby = 747,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 748,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 749,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 750,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 751,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 752,             /* limit_clause  */
  YYSYMBOL_offset_clause = 753,            /* offset_clause  */
  YYSYMBOL_sample_count = 754,             /* sample_count  */
  YYSYMBOL_sample_clause = 755,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 756,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 757,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 758,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 759,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 760,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 761,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 762,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 763, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 764,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 765,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 766,            /* first_or_next  */
  YYSYMBOL_group_clause = 767,             /* group_clause  */
  YYSYMBOL_group_by_list = 768,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 769,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 770,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 771,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 772,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 773,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 774,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 775,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 776,            /* having_clause  */
  YYSYMBOL_qualify_clause = 777,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 778,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 779,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 780,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 781,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 782,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 783,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 784,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 785,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 786,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 787,              /* from_clause  */
  YYSYMBOL_from_list = 788,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 789,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 790,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 791,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 792,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 793,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 794,             /* pivot_header  */
  YYSYMBOL_pivot_value = 795,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 796,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 797,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 798,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 799,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 800,             /* joined_table  */
  YYSYMBOL_alias_clause = 801,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 802,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 803,        /* func_alias_clause  */
  YYSYMBOL_join_type = 804,                /* join_type  */
  YYSYMBOL_join_outer = 805,               /* join_outer  */
  YYSYMBOL_join_qual = 806,                /* join_qual  */
  YYSYMBOL_relation_expr = 807,            /* relation_expr  */
  YYSYMBOL_func_table = 808,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 809,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 810,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 811,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 812,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 813,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 814,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 815,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 816,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 817,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 818,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 819,             /* opt_Typename  */
  YYSYMBOL_Typename = 820,                 /* Typename  */
  YYSYMBOL_qualified_typename = 821,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 822,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 823,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 824,            /* ConstTypename  */
  YYSYMBOL_GenericType = 825,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 826,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 827,                  /* Numeric  */
  YYSYMBOL_opt_float = 828,                /* opt_float  */
  YYSYMBOL_Bit = 829,                      /* Bit  */
  YYSYMBOL_ConstBit = 830,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 831,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 832,         /* BitWithoutLength  */
  YYSYMBOL_Character = 833,                /* Character  */
  YYSYMBOL_ConstCharacter = 834,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 835,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 836,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 837,                /* character  */
  YYSYMBOL_opt_varying = 838,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 839,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 840,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 841,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 842,             /* year_keyword  */
  YYSYMBOL_month_keyword = 843,            /* month_keyword  */
  YYSYMBOL_day_keyword = 844,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 845,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 846,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 847,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 848,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 849,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 850,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 851,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 852,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 853,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 854,             /* opt_interval  */
  YYSYMBOL_a_expr = 855,                   /* a_expr  */
  YYSYMBOL_b_expr = 856,                   /* b_expr  */
  YYSYMBOL_c_expr = 857,                   /* c_expr  */
  YYSYMBOL_d_expr = 858,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 859,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 860,              /* struct_expr  */
  YYSYMBOL_func_application = 861,         /* func_application  */
  YYSYMBOL_func_expr = 862,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 863,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 864, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 865,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 866,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 867,            /* filter_clause  */
  YYSYMBOL_export_clause = 868,            /* export_clause  */
  YYSYMBOL_window_clause = 869,            /* window_clause  */
  YYSYMBOL_window_definition_list = 870,   /* window_definition_list  */
  YYSYMBOL_window_definition = 871,        /* window_definition  */
  YYSYMBOL_over_clause = 872,              /* over_clause  */
  YYSYMBOL_window_specification = 873,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 874, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 875,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 876,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 877,             /* frame_extent  */
  YYSYMBOL_frame_bound = 878,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 879, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 880,            /* qualified_row  */
  YYSYMBOL_row = 881,                      /* row  */
  YYSYMBOL_dict_arg = 882,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 883,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 884, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 885,                  /* map_arg  */
  YYSYMBOL_map_arguments = 886,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 887,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 888, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 889,                 /* sub_type  */
  YYSYMBOL_all_Op = 890,                   /* all_Op  */
  YYSYMBOL_MathOp = 891,                   /* MathOp  */
  YYSYMBOL_qual_Op = 892,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 893,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 894,              /* subquery_Op  */
  YYSYMBOL_any_operator = 895,             /* any_operator  */
  YYSYMBOL_c_expr_list = 896,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 897,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 898,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 899,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 900,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 901,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 902,            /* func_arg_expr  */
  YYSYMBOL_type_list = 903,                /* type_list  */
  YYSYMBOL_extract_list = 904,             /* extract_list  */
  YYSYMBOL_extract_arg = 905,              /* extract_arg  */
  YYSYMBOL_overlay_list = 906,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 907,          /* overlay_placing  */
  YYSYMBOL_position_list = 908,            /* position_list  */
  YYSYMBOL_substr_list = 909,              /* substr_list  */
  YYSYMBOL_substr_from = 910,              /* substr_from  */
  YYSYMBOL_substr_for = 911,               /* substr_for  */
  YYSYMBOL_trim_list = 912,                /* trim_list  */
  YYSYMBOL_in_expr = 913,                  /* in_expr  */
  YYSYMBOL_case_expr = 914,                /* case_expr  */
  YYSYMBOL_when_clause_list = 915,         /* when_clause_list  */
  YYSYMBOL_when_clause = 916,              /* when_clause  */
  YYSYMBOL_case_default = 917,             /* case_default  */
  YYSYMBOL_case_arg = 918,                 /* case_arg  */
  YYSYMBOL_columnref = 919,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 920,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 921,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 922,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 923,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 924, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 925,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 926, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 927,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 928,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 929,                /* target_el  */
  YYSYMBOL_except_list = 930,              /* except_list  */
  YYSYMBOL_opt_except_list = 931,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 932,          /* replace_list_el  */
  YYSYMBOL_replace_list = 933,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 934,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 935,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 936,      /* qualified_name_list  */
  YYSYMBOL_name_list = 937,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 938,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 939, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 940,                     /* name  */
  YYSYMBOL_func_name = 941,                /* func_name  */
  YYSYMBOL_AexprConst = 942,               /* AexprConst  */
  YYSYMBOL_Iconst = 943,                   /* Iconst  */
  YYSYMBOL_type_function_name = 944,       /* type_function_name  */
  YYSYMBOL_function_name_token = 945,      /* function_name_token  */
  YYSYMBOL_type_name_token = 946,          /* type_name_token  */
  YYSYMBOL_any_name = 947,                 /* any_name  */
  YYSYMBOL_attrs = 948,                    /* attrs  */
  YYSYMBOL_opt_name_list = 949,            /* opt_name_list  */
  YYSYMBOL_param_name = 950,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 951,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 952,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 953,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 954,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 955,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 956,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 957,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 958,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 959,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 960,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 961,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 962,            /* generic_reset  */
  YYSYMBOL_reset_rest = 963,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 964,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 965,                 /* set_rest  */
  YYSYMBOL_generic_set = 966,              /* generic_set  */
  YYSYMBOL_var_value = 967,                /* var_value  */
  YYSYMBOL_zone_value = 968,               /* zone_value  */
  YYSYMBOL_var_list = 969,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 970,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 971,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 972,               /* opt_tables  */
  YYSYMBOL_var_name = 973,                 /* var_name  */
  YYSYMBOL_table_id = 974,                 /* table_id  */
  YYSYMBOL_ViewStmt = 975,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 976          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  703
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   69920

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  525
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  452
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2089
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3480

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   757


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   519,   520,   509,     2,     2,
     514,   515,   507,   505,   518,   506,   516,   508,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   524,   517,
     501,   503,   502,   521,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   512,     2,   513,   510,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   522,     2,   523,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   504,   511
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   497,   497,   513,   525,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   574,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,   458,     7,    13,    19,    25,     9,    13,
      44,    45,    46,    50,    51,    55,    59,    60,    64,    70,
      75,    76,    77,    78,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     9,
      23,    29,    36,    42,    49,    59,    63,    71,    72,    73,
      77,    86,    95,   102,   103,   108,   120,   125,   150,   155,
     160,   166,   176,   186,   192,   203,   214,   229,   230,   236,
     237,   242,   243,   249,   250,   254,   255,   260,   262,   268,
     269,   273,   274,   277,   278,   283,     7,    16,    25,    46,
      47,    50,    54,     7,    14,    22,     9,    19,    29,    42,
      43,     7,    16,    25,    37,    38,    42,    43,    44,     7,
      14,    31,    51,    55,    65,    69,    75,    76,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     7,    14,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     2,
       7,    21,    36,    56,    57,    84,    85,    86,    87,    88,
      89,    93,    94,    99,   104,   105,   106,   107,   108,   113,
     120,   121,   122,   139,   146,   153,   163,   173,   185,   193,
     202,   220,   221,   225,   226,   230,   239,   262,   276,   283,
     288,   290,   292,   294,   297,   300,   301,   302,   303,   308,
     312,   313,   318,   325,   330,   331,   332,   333,   334,   335,
     336,   337,   343,   344,   348,   353,   360,   367,   374,   386,
     387,   388,   389,   393,   398,   399,   400,   405,   410,   411,
     412,   413,   414,   415,   420,   440,   469,   470,   474,   478,
     479,   480,   484,   488,   496,   497,   502,   503,   504,   508,
     516,   517,   522,   523,   527,   532,   536,   540,   545,   553,
     554,   558,   559,   563,   564,   570,   581,   594,   608,   622,
     636,   650,   673,   677,   684,   688,   696,   701,   708,   718,
     719,   720,   721,   722,   729,   736,   737,   742,   743,     9,
      19,    29,    39,    49,    59,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    95,    96,    97,    98,    99,   100,   105,
     106,   111,   112,   113,   118,   119,   120,     8,    20,    33,
      46,    58,    70,    86,    87,    91,    95,     7,     1,    30,
      49,    61,    62,    63,    67,    68,    73,    77,    82,    86,
      94,    95,    99,   100,   105,   106,   110,   111,   116,   117,
     118,   119,   120,   121,   126,   134,   138,   143,   144,   149,
     153,   158,   162,   166,   170,   174,   178,   182,   186,   190,
     194,   198,   202,   206,   210,   214,   218,   226,   231,   232,
     233,   238,   242,    47,    48,    52,    53,    68,    69,    76,
      84,    92,   100,   108,   116,   127,   128,   155,   160,   168,
     184,   201,   218,   235,   236,   255,   259,   263,   267,   271,
     280,   290,   299,   308,   318,   328,   339,   353,   370,   370,
     374,   374,   378,   378,   382,   388,   395,   399,   400,   404,
     405,   419,   426,   433,   443,   444,   447,   460,   461,   462,
     466,   477,   485,   490,   495,   500,   505,   513,   521,   526,
     531,   538,   539,   543,   544,   545,   549,   556,   557,   561,
     562,   566,   567,   568,   572,   573,   577,   578,   594,   595,
     598,   607,   618,   619,   620,   623,   624,   625,   629,   630,
     631,   632,   636,   637,   641,   643,   659,   661,   666,   669,
     677,   681,   685,   689,   693,   697,   704,   709,   716,   717,
     721,   726,   730,   734,   742,   749,   750,   755,   756,   760,
     761,   766,   768,   770,   775,   795,   796,   798,   803,   804,
     808,   809,   812,   813,   838,   839,   844,   848,   849,   853,
     854,   858,   859,   860,   861,   862,   866,   879,   886,   893,
     900,   901,   905,   906,   910,   911,   915,   916,   920,   921,
     925,   926,   930,   941,   942,   943,   944,   948,   949,   954,
     955,   956,   965,   971,   980,   981,   994,   995,   999,  1000,
    1004,  1005,  1011,  1017,  1025,  1034,  1042,  1051,  1060,  1064,
    1069,  1079,  1092,  1093,  1096,  1097,  1098,  1101,  1109,  1119,
    1120,  1123,  1131,  1140,  1144,  1151,  1152,  1156,  1165,  1169,
    1194,  1198,  1211,  1225,  1240,  1252,  1265,  1279,  1293,  1306,
    1321,  1340,  1346,  1351,  1357,  1364,  1365,  1373,  1377,  1381,
    1387,  1394,  1399,  1400,  1401,  1402,  1403,  1404,  1408,  1409,
    1421,  1422,  1427,  1434,  1441,  1448,  1480,  1491,  1504,  1509,
    1510,  1513,  1514,  1517,  1518,  1523,  1524,  1529,  1533,  1539,
    1560,  1568,  1581,  1584,  1588,  1588,  1591,  1592,  1594,  1599,
    1606,  1611,  1617,  1622,  1628,  1632,  1639,  1646,  1656,  1657,
    1661,  1663,  1666,  1670,  1671,  1672,  1673,  1674,  1675,  1680,
    1700,  1701,  1702,  1703,  1714,  1728,  1729,  1735,  1740,  1745,
    1750,  1755,  1760,  1765,  1770,  1776,  1782,  1788,  1795,  1817,
    1826,  1830,  1838,  1842,  1850,  1862,  1883,  1887,  1893,  1897,
    1910,  1918,  1928,  1930,  1932,  1934,  1936,  1938,  1943,  1944,
    1951,  1960,  1968,  1977,  1988,  1996,  1997,  1998,  2002,  2002,
    2005,  2005,  2008,  2008,  2011,  2011,  2014,  2014,  2017,  2017,
    2020,  2020,  2023,  2023,  2026,  2026,  2029,  2029,  2032,  2032,
    2035,  2035,  2038,  2040,  2042,  2044,  2046,  2048,  2050,  2052,
    2054,  2056,  2058,  2060,  2062,  2067,  2072,  2078,  2085,  2090,
    2096,  2102,  2133,  2135,  2137,  2145,  2160,  2162,  2164,  2166,
    2168,  2170,  2172,  2174,  2176,  2178,  2180,  2182,  2184,  2186,
    2188,  2190,  2193,  2195,  2197,  2200,  2202,  2204,  2206,  2208,
    2213,  2218,  2225,  2230,  2237,  2242,  2249,  2254,  2262,  2270,
    2278,  2286,  2304,  2312,  2320,  2328,  2336,  2344,  2352,  2356,
    2372,  2380,  2388,  2396,  2404,  2412,  2420,  2424,  2428,  2432,
    2436,  2444,  2452,  2460,  2468,  2488,  2510,  2521,  2528,  2542,
    2550,  2558,  2578,  2580,  2582,  2584,  2586,  2588,  2590,  2592,
    2594,  2596,  2598,  2600,  2602,  2604,  2606,  2608,  2610,  2612,
    2614,  2616,  2618,  2620,  2624,  2628,  2632,  2646,  2647,  2651,
    2665,  2666,  2667,  2674,  2678,  2682,  2685,  2696,  2701,  2703,
    2714,  2738,  2749,  2760,  2764,  2771,  2775,  2779,  2796,  2804,
    2813,  2817,  2824,  2832,  2840,  2851,  2871,  2907,  2918,  2919,
    2926,  2932,  2934,  2936,  2940,  2949,  2954,  2961,  2976,  2983,
    2987,  2991,  2995,  2999,  3009,  3018,  3040,  3041,  3045,  3046,
    3047,  3051,  3052,  3059,  3060,  3064,  3065,  3070,  3078,  3080,
    3094,  3097,  3124,  3125,  3128,  3129,  3137,  3145,  3153,  3162,
    3172,  3190,  3236,  3245,  3254,  3263,  3272,  3284,  3285,  3286,
    3287,  3288,  3302,  3303,  3306,  3307,  3311,  3321,  3322,  3326,
    3327,  3331,  3338,  3339,  3344,  3345,  3350,  3351,  3354,  3355,
    3356,  3359,  3360,  3363,  3364,  3365,  3366,  3367,  3368,  3369,
    3370,  3371,  3372,  3373,  3374,  3375,  3376,  3379,  3381,  3386,
    3388,  3393,  3395,  3397,  3399,  3401,  3403,  3405,  3407,  3421,
    3423,  3428,  3432,  3439,  3444,  3450,  3454,  3461,  3466,  3473,
    3478,  3486,  3490,  3496,  3500,  3509,  3520,  3521,  3525,  3529,
    3536,  3537,  3538,  3539,  3540,  3541,  3542,  3543,  3544,  3545,
    3546,  3547,  3548,  3549,  3559,  3563,  3570,  3577,  3578,  3594,
    3598,  3603,  3607,  3622,  3627,  3631,  3634,  3637,  3638,  3639,
    3642,  3649,  3659,  3673,  3674,  3678,  3689,  3690,  3693,  3694,
    3697,  3701,  3708,  3716,  3724,  3732,  3742,  3743,  3748,  3749,
    3753,  3754,  3755,  3759,  3768,  3776,  3784,  3793,  3808,  3809,
    3814,  3815,  3825,  3826,  3830,  3831,  3835,  3836,  3839,  3855,
    3863,  3873,  3874,  3877,  3878,  3881,  3885,  3886,  3890,  3891,
    3894,  3895,  3896,  3906,  3907,  3911,  3913,  3919,  3920,  3924,
    3925,  3928,  3939,  3942,  3953,  3957,  3961,  3973,  3977,  3986,
    3993,  4031,  4035,  4039,  4043,  4047,  4051,  4055,  4061,  4078,
    4079,  4080,  4083,  4084,  4085,  4088,  4089,  4090,  4093,  4094,
    4097,  4099,  4104,  4105,  4108,  4112,  4113,     7,    18,    19,
      23,    24,    25,    26,    27,     7,    26,    50,    73,    80,
      85,    86,    87,    88,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,
      34,    43,    52,     5,    12,    22,    23,     7,    19,    33,
       9,    16,    26,    33,    44,    45,    50,    51,    52,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    90,
      91,    92,    97,    98,   103,   107,   115,   116,   121,   122,
     123,   129,   134,   142,   143,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    89,    95,    99,   103,   118,
     125,   126,   127,   131,   132,     7,    15,    22,    29,    36,
      45,    46,    48,    49,     8,    22,    36,    48,    56,    70,
      71,    72,    73,    74,    87,    88,    93,    94,    98,    99,
       7,    18,    31,    35,    42,    53,    54,    60,    61,     9,
      19,     7,    16,    28,    35,    44,    45,    49,    50,     2,
       7,    12,    17,    26,    33,    43,    44,    51,     3,    10,
      17,    24,    31,    38,    45,    52,    61,    61,    63,    63,
      65,    66,    70,    71,     6,     8,    21,    34,    47,    65,
      87,    88,    89,    90,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P",
  "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
  "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
  "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER",
  "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PERSISTENT",
  "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY",
  "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'",
  "'}'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "ExecuteStmt", "execute_param_expr", "execute_param_list",
  "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "repo_path", "PragmaStmt",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "RenameStmt",
  "opt_column", "SelectStmt", "select_with_parens", "select_no_parens",
  "select_clause", "opt_select", "simple_select", "value_or_values",
  "pivot_keyword", "unpivot_keyword", "pivot_column_entry",
  "pivot_column_list_internal", "pivot_column_list", "with_clause",
  "cte_list", "common_table_expr", "opt_materialized", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr", "struct_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3041)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2018)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6434,   463,   841, -3041, -3041,   340,   463, 47713, 62548,   463,
     272,  2665, 49693, -3041,   276,  8501,   463, 52663, 69389,   308,
     260, 31242,   323, 53158, 53158, -3041, -3041, -3041, 62548, 52663,
   53653,   463,   337, 63043, -3041,   463, 33222, 50188,    36, -3041,
   52663,    52,   -20, 54148, 52663,  3434,   527,    81, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041,   184, -3041, -3041, -3041, -3041,   135, -3041, -3041, -3041,
   -3041, -3041,   144, -3041,   731,   145, 31242, 31242,  1382,   399,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, 32727, -3041,
   -3041, -3041, -3041, 54643, 52663, 55138, 50683, 55633, -3041,   495,
     799, -3041,   161, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041,   177, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041,   188, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041,   196, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041,   682,   198, -3041, -3041, -3041,
     446, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041,   844,  3434, 52663,   546,   626,   634, -3041, 56128, -3041,
     601, 52663, -3041, -3041,   924,   628,   821, -3041, -3041, 51178,
   -3041, -3041, -3041,   865,  1029,   788, -3041, -3041,   637, -3041,
     126, -3041, -3041,   703,   633, -3041, -3041, -3041, -3041, 62548,
   -3041, -3041, -3041, -3041,   805, -3041, -3041, -3041, 63538, 56623,
   57118, -3041,   673,  2348,  8514, 69406, 30250, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041,   184, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, 53158,
   62548, 53158,   692,   702,  1071,   763, 31737,   768, 33718,   780,
     789,  1073,   819,   834,   853,   889,   -20, 30746,   813,   682,
   -3041, 57613, 57613,   -67,  4361, -3041, 57613, 58108, -3041,   862,
   -3041,   799, -3041, -3041, -3041,  1238, -3041,   511,   925, -3041,
   58603, 58603, 58603,   956,  1243, -3041, -3041, -3041,   945, -3041,
   -3041,  1182, 19989, 19989, 64033, 64033,   799, 64033,   987, -3041,
   -3041,    49, -3041, -3041, -3041,  1382,   978,   682, -3041, -3041,
   50188, -3041, -3041,   311,  1338, 19989, 52663,   992, -3041,   998,
     992,   999,  1001, -3041,  6434, -3041, 52663,  1358,  1244, 50188,
     344,   344,  1485,   344,   642,   982,  2074,  3843, -3041,   124,
   -3041,  1032,  1139,  1053,  1346, -3041,   978,  1442,   185,  1248,
    1449,  4548,  1460,  1033,  1480,  1181,  1489,  1597, 19989, 45238,
     682, -3041, 11168, 62548,  1147,  1168, -3041, -3041, -3041, -3041,
    1302,  1414, -3041,  1655, -3041, -3041,  1254, 59098, 59593, 60088,
   60583, 64528,  1641, -3041, -3041,  1582, -3041, -3041, -3041,  1260,
   -3041, -3041, -3041,  1551,   197,  1592,  1235,   149, -3041,  1601,
     242, -3041,  1604,  1473, 14288, -3041,  1417, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041,   -20, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041,   737, -3041, -3041, 42182, 69406,  1351,
    1272, -3041,  1621, 19989, 19989,  1289,  7408, 57613, 58108, 19989,
   52663, -3041, 19989, 24669,  1303, 19989, 19989, 11688, 19989, 29260,
   57613,  4361,  1306, -3041,   774, 52663,  1315, -3041,  1419,  1419,
     337, 31242,  1624, -3041,   912,  1622,  1545, -3041, 31242,  1545,
     937,  1334,  1625,  1545, -3041,   739,  1626,  1419, 34213,  1347,
   -3041,  1419,  1556, -3041, -3041, 53158, 19989, 14288, 67003,  1822,
   -3041, -3041, -3041, -3041,  1636, 62548,  1370, -3041, -3041, -3041,
   -3041, -3041, -3041,    48,  1880,   211,  1881, 19989,   211,   211,
    1378,   201,   201, -3041,  1565,  1380, -3041,   203,  1388,  1389,
    1894,  1899,   193,   171,  1041,   211, 19989, -3041,   201,  1391,
    1904,  1396,  1907,   155,   192, -3041,   205, 19989, 19989, 19989,
    1766, 19989, 10648,  1909, 45238, -3041, 52663,   767, -3041,   682,
    1405,   799, -3041, -3041, -3041, -3041, -3041, -3041, -3041,  1407,
   -3041,   195,  6887, -3041, -3041, -3041, -3041,  1447, -3041, -3041,
   -3041, -3041,  1627, 19989, -3041, -3041,  1408,  1624, -3041,   213,
   -3041, -3041,  1624, -3041, -3041, -3041, -3041, -3041,   246,  1823,
   19989, 19989, 62548,   682, -3041, 65023, -3041, -3041, -3041, -3041,
   -3041, -3041,   794, -3041,   184, 43870,  1412,  1418,   992, 52663,
   52663,  1897, -3041, -3041, -3041,   998, 50188,    88,  1715,  1555,
   -3041, -3041,  1382,  1382, 15309,  1083,   194,    65, 15829, 20509,
    1777,  1659,   638,   775,  1781, -3041,  1664,  1891, 24669, 19989,
   19989,   642,   982, 19989, -3041, -3041, -3041,  1717, 52663, 48208,
     561,   959,  1440,  1527,  1446,    20,  1863, -3041,  1441, -3041,
    1535, 52663, 68938,   252, -3041,  1905,   252,   252,   685,  1906,
    1538,   300,  1702,    31,   440,  2319, -3041,  1441, 50188,   165,
      39,  1441, 52663,  1543,    50,  1441,  1865, 62548,  1272,  7079,
    1453, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041,   159, 14288, -3041,  1119,  1325,  1375,   691,   226,  1403,
    1464, 14288,  1509,  1523,   172,  1547,  1605,  1660,  1667,  1704,
    1712,  1714,  1719,   154,  1723,  1725,  1733,  1745,  1752,  1760,
   -3041,  1764,   176,  1768,   240, 14288,  1770, -3041,   182, -3041,
   43870,    23, -3041, -3041,  1776,  1552,  1553, 62548,  1507, 52663,
    1319,  1607,  1833,  1889, 67483, 52663,  1716,  2319,  1718,  1479,
    1956,  1724,  1168,  1726,  1487,  1728, -3041,  1490, -3041, 65518,
    2000, -3041,  1853, -3041, -3041, -3041, -3041, 62548, 45238,  1491,
   -3041, -3041, 62548, -3041, 52663, 52663, -3041, 52663, 62548, -3041,
     806, 43870,  1995,   730, 69406, 46723, -3041, -3041, -3041, -3041,
    1225,  1236, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041,   799, 45238, -3041,  1652, 53158, 42800,  1494, 19989, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041,  1495,  1840, -3041,
   -3041,  6219,  1497, 42840,  1498, 24669, 24669,   682,   287, -3041,
   -3041, 24669,  1499, 47218, 42713,  1501,  1500, 43188, 16349, 19989,
   16349, 16349, 43275, -3041,  1505, 43352, 57613,  1502, 52663, 51673,
   -3041, -3041, -3041, 19989, 19989,  4361, 52168,  1548, -3041, 31242,
   -3041,  1798, 31242, -3041, -3041,  3022, -3041, 31242,  1801, 19989,
   31242, -3041,  1746,  1747,  1512, 31242, -3041, 52663,  1517, 52663,
   -3041, -3041, -3041, -3041, -3041, 43870, -3041,  1514,   842,  1518,
   -3041, -3041, -3041, -3041, -3041,  1570, -3041,  1570,  1570, -3041,
   -3041, -3041, -3041,  1521,  1521,  1522, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,  1525,
    1041, -3041,  1570, -3041,  1521, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, 68938, -3041, -3041, -3041, -3041,   590,   761, -3041,
    1526, -3041, -3041, -3041, -3041,  1529, -3041,  1530,  1998, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,  5383,   848,
    1521,  3647, -3041, -3041, 19989, 19989, -3041, -3041,  1537, 43870,
    1580, -3041, -3041, 19989, 19989, -3041, -3041, -3041, -3041,  2045,
   -3041, 19989,  1570,  1570, -3041,  7188, -3041, 38670, 16869,  1629,
    1630,  2045, -3041,  2045, -3041,  7188,  2046,  2046, 36688, -3041,
    1706, 43439, -3041,  1546,    76,  7030,  1542, -3041, -3041,  1540,
   -3041,  1544,  1550, 40697,   183,   682,   682, 19989, -3041,  2045,
   19989,  7456,  7456, -3041,   189, 67003, 19989, 19989, 19989, 19989,
   19989, 19989, 19989, 19989, 44743,  1635,   169, 62548, 19989, 19989,
    1554,   990, -3041, 19989,  1787, -3041,  1557, 19989,  1646,   199,
   19989, 19989, 19989, 19989, 19989, 19989, 19989, 19989, 19989, -3041,
   -3041, 27250,   191,   781,  1895,  1914,   -32,   273, 19989,  1898,
   11168, -3041,  1898, -3041, -3041, -3041, -3041, -3041,   230, -3041,
   -3041,  1514,  1514, -3041, 62548, -3041, 52663,   311, 49198, 19989,
   -3041, -3041,  1560,  1566,   684, -3041,  1628, -3041, -3041, 52663,
   37183,  1866, -3041,   324,  1562, -3041, 42674,  1819,  1866,  1382,
   -3041, -3041, 25709,  1696,  1861,  1800, -3041, -3041,  1779,  1780,
   -3041,  1575, 43959, 21029, 21029, -3041,  1343, 43870,  1435, -3041,
   -3041, -3041, -3041, -3041, -3041,    70, -3041, 52663,    73, 34708,
   -3041,  1576,    79, -3041,  1184,  1916,  1882,  1777,   775,  1584,
   -3041,  1426,  1586, 66013, 52663,  1876,  1830,  1879,   -69, 67003,
   -3041, -3041, -3041, -3041, 52663, 62548, 61078, 66508, 45733, 52663,
   45238, -3041, -3041, -3041, -3041, 52663,  1176, 52663,  4561, -3041,
   -3041, -3041, -3041,   252, -3041, -3041, -3041, -3041, -3041, 62548,
   52663, -3041, -3041,   252, 62548, 52663,   252, -3041,  1608, 52663,
   52663, 52663, 52663,  1620, 52663, 52663,   799, -3041, -3041, -3041,
   21549,    82,    82,  1811, 12208,   146, -3041, 19989, 19989, 62548,
    1775, -3041, -3041,   886,  1825,   207, -3041,  1643, 52663, 52663,
   52663, 52663, 62548, 52663,   769, -3041, -3041, -3041, -3041, -3041,
    1600, -3041,  1603,  1967,  2319, -3041,  1968, 48703,   382,  1952,
    1969,  1649,  1970, 12728,  2089,  1978, 45238,  1857, -3041, -3041,
    1844, -3041, -3041,   149, -3041, 45238, -3041,   242, -3041,  1845,
     238, -3041, 14288, 19989, -3041, -3041, -3041, -3041, -3041, -3041,
    1272, 27756, -3041,   915, -3041, -3041,  2095,   799,  2095,   964,
   -3041, -3041,  2095, -3041,  2078,  2095, -3041, -3041, 67003, -3041,
    7735, -3041, 19989, 19989, -3041, 19989,  1973, -3041,  2127,  2127,
   67003, 24669, 24669, 24669, 24669, 24669, 24669,   679,  1391, 24669,
   24669, 24669, 24669, 24669, 24669, 24669, 24669, 24669, 26229,   484,
   -3041, -3041,   916,  2099, 19989, 19989,  1981,  1973, 19989, -3041,
   67003,  1633, -3041,  1634,  1637, 19989, -3041, 67003, -3041, 52663,
    1638,     9,    42, -3041,  1642,  1644, -3041,  1624, -3041,   719,
     744, 52663,  3554,  3637,  4677, -3041, -3041, 19989,  1975,  3022,
   31242, -3041, 19989,  1645, -3041, -3041, 31242,  1984, -3041, -3041,
   -3041, 35203,  3022, 67003,   931, -3041, 52663, 67003,   932, 19989,
   -3041, 14288,  2154, 67003,  2121, 62548, 62548,  2158,  1651,  1653,
    2045,  1739, -3041,  1742,  1743,  1744, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, 67003, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041,  1661,  1666, 19989, 19989,    87, -3041,  7838,
    1662,  1665,  6048, -3041,  1656, -3041,  1658, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041,  1670, -3041,  1672, -3041,  1673,  1685,
    1692,  1679,  1684, 52663, -3041, 22069, -3041, 62548, -3041, -3041,
   19989, 19989, 52663, -3041,  1766, -3041,  1691,  1693,  8129, -3041,
   -3041, -3041,   254,   825, 44092,   273,  2867,  2867,  2867,  7188,
   -3041, -3041, -3041,  1713, -3041, 24669, 24669, -3041,  5898,  2392,
   10648, -3041, -3041,  2038, -3041,  1051, -3041,  1698, -3041, -3041,
    3537, -3041, 38670, 44163, 19989,   170, -3041, 19989,  1554, 19989,
    1785,  2867,  2867,  2867,   494,   494,   254,   254,   254,   825,
     273, -3041, -3041, -3041,  1701, 19989, 45238, -3041,  1703,  1705,
    2063,  1396, 19989, -3041, -3041, 31242,  1548,    23,  1548,  2045,
    7456, -3041,   998, -3041, -3041,   998, 43870, 52663, -3041, -3041,
    1971,  1708, 31242,  1750,  2185,  2168, 62548, -3041, -3041,  1710,
    1898,  1729, -3041, -3041,  1732, 19989,  2817,  1732, -3041,  1866,
      33,  1943,  1249,  1249,  1343,  1948, -3041, -3041,  1790, -3041,
   -3041, -3041, 19989, 13248,  1445, -3041,  1450, -3041, -3041, -3041,
   -3041, -3041,  1727, -3041,  1999, -3041, 52663, -3041, -3041, 24669,
    2184, 19989, 35698,  2188,  1979, -3041, -3041, -3041,  1820,  1441,
   19989,  1982, -3041,   118,  1735,  2100,   366,  2051, 62548, -3041,
     318,   349, -3041,  1133,  2105,   238,  2111,   238, 45238, 45238,
   45238,   952, -3041, -3041, -3041,   799, -3041,   526,   986, -3041,
   -3041, -3041, -3041,  1842,    66,  2319,  1441, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041,   181,   654,  1441,  1843, -3041,  1846,
   -3041,  1849,   683,  1441, -3041, -3041,  1597,  9084, 43870,   602,
     146,   146,   146, 14288, -3041,  1991,  1997,  1765, 43870, 43870,
    1769, -3041,   173, -3041, 62548, -3041, -3041, -3041,  1775,  1889,
   52663,  2319,  1771,  2239,  1168,  1487,  1774, -3041,  1932,   793,
     802, -3041, 62548, 52663, 52663, 52663, 61573, -3041, -3041, -3041,
    1778,  1772, -3041,     5,  2002,  2005, 52663,  1826, 52663,  1446,
    2255, 52663, -3041,  1006, 17389, 62548,  1036,  2144, 52663, -3041,
   -3041, -3041, 62548, -3041, -3041, 43870, -3041, -3041, 46228, -3041,
   -3041, -3041, -3041, -3041, 45238, -3041,   799, -3041,   799,  2024,
   62548, 41192,   799, 41687,   799,  1789, -3041, 43870,  8280, 43870,
    1981, -3041,   251,  2127,  4206,  4206,  4206,  2705,  2135,   223,
    1795,  4206,  4206,  4206,   357,   357,   251,   251,   251,  2127,
     484,   862, 47218,  1796, -3041, 43870, 43870, -3041, -3041,  1797,
   -3041, -3041, -3041, -3041,  1802,  1803, -3041, -3041, -3041, -3041,
   -3041, -3041, 62548,  1267,  1548,    36,    36,    36,    36, -3041,
   52663, 52663, 52663, 43870,  2252,  2128, -3041,  3022, 43870, 52663,
   -3041, 28761, 52663, -3041,  2149, -3041,  2240, -3041, 52663,  1040,
   -3041, -3041, -3041,  1050,  1807,  1653, 67003,  1056,  1084, -3041,
    2045,   190,  1806,  1532,   969,   974,  1448, -3041, -3041, -3041,
    1808, 43574, 19989, -3041,  2182, -3041, -3041, -3041, 19989, 19989,
   -3041, 38670, -3041, -3041, -3041, -3041,   394,   394,  1812, 10648,
   43796, -3041,  2131,  8351, 43870, -3041,  1706, -3041, -3041,  7456,
   19989,  1695,  2345, 19989,  1817, 19989,  2155, -3041, -3041,  1824,
   -3041, -3041, 67003, 19989,  1828,  4223, 24669, 24669,  5498, -3041,
    5754, 19989, 10648, -3041, 39851,  1810,  1827,  1811, 17909, -3041,
    2037,  1821, -3041,  1975,   146,  1975,  1829, -3041, -3041, -3041,
   -3041,  3647, -3041, 19989,  1988, 62548,   549,  3991,  1102, -3041,
     682, 37183,  1750, 19989,   259, -3041, -3041,  1834, -3041,  1732,
   -3041, -3041, -3041,  2050, -3041, -3041, -3041, 52663, -3041,  1832,
   -3041, 34708,  2169, 10648, -3041, 34708, 52663, 52663, 39173,  2198,
   -3041, 62548, 62548, 62548, -3041, 62548,  1837,  1836,   879,  1838,
     358, -3041,   957,   879,  2183,   263,  1446,   300,  3482,   558,
   -3041, -3041, -3041,  1918, 52663, -3041, 62548, -3041, -3041, -3041,
   -3041, -3041, 45733, -3041, -3041, 38174, 45238, -3041, 45238, 52663,
   52663, 52663, 52663, 52663, 52663, 52663, 52663, 52663, 52663,  1272,
   19989, -3041, 19989,  1847,  1852,  1854,  1811, -3041, -3041, -3041,
     153, -3041, -3041, -3041, -3041,   440, -3041,   173,  1856, -3041,
   48703,  3434,  1649,  2331, 45238,  1889,   707, 62053, -3041,  1859,
    1858,  1107,  2319,  1868,  2332, -3041,   382, 48703, -3041, -3041,
   -3041,  2289, -3041,   673,   208, -3041,  1168, -3041,  3434,  1487,
   -3041,  3434, 43870,  1871, -3041, 62548,  1923,   238,  1111, -3041,
   -3041, -3041, -3041, -3041, 62548,  1862, -3041,  1862, -3041, -3041,
    1862, -3041, -3041, -3041, -3041, 24669,  2215,  1873, 67003, -3041,
   -3041, 52663, -3041, -3041, -3041,  1112,  1875,  1975, 52663, 52663,
   52663, 52663, -3041, -3041, -3041, 18429, 19989,  1917, -3041,  1883,
   14808,  2193, -3041, 28262, -3041,   236,  1887, 35203, 62548, -3041,
   -3041, -3041, -3041,  2045, -3041, -3041, 62548, -3041,  1884, -3041,
    1892, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,
   19989, 43870, -3041, 43870, -3041, -3041, -3041, -3041, -3041,  6944,
   -3041,  1878,  1896, 62548, 19989, -3041, -3041, -3041,   801, 19989,
   19989,  5898, -3041, 44254, 19989, 67003,  1113,  5898,   200, 19989,
    2933,  3412, 19989, 19989,  5821, 39212, -3041, 22589, 13768, -3041,
    1901, 19989, 39251, 37678, -3041, 31242,  2128,  1902,  2128,   799,
    1903, 43870, 19989, -3041, -3041, -3041, -3041,  1934,   -51, 33222,
    2115, -3041,  1920, 62548, -3041,  1988, 43870, -3041, -3041, 38670,
   -3041, -3041, -3041, -3041, -3041,  2347,   852,  1911,  1912, -3041,
    1368, -3041, -3041, 62548,  1915, -3041,  1919,   879, -3041, 62548,
    1944, -3041,   266,  2206,   157, -3041, 19989, -3041,  2302,  2384,
     957,  1922, 62548, 52663, 24669, -3041,   653,   162, -3041,  2205,
   52663,  1944,  2349, -3041, -3041, -3041,   358, -3041,  2242,  2160,
   -3041,   252, -3041, 19989,   358,  2161,   257, 62548, -3041, -3041,
    1935, -3041, 67003,   238,   238, -3041,  1518,  1925,  1928,  1933,
    1937,  1941,  1942,  1945,  1946,  1951,  1953, -3041,  1957,  1959,
    1960,  1962,  1965,  1966,  1974,  1976,  1525,  1983, -3041,  1986,
    1834,  1989,  1990,  1992,  1996,  2001, 67963,  2003,  2006,  2008,
    2011,  1526,  2020,  1225,  1236, -3041, -3041, -3041, -3041,  2033,
   -3041, -3041, -3041,  1235,  1947, -3041, -3041, -3041,  2023, -3041,
    2040, -3041, -3041, -3041, -3041, -3041, -3041,  1972,  1994, -3041,
   -3041, -3041,   146,  2036,  2039,  1272,   104, 62548,  2041,  1826,
    2443, 18949,  1121,   840,  2210,  1980, -3041,   799,  1649, -3041,
   48703,  3098,   221,  2005, -3041,   222,  1826, -3041,  2380,  1649,
    2013,  2457, -3041, 45238,  2222, 62548,  2004, -3041, -3041, 46228,
    1862,  3922, 24669, 67003,  1130,  1132, -3041,  2495,  2162,  2128,
   -3041, -3041, -3041, -3041, -3041,  2007,    11,  2043, 10128,  2042,
   -3041, -3041, -3041, -3041, -3041, -3041, 43870, 43870, 62548,  2179,
   -3041, -3041,  2044,  2048, 36193,  2505,  2052, -3041, 14288, -3041,
    2367, -3041, 29755, -3041,  1653,  2057,  1653, 67003,  1653, -3041,
   -3041, 43870, 19989, -3041, -3041, 39937,  2381,  5898,  5898, 44254,
    1136, -3041,  5898, 19989, 19989,  5898,  5898, 19989, -3041,  9606,
     643, -3041,  1138, -3041, 39298, -3041, 68443, -3041, -3041,  1917,
     799,  1917, -3041, -3041,  2056, -3041, -3041, -3041,  2117, -3041,
   -3041,  1140,  2487,  1988, 19989, -3041, -3041,  2065, 34708, -3041,
   -3041, -3041, -3041, 34708,   879, -3041,  2237,  1944,  2068, -3041,
   -3041, -3041, -3041, -3041, -3041, 39337, -3041,    58, 19989, -3041,
    1385,  2705, -3041, -3041, -3041, -3041,  1944,  1168, -3041, 52663,
    2543,  2432, -3041, -3041, 43870, -3041, -3041,  2045,  2045, -3041,
   -3041,  2240, -3041, -3041,  2070, -3041, -3041,  1235,   467, 38174,
   52663, 52663, -3041, -3041,  2072, -3041, -3041, -3041, -3041,   440,
    2465,  1142,   382, -3041,  3434,  3434, 43870, -3041, 52663,  2440,
   48703, -3041,  2553,  2079, 52663,  1826,   970,   970, -3041,  2229,
   -3041,  2233, -3041, -3041,  2560,   286, -3041, 19469,  1151, 52663,
   -3041, -3041, 32232, -3041,  3922,  1152, -3041, -3041,  2087,  2090,
   -3041,  1917, 19989,  2093, 19989, -3041, 23109,  2570,  2094, -3041,
   19989,  2157, 26749, -3041, 19989, -3041, 52663, 57613,    82,  2101,
   57613, -3041, -3041, -3041, -3041, -3041, 19989, -3041,  5898,  5898,
    5898, 19989, -3041, 19989, -3041, -3041, -3041,  2305,  2179, -3041,
    2179, 19989,  3434,   682,  3372, 62548,     8, -3041, 43870, -3041,
   -3041, -3041, 52663, -3041, 45238, -3041,   879,   -40,  2106, 19989,
   39687,  2340, -3041, -3041,  2378, -3041,  2450, -3041,  2195,   499,
    2194, -3041, -3041, -3041, -3041,  1272,   799,  1649,  2005,  2013,
   -3041,  2133, 52663,  3434,   382,   673, -3041, -3041, -3041, -3041,
   -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041, -3041,  3434,
    2578,  2361,  2580,  3434, 43870, -3041,  1923, 19989,    85, -3041,
    1153,  2575, -3041, -3041,  2647,  2179,  2142, 23109,  2143, -3041,
    2145, 62548, 43870,  2292, -3041, -3041,  2146, -3041, -3041,   146,
   19989, -3041, 40205,  2150,  2151,  2603,  1811,  2157,  2157, -3041,
     -51, -3041, -3041,  2572, 32232,  2533,  1168,   879,  2164,  1160,
   -3041, -3041, -3041, -3041, -3041,  2319, -3041, 39773,  2398,   629,
    2382,  2106, 19989, -3041,  2238, -3041, -3041, -3041,  2632, -3041,
   -3041, 48703,  2166,  2013,  2005,  1826,  2013,  2386, -3041,  2389,
   -3041,  2170, 39812, 62548, 62548,  1649, 32232, 62548,  2159,  2157,
   -3041,  2167, -3041, -3041, -3041, 51673, -3041,  2171,  2175, -3041,
   -3041, -3041, 19989,   280, -3041, -3041,  2234, 52663,  1186,    45,
    2378, 38174, -3041, 45238,  1000,   -40,  2488, -3041, -3041, -3041,
   -3041,   316,  2406, -3041,  2407, -3041, 43870, -3041,  3434, 48703,
   -3041, -3041, -3041, -3041, -3041, -3041, 32232,  2575, -3041,   324,
   -3041,  1548, -3041,   324, -3041, -3041, -3041, -3041,   799, -3041,
    1501, 23629, 23629, 23629,  2186,  3434, -3041,  1548, -3041,  2311,
    2382, -3041, -3041, -3041, -3041, -3041,   216,   216,  2576, -3041,
    2251, -3041,  2013,  1187, 62548,  1732, -3041,  1732, 25189,  2344,
     174, 42752,  2562, -3041,  2562,  2562, -3041, -3041, -3041, 37183,
   -3041, -3041,  2686, -3041,   212, -3041, -3041, -3041,  1649,   324,
   -3041, -3041,  2694, -3041, -3041, -3041, -3041, -3041,   220, -3041,
   -3041, -3041,  1548,   879, -3041, -3041, -3041,  1548,  1732, 24149,
    2364, -3041,  2434, -3041, -3041, -3041, -3041, -3041, -3041, -3041
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     154,   258,     0,  1357,  1356,  1426,   258,     0,  1306,   258,
     480,   396,     0,  1447,  1426,     0,   258,     0,   154,     0,
       0,     0,     0,     0,     0,   540,   543,   541,     0,     0,
       0,   258,   580,     0,  1446,   258,     0,     0,   572,   542,
       0,  1405,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    24,    23,    25,
      26,  1315,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,   516,   503,   585,   515,     0,     0,   153,   684,
     523,    36,    37,    38,    39,    40,    41,    42,  1445,    43,
     257,   256,   250,     0,     0,     0,     0,     0,  1425,     0,
       0,   251,   110,  1471,  1472,  1473,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,  1481,  1848,  1482,  1483,  1484,  1485,  1486,
    1849,  1487,  1488,  1489,  1794,  1795,  1850,  1796,  1797,  1490,
    1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,  1499,  1798,
    1799,  1500,  1501,  1502,  1503,  1504,  1800,  1851,  1801,  1505,
    1506,  1507,  1508,  1509,  1852,  1510,  1511,  1512,  1513,  1514,
    1515,  1516,  1517,  1518,  1853,  1519,  1520,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1802,  1529,  1530,  1803,  1531,
    1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,
    1542,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,
    1552,  1553,  1554,  1555,  1556,  1557,  1558,  1804,  1559,  1560,
    1561,  1562,  1563,  1805,  1564,  1565,  1566,  1806,  1567,  1568,
    1569,  1854,  1855,  1570,  1571,  1807,  1857,  1572,  1573,  1808,
    1809,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,
    1858,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,  1593,  1594,  1859,  1810,  1595,  1596,  1597,  1598,  1599,
    1811,  1812,  1813,  1600,  1860,  1861,  1601,  1862,  1602,  1603,
    1604,  1605,  1606,  1607,  1608,  1863,  1609,  1864,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  1617,  1814,  1618,  1619,  1620,
    1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,  1637,  1815,  1866,  1816,
    1638,  1639,  1640,  1817,  1641,  1642,  1867,  1643,  1818,  1644,
    1819,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,  1820,  1868,  1655,  1869,  1821,  1656,  1657,  1658,  1659,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,  1822,
    1870,  1669,  1670,  1823,  1671,  1672,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1824,  1683,  1684,  1685,
    1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,
    1696,  1697,  1698,  1699,  1700,  1701,  1871,  1702,  1703,  1704,
    1825,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
    1826,  1724,  1725,  1726,  1872,  1727,  1728,  1827,  1729,  1730,
    1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1741,  1828,  1742,  1829,  1743,  1744,  1745,  1746,  1874,  1747,
    1748,  1749,  1750,  1751,  1752,  1830,  1831,  1753,  1754,  1832,
    1755,  1833,  1756,  1757,  1834,  1758,  1759,  1760,  1761,  1762,
    1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,  1774,  1835,  1836,  1775,  1875,  1776,  1777,  1778,  1779,
    1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,
    1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,  1846,
    1847,  1790,  1791,  1792,  1793,     0,   111,   112,  1254,  1454,
       0,  1232,   110,  1807,  1814,  1828,  1304,  1305,   111,   253,
     479,     0,     0,     0,     0,     0,     0,   208,     0,   390,
     389,     0,  1295,   395,     0,     0,     0,   114,   106,  1671,
     113,  1231,   104,  1425,     0,     0,   414,   415,     0,   425,
       0,   407,   412,   408,     0,   434,   427,   435,   416,     0,
     406,   428,   417,   405,     0,   436,   422,   410,     0,     0,
       0,   254,   217,   396,     0,   154,     0,  1319,  1320,  1321,
    1322,  1323,  1324,  1329,  1325,  1326,  1327,  1328,  1330,  1331,
    1332,  1333,  1334,  1310,  1315,  1335,  1336,  1337,  1338,  1339,
    1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,     0,
    1306,     0,     0,  1800,  1851,  1805,     0,  1818,     0,  1821,
    1822,  1705,  1829,  1832,  1833,  1834,  1835,     0,   752,   113,
     108,   736,     0,   518,   688,   698,   736,   741,  1018,   764,
    1019,     0,   115,  1391,  1390,  1386,  1385,   193,  1269,  1434,
    1572,  1612,  1722,  1830,  1753,  1450,  1435,  1429,  1433,   255,
     579,   577,     0,  1203,  1572,  1612,  1709,  1722,  1830,  1365,
    1369,     0,   252,  1452,  1439,     0,  1440,   113,   524,   571,
       0,   259,  1404,     0,  1409,     0,  1685,   551,   554,  1263,
     552,   516,     0,     1,   154,  1314,  1419,     0,   160,     0,
     575,   575,     0,   575,     0,   508,     0,     0,   516,   511,
     515,   685,  1449,  1830,  1753,  1438,  1441,  1581,     0,     0,
    1581,     0,  1581,     0,  1581,     0,     0,  1428,  1187,     0,
    1233,   116,     0,     0,     0,   361,   394,   393,   392,   391,
     396,  1581,  1279,     0,   443,   444,     0,     0,     0,     0,
       0,   204,  1290,   107,   105,     0,  1423,   423,   424,     0,
     413,   409,   411,   248,     0,  1581,  1258,   433,   429,  1581,
     433,  1225,  1581,     0,     0,   209,     0,   389,  1312,  1349,
    1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1914,  1913,
    1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,  1936,
    1934,  1935,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1944,
    1945,  1946,  1947,  1948,  1949,  1951,  1950,  1952,  1953,  1954,
    1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,
    1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,  1974,
    1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,
    1985,  1350,  1351,  1363,     0,  1364,  1354,  1318,   154,     0,
     478,  1303,  1387,     0,     0,     0,  1139,   736,   741,     0,
       0,   754,     0,  1158,     0,  1164,     0,     0,     0,   736,
     523,     0,   698,   753,   109,     0,   734,   735,   626,   626,
     580,     0,   561,   746,     0,     0,   749,   747,     0,   749,
       0,     0,     0,   749,   745,   706,     0,   626,     0,   734,
     737,   626,     0,   756,  1309,     0,     0,     0,     0,     0,
    1432,  1430,  1431,  1436,     0,     0,     0,  1235,  1237,  1238,
    1107,  1248,  1004,     0,  1795,  1796,  1797,  1179,  1798,  1799,
    1801,  1802,  1803,   958,  1546,  1804,  1246,  1806,  1808,  1809,
    1811,  1812,  1813,  1814,  1815,  1816,     0,  1247,  1819,  1650,
    1824,  1825,  1827,  1830,  1831,  1245,  1836,     0,     0,     0,
    1214,  1130,     0,     0,     0,  1003,     0,  1180,  1188,   999,
       0,     0,   800,   801,   822,   823,   802,   828,   829,   831,
     803,     0,  1210,   892,   987,  1198,  1006,  1037,  1008,  1017,
     995,  1074,   988,     0,   998,   990,  1206,   561,  1204,     0,
     991,  1234,   561,  1202,  1368,  1366,  1372,  1367,     0,     0,
       0,     0,     0,   109,  1411,  1412,  1403,  1401,  1402,  1400,
    1399,  1406,     0,  1408,  1315,  1125,  1127,     0,   553,     0,
       0,     0,   506,   505,     3,  1263,     0,     0,     0,     0,
     573,   574,     0,     0,     0,     0,     0,     0,     0,     0,
     669,   600,   601,   603,   666,   670,   678,     0,     0,     0,
       0,     0,   512,     0,  1448,  1444,  1442,     0,     0,     0,
     138,   138,     0,     0,     0,     0,     0,    98,    47,    91,
       0,     0,     0,     0,   231,   244,     0,     0,     0,     0,
       0,   241,     0,     0,   224,   218,   220,    49,     0,   138,
       0,    45,     0,     0,     0,    51,  1426,     0,   478,  1186,
       0,   120,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
    2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  1972,
    2085,  2086,  2087,  2088,  2089,   118,   119,   122,   121,   123,
     117,   110,     0,  1986,  1848,  1849,  1850,  1851,  1801,  1852,
    1853,     0,  1854,  1855,  1807,  1857,  1858,  1859,  1860,  1861,
    1862,  1863,  1864,  1814,  1866,  1867,  1868,  1869,  1870,  1871,
    2012,  1872,  1828,  1874,  1834,     0,  1875,  1010,   111,  1251,
    1133,   585,  1131,  1264,     0,     0,     0,     0,   476,     0,
       0,     0,     0,  1275,     0,     0,  1581,   200,  1581,   361,
       0,  1581,   361,  1581,     0,  1581,   205,     0,  1289,  1292,
       0,   426,     0,   421,   419,   418,   420,     0,     0,  1259,
     431,   432,     0,   400,     0,     0,   402,     0,     0,   214,
       0,   212,     0,   396,   154,     0,   225,  1359,  1360,  1358,
       0,     0,  1317,   228,  1353,  1362,  1352,  1361,  1316,   245,
    1311,     0,     0,  1307,   466,     0,     0,     0,     0,  1140,
     869,   868,   852,   853,   866,   867,   854,   855,   862,   863,
     871,   870,   860,   861,   856,   857,   850,   851,   858,   859,
     864,   865,   848,   849,  1153,  1141,  1142,  1143,  1144,  1145,
    1146,  1147,  1148,  1149,  1150,  1151,  1152,     0,     0,   697,
     695,     0,     0,     0,     0,     0,     0,  1180,     0,   962,
     988,     0,     0,     0,  1125,  1163,     0,     0,     0,     0,
       0,     0,  1125,  1169,     0,     0,   720,   732,     0,   619,
     625,   696,   694,     0,  1203,   689,     0,   766,   746,     0,
     745,     0,     0,   748,   742,     0,   743,     0,     0,     0,
       0,   744,     0,     0,     0,     0,   692,     0,   732,     0,
     693,   763,  1393,  1392,  1388,  1375,  1383,   194,     0,  1255,
    1876,  1877,  1878,   810,  1879,   839,   817,   839,   839,  1880,
    1881,  1882,  1883,   806,   806,   819,  1884,  1885,  1886,  1887,
    1888,   807,   808,   844,  1889,  1890,  1891,  1892,  1893,     0,
       0,  1894,   839,  1895,   806,  1896,  1897,  1898,   811,  1899,
     774,  1900,     0,  1901,   809,   775,  1902,   847,   847,  1903,
       0,   834,  1904,  1256,  1257,     0,  1136,   784,   792,   793,
     794,   795,   820,   821,   796,   826,   827,   797,   891,     0,
     806,   154,  1437,  1451,     0,  1130,   996,   838,   825,  1178,
       0,   833,   832,     0,  1130,   815,   814,   813,  1001,     0,
     812,  1087,   839,   839,   837,   917,   816,     0,     0,     0,
       0,     0,   843,     0,   841,   918,   896,   897,     0,  1213,
    1222,  1125,  1129,     0,   999,  1125,     0,   992,   993,     0,
    1077,  1079,     0,     0,  1181,  1236,  1000,     0,  1241,     0,
       0,   891,   891,  1209,  1107,     0,  1097,  1100,     0,     0,
    1104,  1105,  1106,     0,     0,     0,  1201,     0,  1115,  1117,
       0,     0,   933,  1113,     0,   936,     0,     0,     0,     0,
    1101,  1102,  1103,  1093,  1094,  1095,  1096,  1098,  1099,  1111,
    1092,   914,     0,   989,     0,  1040,     0,   913,  1207,   687,
       0,  1239,   687,  1377,  1381,  1382,  1380,  1376,     0,  1371,
    1370,  1373,  1374,  1453,     0,  1413,  1397,     0,  1394,  1128,
     682,   555,  1227,     0,   559,  1420,  1418,   159,   158,     0,
       0,   528,   527,   594,   586,   588,   594,     0,   526,     0,
     642,   643,     0,     0,     0,     0,   675,   673,  1235,  1248,
     630,   604,   629,     0,     0,   608,     0,   634,   892,   668,
     510,   598,   599,   602,   509,     0,   671,     0,   681,     0,
     547,   549,   532,   546,   544,   529,   537,   669,   603,     0,
    1443,     0,     0,     0,     0,     0,  1581,     0,     0,   777,
      82,    63,   313,   137,     0,     0,     0,     0,     0,     0,
       0,    90,    87,    88,    89,     0,     0,     0,     0,  1255,
     229,   230,   243,     0,   234,   235,   232,   236,   237,     0,
       0,   222,   223,     0,     0,     0,     0,   221,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1427,  1421,  1182,
    1187,   585,   585,   585,     0,   583,   584,     0,     0,     0,
     465,   359,   369,     0,     0,     0,  1279,     0,     0,     0,
       0,     0,   204,     0,   396,  1280,  1278,  1282,  1281,  1283,
    1552,   188,     0,     0,   199,   196,     0,   358,   332,     0,
       0,  1294,     0,     0,     0,     0,     0,  1581,   348,  1291,
       0,  1424,   249,   433,  1260,     0,   430,   433,  1226,     0,
     433,   216,     0,     0,  1313,  1355,   226,   246,   227,   247,
     478,   473,   501,     0,   481,   486,   463,     0,   463,     0,
     483,   487,   463,   482,     0,   463,   477,  1389,     0,  1033,
       0,  1023,     0,     0,   755,     0,     0,  1024,   964,   965,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   982,   981,
    1025,   759,     0,   762,     0,     0,  1161,  1162,     0,  1026,
       0,     0,  1168,     0,     0,     0,  1031,     0,   699,     0,
       0,     0,   614,   618,   621,     0,   624,   561,   517,  1572,
    1612,     0,   572,   572,   572,   570,   560,     0,   646,     0,
       0,   721,     0,     0,   723,   725,     0,     0,   728,   705,
     704,     0,     0,     0,     0,   767,     0,  1231,     0,     0,
     195,     0,     0,     0,   792,     0,     0,     0,   782,   778,
       0,   872,   873,   874,   875,   876,   877,   878,   879,   880,
     881,   882,   883,   798,  1268,     0,   804,  1273,  1274,  1271,
    1267,  1270,  1272,     0,     0,     0,     0,  1177,  1173,     0,
       0,     0,     0,  1082,  1084,  1086,     0,   836,   835,  1091,
    1097,  1100,  1104,  1105,  1106,  1101,  1102,  1103,  1093,  1094,
    1095,  1096,  1098,  1099,     0,  1119,     0,  1073,     0,     0,
       0,     0,     0,     0,  1212,     0,   960,     0,   994,  1005,
       0,     0,  1080,  1009,  1214,  1189,     0,     0,     0,  1244,
    1243,   893,   902,   905,   937,   938,   909,   910,   911,   915,
    1266,  1265,  1208,     0,  1200,     0,     0,   894,   919,   924,
       0,  1170,   954,     0,   942,     0,   932,     0,   940,   944,
     920,   935,     0,   916,     0,  1201,  1116,  1118,     0,  1114,
       0,   906,   907,   908,   898,   899,   900,   901,   903,   904,
     912,  1090,  1088,  1089,     0,  1187,     0,  1199,     0,     0,
    1042,     0,     0,   939,  1205,     0,   766,   585,   766,     0,
     891,  1414,  1263,  1407,  1396,  1263,  1126,  1228,  1262,   557,
       0,     0,     0,  1416,   145,   149,     0,  1188,   179,   181,
     687,     0,   592,   593,   597,     0,     0,   597,   576,   525,
    1825,  1705,     0,     0,     0,     0,   635,   676,     0,   667,
     632,   633,     0,   631,  1235,   636,  1234,   637,   640,   641,
     609,  1223,   677,   679,     0,   672,     0,  1229,   531,   550,
       0,     0,     0,     0,     0,   514,   513,   683,     0,    48,
       0,  1581,    65,     0,     0,     0,     0,     0,     0,   263,
       0,   363,   263,   103,  1581,   433,  1581,   433,  1475,  1547,
    1723,     0,    61,   337,    94,     0,   131,   366,     0,   322,
      84,    99,   124,     0,     0,   219,    50,   233,   238,   127,
     242,   239,  1299,   240,   138,     0,    46,     0,   125,     0,
    1297,     0,     0,    52,   129,  1301,  1428,     0,  1186,     0,
     583,   583,   583,     0,  1132,     0,     0,     0,  1134,  1135,
     451,   464,     0,   360,     0,   475,   454,   455,   465,  1277,
       0,   200,   361,     0,   361,     0,     0,  1279,     0,     0,
     190,   186,     0,     0,     0,     0,   359,   351,   349,   382,
       0,   356,   350,     0,     0,   308,     0,  1469,     0,     0,
       0,     0,   445,     0,     0,   204,     0,     0,     0,   399,
    1261,   401,     0,   403,   215,   213,  1308,   470,     0,   469,
     474,   468,   472,   467,     0,   462,     0,   496,     0,     0,
       0,     0,     0,     0,     0,     0,  1020,  1138,     0,  1156,
    1155,   963,   970,   973,   977,   978,   979,  1157,     0,     0,
       0,   974,   975,   976,   966,   967,   968,   969,   971,   972,
     980,   764,     0,     0,   758,  1166,  1165,  1159,  1160,     0,
    1028,  1029,  1030,  1167,     0,     0,   733,   612,   610,   613,
     615,   611,     0,     0,   766,   572,   572,   572,   572,   569,
       0,     0,     0,   765,     0,   663,   727,     0,   751,     0,
     724,     0,     0,   715,     0,   722,   771,   738,     0,     0,
     740,  1384,   788,     0,   783,   779,     0,     0,     0,   789,
       0,     0,     0,     0,     0,     0,     0,  1137,   578,   997,
       0,     0,     0,  1174,     0,   959,   805,   818,     0,  1085,
    1007,     0,  1108,  1072,   846,   845,   847,   847,     0,     0,
       0,  1221,     0,  1126,  1076,  1078,  1222,  1002,   830,   891,
       0,     0,     0,     0,     0,     0,     0,   943,   934,     0,
     941,   945,     0,     0,     0,   928,     0,     0,   926,   955,
     922,     0,     0,   956,  1186,     0,  1190,     0,     0,  1041,
    1050,   690,   686,   646,   583,   646,     0,  1378,  1398,  1395,
     558,   154,  1417,     0,   168,     0,     0,     0,     0,   171,
     185,   182,  1416,     0,     0,   587,   589,     0,  1109,   597,
     591,   639,   638,     0,   607,   674,   605,     0,   680,     0,
     548,     0,   534,     0,   708,     0,     0,     0,     0,     0,
     312,     0,     0,     0,   263,     0,   371,     0,   378,     0,
       0,   363,   344,    83,     0,     0,     0,    57,   102,    75,
      67,    53,    81,     0,     0,    86,     0,    79,    96,    97,
      95,   100,     0,   273,   298,     0,     0,   309,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   478,
    1187,  1183,  1187,     0,     0,     0,   585,   581,   582,  1011,
       0,   450,   499,   500,   498,   224,   370,     0,     0,   198,
     358,     0,  1294,     0,     0,  1276,   396,     0,   191,     0,
     189,     0,   200,   361,     0,   336,   332,   357,   330,   329,
     331,     0,  1470,   217,     0,  1464,   361,  1293,     0,     0,
     446,     0,   440,     0,   201,     0,  1288,   433,     0,   458,
     497,   502,   484,   489,     0,   495,   491,   490,   485,   493,
     492,   488,  1021,  1032,  1154,     0,     0,     0,     0,   757,
     760,     0,  1027,  1022,   731,     0,     0,   646,     0,     0,
       0,     0,   563,   562,   568,     0,     0,  1044,   726,     0,
       0,     0,   713,   703,   709,     0,     0,     0,     0,   769,
     768,   739,   792,     0,   772,   792,     0,   792,     0,   790,
       0,   799,   884,   885,   886,   887,   888,   889,   890,   824,
       0,  1176,  1172,  1081,  1083,  1120,   842,   840,  1211,  1125,
    1216,  1218,     0,     0,     0,  1075,   961,  1242,   895,     0,
       0,   925,  1171,   946,     0,     0,     0,   921,  1108,     0,
       0,     0,     0,     0,   930,     0,  1194,  1187,     0,  1193,
       0,     0,     0,     0,  1016,   691,   663,     0,   663,     0,
       0,  1415,     0,  1410,   146,   147,   148,     0,     0,     0,
     163,   140,     0,     0,   180,   168,   156,   595,   596,     0,
     590,   606,  1224,  1230,   533,     0,   999,     0,     0,   530,
       0,   132,   263,     0,     0,    64,     0,   380,   324,   372,
     355,   339,     0,     0,     0,   264,     0,   397,     0,     0,
     345,     0,     0,     0,     0,   325,     0,     0,   284,     0,
       0,   355,     0,   362,   280,   281,     0,    56,    76,     0,
      72,     0,   101,     0,     0,     0,     0,     0,    59,    71,
       0,    54,     0,   433,   433,    62,  1255,  1876,  1877,  1878,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1996,  1886,  1887,
    1888,  1889,  1890,  1891,  1892,  1893,  2005,  1894,   270,  1895,
    1650,  1896,  1897,  1898,  1899,  1900,     0,  1901,   775,  1902,
    1903,  2081,  1904,  1093,  1094,   268,   269,   365,   265,  1256,
     266,   373,   267,     0,   368,   323,   128,  1300,     0,   126,
       0,  1298,   135,   133,   130,  1302,  1422,     0,     0,  1014,
    1015,  1012,   583,     0,     0,   478,   457,     0,     0,  1469,
       0,     0,     0,     0,  1581,     0,   187,     0,  1294,   197,
     358,     0,   388,   308,   383,     0,  1469,  1467,     0,  1294,
    1463,     0,   437,     0,     0,     0,     0,   404,   471,     0,
     494,   983,     0,     0,     0,     0,   622,     0,   628,   663,
     567,   566,   565,   564,   645,  1520,  1808,  1704,     0,   649,
     644,   647,   652,   654,   653,   655,   651,   662,     0,   665,
     750,  1121,  1123,     0,     0,     0,     0,   714,     0,   716,
       0,   718,     0,   770,   786,     0,   787,     0,   785,   780,
     791,  1175,  1219,  1220,  1215,     0,   892,   952,   950,   947,
       0,   948,   929,     0,     0,   927,   923,     0,   957,     0,
       0,  1191,     0,  1036,     0,  1039,  1053,  1049,  1048,  1044,
    1011,  1044,  1379,   556,   167,   144,   170,   169,     0,  1188,
     177,     0,     0,   168,     0,   172,   447,     0,     0,   545,
     707,   538,   539,     0,   376,    66,     0,   355,     0,   263,
     341,   340,   343,   338,   342,     0,   398,     0,     0,   282,
       0,   289,   327,   328,   326,   283,   355,   361,   285,     0,
       0,     0,    68,    58,    55,    60,    69,     0,     0,    70,
      73,   771,    85,    78,  1255,  2005,  2014,     0,     0,     0,
       0,     0,  1185,  1184,     0,   453,   452,   449,   460,   224,
       0,     0,   332,  1466,     0,     0,   442,   203,     0,     0,
     358,   192,     0,     0,     0,  1469,     0,     0,   260,     0,
     305,     0,   210,  1468,     0,     0,  1455,     0,     0,     0,
    1286,  1287,     0,   459,   984,     0,   985,   761,     0,     0,
     620,  1044,     0,     0,     0,   656,   650,     0,  1043,  1045,
       0,   617,  1124,   710,     0,   712,     0,   736,   585,     0,
     736,   719,   781,   773,  1217,  1034,     0,   949,   953,   951,
     931,  1187,  1195,  1187,  1192,  1038,  1052,  1055,   665,  1240,
     665,     0,     0,   155,     0,     0,   152,   139,   157,  1110,
     535,   536,     0,   263,     0,   354,   377,   294,   272,     0,
       0,     0,   279,   286,   387,   288,     0,    77,    93,     0,
       0,   367,   136,   134,  1013,   478,     0,  1294,   308,  1463,
     439,     0,     0,     0,   332,   217,  1465,   321,   314,   315,
     316,   317,   318,   319,   320,   335,   334,   306,   307,     0,
       0,     0,     0,     0,   441,   202,  1288,     0,   174,   183,
       0,   174,   986,   623,     0,   665,     0,     0,     0,   648,
       0,     0,   664,     0,   521,  1122,     0,   702,   700,   583,
       0,   701,     0,     0,     0,     0,   585,   617,   617,   141,
       0,   142,   178,     0,     0,     0,   361,   379,   353,     0,
     346,   292,   291,   293,   297,     0,   295,     0,   311,     0,
     304,   272,     0,    80,     0,   374,   448,   456,     0,   262,
    1457,   358,     0,  1463,   308,  1469,  1463,     0,  1460,     0,
     438,     0,     0,     0,   176,  1294,     0,   176,     0,   617,
     658,     0,   657,  1047,  1046,   619,   711,     0,     0,  1035,
    1197,  1196,     0,  1059,   520,   519,     0,     0,     0,     0,
     387,     0,   333,     0,     0,   294,     0,   287,   384,   385,
     386,     0,   300,   290,   301,    74,    92,   375,     0,   358,
    1458,   261,   211,  1456,  1461,  1462,     0,   174,   173,   594,
     175,   766,   184,   594,   627,   522,   659,   616,     0,   717,
    1054,     0,     0,     0,     0,     0,   151,   766,   162,     0,
     304,   352,   347,   271,   296,   310,     0,     0,     0,   302,
       0,   303,  1463,     0,   176,   597,  1284,   597,  1794,  1521,
    1760,     0,  1071,  1060,  1071,  1071,  1051,   143,   150,     0,
     263,   276,     0,   275,     0,   364,   299,  1459,  1294,   594,
     164,   165,     0,  1064,  1063,  1062,  1066,  1065,     0,  1058,
    1056,  1057,   766,   381,   274,   278,   277,   766,   597,     0,
       0,  1068,     0,  1069,   161,  1285,   166,  1061,  1067,  1070
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3041, -3041, -3041,  2029,   105,   109,  -728, -1092,  -844, -1091,
   -3041,  -102,   111, -3041, -3041,   202, -3041,  1002, -3041,   175,
    -660,   550, -3041,  1094, -3041, -3041,    40,   510,   112,   113,
    2129,  2870,  2601,  3287,     6,  -513,  -713, -1201,  -651,     7,
   -3041, -3041, -3041, -3041, -3041,  -606,   489, -1107, -3041,   436,
   -3041, -3041, -3041, -3041,  -197,   156, -1758,    16, -2141, -2831,
    -557, -3041,  -661, -3041,  -312, -3041,  -605, -3041,  -935,  -615,
    -649, -2770, -1048, -3041,  1663,  -364, -3041,   578, -3041, -2486,
   -3041, -3041,   567, -3041, -1050, -3041, -2203,   150,  -594, -2544,
   -2523, -2119,  -744,   232,  -601,   206, -2089, -1157, -3041,   592,
   -3041,  -583, -3041,  -698, -1875,   114, -2714, -1640,    -7, -3041,
   -3041, -3041,  -560, -3041, -2461,   115,  1508, -2081,   117, -1631,
   -3041, -3041, -1646,  2030,    22, -2018,   119, -3041, -3041,   120,
      12,  -496,   277, -3041,   121, -3041, -3041,  1484,  -702, -3041,
   -3041,   122,   950, -3041, -2492, -3041,  -442, -3041,  -484,  -486,
   -3041, -3041,    37,  -803,  1469, -3041, -3041, -3041,    38, -3041,
    -471, -3041, -3041, -2533, -3041,    19, -3041, -3041, -3041, -3041,
   -3041,  -407,   288, -3041, -3041,  -546, -2497,  -499, -3041, -2837,
   -2985, -3041, -3041,  -647, -2912, -1999,   123,   100,  1459,   128,
     129, -3041,   304,   134, -1038,     4,   369,   -30,   -53, -3041,
     -45, -3041, -3041, -3041,   631, -3041, -3041,    18,    74,  1738,
   -3041,  -940, -3041, -1452,   697, -3041,  1888,  1893, -2156,  -680,
     -63, -3041,   669, -1629, -2072,  -534,  1097,  1720,  1730,   433,
   -2436, -3041,  -536, -3041,   438, -3041, -3041,   658,  1141, -1533,
   -1507, -3041, -2036, -3041,  -455,  -342, -3041, -3041, -3041, -3041,
   -3041, -2343, -2269,  -507,  1108, -3041,  1734, -3041, -3041, -3041,
   -3041,    46, -1480,  2796,   698,   -76, -3041, -3041, -3041, -3041,
     138, -3041,   878,  -170, -3041,  2187,  -552,  -641,  1939,  -516,
     400, -1773,    44,  2203,   478, -3041, -3041,   480, -2049, -1377,
     441,  -257,   884, -3041, -3041, -1229, -3041, -1858, -1062, -3041,
   -3041,  -820,  -763, -3041, -3041, -3041,  1104,  1109, -3041, -3041,
    2230,  2235, -3041,  -805,  2370,  -813,  -931,  1958,  -818,  1963,
    -842,  -825,  -839,  1977,  1985,  1987,  1993,  2009,  2010, -1488,
    4761,   659,  3738, -2155, -3041,  1004,    21, -3041, -1387,    61,
   -3041, -3041, -3041, -3041, -2176, -3041,  -428, -3041,  -414, -3041,
   -3041, -3041, -1570, -3040, -1599, -3041,  2872,   826, -3041, -3041,
     428, -3041, -3041, -3041, -3041, -1464, -3041,  5753,   723, -3041,
   -1969, -3041, -3041,  -882,  -675,  -766,  -891, -1185, -1887, -3041,
   -3041, -3041, -3041, -3041, -3041, -1485, -1725,  -175,   783, -3041,
   -3041,   875, -3041, -3041, -3041, -1672, -2051, -3041, -3041, -3041,
     790,  1454,   102,  -664, -1603, -3041,   836, -2301, -3041, -3041,
     426, -3041,  -473, -1012, -2364,   500,     2, -3041,  2693, -2493,
   -3041, -3041,  -561, -2582, -1001,  -724, -3041,   136,  1429,    24,
   -3041,   137,  1227, -3041, -3041, -3041,   139, -3041,   667,   140,
     696, -3041,   927, -3041,   800,   141, -3041, -3041,   110,  2779,
      41, -2947
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   587,   588,  1804,  1753,  2885,  1126,
    1743,  1323,   589,  2549,  2550,  2551,  2201,  1107,  3313,  2202,
    1108,  1109,  2553,    52,    53,    54,   110,  1138,   590,   591,
     526,   638,   997,   640,   998,  1576,   741,  1215,  1216,   592,
    2591,  2258,  3109,  2638,  3110,  2316,  2252,  1333,  2310,  1842,
    1785,  1334,   533,  1856,  2639,  2595,  1843,   593,  2538,  2887,
    3306,  2564,  3445,  2823,  2824,  3303,  3304,  2541,  2204,  3372,
    3373,  2622,  1734,  3367,  2277,  3245,  2208,  2189,  2825,  2285,
    3205,  2932,  2205,  2805,  2278,  3299,  1819,  2279,  3300,  3059,
    2280,  1782,  1808,  2542,  3374,  2209,  1783,  2537,  2888,  1722,
    2281,  3310,  2282,   544,  2809,   594,  2625,  1280,   528,   517,
     518,  1504,  1218,  1259,  1219,   595,   760,  1814,   596,  1273,
    1796,    62,  1287,   545,   597,  1805,   598,  2609,  2610,   599,
     600,  1044,  2494,  2123,   601,   578,   579,   777,  1303,   580,
      68,   602,  1309,  1310,   785,    70,   706,  1325,   603,  1326,
    1327,   874,    71,  2640,   876,   877,    72,    73,   605,  3141,
    2946,  1289,  1820,  2290,   546,   606,  2770,  2125,  2497,  3295,
      76,  3040,  2128,  1068,  3043,  3259,  2763,  3038,  2498,  3334,
    3389,  3041,  2129,  2130,  3260,  2131,   607,   655,  1444,   608,
     609,   939,  1980,   610,  1725,   611,   999,    83,    84,   912,
      85,  3053,    86,    87,  1700,  1701,  1702,   685,   697,   698,
    2121,  1417,  1926,   690,  1072,  1669,   672,   673,  2247,   714,
    1776,  1664,  1665,  2134,  2505,  1693,  1694,  1081,  1082,  1914,
    3274,  1915,  1916,  1410,  1411,  3150,  1681,  1685,  1686,  2155,
    2145,  1672,  2385,  2969,  2970,  2971,  2972,  2973,  2974,  2975,
    1000,  2677,  3161,  1689,  1690,  1084,  1085,  1086,  1698,  2165,
      89,    90,  2106,  2481,  2482,   644,  2986,  1434,  1703,  2681,
    2682,  2683,  2990,  2991,  2992,   645,   907,   908,   931,   926,
    1424,  1934,   646,   647,  1891,  1892,  2354,   933,  1928,  1944,
    1945,  2689,  2407,  1505,  2190,  1506,  1507,  1959,  1508,  1001,
    1509,  1535,  1002,  1540,  1511,  1003,  1004,  1005,  1514,  1006,
    1007,  1008,  1009,  1528,  1010,  1011,  1552,  1961,  1962,  1963,
    1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,
    1055,  1704,  1013,  1014,  1015,  1016,  1017,  1018,   649,  1019,
    1020,  1625,  2100,  2480,  2979,  3158,  3159,  2754,  3028,  3187,
    3286,  3404,  3432,  3433,  3459,  1021,  1022,  1570,  1571,  1572,
    1993,  1994,  1995,  1996,  2094,  1619,  1620,  1023,  2892,  1622,
    2016,  2982,  2983,  1056,  1403,  1563,  1261,  1262,  1519,  1377,
    1378,  1384,  1866,  1392,  1396,  1896,  1897,  1404,  2062,  1024,
    1987,  1988,  2424,  1530,  1025,  1140,  1575,  2749,  2097,  1623,
    2056,  1032,  1026,  1033,  1028,  1559,  1560,  2441,  2721,  2722,
    2026,  2162,  1652,  2167,  2168,   781,  1029,  1030,  1031,  1263,
     521,  1520,  3390,  1299,  1061,  1264,  2052,   612,   102,   613,
      93,   614,  1051,   694,  1052,  1054,   615,   666,   667,   616,
     679,   680,  1446,  1639,  1447,   617,    98,  1095,   668,   686,
     618,  3136
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     516,  1268,   740,  1125,    81,   927,  1893,    57,  1027,   520,
     716,   717,    66,  1395,   516,   702,    58,   778,    88,    75,
    1057,   715,    63,   520,    92,  2104,   872,  1220,   519,   654,
     654,  1768,  1756,  1322,  1757,   719,    88,  2137,    74,  1091,
     684,    99,   648,   720,  1368,  1801,  1448,  1370,  1653,  1721,
    1740,  2543,  1270,  1554,   554,   604,  1731,  2483,  2296,  2485,
    1312,  1369,  1948,  1727,  1655,  2510,  2403,   642,  1366,  2920,
    1773,  1127,  2893,  1131,  1328,  1135,  2500,  2918,  1306,   516,
     516,   688,   650,  2015,  2583,  2584,  2585,  1629,   520,   520,
     909,  1761,  1632,  2039,  2040,   930,  2405,  1824,  2239,  2536,
     873,   788,   725,  2464,  2890,    49,   780,   648,   648,    50,
    1566,    51,    55,    56,    59,    60,   737,    61,   700,    64,
      65,    67,    69,    77,   656,  1518,   904,  2499,    78,    79,
    2933,  2936,   642,   642,    80,  2596,    91,    94,  2720,    95,
      96,    97,  1536,   681,  -504,  -507,  2266,   650,   650,  2263,
     733,  2157,  2108,  1531,  1532,  2259,  2386,  2784,  1546, -1865,
    -847,  2789,   878,  3128, -1252,  3333, -1252, -2005, -2005,  2395,
    1544,  2357, -1249, -1249,  1043,  1510, -1865, -1856,   652,  2160,
    1080, -1873, -1856,  2611,  2603, -1996, -1996, -1253, -1233, -2014,
   -2014,  1220,  1712, -1865,  1636, -1250, -1250,  -847,  -844,   951,
     652, -1873,  -844, -1253,   951,  3113,  -806,  1083,  -819,  1337,
    -834,  1099,  1300,  1069,  2054,  2054,  -839,  1100,   652, -1091,
    1039,  2091,  3132,  -516,   692,  1638,  2422, -1091,  -461,  2092,
   -1112,  2645,  2647,   769,  2650,   652,  2684,  -516, -1112, -1991,
   -1991,   652,  -516,  2599,  -504,  -507,  1379,  1723,  3208,  1633,
    1316,   652,  2075, -2016, -2016,   951,  1316,   707,  1759,  2170,
    2913,   951,  1870,  1723,  1732,  1585,   951,  1872,  3221,  1741,
    1587,   710,  1744,  1745,  2571,  1732,  3063,  3078,  3046,  3441,
    1657,  3074,  3320,  1732,  1585,  -585,  1715,  1293,  1586,  1587,
    -585,  1673,  2618,  -516,  1732,   950,  1673,  3293,  1870,  1518,
    1595,  1300,  1871,  1872,  -224,  1300,  1873,  1874,  1875,  -224,
    1732,  3098,   910,  -516,  1046,  2937,  1562,   872,   712,  1595,
    3408,  2367,  1101,  -640,  3470,  2667,  1294,   530,  2757,  3465,
    1220,  1771,  2798,  2101,  1597,   620,   930,  1674,  2245,  3454,
    1772,   711,  1674,  1568,  3129,     3,     4,   708,   909,  1510,
    3250,  2163,  3393,  1597,  2369,  2656,  2041,  1670,  2539,  3130,
    3251,  -585,  -516,  1634,  3036,  2132,  3301,   670,  1870,    82,
    3126,  -516,  1871,  1872,  1070,  2076,  3380,   712,  2256,  3383,
    2827,  2330,  3358,  3097,   553,  2187,  3060,    82,  3452,  -776,
     641,  2807,  2077,  2797,  1330,  3122,  1910,  2078,  1421,  3153,
    3471,  1755,  3037,  1675,  1428,    82,  3134,  3123,  2370,  1762,
    -585,  3236,  2358,  3029,   701,  3031,   619,  2808,  1709,   712,
    1765,  3127,  2777,  2475,  3337,  1705,  1706,  1910,  3302,  3477,
    1954,   651,  2944,  -504,  -507,  2079,  2570,  2780,  3416,  3449,
    1658,  3075,  2536,   531,  2536,  2188,  1717,  2756,   108,  2758,
    2133,   911,   689,  2828,  1676,   641,   641,   718,  3319,  1676,
    3061,  1518,  2715,  3401,  1473,  1671,  2164,    82,  1733,   671,
    2380,  2381,  2382,   621,  3423,  3447,  1071,  1040,  1102,  1733,
    2938,  1047,  2102,  1048,  1574,  1876,  1635,  1733,  3442,  2778,
    2191,  3466,  3472,  2540,   695,  1870,  3409,  3455,  1733,  1871,
    1872,  2246,  -504,  -507,  1295,  1585,  1301,  2657,  1877,  1586,
    1587,  1510,   552,  3203,  1733,  3219,  1677,   582,  2368,  1730,
    -516,  1677,  3294,  2914,  -776,  -660,  3252,   703,  2684,   658,
    3411,   109,  3213,  2171,  1730,  1103,   744,  2829,  1811,  1104,
    1595,  1774,   770,   699,   699,  1730,  3197,  1548,  2941,  3131,
    3424,  2371,  1041,  1730,  3381,  2950,   702,  1707,  3108,  1986,
    1525,   901,    45,  1718,  1730,   945,   693,  1554,   713,  2399,
    1656,  1105,  3209,  3443,  1597,  2736,  2592,  2593,  1878,   871,
    1730,  1775,  2055,  2466,  1708, -1091,   709,  2093,   738,  2244,
    2080,  1062,   739,  1760,  2929,  1301, -1112,   738,   704,  1301,
    1951,   739,  3444,    88,   729,  2654,  2893,   702,  2015,  2572,
    2157,  3382,  1648,  3064,  2678,  1270,  3151,  3402,  1296,   516,
    -504,  -507,  2487,   875,  2300,   880,  3228,   654,   520,  2325,
     516,  2959,   719,  1549,  2614,  2257,  2605,  2513,  2890,   520,
     720,  2331,  1106,  1723,  1536,  3473,  3403,   648,   705,  2633,
    2502,  3054,  1531,  1532,  1724,  1550,  1092,   934,   648,  -504,
    -507,  -504,  -507,  2182,  1546,   516,   516,  1302, -1865,  1551,
    1549,  2359,  2508, -1252,  1527, -1252,  1541,  1544,  2364,  1518,
    2596,  1841,  1036,   900,  3200, -1865, -1856,   650,   516,  3201,
   -1873, -1856,  1550,  1541,  3318,   738, -1253, -1233,   650,   739,
    1976,  3174, -1865,  2699, -1990, -1990,  1553,  -844,    81,  1580,
   -1873,    57, -1253,  1757,  2396,  1534,    66,  1539,  2396,  -834,
      58,   882,    88,    75,  1902,  -839,    63,  1630,    92,  1510,
    1050,   516,  1217,  2306,  1045,  1258,   778,  1997,  1998,  2107,
    1533,  1826,    74,  3325,  2109,    99,  2417,  1830,  3324,  1917,
    2988,  1320,  1321,  1045,   898,   872,  3104,  1320,  1321,  1984,
    1305,  1887,  3087,  3088,  1618,  1937,  2244,  3417,  1990,   736,
    1058,  2954,  1518,  3072,  3045,  1049,  1751,  1258,  1613,  1614,
    1615,  1616,  1617,  1618,   681,   681,   532,   681,  1879,  1880,
    1881,  1746,  1882,  1883,  1884,  1885,  1886,  1887,  2918,  1076,
    1752,  3368,  3391,  1076,   652,  -224,  -224,   652,  1077,    49,
    3047,  2338,  1585,    50,  2765,    51,    55,    56,    59,    60,
    2187,    61,  1510,    64,    65,    67,    69,    77,  3111,   873,
    1834,  1827,    78,    79,  2994,  1415,  1585,  2996,    80,  2998,
      91,    94,  1425,    95,    96,    97,  2922,  3073,  3010,  1983,
    1562,  3354,  3355,  3188,  1908,  3190,  3123,   885,  2283,  1562,
    2284,  1220,  2035,  1220,  1884,  1885,  1886,  1887,  2893,  2766,
     871,  1595,  1549,  2018,  1574,  1078,   516,   516,   710,  1078,
    2533,  1597,   516,  1324,   534,   516,   516,  1432,   516,   516,
     516,   516,  1364,   100,  1550,  2476,    88,  2365,  1732,  2217,
    2890,    82,  2036,  3395,   516,  1597,  1518,   534,  2907,  2220,
    2908,   516,  2223,   520,  2547,  3467,  1751,   721,  3206,  3287,
     520,  3288,  2293,  2668,  2669,  2670,  2671,  1732,  1079,   516,
    1258,  1503,   648,  2119,  2365,  1747,  1076,  3369,  1433,   648,
    1752,  1443,   101,  2051,  2840,  1748,   534,   535,   711,  1418,
     516,  3080,   743,  2339,    82,   701,  1510,   642,  2120,  3085,
     742,  2727,   702,  2340,   642,  1893,   746,  2015,   747,   516,
     535, -1296,   650,    21,  1418,  3265,  3220,  2374,  -207,   650,
     516,   516,   516,  1825,   516,   516,   750,  1217,  3193,  1882,
    1883,  1884,  1885,  1886,  1887,   887,  3339,  2309,  2801,  -516,
    3237,  1615,  1616,  1617,  1618,   761,   899,  1578,  3314,   535,
    2215,  2438,  1078,  -516,   936,  1825,   516,  1581,  -516,  1661,
    1662,  3370,  1668,   762,  2574,   937,   712,   720,   720,  2565,
     720,  2811,   766,   516,   516,  1631,  2057,  2812,  2311,   767,
    1112,  1723,  2566,   103,  1637,  1518,   748,  2191,   749,   764,
    2813,  2179,  1726,  2578,   718,  3238,   765,  1518,  2586,  1099,
    1113,  1079,  3297,  2268,  3239,  1100,  3145,   516,  1549,  -516,
     768,   516,   516,    82,  2814,  3020,  2815,  2203,  2216,  2207,
     783,   516,   516,   516,   916,  2802,   516,  1518,  3240,  -516,
    1550,  2240,  2241,  2242,  1518,  1510,  2269,   754,  2226,   772,
    1269,  2508,  1733,  2233,  1551,  1503,  1114,  1510,  1312,   916,
    1045,  2488,  1542,  1543,  2489,  2581,    25,    26,    27,   771,
     917,  2299,  2063,  3347,  1757,  2301,  2582,   539,  2303,   787,
    1518,  1733, -1987, -1987,  1518,   756,  1419,  1510,  -516,  2375,
    1518,  2376,  1667,  -584,  1510,   917,   919,  -516,  -584,  2064,
     539,  2803,   787,  2804,  2519,   543,  3182,  1346,  1347,  2544,
    3241,  1427,  1518,  2816,  2377,  1841,  2378,  3183,  1730,   755,
    1101,   919,  1758,  3242,   757,   713,  1766,  2694,   543,   774,
    1510,    32,  1787,  2456,  1510,  3138,  2573,   784,  2218,   539,
    1510,   787,   950,  2221,   738,  1870,   699,  1730,   739,  1871,
    1872,  1115,  1099,  1873,  1874,  1875,   883,  1099,  1100,  2607,
    2457,   104,  1510,  1100,   542,  1258,   884,   543,    37,  -584,
    1566,  1788,   105,  1901,  1258,  1903,  1904,  1354,  1355,  1836,
    2363,  2817,  1354,  1355,   951,  2619,  2818,   885,  2319,  1549,
    1838,  2627,  2318,  2320,   894,   951,  2322,    82,  1258,  2324,
    1116,    39,  1314,  2511,    21,  1315,  3118,   106,   951,   759,
    1117,  1550,    42,  2558,  2065,  2560,   756,  1503,  -584,  2066,
    2545,  1911,  1118,   923,  2067,  1553,  1912,   886,    43,   738,
     641,   872,   889,  1573,  2955,  2819,   738,   641, -1233,  1795,
     739,  1217,  1420,  2095,   892,  1797,  -516,  2096,   923,  3463,
    2321,  2820,    44,   893,  1119,   757,  1790,   107,   871,  1646,
    2420,  1798,  1647,  1101,  1799,  2015,    45,  1420,  1101,  1426,
     903,  1831,  1526,  1431,  1832,  1217,  1102,   940,   941,   942,
    2458,   516,    88,   895,  1538,  2459,  2891,  1840, -1988, -1988,
     758,  1443,  3426,  1929,  1358,  1359,  1931,  1412,   896,  1358,
    1359,  1935,   875,  3450,  1938,  3451,  1121,  1950,  3438,  1942,
    1951,  1564,   932,  1974,   738,  1436,  1975,   897,   739,  1440,
    1034,  1035,  3243,  1037,  2794,  3244,  2796,  2679,   516,   516,
    2686,  1122,  2172,  1129,   516,  2454,   516,  1104, -1989, -1989,
     759,   516,   516,   516,   516,   520,  3476,    25,    26,    27,
    1124,  2253,  2821,   898,  2254,  1877,   516,   516,  1073,   935,
    1075,  2822,   516,  3474,   648,   516, -1992, -1992,  3475,  1130,
     516,   520,   516,   516,   520,  2068,  1102,  2484,   516,   520,
    2313,  2351,   520,  2314,  2352,   111,  2069,   520,   529,   938,
     648,   718,   718,   648,   718,   581,  2397,  2400,   648,  2398,
    2398,   648,  1099,   943,   650,  2831,   648,  2838,  1100,  2811,
     669,   945,    32,  1518,   682,   642,   944,  2561,   642,  1102,
    2562,   946,  2906,   642,  1102,  1878,   642, -1993, -1993,   534,
     650,   642,  2795,   650,  1038,  1503,  2460,  2546,   650,  2547,
    1106,   650,   754,  2555,  1042,  2557,   650,  2461,  2830,    37,
    2839,  2567,  2814,  2915,  2568,  2716,  2717,  2522,  1053,  3283,
    1059,  3284,  1060,  1510,  1062,  3413,  1063,   516,   516,  2548,
    2602,  2630, -1994, -1994,  1951,  1981,   516,   516,  1977,  1066,
    1104,  1133,    39,  1978,   516,  1104, -1995, -1995,  1067,    88,
    1979,   516,   535,    42,  1074,  1982,  1093,  2203,  2203,  2203,
    1096,  2634,  1388,    21,  2314,  2691,  1094,  1566,  2398,   699,
   -1997, -1997,  1105,  1101,   755,  2692,  1217,  1134,  1975,  1097,
     516,  2695,  2703,   516,  2696,  2705,  2707,  2708,  1503,   516,
     516,   516,   516,   516,   516,   516,   516,  1217,  2104,  2704,
    2706,   516,   516,  1518,  1098,  2702,   516,    45,  1110,  2697,
     516,  1111,  2696,   516,   516,   516,   516,   516,   516,   516,
     516,   516,  1128,  3091,   516,   537,  2139,  2772, -1998, -1998,
    2773,   516,  2928,  1258,   720,  2254,  2948,  2956,  3011,  2949,
    2957,  1975,  1132,  1106,  1099,  2508,  3117,  1137,  1106,  2314,
    1100,  1136,   516,  1510,  2110,  3146,  1099,  3147,  1975,  1518,
    2398,  3177,  1100,  3184,  1975,  3194,  1951,  3227,  3195,  3211,
    2254,  1787,  1266,  1841,  2818,   516,  3255,  3262,  3335,  2314,
    1975,  3336,  1269, -1999, -1999,  3362,   516,   516,  3363,  -206,
   -2000, -2000,  1267,    82,  1050,  1879,  1880,  1881,  1272,  1882,
    1883,  1884,  1885,  1886,  1887,  1274,    25,    26,    27,  1510,
    1788,  3407,  3448,   950,  3336,  3336,  1870,  1844,  2158,  2159,
    1871,  1872,  1503,  2819,  1873,  1874,  1875, -2001, -2001,  1102,
    1275,  1217,   539,  1217,   540, -2002, -2002, -2003, -2003,  2820,
    1288,  2729, -2004, -2004,  1290,  1789, -2006, -2006, -2007, -2007,
    1291,  2637,  1292,  3055,  1297,  1101, -2008, -2008,   872,  2838,
     543,  1298,  1518,  1304,  1845,  3261,  1307,  1101, -2009, -2009,
    3425,    32,  1308,   516,  3427, -2010, -2010,  1258,  3173,  1313,
     516,   516,  2236, -2011, -2011,  1846,  2178, -2013, -2013,  1331,
    1104, -2015, -2015, -2017, -2017,  1790,  1332,  2035,   641,  1777,
    1778,   641,  1335,  1847,  1356,  1357,   641,  1848,    37,   641,
    -635,  -635,  1510,  1338,   641,  1828,  1258,  1829,  3107,  1217,
    -639,  -639,  1105,  2287,  1954,  -638,  -638,  1393,  1217,  1849,
    3468,  1406,  1850,  1358,  1359,  1258,   516,  3051,  3052,  1408,
    2821,    39,  3434,  3435,   871,  3460,  3461,  1409,  1851,  2822,
    1641,  1642,    42,  1416,  1423,  1518,  1422,  1324,  1429,  1430,
    1435,  1503,  1441,  2317,  2387,   516,   516,  3022,   516,  2788,
    2390,  1439,  1521,  1503,   516,   516,   516,   516,   516,   516,
    2891,  1522,   516,   516,   516,   516,   516,   516,   516,   516,
     516,   516,  2939,  1106,  1524,  -810,  -817,   516,   516,  1537,
      82,   516,  1533,  1503,    45,  1510,    45,  2508,   516,  -807,
    1503,  1102,  -660,  -661,  -808,  1547,  2912,  3261,  2923,  -811,
    1548,  2203,  -809,  1102,  1558,  2894,  1877,  2207,  1567,  1577,
     516,  1579,  1518,   516,  1624,   516,  1628,  1640,  1626,   516,
    1649,  1852,   520,  1650,  1659,  2947,  1503,  1654,   520,  1853,
    1503,  1660,   516,  1077,  1258,  1079,  1503,  1695,  1697,  3261,
    1699,   648,  1710,  1841,  1728,  1729,  1735,   648,  2224,  1736,
    1730,  1854,  1104,  1737,  1742,  1749,  1750,  1754,  1503,  2061,
    2231,  1764,  1510,   108,  1104,  1112,   642,  1770,   516,   516,
    1779,  1780,   642,  1784,  1792,  1793,  1878,  3083,  1855,  1794,
    1803,   650,  1806,  1807,  2225,  1113,  1809,   650,  1810,  3261,
    1812,  1813,  1815,  1821,  1816,  1822,  2232,  1825,  1833,  1859,
    1861,  1862,  1864,  1867,  1890,  1899,  1909,  3225,   516,  1898,
    1906,  1927,  1930,   516,   516,  1936,  1941,  1939,  1940,  1518,
     702,  1946,  1949,  1527,  1952,  1534,  1539,  1958,   718,  1953,
    1955,  1114,  1512,  1956,  1868,  1869,  1957,  1513,   516,   516,
    1889,  1985,  1986,   516,   951,  2019,  2020,  1585,  2025,  2028,
    2030,  2053,  2032,  1518,  2031,  1106,  2071,   516,  2060,  2105,
     516,  2072,   516,  2033,  2074,  2098,  2099,  1106,  2117,  1510,
    2135,  2118,  2122,   711,  2138,  2147,  1566,  2148,   516,  1217,
    2149,  2150,  2151,  2152,  2169,   516,  2173,  3168,   516,  2177,
    2180,  2174,  2184,  2286,  2185,  2186,   712,   520,  2251,  2260,
    2834,   913,  2255,  1510,  2270,   516,   914,  2272,  3316,  2273,
    2274,  2288,  2291,    21,   520,  2289,   648,  2993,   516,  2294,
    2295,  2297,  2891,  2298,  2302,  2315,  1115,  2323,  1870,  2353,
    1518,  3092,  3093,   648,  1895,   516,   516,  1894,  2360,  2361,
    2391,   642,  2362,  2366,  3277,  2384,  2372,  2402,  2373,  2389,
    2404,  2409,   516,  2410,   516,  2411,   650,  2413,   642,  2271,
    2414,  2415,  2416,   516,  2429,   915,  2418,  2426,    82,  2419,
    2427,  2430,  2434,   650,  1518,  1116,  2431,  2432,  2433,  2435,
    1510,  1217,  1217,  1217,  2436,  1117,  1879,  1880,  1881,  2437,
    1882,  1883,  1884,  1885,  1886,  1887,  2447,  1118,  2448,  2455,
    2450,  2563,  2462,  2471,  2183,  2472,  1512,  2477,  2479,  2478,
    2490,  1513,  2491,  2493,  2192,  2495,  2195,  2496,  2501,  2206,
     516,  2504,  2503,  -641,  1510,  2210,  1258,  2212,  2514,  1119,
     702,  2515,  2518,  2521,  2526,  2517,   916,  2525,  2527,  2531,
    2219,  3069,  2532,  2535,  1087,  2222,  2529,  2554,  2594,  2227,
    2228,  2229,  2230,  2556,  2234,  2235,    25,    26,    27,  1503,
    2569,  2575,  2587,  1757,  2576,  1795,  2608,  2577,  2588,  2601,
    2589,  1797,   917,  2590,  2606,  2600,  1518,   516,  2604,  2620,
    2617,  1121,  1841,  2616,  2621,  2628,  2635,  1798,   918,   641,
    1799,   871,  2624,  2644,  2652,   641,  2655,  1217,   919,  2658,
    2661,  2675,  2662,  2676,  1324,  2687,  1122,  2663,  2664,  2693,
    2688,  2701,  2642,  2709,  2643,  2712,  2734,  2718,  2648,  2724,
    2651,    32,  2732,  3214,  2747,  1124,  1510,  2753,  2735,  2755,
    2781,  2748,   920,  2738,  2759,   516,  2762,  2783,  2779,  2785,
    2793,  2800,  2806,   950,   520,  2799,  1870,  2842,  2826,  1112,
    1871,  1872,  2909,  1088,  1873,  1874,  1875,  2910,    37,  2911,
    2917,  2921,  2931,   648,  2926,  2935,  2927,  2945,  1512,  1113,
    2254,  2730,  2930,  1513,   516,  2943,  2952,  2953,   921,   872,
    2958,  2984,  2978,  2685,  3035,   922,  3002,  2999,  2980,  1503,
    1584,    39,  2989,  1585,  3042,  3000,  3048,  1586,  1587,   702,
    3062,  3003,    42,   650,  2750,   516,  3023,  3030,  3033,  3066,
    3058,   516,   516,  3044,  3067,  1114,  3049,  3050,    43,  1564,
    3056,  3076,   516,  3081,  3057,   923,  3068,  3079,  1595,  3082,
    3086, -1986,   702,   516, -1987, -2018,   516,  2061,   516, -1988,
    3099,  3100,    44, -1989,   924,  1503,   516, -1990, -1991,   516,
     516, -1992, -1993,  2473,   516,   516,    45, -1994,  3101, -1995,
    3400,   516,  1597, -1997,   641, -1998, -1999,  3266, -2000,  3268,
    2035, -2001, -2002,  3114,  3119,  3102,   516,  3133,  3279,  3135,
   -2003,   641, -2004,  2787,  3120,  1981,   516,  3137,  1977, -2006,
    3276,  2771, -2007,  1978,  3148, -2008, -2009,  3103, -2010,    88,
    1979,  3139, -2011,  3149,  3160,  1982,   516, -2012,  3142, -2013,
    1115,  3152, -2014,   925, -2015,   534,  3278, -2016,  1089,  3281,
    2332,  2333,  2334,  2335,  2336,  2337, -2017,  2453,  2341,  2342,
    2343,  2344,  2345,  2346,  2347,  2348,  2349,  2350,  1518, -1250,
   -1296,  3105,  3360,  3298,  3106,  1217,  3112,  3154,  2889,  1217,
    3156,  1217,  3162,  3163,  3166,  3169,  1877,  3167, -2018,  1116,
    3172,  2886,  3176,   516,  3191,   516,  3192,  3364,  3196,  1117,
    3199,  3202,  3204,  3216,  3217, -2018, -1249,  3224,   535,  3226,
   -2018,  1118,  3232,  3233,  3234,  3247,  1512,  1217,  1510,  3248,
    3249,  1513,  3263,  2594,  3264,  2919,  3353,  3267,   515,   527,
    3270,  3273,  3271,   550,  3285,  3280,  3348,  1828,   550,  3075,
    3305,  1795,   639,  1119,   653,   653,  3309,  1797, -2018,   657,
     550,   665,  2940,  3315,   665,  2942,  1878,   683,   687,   701,
    3311,   687,   786,  1798,   550,   550,  1799,  3321,   516,  3312,
     702,  1503,  3327,  3328,  3329,  3333,  3338,  3340,  3342,  3026,
    3345,  3346,  3352,  3350,  3351,  3357,  3359,  3361,   516,   516,
    3366,  3371,  3378,   516,  3394,  1121,   516,  3377,  3384,  1415,
    3379,  3385,  3396,  1606,  3386,  2685,  3398,   639,   639,  1512,
    3399,  1631,  3415,  3405,  1513,  3418,  3420,  3439,  3416,   683,
    1122,  3436,  3417,   516,   687,   550,   687,   687,   687,  3453,
    3458,  3464,  3298,   950,  2451,  2452,  1870,   516,   538,  1124,
    1871,  1872,   516,   516,  1873,  1874,  1875,   516,  1503,  3478,
    3469,  3479,   516,  1064,  3089,   516,   516,  2845,  2211,   702,
     516,  1258,  2114,  2552,   516,   740,  2579,  2597,   516,   881,
    2641,  2841,  3143,  2916,  3375,   516,  3446,   520,  3212,  3421,
    3414,  3440,  1720,  3246,  2534,  3032,  2559,  2934,   539,  3412,
     787,  3419,  3388,  2810,  2895,  2530,   648,  3410,  1791,  2775,
    1271,  1823,  2304, -2018,  1835,  3331,  2623,   541,  3292,  2774,
    3392,  3356,  3462,   542,  1857,  2760,   543,  1651,  1413,   516,
    2520,   642,  1692,  1414,  2506,  2176,  2666,   516,  1564,  3397,
    2516,  1691,  3341,  2144,  3269,  2175,   650,   643,  1696,  2394,
    2492,  2987,  3171,  1512,   902,  1999,   516,  1380,  1513,   888,
    2660,  2659,  2000,  2001,  3218,  1503,  2002,  2003,  2004,  2690,
    2408,  1564,   534,  3344,  1365,  2312,  1879,  1880,  1881,  1367,
    1882,  1883,  1884,  1885,  1886,  1887,  3343,  2714,  2445,  2509,
      82,  2469,  2423,  1371,  3034,  2467,    82, -1296,  1918,  2889,
    2446,  1372,  2726,  1373,  2113,  1584,  2401,   726,  1585,  1374,
       0,     0,  1586,  1587,     0,     0, -2018, -2018, -2018,     0,
   -2018,     0,  2786,     0,     0,  1375,  1376,  1613,  1614,  1615,
    1616,  1617,  1618,     0,     0,   535,     0,     0,     0,     0,
     691,     0,     0,  1595,   516,     0,     0,     0,     0,     0,
    1596,     0,     0,     0,     0,     0,  1877,     0,     0,     0,
       0,     0,     0,  3121,     0,  3125,  1217,     0,   702,     0,
       0,   950,   871,     0,  1870,   516,  1503,  1597,  1871,  1872,
       0,     0,  1873,  1874,  1875,  1324,     0,     0,     0,   536,
       0,   516,  1512,     0,     0,     0,     0,  1513,     0,  3013,
      82,     0,     0,   728,  1512,   731,     0,   735,   537,  1513,
       0,  1258,     0,     0,     0,     0,     0,     0,     0,     0,
    1503,     0,     0,     0,     0,   516,  1878,    82,     0,     0,
      82,     0,     0,     0,  1512,     0,   516,   516,     0,  1513,
     516,  1512,   516,     0,     0,     0,  1513,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2790,  2791,     0,     0,
       0,     0,     0,     0,     0,   538,  3189,   516,     0,     0,
       0,     0,  -206,  1598,     0,     0,     0,  1512,     0,  1564,
       0,  1512,  1513,     0,  2843,     0,  1513,  1512,     0,   913,
    1599,   516,  1513,     0,   914,  1600,     0,     0,     0,  2896,
    2897,  2898,  2899,  2900,  2901,  2902,  2903,  2904,  2905,  1512,
       0,     0,     0,     0,  1513,   539,     0,   540,     0,     0,
       0,     0,  2889,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,   541,  2886,     0,     0,  2507,     0,
     542,     0,     0,   543,     0,     0,     0,     0,  3229,  3230,
       0,     0,     0,   915,   641,  2740,  2741,     0,     0,     0,
     516,     0,     0,     0,   687,   516,     0,     0,   701,   687,
       0,     0,   687,     0,   520,   516,     0,   516,     0,   516,
     550,     0,     0,   516,  1877,   516,     0,   516,  1606,     0,
       0,     0,     0,   648,     0,     0,     0,     0,  1515,   516,
     773,     0,     0,  1516,   516,     0,   516,     0,     0,   776,
     550,   550,     0,     0,   516,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   916,     0,  3289,  1217,  3291,     0,
       0,     0,   516,   650,     0,     0,  1879,  1880,  1881,     0,
    1882,  1883,  1884,  1885,  1886,  1887,     0,     0,     0,     0,
     879,   527,   653,     0,  1878,     0,     0,   515,     0,   687,
     917,     0,  3317,     0,     0,     0,     0,  3323,   639,     0,
       0,     0,   906,   906,     0,     0,   918,   906,   929,  3124,
     516,     0,     0,  3326,     0,     0,   919,  3330,  1608,     0,
     516,   665,   665,   665,     0,     0,     0,     0,     0,    21,
       0,     0,     0,   516,     0,   665,   665,     0,   665,     0,
       0,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     920,   687,     0,     0,     0,     0,   520,   550,     0,   551,
      82,     0,     0,     0,   551,   516,     0,   687,  1517,     0,
     687,  1932,     0,  3070,  2951,   648,   551,     0,  2005,  2006,
    2007,     0,  2008,  2009,  2010,  2011,  2012,  2013,     0,   516,
     551,   551,     0,     0,     0,     0,   921,  1564,   520,     0,
       0,     0,  1515,   922,  1265,   516,     0,  1516,     0,     0,
       0,     0,     0,     0,  2889,   650,  1217,   648,   687,   687,
     687,   687,  1286,     0,     0,  1609,     0,  2886, -2018, -2018,
   -2018,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,   516,
    1512,     0,  3422,   923,     0,  1513,     0,     0,   520,     0,
       0,   551,     0,     0,   516,   516,   516,   650,     0,     0,
       0,     0,   924,   745,  3189,     0,     0,   648,   752,  3437,
       0,   753,    25,    26,    27,     0,     0,     0,     0,     0,
     950,   516,     0,  1870,     0,     0,     0,  1871,  1872,     0,
       0,  1873,  1874,  1875,  1879,  1880,  1881,     0,  1882,  1883,
    1884,  1885,  1886,  1887,     0,     0,     0,   650,  3014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   516,     0,     0,     0,     0,     0,     0,     0,
       0,   925,     0,  3071,     0,     0,  1933,    32,     0,     0,
       0,     0,  1517,    82,    82,     0,     0,     0,   906,   929,
       0,   687,     0,     0,  1387,     0,     0,     0,   891,     0,
     906,   906,     0,     0,  1515,     0,   550,     0,     0,  1516,
    1512,     0,   639,     0,    37,  1513,     0,     0,     0,   639,
       0,     0,  1112,     0,     0,     0,     0,     0,     0,   550,
       0,     0,     0,     0,     0,     0,  1442,     0,     0,     0,
       0,     0,  1113,    21,     0,  1584,  1523,    39,  1585,     0,
       0,     0,  1586,  1587, -1748,     0,     0,     0,    42,     0,
       0,    82,     0,    82,     0,     0,  1512,     0,     0,     0,
    1329,  1513,     0,     0,    43,     0,  1065,     0,     0,  3215,
       0,     0,     0,  1595,     0,     0,     0,     0,  1114,  2832,
   -2018,     0,     0,     0,     0,     0,     0,   550,    44,  2833,
    3222,  3223,    82,     0,     0,    21,     0,     0,     0,     0,
       0,  3144,    45,     0,     0,     0,     0,  1597,    82,     0,
       0,     0,    82,     0,  3235,     0,     0,  1277,  1279,  1282,
    1284,     0,     0,  1877,     0,     0,     0, -1750,     0,     0,
       0,     0,     0,  1643,  1517,     0,  1645,     0,     0,     0,
       0,     0,     0,     0, -1748,     0,     0,  2834,     0,     0,
     550,   550,     0,     0,     0,     0,     0,   687,     0,  1512,
       0,     0,     0,     0,  1513,  3290,     0,     0,     0,     0,
       0,     0,  2463,  1115,     0,     0,    25,    26,    27,  1387,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   687,
    1719, -1748,     0,  1878,  1582,     0,     0,     0,     0,     0,
       0,     0,   687, -2018,     0, -1748,     0,     0,     0,     0,
   -1748,     0,  1515,     0,     0, -1748,     0,  1516,     0,   687,
   -2018,  1329,  1116,   687, -1748, -2018,     0, -1750,  1767, -1748,
       0,     0,  1117,     0,     0,    10,     0,    82,    25,    26,
      27,    32,     0,     0,  1118,     0,  2835,     0,     0,     0,
    1382,     0,  1512,     0,     0,  1390,     0,  1513,     0,     0,
       0, -1748,     0, -2018,    82,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1750,     0,  1119,     0,    37,     0,
       0, -1748,     0,     0,     0,     0,     0,     0, -1750,     0,
       0,     0,     0, -1750,     0,     0,  1329,     0, -1750,  1329,
    1329,     0,     0,    32,     0,  1515,     0, -1750,    21,     0,
    1516,    39, -1750,     0,     0,     0,     0,     0,  1606,     0,
       0,     0,    42,     0,     0,     0,   551,     0,  1121,  1512,
   -1748,     0,     0, -1748,  1513,     0,     0,     0,    43, -1748,
      37,     0,     0,     0, -1750,     0,     0,  3406,     0,     0,
       0,     0,  1517,  1122,     0,     0,   551,   551,  1781,     0,
     687,     0,    44,     0, -1750,     0,   687,     0,     0,     0,
     913,     0,  1124,    39,  2836,   914,    45,  2837,     0, -1748,
    1818,     0,     0,     0,    42,     0,     0,     0,   776,     0,
       0,     0,     0,   776,     0,   550,   550,     0,   550,   776,
      43,     0, -1748,  1879,  1880,  1881,     0,  1882,  1883,  1884,
    1885,  1886,  1887, -1750,     0,     0, -1750,     0, -2018,     0,
     950,     0, -1750,  1870,    44,     0,  1442,  1871,  1872,     0,
       0,  1873,  1874,  1875,   915,     0,  1512,     0,    45,  1515,
       0,  1513,     0,     0,  1516,  1517,     0,     0,     0,     0,
    1390,    25,    26,    27,     0,     0,     0,     0,  1711,     0,
     689,     0, -1750,     0,     0,     0,     0,     0,     0,     0,
    1512,  1738,     0,   551,     0,  1513,  1387,  1387,     0,     0,
       0,     0,  1387,     0,   515, -1750,  1730,     0, -1748,     0,
       0,     0,  1763,     0,     0,     0,     0,   906, -1748,   550,
    1913,     0,     0,  1837,  1839,   916,     0,   687,     0,     0,
     639,     0,     0,   639,     0,     0,    32, -1748,   639, -1748,
   -1748,   639,     0,     0,     0, -2018,   639,     0,   550,     0,
     550,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,     0,
       0,   917,     0,   689,     0,     0,     0,  1512,     0,     0,
       0,     0,  1513,    37,     0,     0, -1748,   918,     0, -1748,
   -1748, -1748,     0,     0,     0,     0,     0,   919,     0,     0,
       0, -1750,     0,    38,     0,     0,     0,     0,  1515,  1517,
       0, -1750,     0,  1516,     0,     0,    39,     0,     0,     0,
    1515,  1512,     0,     0,     0,  1516,  1513,    42,  2767,     0,
   -1750,   920, -1750, -1750,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
    1515,     0,  1090,     0,     0,  1516,     0,  1515,     0,  1786,
       0,     0,  1516, -2018,     0,  1802,     0,    44,  2014, -1750,
       0,     0, -1750, -1750, -1750,     0,     0,   921,     0,  2024,
       0,    45,    21,     0,   922,     0,     0,     0,     0,     0,
       0,     0,     0,  1515,     0,     0,     0,  1515,  1516,     0,
       0,     0,  1516,  1515,     0,     0,     0,     0,  1516,     0,
       0,     0,  1407,     0,     0,     0,     0,     0,   776,     0,
       0,     0,     0,  1512,   923,  1515,     0,     0,  1513,     0,
    1516,     0,     0,  1878,   950,  1438,     0,  1870,     0,     0,
       0,  1871,  1872,   924,     0, -2018, -2018, -2018,  1517,     0,
       0,  1584,  1991,     0,  1585,     0,     0,     0,  1586,  1587,
    1517,     0,     0,     0,  2021,  2111,  2022,   687,     0,   687,
       0,     0,     0,     0,     0,     0,     0,  1390,  1390,     0,
     687,  2127,     0,  1390,     0,     0,     0,     0,     0,  1595,
    1517,     0,  2037,  1387,     0,     0, -2018,  1517,     0,     0,
       0,     0,     0,  1569,     0,     0,  1925,     0,     0,     0,
       0,     0,   925,     0,  2768,     0,     0,     0,   687,     0,
     550,     0,     0,  1597,     0,    25,    26,    27,     0,     0,
       0,     0,     0,  1517,  1719,   550,     0,  1517,     0,     0,
       0,     0,     0,  1517,     0,   550,  2193,   550,  2197,     0,
     550,     0,     0,     0,     0,     0,   550,     0,   550,     0,
       0,     0,     0,     0,     0,  1517,   551,   551,     0,     0,
     776,   550,     0,     0,     0,   776,   550,     0,     0,     0,
     550,   550,   550,   550,     0,   550,   550,     0,  2739,     0,
      32,     0,     0,     0,     0,     0,  2156,  2156,     0,     0,
    2250,     0,     0,     0,     0,     0,     0,     0,     0,   687,
     687,   687,   687,  1286,   687,     0,     0,     0,   913, -2018,
       0,     0,     0,   914,     0,     0,     0,    37,  2276,     0,
       0,     0,     0,     0,     0,     0, -2018,     0,     0,     0,
       0, -2018,     0,  1879,  1880,  1881,     0,  1882,  1883,  1884,
    1885,  1886,  1887,     0,     0,     0,  1329,     0,     0,     0,
      39,     0,     0,     0,     0,     0,  1329,     0,     0,  1329,
       0,    42,     0,     0,     0,     0,     0,     0,     0, -2018,
       0,     0,   915,     0,     0,  1512,     0,    43,     0,     0,
    1513,     0,  1387,  1387,  1387,  1387,  1387,  1387,     0,     0,
    1387,  1387,  1387,  1387,  1387,  1387,  1387,  1387,  1387,  1387,
       0,    44,     0,     0,     0,     0,     0,  1878,  2103,     0,
       0,     0,     0,     0,     0,  2769,  1515,     0,     0,     0,
     550,  1516,     0,     0,  1606,     0,  2112,     0,  2115,     0,
       0,     0,   687,     0,     0,     0,     0,     0,     0,  2124,
       0,   639,     0,   916,  1329,     0,     0,   639,     0,     0,
       0,     0,   550,     0,  1390,     0,     0,   550,     0,     0,
       0,     0,     0,     0,     0,     0,  2406,  2406,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2161,     0,   917,
       0,     0,     0,     0,  1099,     0,     0,     0,     0,     0,
    1100,     0,     0,     0,     0,   918,     0,  1099,  1112,     0,
       0,   551,   551,  1100,   551,   919,     0,     0,     0,     0,
       0,  1112,     0,     0,     0,     0,     0,     0,  1113,     0,
       0,     0,     0,     0, -2018,     0,     0,     0,     0,     0,
       0,  1113,     0,     0,   550,     0,     0,     0,  2442,   920,
       0,  1389,     0,   550,     0,     0,  1515,     0,     0,     0,
       0,  1516,     0,     0,     0,     0,  1517,     0,     0,     0,
       0,     0,     0,  2412,  1114,     0,  1387,  1387,  2261,  2262,
    2264,  2265,     0,  2267,     0,     0,     0,  1114,     0,     0,
       0,     0,     0,  2014,     0,   921,     0, -1765,     0,     0,
       0,     0,   922,     0,     0,  1101,     0,     0,     0,     0,
       0,     0,  1515,     0,     0,   551,     0,  1516,  1101,     0,
       0,     0,     0,     0,     0,     0,   639, -2018, -2018, -2018,
       0,  1882,  1883,  1884,  1885,  1886,  1887,     0,   550,     0,
       0, -2018,   923,   639,  1943,     0,  1947,  2127,  1613,  1614,
    1615,  1616,  1617,  1618,     0,     0,     0,     0,     0,     0,
       0,   924,     0,  1390,  1390,  1390,  1390,  1390,  1390,  1115,
       0,  1390,  1390,  1390,  1390,  1390,  1390,  1390,  1390,  1390,
    1390,     0,  1115,     0,     0,     0,     0,   550,     0,     0,
    1387,     0,     0,   550,     0,     0,  1517, -1765,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1781,
       0,  2379,     0,     0,     0,  1515,     0,     0,  1116,     0,
    1516,     0,  2486,     0,     0,     0,     0,     0,  1117,     0,
     925,  1116,     0,     0,     0,     0,     0,  1688,     0,     0,
    1118,  1117,     0,     0, -1765,     0,  1389,     0,     0,     0,
       0,     0,  1517,  1118,     0,  2512,  2512,     0, -1765,     0,
       0,  1102,     0, -1765,     0,     0,     0,     0, -1765,     0,
       0,     0,  1119,     0,  1102,  1781,     0, -1765,     0,     0,
       0,   687, -1765,     0,     0,  1119,     0,     0,     0,     0,
       0,     0,     0,  1781,   687,   687,   687,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   550,  1515,   687,
       0,     0,   687,  1516, -1765,     0,  1286,     0,  1120,   687,
       0,     0,  1104,   776,  1121,     0,     0,     0,     0,     0,
       0,  2213,     0,     0, -1765,  1104,     0,  1121,     0,     0,
       0,  1781,  1781,     0,  1781,     0,     0,  1390,  1390,  1122,
       0,     0,     0,     0,  1123,  1517,     0,     0,     0,     0,
       0,     0,  1122,     0,     0,     0,     0,  2214,  1124,     0,
       0,     0,     0,   515,     0,     0,     0,     0,     0,     0,
       0,  1124,     0, -1765,     0,  1515, -1765,     0,     0,     0,
    1516,     0, -1765,  2665,     0,     0,     0,     0,     0,     0,
       0,   687,   687,   687,     0,     0,   551,     0,     0,     0,
     550,     0,  1387,   550,     0,     0,     0,     0,     0,   550,
       0,   551,     0,     0,     0,  1106,     0,     0,     0,     0,
       0,   551, -1765,   551,     0,     0,   551,     0,  1106,     0,
       0,     0,   551,     0,   551,     0,     0,     0,  1517,     0,
       0,     0,  2014,     0,     0, -1765,     0,   551,     0,     0,
       0,  1390,   551,     0,     0,     0,   551,   551,   551,   551,
       0,   551,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1387,  1387,     0,
       0,     0,  1515,     0,     0,     0,     0,  1516,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   689,     0,     0,  2764,     0,     0,     0,
       0,     0,  2127,  2698,  2700,  1517,  1515,     0,     0,     0,
       0,  1516,     0,     0,     0,     0,     0,     0,   687,     0,
       0, -1765,   550,  1389,  1389,     0,   550,   550,   550,  1389,
    2598, -1765,  1781,  1719,  1781,     0,  1818,     0,     0,     0,
       0,     0,     0,  2612,  2613,  2615,     0,     0,     0,     0,
   -1765,     0, -1765, -1765,     0,   550,     0,  2844,  2626,     0,
       0,  2629,     0,     0,     0,     0,     0,     0,  2636,     0,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
       0,     0,     0,  1515,     0,     0,     0,     0,  1516, -1765,
       0,     0, -1765, -1765, -1765,     0,   551,     0,     0,     0,
       0,  2276,     0,     0,     0,     0,     0,     0,   687,     0,
       0,     0,  1517,     0,     0,     0,     0,     0,  1719,     0,
       0,     0,     0,     0,     0,     0,     0,  1515,  2393,     0,
       0,     0,  1516,  1947,     0,     0,  1818,     0,     0,     0,
       0,     0,     0,     0,     0,  1781,  1517,     0,     0,     0,
    2672,  2673,  2674,     0,     0,     0,  1387,     0,  1329,     0,
       0,     0,   550,     0,     0,     0,     0,     0,     0,   687,
     687,   687,   687,     0,     0,     0,     0,     0,     0,     0,
       0,  1387,     0,     0,  1387,     0,     0,     0,   550,   776,
       0,     0,     0,     0,     0,     0,     0,  2997,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,  1569,
       0,     0,     0,  1517,  3004,     0,     0,     0,     0,  1515,
       0,     0,     0,     0,  1516,     0,     0,     0,  1390,  1390,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3027,     0,   639,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1517,     0,     0,
    3039,     0,     0,     0,  2127,     0,     0,     0,     0,     0,
    2014,     0,     0,     0,     0,     0,  2995,  2782,     0,     0,
       0,     0,     0,     0,  1719,     0,     0,     0,     0,     0,
    1781,     0,     0,     0,   551,     0,     0,     0,     0,     0,
    2146,     0,     0,   776,   550,  1387,     0,     0,     0,     0,
       0,   687,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1012,  1012,     0,     0,     0,  3090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1340,  1341,   551,     0,     0,     0,     0,     0,  2524,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1517,
       0,     0,     0,     0,     0,     0,     0,  2925,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1342,  1343,     0,     0,  1344,  1345,     0,  1139,
       0,     0,     0,  1260,     0,     0,  1584,     0,     0,  1585,
       0,     0,     0,  1586,  1587,     0,     0,     0,  1781,     0,
       0,     0,     0,     0,  1329,     0,     0,  1390,     0,  1329,
       0,  2276,     0,     0,     0,     0,     0,     0,  2960,  2961,
    2962,  2963,     0,     0,  1595,  1311,  3140,     0,     0,     0,
       0, -2018,  1390,  1387,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1346,  1347,   551,     0,     0,  1837,  1839,  1597,  3157,
       0,     0,     0,     0,     0,   550,     0,     0,     0,     0,
       0,  1515,     0,   550,     0,     0,  1516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1389,
    1389,  1389,  1389,  1389,  1389,     0,     0,  1389,  1389,  1389,
    1389,  1389,  1389,  1389,  1389,  1389,  1389,  3186,     0,     0,
       0,     0,     0,     0,     0,  1348,  1349,  1350,  1351,  1352,
    1353,  1354,  1355,  2742,  1336,  1356,  1357,     0,     0,   550,
    1381,     0,     0,  1383,   550,     0,  1394,  1397,  1402,  1405,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2018,     0,   551,     0,     0,   551,
     550,     0,     0,     0,     0,  1943,  1390,     0,     0,     0,
    3077, -2018,     0,     0,     0,     0, -2018,  1445,  1260,     0,
       0,   550,   550,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1529,   687,
       0,  1719,     0,     0,     0,   550,     0,     0,     0,     0,
       0,  1517,     0,     0, -2018,     0,     0,  1545,     0,     0,
     687,     0,     0,  3258,     0,     0,     0,     0,  1555,  1556,
    1557,     0,  1561,  1565,     0,     0,     0,     0,  1358,  1359,
       0,     0,  1584,  1387,     0,  1585,     0,   550,   906,  1586,
    1587,   906,     0,     0,     0,     0,     0,     0,     0,     0,
    1837,  1839,     0,     0,  1627,     0,     0,     0,     0,  1606,
       0,     0,  1329,  1389,  1389,     0,  3039,     0,     0,     0,
    1595,  1445,  1445,   687,     0,     0,     0, -2018,   551,     0,
       0,     0,   551,   551,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1390,     0,     0,     0,     0,  1584,
       0,     0,  1585,   687,  1597,  1666,  1586,  1587,     0,  1682,
    1687,   551,     0,     0,     0,     0,     0,     0,     0,     0,
    1012,  1012,     0,  1360,  1361,     0,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,     0,  1595,     0,     0,
       0,     0,  3157,     0, -2018,     0,     0,  1362,  1363,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2018,
       0,     0,     0,     0,     0,  3258,     0,  1960,     0,  2743,
       0,  1597,     0,     0,     0,     0,  1584,  1389,     0,  1585,
       0,     0,     0,  1586,  1587,     0,     0,     0,     0,     0,
       0,     0,  1719,     0,     0,     0,     0,     0,     0,     0,
   -2018,     0,     0,     0,   776,   776,     0,  3258,   776,     0,
       0,     0,     0,     0,  1595,     0,  1913, -2018,  1943,     0,
       0, -2018, -2018,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,     0,  3017,     0,     0,     0,
       0,     0,     0,     0,  2393,     0,     0,     0,  1597,     0,
    1719,     0,     0,  1260,     0,     0,     0,  3258,  3231,     0,
   -2018,     0,  1260,     0,     0,     0, -2018, -2018,     0,     0,
       0,     0,     0,  1613,  1614,  1615,  1616,  1617,  1618,  3256,
       0,     0,     0,     0, -2018,     0,  1260,     0,     0, -2018,
       0,     0,     0,     0,     0,   776,     0,     0,     0,     0,
       0,     0,     0,     0,  1390,     0,     0,     0,     0,     0,
    2127,     0,     0,     0,     0,  1606,     0,     0,     0,     0,
       0,     0,     0,     0,  1329,     0,  1584, -2018,     0,  1585,
       0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,  3296,     0, -2018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1593,     0,     0,     0,     0,     0,
       0, -2018,     0,     0,  1595,     0, -2018,     0,     0,  1860,
     551,  1596,  3322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1606,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,     0,     0,     0, -2018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2018,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1402,
       0,  1402,  1402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1012,  1012,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1606,
    1012,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1389,  1389,     0,     0,     0,     0,
       0,     0, -2018,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,  1584,     0,     0,
    1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,  1599,     0,     0,     0,     0,  1600,     0,     0,     0,
       0,     0, -2018,     0,     0,  1593,     0,     0,     0,  1613,
    1614,  1615,  1616,  1617,  1618,  1595,     0,     0,     0,  1601,
    1602,  3165,  1596,     0,     0,     0,     0,     0,     0,  2393,
       0,     0,     0,     0,  1603,     0,     0,     0,     0, -2018,
       0,     0,     0,     0,  1989,     0,     0,     0,     0,  1597,
       0,     0,  1992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2018,
       0,     0,  1604,     0,     0,  1605,  1613,  1614,  1615,  1616,
    1617,  1618,     0,     0,     0,   551,     0,     0,     0,  1606,
     551,  2038,  1607,     0,     0,     0,     0,  2042,  2043,  2044,
    2045,  2046,  2047,  2048,  2049,     0,     0,     0,     0,  2058,
    2059,     0,     0,     0,  2070,     0,   551,     0,  2073,     0,
       0,  2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,
       0,     0,  2090,     0,     0,     0,     0,   551,   551,  1012,
       0,  1260,     0,  1389,     0,  1598, -2018,     0,     0,     0,
       0,     0,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,
    2116,   551,  1599,     0,     0,     0,     0,  1600,  2981,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -44,     0,     0,     0,     0,  1608,
    1601,  1602,     0,     0,  1556,  1557,     0,     0,     0,     0,
       0,     0,     0,   551,     0,  1603,     1,     0,     0,     0,
       0,     0,  3006,     0,     0,     0,     2,     0,     3,     4,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     0,     0,     0,     0,     6,     0,     0,     0,
       0,     0,     0,  1604,     0,     7,  1605,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
    1606,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2238,    10,     0,    11,  1260,     0,     0,  2248,  2249,
       0,     0,     0,     0,     0,    12,  1609,     0,     0,  1610,
    1611,  1612,  1389,  1613,  1614,  1615,  1616,  1617,  1618,     0,
       0,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    15,  2428,     0,  1260,     0,     0,    16,     0,     0,
       0,     0,     0,     0,     0,    17,     0,    18,    19,     0,
       0,     0,     0,  1311,  2305,     0,     0,     0,     0,     0,
       0,    20,     0,     0,     0,    21,     0,     0,     0,     0,
    1608,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2327,  2328,     0,  2329,     0,     0,     0,
       0,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,     0,  1391,    23,     0,     0,
       0,     0,     0,     0,     0,  2355,  2356,     0,     0,  2116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2383,     0,
    1389,     0,     0,  2388,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1445,     0,  1260,     0,     0,     0,     0,  1609,     0,     0,
    1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,
       0,     0,     0,     0,     0,     0,     0,  1863,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2421,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
       0,     0,     0,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2440,     0,    30,     0,
       0,  2443,  2444,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1621,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,  2465,     0,     0,  2468,     0,
    2470,  1391,     0,     0,     0,     0,    36,     0,     0,     0,
      37,     0,     0,     0,     0,     0,  2474,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,    40,     0,     0,    41,
    1583,     0,  1621,     0,    42,  1584,  1666,     0,  1585,     0,
    3275,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,
      43,     0,     0,  1687,  2088,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,     0,     0,     0,  1594,     0,     0,
       0,     0,  1012,  1595,    44,     0,     0,     0,     0,     0,
    1596,  2528,     0,     0,     0,     0,     0,     0,    45,     0,
       0,   -44,  1584,     0,     0,  1585,     0,     0,     0,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,     0,  2723,     0,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,     0,  1596,  1557,     0,
       0,     0,     0,     0,  1260,     0,     0,     0,     0,     0,
       0,     0,     0,  1621,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,  1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,     0,  2632,     0,     0,     0,     0,
       0,     0,     0,  1598,  1621,     0,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,     0,     0,     0,
    1599,     0,     0,  1596,     0,  1600,     0,  1584,     0,  1621,
    1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,     0,     0,     0,     0,     0,     0,     0,  1601,  1602,
    1597,     0,     0,     0,     0,  1593,     0,     0,     0,     0,
    1598,     0,     0,  1603,     0,  1595,     0,     0,     0,     0,
       0,     0,  1596,     0,  1621,     0,  1621,  1599,  1391,  1391,
       0,  1888,  1600,     0,  1391,     0,     0,  1621,     0,     0,
    1621,     0,     0,     0,     0,  1621,     0,     0,  1621,  1597,
       0,  1604,     0,     0,  1605,  1601,  1602,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1606,     0,
    1603,  1607,     0,  2711,     0,     0,     0,     0,     0,  2713,
    1992,     0,     0,     0,     0,     0,  1584,     0,  1621,  1585,
    2719,     0,     0,  1586,  1587,     0,  1598,  1590,  1591,  1592,
       0,  2728,     0,     0,  2731,     0,  2733,     0,  1604,     0,
       0,  1605,     0,  1599,  2737,     0,     0,     0,  1600,     0,
       0,     0,  2744,  2745,  1595,  1606,     0,     0,  1607,  2752,
       0,  1596,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,  1602,     0,  2761,  1598,     0,     0,     0,     0,
       0,     0,     0,     0,  2776,     0,  1603,     0,  1597,     0,
       0,     0,  1599,     0,     0,     0,     0,  1600,  1608,     0,
       0,     0,  1621,     0,  1012,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1621,     0,
    1601,  1602,     0,     0,  1604,     0,     0,  1605,  1621,  1621,
    1621,     0,     0,     0,  1621,  1603,     0,     0,  1621,     0,
       0,  1606,     0,     0,  1607,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1608,     0,     0,     0,     0,
       0,  2238,     0,  2238,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1604,     0,     0,  1605,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,     0,     0,     0,
    1606,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
    1621,  1599,     0,     0,     0,  1609,  1600,     0,  1610,  1611,
    1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1601,
    1602,  1339,     0,   652,     0,     0,     0,     0,     0,  1621,
       0,  1608,     0,     0,  1603,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1621,  2976,  2977,     0,     0,
    1621,     0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,
    1614,  1615,  1616,  1617,  1618,     0,     0,  1888,     0,  2029,
       0,     0,  1604,     0,     0,  1605,     0,     0,     0,     0,
    1608,  3001,     0,     0,     0,     0,  1340,  1341,     0,  1606,
       0,     0,     0,     0,     0,  3005,     0,     0,     0,     0,
    3007,  3008,     0,     0,     0,  3009,     0,     0,     0,     0,
    3012,     0,     0,  3015,  3016,     0,     0,     0,  2238,  1260,
       0,     0,  3024,     0,     0,     0,     0,  1342,  1343,     0,
       0,  1344,  1345,  1012,  1340,  1341,     0,     0,  1609,     0,
       0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,
    1618,     0,     0,     0,     0,  2029,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1342,  1343,  3065,     0,  1344,
    1345,     0,     0,     0,     0,     0,     0,  1609,     0,  1608,
    1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,
       0,     0,  1769,     0,  3084,     0,  1346,  1347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1621,     0,     0,     0,     0,     0,     0,
       0,  1888,  1888,     0,  1391,  1391,  1391,  1391,  1391,  1391,
       0,     0,  1391,  1391,  1391,  1391,  1391,  1391,  1391,  1391,
    1391,  1391,  1888,     0,  1346,  1347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,     0,     0,
    1356,  1357,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3116,     0,     0,     0,  1609,     0,     0,  1610,
    1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1348,  1349,
    1350,  1351,  1352,  1353,  1354,  1355,     0,     0,  1356,  1357,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1621,  1584,     0,  1621,  1585,     0,     0,  1260,
    1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,
       0,     0,     0,  2440,     0,     0,     0,     0,     0,     0,
       0,  1593,     0,     0,  3178,  3179,     0,     0,  3180,     0,
    1557,  1595,     0,  1358,  1359,     0,     0,     0,  1596,     0,
       0,  1621,     0,     0,     0,  1621,  1621,  1621,  1621,  1621,
    1621,  1621,  1621,     0,     0,  3198,     0,     0,  1391,  1391,
       0,  1621,  1621,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,  1621,     0,     0,  1621,     0,     0,  3210,
       0,  1358,  1359,     0,  1621,  1621,  1621,  1621,  1621,  1621,
    1621,  1621,  1621,  1621,     0,     0,  1584,     0,     0,  1585,
       0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1621,
       0,     0,     0,     0,  1593,     0,     0,     0,  1360,  1361,
       0,     0,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,  1596,     0,     0,     0,     0,     0,     0,  3254,     0,
       0,     0,  1362,  1363,     0,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,     0,     0,     0,  2976,  1597,     0,
       0,  3272,  1391,     0,     0,  1012,  1360,  1361,  1599,     0,
       0,     0,     0,  1600,     0,     0,     0,  3282,     0,     0,
       0,     0,  2238,     0,  2238,     0,     0,     0,     0,     0,
    1362,  1363,  1012,     0,     0,     0,  1601,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3307,  1603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1621,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1621,  1621,     0,     0,     0,     0,     0,     0,  1604,
       0,     0,  1605,     0,  1598,     0,     0,     0,  3332,     0,
       0,     0,     0,     0,     0,     0,  1606,     0,  2976,  1607,
       0,  1599,     0,     0,     0,     0,  1600,     0,     0,     0,
       0,  1012,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1621,  1601,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3376,  1603,     0,     0,     0,     0,     0,
    1621,  1621,  1621,     0,     0,  1888,  1888,  1888,  1888,  1888,
    1888,     0,     0,     0,  1888,  1888,  1888,  1888,  1888,  1888,
    1888,  1888,  1888,  1888,     0,     0,     0,     0,  1621,  1621,
       0,     0,  1604,     0,     0,  1605,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1608,     0,     0,  1606,
       0,     0,  1607,     0,     0,     0,  1621,  1584,     0,     0,
    1585,  1621,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3431,  3431,  3431,  1593,     0,     0,     0,     0,
       0,     0,     0,     0,  1621,  1595,     0,     0,     0,     0,
       0,     0,  1596,     0,     0,     0,     0,     0,     0,  3431,
       0,     0,     0,  1621,     0,     0,  1621,  1621,     0,     0,
       0,     0,     0,     0,  1888,  1888,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,  1621,  1391,
    1391,  1621,     0,  1621,     0,     0,     0,  1621,     0,  1608,
    3431,     0,     0,  1609,     0,     0,  1610,  1611,  1612,     0,
    1613,  1614,  1615,  1616,  1617,  1618,     0,     0,     0,     0,
    2326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1621,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,  1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,     0,  1598,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,  1599,     0,     0,     0,  1595,  1600,     0,     0,
       0,     0,     0,  1596,     0,     0,  1609,     0,     0,  1610,
    1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,
    1601,  1602,     0,  2425,     0,     0,     0,     0,     0,  1584,
    1597,     0,  1585,     0,     0,  1603,  1586,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1621,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,  1604,  1596,     0,  1605,     0,  1391,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1606,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,     0,     0,     0,
       0,     0,     0,     0,  1621,     0,  1621,     0,     0,     0,
       0,     0,  1621,  1599,     0,     0,     0,     0,  1600,     0,
       0,  1621,     0,     0,  1621,     0,  1621,     0,     0,     0,
    1621,     0,     0,  1888,  1888,     0,     0,  1621,  1621,     0,
       0,  1601,  1602,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,     0,     0,  1621,     0,  1603,     0,     0,     0,
    1608,     0,     0,     0,     0,   555,     0,  1598,     0,  1621,
       0,     0,     0,     0,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,  1599,     0,     0,     0,     0,  1600,
       0,     0,     0,     0,  1604,     0,     0,  1605,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1391,     0,     0,
       0,  1606,  1601,  1602,  1607,     0,     0,     0,     0,     0,
       0,     0,   556,     0,     0,     0,     0,  1603,     0,     0,
       0,     0,     0,     0,     0,   556,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1604,     0,  1609,  1605,     0,
    1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,
       0,     0,  1606,     0,  2449,  1607,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   559,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,   560,
     559,  1608,     0,     0,   561,     0,     0,     0,     0,     0,
       0,     0,   560,     0,     0,     0,     0,   561,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   562,  1888,  1391,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   562,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1621,
    1621,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1608,     0,     0,     0,   563,     0,     0,     0,
     564,     0,     0,     0,  1621,     0,     0,     0,  1621,   563,
    1621,  1621,  1621,   564,     0,  1621,     0,     0,  1621,  1621,
       0,     0,     0,     0,     0,     0,     0,  1621,  1609,     0,
       0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,
    1618,     0,     0,     0,     0,  2653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1621,     0,
     565,     0,     0,     0,  1888,     0,     0,     0,     0,     0,
       0,     0,     0,   565,     0,   566,     0,  1621,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   566,  1609,
       0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,
    1617,  1618,     0,     0,     0,     0,  2725,     0,   567,  1621,
       0,   568,     0,     0,     0,     0,     0,     0,   569,     0,
       0,   567,   570,     0,   568,   571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   570,     0,  1888,   571,     0,
       0,     0,     0,   572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   572,   573,     0,     0,
       0,     0,     0,     0,   574,     0,     0,     0,     0,     0,
     573,  1621,  1621,  1621,   575,     0,     0,   574,     0,     0,
     576,     0,     0,     0,     0,     0,     0,   575,     0,     0,
       0,  1621,     0,   576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1621,     0,     0,     0,   577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1621,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1621,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1621,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1621,     0,   112,   947,   652,
     948,   949,   950,   951,   952,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,   953,     0,     0,   124,   125,   126,  1621,
     127,   128,   129,   130,   131,   132,   133,   134,   954,   136,
     955,   956,     0,   139,   140,   141,   142,   143,   144,   957,
     622,   145,   146,   147,   148,   958,   959,   151,     0,   152,
     153,   154,   155,   623,     0,   624,     0,   960,   159,   160,
     161,   162,   163,   164,   165,   166,   167,     0,   168,   169,
     170,   171,   172,   173,  1621,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   961,   186,   187,   962,
     189,   963,   190,     0,   191,   192,   193,   194,   195,   196,
       0,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     964,   205,   206,     0,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,   216,   965,   218,   219,   220,
     221,   222,   625,   966,   224,     0,   225,   226,   967,   228,
       0,   229,     0,   230,   231,     0,   232,   233,   234,   235,
     236,   237,     0,   238,     0,   968,   969,   241,   242,     0,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   970,
     971,     0,   972,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,     0,     0,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
     973,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   974,   318,   975,   320,   321,   322,   323,   976,   324,
     325,   326,   327,   977,   627,   329,   978,   331,   332,   333,
       0,   334,   335,     0,     0,   979,   337,   338,     0,     0,
     339,   340,   341,   342,   343,   344,   629,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
       0,     0,   357,   358,   630,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   980,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   981,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   982,   428,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   632,   444,     0,   445,   446,
       0,   447,   448,   449,   450,   451,   452,   453,     0,   454,
     983,   984,     0,     0,   457,   458,   633,   460,   634,   985,
     462,   463,   635,   465,   466,   467,   468,   469,     0,     0,
     470,   471,   472,     0,   473,   474,   475,   476,     0,   477,
     478,   479,   480,   481,   482,   986,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,     0,     0,   493,     0,
       0,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   987,     0,     0,     0,     0,     0,     0,   988,
     989,   990,     0,     0,     0,     0,   991,     0,   992,     0,
       0,     0,     0,   993,   994,   995,   996,     0,  2580,   112,
     947,   652,   948,   949,   950,   951,   952,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,   953,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
     954,   136,   955,   956,     0,   139,   140,   141,   142,   143,
     144,   957,   622,   145,   146,   147,   148,   958,   959,   151,
       0,   152,   153,   154,   155,   623,     0,   624,     0,   960,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   961,   186,
     187,   962,   189,   963,   190,     0,   191,   192,   193,   194,
     195,   196,     0,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   964,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   965,   218,
     219,   220,   221,   222,   625,   966,   224,     0,   225,   226,
     967,   228,     0,   229,     0,   230,   231,     0,   232,   233,
     234,   235,   236,   237,     0,   238,     0,   968,   969,   241,
     242,     0,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   970,   971,     0,   972,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,     0,     0,   284,
     285,   286,   287,     0,   288,   289,   290,   291,   292,   293,
     294,   295,   973,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   974,   318,   975,   320,   321,   322,   323,
     976,   324,   325,   326,   327,   977,   627,   329,   978,   331,
     332,   333,     0,   334,   335,     0,     0,   979,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   344,   629,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,     0,     0,     0,   357,   358,   630,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   980,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   981,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     982,   428,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   632,   444,     0,
     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,
       0,   454,   983,   984,     0,     0,   457,   458,   633,   460,
     634,   985,   462,   463,   635,   465,   466,   467,   468,   469,
       0,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,   477,   478,   479,   480,   481,   482,   986,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,     0,     0,
     493,     0,     0,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   987,     0,     0,     0,     0,     0,
       0,   988,   989,   990,     0,     0,     0,     0,   991,     0,
     992,     0,     0,     0,     0,   993,   994,   995,   996,     0,
    3181,   112,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   953,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   954,   136,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   960,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,   231,    21,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   973,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,   318,   975,   320,   321,
     322,   323,   976,   324,   325,   326,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    25,    26,    27,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    32,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,    37,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,    39,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   636,   986,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,    43,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,    44,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,  3155,     0,     0,     0,   993,   994,   995,
     996,   112,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   953,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   954,   136,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   960,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,   231,    21,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   973,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,   318,   975,   320,   321,
     322,   323,   976,   324,   325,   326,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    25,    26,    27,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    32,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,    37,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,    39,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   636,   986,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,    43,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,    44,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,  1221,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,  1222,   121,
     122,   123,     0,     0,     0,  1223,     0,   953,     0,     0,
    1224,   125,   126,     0,   127,   128,   129,  1225,   131,   132,
     133,   134,   954,  1226,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,  1227,
       0,  1228,   159,   160,   161,   162,   163,  1229,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1230,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
    1231,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,  1232,     0,
    1233,   233,   234,  1234,  1235,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1236,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1237,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,  1238,
    1239,   276,  1240,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1241,   286,  1242,     0,   288,   289,   290,   291,
     292,   293,   294,   295,  1243,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,  1244,   975,   320,   321,
     322,   323,   976,   324,   325,  1245,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,  1246,   343,  1247,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,  1248,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1249,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1250,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,  1251,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,  1252,   442,   632,
     444,     0,   445,   446,     0,   447,  1253,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,  1254,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
    1255,   484,  1256,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,  1257,     0,     0,     0,   993,   994,   995,
     996,   112,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   953,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   954,   136,   955,   956,  1398,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   960,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,   231,  1399,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
    1400,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   973,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,   318,   975,   320,   321,
     322,   323,   976,   324,   325,   326,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,  1401,   457,   458,
     633,   460,   634,   985,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,  1221,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1223,     0,   953,     0,     0,
    1224,   125,   126,     0,   127,   128,   129,  1225,   131,   132,
     133,   134,   954,  1226,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,  1227,
       0,  1228,   159,   160,   161,   162,   163,  1229,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1230,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,  1232,     0,
    1233,   233,   234,  1234,  1235,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1236,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1237,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,  1238,
    1239,   276,  1240,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1241,   286,  1242,     0,   288,   289,   290,   291,
     292,   293,   294,   295,  1243,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,  1244,   975,   320,   321,
     322,   323,   976,   324,   325,  1245,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,  1246,   343,  1247,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,  1248,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1249,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1250,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,  1251,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,  1252,   442,   632,
     444,     0,   445,   446,     0,   447,  1253,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,  1254,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
    2243,   484,  1256,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,  1221,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1223,     0,   953,     0,     0,
    1224,   125,   126,     0,   127,   128,   129,  1225,   131,   132,
     133,   134,   954,  1226,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,  1227,
       0,  1228,   159,   160,   161,   162,   163,  1229,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1230,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,  1232,     0,
    1233,   233,   234,  1234,  1235,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1236,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1237,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,  1238,
    1239,   276,  1240,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1241,   286,  1242,     0,   288,   289,   290,   291,
     292,   293,   294,   295,  1243,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,  1244,   975,   320,   321,
     322,   323,   976,   324,   325,  1245,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,  1246,   343,  1247,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,  1248,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1249,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1250,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,  1251,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,  1252,   442,   632,
     444,     0,   445,   446,     0,   447,  1253,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,  1254,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
       0,   484,  1256,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,  2292,     0,     0,     0,   993,   994,   995,
     996,   112,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120, -1098,   121,
     122,   123,     0,     0,     0,     0, -1098,   953,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   954,   136,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   960,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,   231,     0,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   973,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,   318,   975,   320,   321,
     322,   323,   976,   324,   325,   326,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   982,   428, -1098,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,  1221,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1223,     0,   953,     0,     0,
    1224,   125,   126,     0,   127,   128,   129,  1225,   131,   132,
     133,   134,   954,  1226,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,  1227,
       0,  1228,   159,   160,   161,   162,   163,  1229,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1230,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,  1232,     0,
    1233,   233,   234,  1234,  1235,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1236,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1237,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,  1238,
    1239,   276,  1240,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1241,   286,  1242,     0,   288,   289,   290,   291,
     292,   293,   294,   295,  1243,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,  1244,   975,   320,   321,
     322,   323,   976,   324,   325,  1245,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,  1246,   343,  1247,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,  1248,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1249,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1250,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,  1251,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,  1252,   442,   632,
     444,     0,   445,   446,     0,   447,  1253,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,  1254,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
       0,   484,  1256,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,  3021,     0,     0,     0,   993,   994,   995,
     996,  1221,   947,   652,   948,   949,   950,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1223,     0,   953,     0,     0,
    1224,   125,   126,     0,   127,   128,   129,  1225,   131,   132,
     133,   134,   954,  1226,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,  1227,
       0,  1228,   159,   160,   161,   162,   163,  1229,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1230,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,   963,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,  1232,     0,
    1233,   233,   234,  1234,  1235,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1236,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1237,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,  1238,
    1239,   276,  1240,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1241,   286,  1242,     0,   288,   289,   290,   291,
     292,   293,   294,   295,  1243,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,  1244,   975,   320,   321,
     322,   323,   976,   324,   325,  1245,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   979,
     337,   338,     0,     0,   339,   340,   341,  1246,   343,  1247,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,  1248,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1249,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1250,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,  1251,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,  1252,   442,   632,
     444,     0,   445,   446,     0,   447,  1253,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,  1254,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   986,
       0,   484,  1256,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   987,     0,     0,     0,
       0,     0,     0,   988,   989,   990,     0,     0,     0,     0,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,   112,   947,   652,   948,   949,     0,   951,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   953,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   954,   136,   955,   956,     0,   139,   140,   141,
     142,   143,   144,   957,   622,   145,   146,   147,   148,   958,
     959,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     961,   186,   187,   962,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     965,   218,   219,   220,   221,   222,   625,   966,   224,     0,
     225,   226,   967,   228,     0,   229,     0,   230,   231,    21,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   968,
     969,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   970,   971,     0,   972,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   973,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   974,   318,   975,   320,   321,
     322,   323,     0,   324,   325,   326,   327,   977,   627,   329,
     978,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    25,    26,    27,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   980,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   981,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    32,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   982,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,    37,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   983,   984,     0,     0,   457,   458,
     633,   460,   634,   985,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,    39,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   636,   986,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,    43,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,     0,    44,     0,
       0,     0,   112,   947,   652,   948,   949,   950,   951,   952,
     991,     0,   992,     0,     0,     0,     0,   993,   994,   995,
     996,   113,   114,   115,   116,   117,   118,   119,   120,  1663,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,  1678,   652,   948,   949,   950,  1679,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,  1680,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
    1399,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,  2017,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,  2631,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,  2751,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,  2964,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,  2965,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
    2966,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,  2967,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,  2968,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,  3115,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,  3253,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,  1683,  1684,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,  2154,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,  2237,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,  2439,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,  3019,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,  2965,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
    2966,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,  2967,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,  2968,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,  3428,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,  3429,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
    3430,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,  3429,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,   976,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
    3430,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   987,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,     0,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,     0,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,     0,
       0,     0,     0,     0,  1385,  1386,     0,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133, -2018,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   960,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,  3429,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,   963,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235, -2018,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249, -2018,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
       0,     0,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286, -2018,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,     0,   324,   325,     0,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   -2018,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
    3430,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514, -2018,     0,     0,
       0,     0,     0,     0,   988,   989,   990,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,     0,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,     0,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,     0,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,  2140,  2141,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,     0,
       0,     0,     0,     0,  2142,  2143,     0,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,   950,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,     0,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
       0,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,     0,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     979,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,     0,
       0,     0,     0,     0,  1385,  1386,     0,     0,     0,     0,
       0,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   112,   947,   652,   948,   949,     0,   951,   952,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   953,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   954,   136,   955,   956,     0,   139,   140,
     141,   142,   143,   144,   957,   622,   145,   146,   147,   148,
     958,   959,   151,     0,   152,   153,   154,   155,   623,     0,
     624,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   961,   186,   187,   962,   189,     0,   190,     0,   191,
     192,   193,   194,   195,   196,     0,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   964,   205,   206,     0,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
     216,   965,   218,   219,   220,   221,   222,   625,   966,   224,
       0,   225,   226,   967,   228,     0,   229,     0,   230,   231,
       0,   232,   233,   234,   235,   236,   237,     0,   238,     0,
     968,   969,   241,   242,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,   269,   970,   971,     0,   972,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
       0,     0,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,   973,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   974,   318,   975,   320,
     321,   322,   323,     0,   324,   325,   326,   327,   977,   627,
     329,   978,   331,   332,   333,     0,   334,   335,     0,     0,
     336,   337,   338,     0,     0,   339,   340,   341,   342,   343,
     344,   629,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,   357,   358,   630,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   980,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   981,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   982,   428,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     632,   444,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,   454,   983,   984,     0,     0,   457,
     458,   633,   460,   634,   985,   462,   463,   635,   465,   466,
     467,   468,   469,     0,     0,   470,   471,   472,     0,   473,
     474,   475,   476,     0,   477,   478,   479,   480,   481,   482,
     986,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,   493,     0,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,     0,     0,     0,
       0,     0,     0,   112,   947,   652,   948,   949,   950,   951,
     952,   991,     0,   992,     0,     0,     0,     0,   993,   994,
     995,   996,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,   953,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,     0,   954,   136,   955,   956,     0,   139,
     140,   141,   142,   143,   144,   957,   622,   145,   146,   147,
     148,   958,   959,   151,     0,   152,   153,   154,   155,   623,
       0,   624,     0,   960,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   961,   186,   187,   962,   189,   963,   190,     0,
     191,   192,   193,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   964,   205,   206,     0,
     207,   208,   209,     0,   210,     0,   212,     0,   213,   214,
     215,   216,   965,   218,   219,   220,   221,   222,   625,   966,
     224,     0,   225,   226,   967,   228,     0,   229,     0,   230,
     231,     0,   232,   233,   234,   235,     0,   237,     0,   238,
       0,   968,   969,   241,   242,     0,   243,   244,   245,   246,
     247,   248,   249,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   970,   971,     0,   972,     0,
     273,     0,     0,   276,   277,   278,   279,   280,   281,   282,
     283,     0,     0,   284,   285,   286,     0,     0,   288,   289,
     290,   291,   292,   293,   294,   295,   973,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   974,   318,   975,
     320,   321,   322,   323,     0,   324,   325,     0,   327,   977,
     627,   329,   978,   331,   332,   333,     0,   334,   335,     0,
       0,   979,   337,   338,     0,     0,   339,   340,   341,   342,
     343,   344,   629,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,     0,     0,   357,   358,
     630,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   980,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   981,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   425,   426,   982,   428,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   632,   444,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,     0,   454,   983,   984,     0,     0,
     457,   458,   633,   460,   634,   985,   462,   463,   635,   465,
     466,   467,   468,   469,     0,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,   477,   478,   479,   480,   481,
     482,   986,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,     0,     0,   493,     0,     0,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
       0,     0,     0,     0,     0,   988,   989,   990,     0,   789,
    1316,   652,   991,     0,   992,   951,     0,     0,     0,   993,
     994,   995,   996,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,   790,     0,     0,     0,     0,   791,   125,
     126,     0,   127,   128,   129,   792,   131,   132,   133,   793,
     794,   795,   796,   797,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   798,   799,   151,
       0,   152,   153,   154,   155,   800,     0,   801,     0,   802,
     159,   160,   161,   162,   163,   803,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   804,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   805,   186,
     187,   806,   189,     0,   190,     0,   191,   192,   193,   194,
     195,   196,     0,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   807,   218,
     219,   220,   221,   222,   808,  1317,   224,     0,   225,   226,
     809,   228,     0,   229,     0,   230,   810,     0,   811,   233,
     234,   812,   813,   237,     0,   238,     0,   814,   815,   241,
     242,     0,   243,   244,   245,   246,   247,   248,   249,   816,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   817,   818,   265,   266,   267,   268,
     269,   819,   820,     0,   821,     0,   273,   822,   823,   276,
     824,   278,   279,   280,   281,   282,   283,     0,     0,   284,
     825,   286,   826,     0,   288,   289,   290,   291,   292,   293,
     294,   295,   827,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   828,   829,   830,   320,   321,   322,   831,
       0,   324,   325,   832,   327,     0,   833,   329,   834,   331,
     332,   333,     0,   334,   335,  1318,     0,   336,   337,   338,
       0,     0,   339,   340,   835,   836,   343,   837,   838,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,     0,     0,     0,   357,   358,   839,   840,   361,   362,
     841,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   842,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   843,   397,   398,
     399,   844,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   845,   414,   415,   416,
     417,   418,   419,   846,   421,   422,   423,   847,   425,   426,
     848,   428,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   849,   442,   850,   444,     0,
     445,   446,     0,   447,   851,   449,   450,   451,   452,   453,
       0,   454,   852,   853,     0,     0,   457,   458,   854,   460,
     855,  1319,   462,   463,   856,   465,   466,   467,   468,   469,
       0,     0,   470,   471,   472,     0,   473,   474,   475,   476,
       0,   477,   478,   479,   480,   481,  1209,   858,     0,   484,
     859,   486,   487,   488,   489,   490,   491,   492,     0,     0,
     493,     0,     0,   494,   495,   496,   497,   498,   499,   860,
     861,   862,   863,   864,   865,   866,   867,   868,   869,   870,
     511,   512,   513,   514,     0,     0,     0,     0,     0,     0,
       0,  1320,  1321,  2307,     0,   112,   947,   652,   948,   949,
    2308,   951,     0,     0,     0,     0,     0,     0,   996,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   953,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   954,   136,   955,   956,
       0,   139,   140,   141,   142,   143,   144,   957,     0,   145,
     146,   147,   148,   958,   959,   151,     0,   152,   153,   154,
     155,   156,     0,   157,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   961,   186,   187,   962,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   964,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   965,   218,   219,   220,   221,   222,
     223,   966,   224,     0,   225,   226,   967,   228,     0,   229,
       0,   230,   231,     0,   232,   233,   234,   235,   236,   237,
       0,   238,  2985,   968,   969,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   970,   971,     0,
     972,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,     0,     0,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   974,
     318,   975,   320,   321,   322,   323,     0,   324,   325,   326,
     327,   977,   328,   329,   978,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   980,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   982,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,     0,   454,   983,   984,
       0,     0,   457,   458,   459,   460,   461,   985,   462,   463,
     464,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,   482,   986,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,     0,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,     0,     0,     0,   112,   947,   652,   948,   949,     0,
     951,     0,     0,     0,   991,     0,  2680,     0,     0,     0,
       0,   993,   994,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
     953,     0,     0,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,   133,   134,   954,   136,   955,   956,     0,
     139,   140,   141,   142,   143,   144,   957,     0,   145,   146,
     147,   148,   958,   959,   151,     0,   152,   153,   154,   155,
     156,     0,   157,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   961,   186,   187,   962,   189,     0,   190,
       0,   191,   192,   193,   194,   195,   196,     0,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   964,   205,   206,
       0,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,   216,   965,   218,   219,   220,   221,   222,   223,
     966,   224,     0,   225,   226,   967,   228,     0,   229,     0,
     230,   231,     0,   232,   233,   234,   235,   236,   237,     0,
     238,     0,   968,   969,   241,   242,     0,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,   269,   970,   971,     0,   972,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,     0,     0,   284,   285,   286,   287,     0,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   974,   318,
     975,   320,   321,   322,   323,     0,   324,   325,   326,   327,
     977,   328,   329,   978,   331,   332,   333,     0,   334,   335,
       0,     0,   336,   337,   338,     0,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,     0,     0,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     980,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   982,   428,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,     0,   445,   446,     0,   447,   448,
     449,   450,   451,   452,   453,     0,   454,   983,   984,     0,
       0,   457,   458,   459,   460,   461,   985,   462,   463,   464,
     465,   466,   467,   468,   469,     0,     0,   470,   471,   472,
       0,   473,   474,   475,   476,     0,   477,   478,   479,   480,
     481,   482,   986,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,     0,     0,   493,     0,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,     0,
       0,     0,     0,   522,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   991,     0,  2680,     0,     0,     0,     0,
     993,   994,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
     905,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,     0,
     191,   192,   193,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,  -516,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,  -516,   225,   226,   227,   228,  -516,   229,     0,   230,
       0,     0,     0,   233,   234,   523,     0,   237,     0,   238,
       0,   239,   240,   241,   242,     0,   243,   244,   245,   246,
     247,   248,   249,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   264,
     265,   266,   267,   268,   269,   270,   271,  -516,   272,     0,
     273,     0,     0,   276,     0,   278,   279,   280,   281,   282,
     283,     0,     0,   284,     0,   286,     0,  -516,   288,   289,
     290,   291,   292,   293,   294,   295,   524,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   319,
     320,   321,   322,   323,     0,   324,   325,     0,   327,     0,
     328,   329,   330,   331,   332,   333,  -516,   334,   335,     0,
       0,   336,   337,   338,     0,  -516,   339,   340,   341,     0,
     343,     0,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,     0,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   425,   426,   427,   428,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   525,
     442,   443,   444,     0,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,     0,     0,
     457,   458,   459,   460,   461,     0,   462,   463,   464,   465,
     466,   467,   468,   469,  -516,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,   477,   478,   479,   480,   481,
     482,   483,     0,   484,     0,   486,   487,   488,   489,   490,
     491,   492,     0,     0,   493,     0,     0,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   522,     0,
     547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1062,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   156,     0,     0,     0,   158,   159,
     160,   161,   162,   163,     0,   165,   166,   167,     0,   168,
     169,   170,   171,   172,   173,     0,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,     0,   191,   192,   193,   194,   195,
     196,     0,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,     0,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,     0,   225,   226,   227,
     228,     0,   229,     0,   230,     0,     0,     0,   233,   234,
     523,     0,   237,     0,   238,     0,   239,   240,   241,   242,
       0,   243,   244,   245,   246,   247,   248,   249,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   264,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   273,     0,     0,   276,     0,
     278,   279,   280,   281,   282,   283,     0,     0,   284,     0,
     286,     0,     0,   288,   289,   290,   291,   292,   293,   294,
     295,   524,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   319,   320,   321,   322,   323,     0,
     324,   325,     0,   327,     0,   328,   329,   330,   331,   332,
     333,     0,   334,   335,     0,     0,   336,   337,   338,     0,
       0,   339,   340,   341,     0,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
       0,     0,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   425,   426,   427,
     428,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   525,   442,   443,   444,     0,   445,
     446,     0,   447,     0,   449,   450,   451,   452,   453,     0,
     454,   455,   456,     0,     0,   457,   458,   459,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
       0,   470,   471,   472,     0,   473,   474,   475,   476,     0,
     477,   478,   479,   480,   481,   482,   483,     0,   484,     0,
     486,   487,   488,   489,   490,   491,   492,     0,     0,   493,
       0,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2392,
    3170,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     3,     4,     0,   790,     0,     0,
       0,     0,   791,   125,   126,     0,   127,   128,   129,   792,
     131,   132,   133,   793,   794,   795,   796,   797,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   798,   799,   151,     0,   152,   153,   154,   155,   800,
       0,   801,     0,   802,   159,   160,   161,   162,   163,   803,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,   804,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   805,   186,   187,   806,   189,     0,   190,     0,
     191,   192,   193,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   807,   218,   219,   220,   221,   222,   808,     0,
     224,     0,   225,   226,   809,   228,     0,   229,     0,   230,
     810,    21,   811,   233,   234,   812,   813,   237,     0,   238,
       0,   814,   815,   241,   242,     0,   243,   244,   245,   246,
     247,   248,   249,   816,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   817,   818,
     265,   266,   267,   268,   269,   819,   820,     0,   821,     0,
     273,   822,   823,   276,   824,   278,   279,   280,   281,   282,
     283,     0,     0,   284,   825,   286,   826,     0,   288,   289,
     290,   291,   292,   293,   294,   295,   827,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   828,   829,   830,
     320,   321,   322,   831,     0,   324,   325,   832,   327,     0,
     833,   329,   834,   331,   332,   333,     0,   334,   335,     0,
       0,   336,   337,   338,     0,     0,   339,   340,   835,   836,
     343,   837,   838,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    25,    26,    27,     0,   357,   358,
     839,   840,   361,   362,   841,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   842,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   843,   397,   398,   399,   844,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    32,
     845,   414,   415,   416,   417,   418,   419,   846,   421,   422,
     423,   847,   425,   426,   848,   428,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   849,
     442,   850,   444,     0,   445,   446,    37,   447,   851,   449,
     450,   451,   452,   453,     0,   454,   852,   853,     0,     0,
     457,   458,   854,   460,   855,     0,   462,   463,   856,   465,
     466,   467,   468,   469,     0,     0,   470,   471,   472,    39,
     473,   474,   475,   476,     0,   477,   478,   479,   480,   481,
     857,   858,     0,   484,   859,   486,   487,   488,   489,   490,
     491,   492,     0,     0,   493,     0,    43,   494,   495,   496,
     497,   498,   499,   860,   861,   862,   863,   864,   865,   866,
     867,   868,   869,   870,   511,   512,   513,   514,     0,   112,
      44,   547,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,   622,   145,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   623,     0,   624,     0,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,     0,   191,   192,   193,   194,
     195,   196,     0,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   625,     0,   224,     0,   225,   226,
     227,   228,     0,   229,     0,   230,   231,    21,   232,   233,
     234,   235,   236,   237,     0,   238,     0,   239,   240,   241,
     242,     0,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   626,     0,   284,
     285,   286,   287,     0,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
       0,   324,   325,   326,   327,     0,   627,   329,   330,   331,
     332,   333,     0,   334,   335,     0,   628,   336,   337,   338,
       0,     0,   339,   340,   341,   342,   343,   344,   629,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      25,    26,    27,     0,   357,   358,   630,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   631,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,    32,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   632,   444,     0,
     445,   446,    37,   447,   448,   449,   450,   451,   452,   453,
       0,   454,   455,   456,     0,     0,   457,   458,   633,   460,
     634,     0,   462,   463,   635,   465,   466,   467,   468,   469,
       0,     0,   470,   471,   472,    39,   473,   474,   475,   476,
       0,   477,   478,   479,   480,   481,   636,   483,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,     0,     0,
     493,     0,    43,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,     0,   112,    44,   547,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     637,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,   622,   145,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   623,     0,   624,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     625,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,   231,     0,   232,   233,   234,   235,   236,   237,
       0,   238,     0,   239,   240,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   626,     0,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,     0,   324,   325,   326,
     327,     0,   627,   329,   330,   331,   332,   333,     0,   334,
     335,     0,   628,   336,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   344,   629,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     357,   358,   630,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   631,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   632,   444,     0,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,     0,   454,   455,   456,
       0,     0,   457,   458,   633,   460,   634,     0,   462,   463,
     635,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,   636,   483,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,     0,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   637,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,   622,   145,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   623,     0,   624,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,     0,   191,   192,   193,
     194,   195,   196,     0,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   625,     0,   224,     0,   225,
     226,   227,   228,     0,   229,     0,   230,   231,     0,   232,
     233,   234,   235,   236,   237,     0,   238,     0,   239,   240,
     241,   242,     0,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,     0,     0,
     284,   285,   286,   287,     0,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,     0,   324,   325,   326,   327,     0,   627,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,   341,   342,   343,   344,   629,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,     0,     0,     0,   357,   358,   630,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   631,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   632,   444,
       0,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,     0,   454,   455,   456,     0,     0,   457,   458,   633,
     460,   634,     0,   462,   463,   635,   465,   466,   467,   468,
     469,     0,     0,   470,   471,   472,     0,   473,   474,   475,
     476,     0,   477,   478,   479,   480,   481,   482,   483,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,     0,
       0,   493,     0,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   112,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,   622,   145,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   623,     0,   624,     0,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     625,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,   231,     0,   232,   233,   234,   235,   236,   237,
       0,   238,     0,   239,   240,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,     0,     0,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,     0,   324,   325,   326,
     327,     0,   627,   329,   330,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
     341,   342,   343,   344,   629,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     357,   358,   630,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   632,   444,     0,   445,   446,     0,   447,
     448,   449,   450,   451,   452,   453,     0,   454,   455,   456,
       0,     0,   457,   458,   633,   460,   634,     0,   462,   463,
     635,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,   482,   483,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,     0,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     522,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3257,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,   722,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,     0,   191,   192,   193,
     194,   195,   196,     0,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,     0,   225,
     226,   227,   228,     0,   229,     0,   230,     0,    21,     0,
     233,   234,   523,     0,   237,     0,   238,     0,   239,   240,
     241,   242,     0,   243,   244,   245,   246,   247,   248,   249,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,     0,     0,
     284,     0,   286,     0,     0,   288,   289,   290,   291,   292,
     293,   294,   295,   524,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,   341,     0,   343,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    25,    26,    27,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,    32,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   425,
     426,   427,   428,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   525,   442,   443,   444,
       0,   445,   446,    37,   447,     0,   449,   450,   451,   452,
     453,     0,   454,   723,   456,     0,     0,   724,   458,   459,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,     0,   470,   471,   472,    39,   473,   474,   475,
     476,     0,   477,   478,   479,   480,   481,   636,   483,     0,
     484,     0,   486,   487,   488,   489,   490,   491,   492,     0,
       0,   493,     0,    43,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   522,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,    21,     0,   233,   234,   523,     0,   237,
       0,   238,     0,   239,   240,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,     0,     0,   276,     0,   278,   279,   280,
     281,   282,   283,     0,     0,   284,     0,   286,     0,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   524,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
       0,   319,   320,   321,   322,   323,     0,   324,   325,     0,
     327,     0,   328,   329,   330,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
     341,     0,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    25,    26,    27,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    32,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,   425,   426,   427,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   525,   442,   443,   444,     0,   445,   446,    37,   447,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
       0,     0,   457,   458,   459,   460,   461,     0,   462,   463,
     464,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,    39,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,   636,   483,     0,   484,     0,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,    43,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
       0,   522,    44,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   890,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1437,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2166,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2392,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2523,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3164,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2023,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2126,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,     0,  2846,  1316,   652,
       0,     0,  1999,   951,     0,     0,     0,     0,     0,  2000,
    2001,     0,  3026,  2002,  2003,  2004,   113,   114,   115,   116,
     117,   118,   119,   120,  1142,   121,   122,   123,  1143,  1144,
    1145,  2847,  1146,  1147,  1148,  1149,  2848,   125,   126,  1150,
     127,   128,   129,  2849,   131,   132,   133,     0,  1453,  2850,
    1455,  1456,  1151,   139,   140,   141,   142,   143,   144,  1152,
    1153,   145,   146,   147,   148,  1457,  1458,   151,  1154,   152,
     153,   154,   155,     0,  1155,  2851,  1156,  2852,   159,   160,
     161,   162,   163,  2853,   165,   166,   167,  1157,   168,   169,
     170,   171,   172,   173,  1158,  2854,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,  1463,   186,   187,  1464,
     189,  1159,   190,  1160,   191,   192,   193,   194,   195,   196,
    1161,   197,   198,   199,   200,   201,  1162,  1163,   202,   203,
     964,   205,   206,  1164,   207,   208,   209,  1165,   210,   211,
     212,  1166,   213,   214,   215,   216,     0,   218,   219,   220,
     221,   222,     0,  1167,   224,  1168,   225,   226,  1465,   228,
    1169,   229,  1170,   230,  2855,  1171,  2856,   233,   234,  2857,
    2858,   237,  1172,   238,  1173,     0,     0,   241,   242,  1174,
     243,   244,   245,   246,   247,   248,   249,  2859,   251,   252,
     253,   254,  1175,   255,   256,   257,   258,   259,   260,   261,
    1176,   262,  2860,     0,   265,   266,   267,   268,   269,  1471,
    1472,  1177,  1473,  1178,   273,  2861,  2862,   276,  2863,   278,
     279,   280,   281,   282,   283,  1179,  1180,   284,  2864,   286,
    2865,  1181,   288,   289,   290,   291,   292,   293,   294,   295,
    2866,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,  1480,  2867,  1482,   320,   321,   322,  2868,  1182,   324,
     325,  2869,   327,  1183,     0,   329,  1484,   331,   332,   333,
    1184,   334,   335,  1185,  1186,  2870,   337,   338,  1187,  1188,
     339,   340,     0,  2871,   343,  2872,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,  1189,  1190,
    1191,  1192,   357,   358,     0,  2873,   361,   362,     0,   364,
     365,   366,  1193,   367,   368,   369,   370,   371,   372,  1194,
     373,   374,   375,  1488,   377,   378,   379,   380,  1195,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,  1196,   394,   395,  2874,   397,   398,   399,  1490,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,  1197,  2875,   414,   415,   416,   417,   418,
     419,  2876,   421,   422,   423,  2877,   425,   426,  1494,   428,
    1198,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,  2878,   442,     0,   444,  1199,   445,   446,
    1200,   447,  2879,   449,   450,   451,   452,   453,  1201,   454,
    1497,  1498,  1202,  1203,   457,   458,     0,   460,     0,  1204,
     462,   463,  2880,   465,   466,   467,   468,   469,  2881,  1206,
     470,   471,   472,  1207,   473,   474,   475,   476,  1208,   477,
     478,   479,   480,   481,     0,  1501,  1210,   484,  2882,   486,
     487,   488,   489,   490,   491,   492,  1211,  1212,   493,  1213,
    1214,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   511,   512,
     513,   514,     0,   522,     0,  2005,  2006,  2007,  1999,  2883,
    2884,  2010,  2011,  2012,  2013,  2000,  2001,     0,     0,  2002,
    2003,  2004,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   156,
       0,     0,     0,   158,   159,   160,   161,   162,   163,     0,
     165,   166,   167,     0,   168,   169,   170,   171,   172,   173,
       0,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,     0,
     191,   192,   193,   194,   195,   196,     0,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,     0,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,     0,   225,   226,   227,   228,     0,   229,     0,   230,
       0,     0,     0,   233,   234,   523,     0,   237,     0,   238,
       0,   239,   240,   241,   242,     0,   243,   244,   245,   246,
     247,   248,   249,     0,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   264,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     273,     0,     0,   276,     0,   278,   279,   280,   281,   282,
     283,     0,     0,   284,     0,   286,     0,     0,   288,   289,
     290,   291,   292,   293,   294,   295,   524,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   319,
     320,   321,   322,   323,     0,   324,   325,     0,   327,     0,
     328,   329,   330,   331,   332,   333,     0,   334,   335,     0,
       0,   336,   337,   338,     0,     0,   339,   340,   341,     0,
     343,     0,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,     0,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   425,   426,   427,   428,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   525,
     442,   443,   444,     0,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,     0,     0,
     457,   458,   459,   460,   461,     0,   462,   463,   464,   465,
     466,   467,   468,   469,     0,     0,   470,   471,   472,     0,
     473,   474,   475,   476,     0,   477,   478,   479,   480,   481,
     482,   483,     0,   484,     0,   486,   487,   488,   489,   490,
     491,   492,     0,     0,   493,     0,     0,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,     0,     0,
       0,  2005,  2006,  2007,     0,  2008,  2009,  2010,  2011,  2012,
    2013,  1584,     0,     0,  1585,     0,     0,     0,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
    1584,     0,     0,  1585,     0,     0,  1596,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,  1595,  1584,
       0,     0,  1585,     0,     0,  1596,  1586,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,     0,     0,
       0,     0,  1597,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,     0,  1596,     0,  1584,     0,     0,  1585,
       0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,  1593,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,  1584,     0,     0,  1585,  1598,
       0,  1596,  1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,     0,     0,     0,     0,     0,  1599,     0,     0,     0,
       0,  1600,     0,  1593,     0,     0,     0,     0,  1597,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,  1598,     0,
    1596,     0,     0,     0,  1601,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,     0,     0,     0,  1603,
    1600,     0,     0,     0,     0,     0,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1598,     0,     0,
       0,     0,     0,  1601,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,     0,     0,  1604,  1603,  1600,
    1605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,  1607,     0,     0,
       0,     0,  1601,  1602,  1598,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1604,  1603,     0,  1605,
       0,  1599,     0,     0,     0,     0,  1600,     0,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,     0,  1601,
    1602,     0,     0,     0,     0,  1604,     0,     0,  1605,     0,
    1599,     0,     0,     0,  1603,  1600,     0,     0,     0,     0,
       0,     0,  1606,     0,     0,  1607,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,  1602,
       0,     0,     0,     0,  1608,     0,     0,     0,     0,     0,
       0,     0,  1604,  1603,     0,  1605,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1606,
       0,     0,  1607,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1608,     0,     0,     0,     0,     0,     0,
       0,  1604,     0,     0,  1605,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1606,     0,
       0,  1607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1608,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,
    1615,  1616,  1617,  1618,     0,     0,     0,     0,  2792,  1608,
       0,     0,     0,     0,     0,  1584,     0,     0,  1585,     0,
       0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,
    1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,
    1616,  1617,  1618,  1593,     0,     0,     0,  3018,  1608,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
    1596,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,
    1617,  1618,     0,     0,     0,     0,  3025,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1584,     0,     0,  1585,     0,     0,     0,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,     0,  1609,     0,     0,  1610,
    1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,  1593,
       0,     0,     0,  3185,     0,     0,     0,     0,     0,  1595,
    1584,     0,     0,  1585,     0,     0,  1596,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,     0,  1609,     0,     0,  1610,  1611,
    1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,  1593,     0,
       0,     0,  3207,  1597,     0,     0,     0,     0,  1595,  1584,
       0,     0,  1585,  1598,     0,  1596,  1586,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,     0,     0,     0,     0,
    1599,     0,     0,     0,     0,  1600,     0,  1593,     0,     0,
       0,     0,  1597,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,     0,  1596,     0,     0,     0,  1601,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,     0,  1585,  1598,
       0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,  1604,     0,     0,  1605,     0,  1599,     0,     0,     0,
       0,  1600,     0,  1593,     0,     0,     0,     0,  1606,     0,
       0,  1607,     0,  1595,     0,     0,     0,     0,  1598,     0,
    1596,     0,     0,     0,  1601,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,     0,     0,     0,  1603,
    1600,     0,     0,     0,     0,     0,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1598,     0,     0,
       0,     0,     0,  1601,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,     0,     0,  1604,  1603,  1600,
    1605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,  1607,     0,     0,
       0,     0,  1601,  1602,     0,     0,     0,     0,  1608,     0,
       0,     0,     0,     0,     0,     0,  1604,  1603,     0,  1605,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1604,     0,     0,  1605,     0,
    1599,     0,     0,     0,     0,  1600,     0,     0,     0,     0,
       0,     0,  1606,     0,     0,  1607,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,  1602,
       0,     0,     0,     0,  1608,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1609,     0,     0,  1610,  1611,
    1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,     0,
       0,     0,  3308,  1608,     0,     0,     0,     0,     0,     0,
       0,  1604,     0,  1584,  1605,     0,  1585,     0,     0,     0,
    1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,  1606,     0,
       0,  1607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1593,  1608,     0,     0,     0,     0,     0,     0,     0,
       0,  1595,     0,     0,     0,     0,     0,     0,  1596,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,
    1615,  1616,  1617,  1618,     0,  1597,     0,     0,  3365,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,
    1616,  1617,  1618,     0,     0,     0,     0,  3387,  1608,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,
    1617,  1618,     0,     0,  2746,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1599,     0,
       0,     0,     0,  1600,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,  1602,     0,     0,
       0,     0,     0,     0,     0,  1609,     0,     0,  1610,  1611,
    1612,  1603,  1613,  1614,  1615,  1616,  1617,  1618,     0,     0,
    3175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1604,
       0,     0,  1605,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1606,     0,     0,  1607,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1608,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1141,     0,     0,  1609,     0,     0,  1610,  1611,  1612,     0,
    1613,  1614,  1615,  1616,  1617,  1618,     0,     0,  3349,   113,
     114,   115,   116,   117,   118,   119,   120,  1142,   121,   122,
     123,  1143,  1144,  1145,   790,  1146,  1147,  1148,  1149,   791,
     125,   126,  1150,   127,   128,   129,   792,   131,   132,   133,
     793,   794,   795,   796,   797,  1151,   139,   140,   141,   142,
     143,   144,  1152,  1153,   145,   146,   147,   148,   798,   799,
     151,  1154,   152,   153,   154,   155,   800,  1155,   801,  1156,
     802,   159,   160,   161,   162,   163,   803,   165,   166,   167,
    1157,   168,   169,   170,   171,   172,   173,  1158,   804,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   805,
     186,   187,   806,   189,  1159,   190,  1160,   191,   192,   193,
     194,   195,   196,  1161,   197,   198,   199,   200,   201,  1162,
    1163,   202,   203,   204,   205,   206,  1164,   207,   208,   209,
    1165,   210,   211,   212,  1166,   213,   214,   215,   216,   807,
     218,   219,   220,   221,   222,   808,  1167,   224,  1168,   225,
     226,   809,   228,  1169,   229,  1170,   230,   810,  1171,   811,
     233,   234,   812,   813,   237,  1172,   238,  1173,   814,   815,
     241,   242,  1174,   243,   244,   245,   246,   247,   248,   249,
     816,   251,   252,   253,   254,  1175,   255,   256,   257,   258,
     259,   260,   261,  1176,   262,   817,   818,   265,   266,   267,
     268,   269,   819,   820,  1177,   821,  1178,   273,   822,   823,
     276,   824,   278,   279,   280,   281,   282,   283,  1179,  1180,
     284,   825,   286,   826,  1181,   288,   289,   290,   291,   292,
     293,   294,   295,   827,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   828,   829,   830,   320,   321,   322,
     831,  1182,   324,   325,   832,   327,  1183,   833,   329,   834,
     331,   332,   333,  1184,   334,   335,  1185,  1186,   336,   337,
     338,  1187,  1188,   339,   340,   835,   836,   343,   837,   838,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,  1189,  1190,  1191,  1192,   357,   358,   839,   840,   361,
     362,   841,   364,   365,   366,  1193,   367,   368,   369,   370,
     371,   372,  1194,   373,   374,   375,   842,   377,   378,   379,
     380,  1195,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,  1196,   394,   395,   843,   397,
     398,   399,   844,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,  1197,   845,   414,   415,
     416,   417,   418,   419,   846,   421,   422,   423,   847,   425,
     426,   848,   428,  1198,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   849,   442,   850,   444,
    1199,   445,   446,  1200,   447,   851,   449,   450,   451,   452,
     453,  1201,   454,   852,   853,  1202,  1203,   457,   458,   854,
     460,   855,  1204,   462,   463,   856,   465,   466,   467,   468,
     469,  1205,  1206,   470,   471,   472,  1207,   473,   474,   475,
     476,  1208,   477,   478,   479,   480,   481,  1209,   858,  1210,
     484,   859,   486,   487,   488,   489,   490,   491,   492,  1211,
    1212,   493,  1213,  1214,   494,   495,   496,   497,   498,   499,
     860,   861,   862,   863,   864,   865,   866,   867,   868,   869,
     870,   511,   512,   513,   514,   522,     0,     0,     0,     0,
       0,     0,     0,     0,  2034,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   156,     0,     0,     0,   158,   159,   160,   161,   162,
     163,     0,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,     0,   225,   226,   227,   228,     0,   229,
       0,   230,     0,     0,     0,   233,   234,   523,     0,   237,
       0,   238,     0,   239,   240,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   264,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   273,     0,     0,   276,     0,   278,   279,   280,
     281,   282,   283,     0,     0,   284,     0,   286,     0,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   524,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
       0,   319,   320,   321,   322,   323,     0,   324,   325,     0,
     327,     0,   328,   329,   330,   331,   332,   333,     0,   334,
     335,     0,     0,   336,   337,   338,     0,     0,   339,   340,
     341,     0,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,   425,   426,   427,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   525,   442,   443,   444,     0,   445,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
       0,     0,   457,   458,   459,   460,   461,     0,   462,   463,
     464,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,   482,   483,     0,   484,     0,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,     0,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     522,     0,     0,     0,     0,     0,     0,     0,     0,  2646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,     0,     0,     0,
     158,   159,   160,   161,   162,   163,     0,   165,   166,   167,
       0,   168,   169,   170,   171,   172,   173,     0,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,     0,   191,   192,   193,
     194,   195,   196,     0,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,     0,   225,
     226,   227,   228,     0,   229,     0,   230,     0,     0,     0,
     233,   234,   523,     0,   237,     0,   238,     0,   239,   240,
     241,   242,     0,   243,   244,   245,   246,   247,   248,   249,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   264,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   273,     0,     0,
     276,     0,   278,   279,   280,   281,   282,   283,     0,     0,
     284,     0,   286,     0,     0,   288,   289,   290,   291,   292,
     293,   294,   295,   524,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   319,   320,   321,   322,
     323,     0,   324,   325,     0,   327,     0,   328,   329,   330,
     331,   332,   333,     0,   334,   335,     0,     0,   336,   337,
     338,     0,     0,   339,   340,   341,     0,   343,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,     0,     0,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   425,
     426,   427,   428,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   525,   442,   443,   444,
       0,   445,   446,     0,   447,     0,   449,   450,   451,   452,
     453,     0,   454,   455,   456,     0,     0,   457,   458,   459,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,     0,   470,   471,   472,     0,   473,   474,   475,
     476,     0,   477,   478,   479,   480,   481,   482,   483,     0,
     484,     0,   486,   487,   488,   489,   490,   491,   492,     0,
       0,   493,     0,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   789,  1316,   652,     0,     0,
       0,   951,     0,     0,  2649,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,   790,
       0,     0,     0,     0,   791,   125,   126,     0,   127,   128,
     129,   792,   131,   132,   133,   793,   794,   795,   796,   797,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   798,   799,   151,     0,   152,   153,   154,
     155,   800,     0,   801,     0,   802,   159,   160,   161,   162,
     163,   803,   165,   166,   167,     0,   168,   169,   170,   171,
     172,   173,     0,   804,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   805,   186,   187,   806,   189,     0,
     190,     0,   191,   192,   193,   194,   195,   196,     0,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,   216,   807,   218,   219,   220,   221,   222,
     808,  1317,   224,     0,   225,   226,   809,   228,     0,   229,
       0,   230,   810,     0,   811,   233,   234,   812,   813,   237,
       0,   238,     0,   814,   815,   241,   242,     0,   243,   244,
     245,   246,   247,   248,   249,   816,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     817,   818,   265,   266,   267,   268,   269,   819,   820,     0,
     821,     0,   273,   822,   823,   276,   824,   278,   279,   280,
     281,   282,   283,     0,     0,   284,   825,   286,   826,     0,
     288,   289,   290,   291,   292,   293,   294,   295,   827,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   828,
     829,   830,   320,   321,   322,   831,     0,   324,   325,   832,
     327,     0,   833,   329,   834,   331,   332,   333,     0,   334,
     335,  1318,     0,   336,   337,   338,     0,     0,   339,   340,
     835,   836,   343,   837,   838,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     357,   358,   839,   840,   361,   362,   841,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   842,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   843,   397,   398,   399,   844,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   845,   414,   415,   416,   417,   418,   419,   846,
     421,   422,   423,   847,   425,   426,   848,   428,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   849,   442,   850,   444,     0,   445,   446,     0,   447,
     851,   449,   450,   451,   452,   453,     0,   454,   852,   853,
       0,     0,   457,   458,   854,   460,   855,  1319,   462,   463,
     856,   465,   466,   467,   468,   469,     0,     0,   470,   471,
     472,     0,   473,   474,   475,   476,     0,   477,   478,   479,
     480,   481,  1209,   858,     0,   484,   859,   486,   487,   488,
     489,   490,   491,   492,     0,     0,   493,     0,     0,   494,
     495,   496,   497,   498,   499,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   511,   512,   513,   514,
       0,     0,  1584,     0,     0,  1585,     0,  1320,  1321,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,     0,     0,  2132,     0,     0,     0,     0,
    1595,  1584,     0,     0,  1585,     0,     0,  1596,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1593,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,  1595,
    1584,     0,     0,  1585,     0,     0,  1596,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,  1595,     0,
    2133,     0,     0,     0,     0,  1596,     0,     0,  1584,     0,
       0,  1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1597,     0,     0,     0,  1593,     0,     0,     0,
    1858,     0,     0,     0,     0,     0,  1595,     0,  1584,     0,
    1598,  1585,     0,  1596,     0,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,     0,     0,     0,  1599,     0,     0,
       0,     0,  1600,     0,     0,     0,  1593,     0,     0,  1894,
    1597,     0,     0,     0,  1895,     0,  1595,     0,     0,  1598,
       0,     0,     0,  1596,     0,  1601,  1602,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1599,     0,     0,     0,
    1603,  1600,     0,     0,     0,     0,     0,  3456,     0,     0,
    1597,     0,     0,     0,     0,     0,     0,     0,  1598,     0,
       0,     0,     0,     0,  1601,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,     0,     0,  1604,  1603,
    1600,  1605,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1606,     0,     0,  1607,     0,
       0,     0,     0,  1601,  1602,     0,  1598,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1604,  1603,     0,
    1605,     0,     0,  1599,     0,     0,     0,     0,  1600,     0,
       0,     0,     0,     0,  1606,     0,     0,  1607,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,     0,     0,     0,
       0,  1601,  1602,     0,     0,     0,  1604,     0,     0,  1605,
       0,     0,     0,  1599,     0,     0,  1603,     0,  1600,     0,
       0,     0,     0,  1606,     0,     0,  1607,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,  1602,     0,     0,  1608,     0,     0,     0,     0,
       0,     0,     0,     0,  1604,  3457,  1603,  1605,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1606,     0,     0,  1607,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1608,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1604,     0,     0,  1605,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2136,     0,
       0,  1606,     0,     0,  1607,     0,     0,     0,     0,     0,
       0,     0,     0,  1608,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1865,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,
    1614,  1615,  1616,  1617,  1618,     0,     0,     0,     0,     0,
       0,  1608,     0,     0,     0,     0,  1584,     0,     0,  1585,
       0,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
       0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,
    1615,  1616,  1617,  1618,  1593,     0,     0,     0,  1900,     0,
       0,  1608,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,  1596,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,
    1616,  1617,  1618,     0,     0,     0,     0,     0,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1584,     0,     0,  1585,     0,     0,     0,
    1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,  1609,     0,
       0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,
    1618,  1593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1595,     0,     0,     0,     0,     0,     0,  1596,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1609,     0,
       0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,
    1618,     0,     0,     0,     0,  1597,     0,     0,     0,     0,
    1584,     0,     0,  1585,  1598,     0,     0,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,     0,
       0,  1599,     0,     0,     0,     0,  1600,     0,  1593,     0,
       0,     0,  1907,     0,     0,     0,     0,     0,  1595,     0,
       0,     0,     0,     0,     0,  1596,     0,     0,     0,  1601,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,     0,     0,     0,
       0,     0,  1597,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1905,  1584,     0,     0,
    1585,  1598,     0,     0,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,     0,  1604,     0,     0,  1605,     0,     0,  1599,     0,
       0,     0,     0,  1600,     0,  1593,     0,     0,     0,  1606,
       0,     0,  1607,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,  1596,     0,     0,     0,  1601,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,  1598,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,     0,     0,     0,  1604,
    1600,     0,  1605,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1606,     0,     0,  1607,
       0,     0,     0,  1601,  1602,     0,     0,     0,     0,  1608,
       0,     0,  1584,     0,     0,  1585,     0,     0,  1603,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2027,     0,     0,     0,     0,
    1593,     0,     0,     0,     0,  1598,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,  1604,  1596,     0,  1605,
       0,     0,  1599,     0,     0,     0,     0,  1600,     0,     0,
       0,     0,     0,  1606,     0,     0,  1607,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,     0,
    1601,  1602,     0,     0,     0,     0,  1608,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,  1610,
    1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1604,     0,     0,  1605,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1606,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1608,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1599,     0,     0,
       0,     0,  1600,  1609,     0,     0,  1610,  1611,  1612,     0,
    1613,  1614,  1615,  1616,  1617,  1618,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,  1602,     0,     0,     0,
       0,     0,     0,     0,  1584,     0,     0,  1585,     0,     0,
    1603,  1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1608,     0,  1593,     0,     0,     0,  2723,     0,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,     0,  1604,  1596,
    1609,  1605,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,
    1616,  1617,  1618,     0,     0,  1606,     0,     0,  1607,     0,
       0,     0,     0,     0,     0,     0,  1597,     0,  1584,     0,
       0,  1585,     0,     0,     0,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,     0,     0,     0,
       0,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1609,     0,     0,
    1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,  1618,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1608,     0,  1584,     0,     0,
    1585,     0,  1598,     0,  1586,  1587,  1588,  1589,  1590,  1591,
    1592,     0,     0,     0,     0,     0,     0,     0,     0,  1599,
       0,     0,     0,     0,  1600,  1593,     0,     0,  2710,     0,
       0,     0,     0,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,  1596,     0,     0,     0,     0,  1601,  1602,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1603,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,  1598,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1599,     0,     0,     0,     0,  1600,     0,
    1604,     0,  1609,  1605,     0,  1610,  1611,  1612,     0,  1613,
    1614,  1615,  1616,  1617,  1618,     0,     0,  1606,     0,     0,
    1607,  1601,  1602,     0,     0,     0,     0,     0,     0,     0,
    1584,     0,     0,  1585,     0,     0,  1603,  1586,  1587,     0,
       0,  1590,  1591,  1592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,     0,     0,  1598,     0,     0,  1595,     0,
       0,     0,     0,     0,  1604,  1596,     0,  1605,     0,     0,
       0,     0,  1599,     0,     0,     0,     0,  1600,     0,     0,
       0,  1606,     0,     0,  1607,     0,     0,     0,     0,     0,
       0,  1584,  1597,     0,  1585,     0,     0,     0,  1586,  1587,
    1601,  1602,  1590,  1591,  1592,     0,     0,  1608,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,  1593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1604,     0,     0,  1605,     0,     0,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,     0,     0,
    1606,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
       0,  1608,  1584,     0,     0,  1585,     0,     0,  1598,  1586,
    1587,     0,     0,  1590,  1591,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,     0,     0,     0,     0,
    1600,     0,     0,     0,  1609,     0,     0,  1610,  1611,  1612,
    1595,  1613,  1614,  1615,  1616,  1617,  1618,  1596,     0,     0,
       0,     0,     0,  1601,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1603,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,  1598,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1608,     0,     0,     0,     0,     0,  1599,     0,     0,     0,
       0,  1600,     0,     0,     0,     0,  1604,     0,  1609,  1605,
       0,  1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  1617,
    1618,     0,     0,  1606,  1601,  1602,  1607,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1603,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,  1604,     0,     0,
    1605,     0,     0,     0,     0,     0,     0,  1599,     0,     0,
       0,     0,  1600,     0,  1606,     0,     0,  1609,     0,     0,
    1610,  1611,  1612,     0,  1613,  1614,  1615,  1616,  2153,  1618,
       0,     0,     0,     0,     0, -2018, -2018,     0,     0,     0,
       0,     0,     0,  1608,     0,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2018,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1606,     0,     0,     0,     0,
       0,     0,     0,     0,  1608,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,  1615,
    1616,  1617,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,  1614,
    1615,  1616,  1617,  1618,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1141,     0,  2050,     0,
       0,     0,  1609,     0,     0,  1610,  1611,  1612,     0,  1613,
    1614,  1615,  1616,  1617,  1618,   113,   114,   115,   116,   117,
     118,   119,   120,  1142,   121,   122,   123,  1143,  1144,  1145,
     790,  1146,  1147,  1148,  1149,   791,   125,   126,  1150,   127,
     128,   129,   792,   131,   132,   133,   793,   794,   795,   796,
     797,  1151,   139,   140,   141,   142,   143,   144,  1152,  1153,
     145,   146,   147,   148,   798,   799,   151,  1154,   152,   153,
     154,   155,   800,  1155,   801,  1156,   802,   159,   160,   161,
     162,   163,   803,   165,   166,   167,  1157,   168,   169,   170,
     171,   172,   173,  1158,   804,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   805,   186,   187,   806,   189,
    1159,   190,  1160,   191,   192,   193,   194,   195,   196,  1161,
     197,   198,   199,   200,   201,  1162,  1163,   202,   203,   204,
     205,   206,  1164,   207,   208,   209,  1165,   210,   211,   212,
    1166,   213,   214,   215,   216,   807,   218,   219,   220,   221,
     222,   808,  1167,   224,  1168,   225,   226,   809,   228,  1169,
     229,  1170,   230,   810,  1171,   811,   233,   234,   812,   813,
     237,  1172,   238,  1173,   814,   815,   241,   242,  1174,   243,
     244,   245,   246,   247,   248,   249,   816,   251,   252,   253,
     254,  1175,   255,   256,   257,   258,   259,   260,   261,  1176,
     262,   817,   818,   265,   266,   267,   268,   269,   819,   820,
    1177,   821,  1178,   273,   822,   823,   276,   824,   278,   279,
     280,   281,   282,   283,  1179,  1180,   284,   825,   286,   826,
    1181,   288,   289,   290,   291,   292,   293,   294,   295,   827,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     828,   829,   830,   320,   321,   322,   831,  1182,   324,   325,
     832,   327,  1183,   833,   329,   834,   331,   332,   333,  1184,
     334,   335,  1185,  1186,   336,   337,   338,  1187,  1188,   339,
     340,   835,   836,   343,   837,   838,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,  1189,  1190,  1191,
    1192,   357,   358,   839,   840,   361,   362,   841,   364,   365,
     366,  1193,   367,   368,   369,   370,   371,   372,  1194,   373,
     374,   375,   842,   377,   378,   379,   380,  1195,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,  1196,   394,   395,   843,   397,   398,   399,   844,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,  1197,   845,   414,   415,   416,   417,   418,   419,
     846,   421,   422,   423,   847,   425,   426,   848,   428,  1198,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   849,   442,   850,   444,  1199,   445,   446,  1200,
     447,   851,   449,   450,   451,   452,   453,  1201,   454,   852,
     853,  1202,  1203,   457,   458,   854,   460,   855,  1204,   462,
     463,   856,   465,   466,   467,   468,   469,  1205,  1206,   470,
     471,   472,  1207,   473,   474,   475,   476,  1208,   477,   478,
     479,   480,   481,  1209,   858,  1210,   484,   859,   486,   487,
     488,   489,   490,   491,   492,  1211,  1212,   493,  1213,  1214,
     494,   495,   496,   497,   498,   499,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   869,   870,   511,   512,   513,
     514,  1141,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,  1142,   121,
     122,   123,  1143,  1144,  1145,   790,  1146,  1147,  1148,  1149,
     791,   125,   126,  1150,   127,   128,   129,   792,   131,   132,
     133,   793,   794,   795,   796,   797,  1151,   139,   140,   141,
     142,   143,   144,  1152,  1153,   145,   146,   147,   148,   798,
     799,   151,  1154,   152,   153,   154,   155,   800,  1155,   801,
    1156,   802,   159,   160,   161,   162,   163,   803,   165,   166,
     167,  1157,   168,   169,   170,   171,   172,   173,  1158,   804,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     805,   186,   187,   806,   189,  1159,   190,  1160,   191,   192,
     193,   194,   195,   196,  1161,   197,   198,   199,   200,   201,
    1162,  1163,   202,   203,   204,   205,   206,  1164,   207,   208,
     209,  1165,   210,   211,   212,  1166,   213,   214,   215,   216,
     807,   218,   219,   220,   221,   222,   808,  1167,   224,  1168,
     225,   226,   809,   228,  1169,   229,  1170,   230,   810,  1171,
     811,   233,   234,   812,   813,   237,  1172,   238,  1173,   814,
     815,   241,   242,  1174,   243,   244,   245,   246,   247,   248,
     249,   816,   251,   252,   253,   254,  1175,   255,   256,   257,
     258,   259,   260,   261,  1176,   262,   817,   818,   265,   266,
     267,   268,   269,   819,   820,  1177,   821,  1178,   273,   822,
     823,   276,   824,   278,   279,   280,   281,   282,   283,  1179,
    1180,   284,   825,   286,   826,  1181,   288,   289,   290,   291,
     292,   293,   294,   295,   827,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   828,   829,   830,   320,   321,
     322,   831,  1182,   324,   325,   832,   327,  1183,   833,   329,
     834,   331,   332,   333,  1184,   334,   335,  1185,  1186,   336,
     337,   338,  1187,  1188,   339,   340,   835,   836,   343,   837,
     838,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,  1189,  1190,  1191,  1192,   357,   358,   839,   840,
     361,   362,   841,   364,   365,   366,  1193,   367,   368,   369,
     370,   371,   372,  1194,   373,   374,   375,   842,   377,   378,
     379,   380,  1195,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,  1196,   394,   395,   843,
     397,   398,   399,   844,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1197,   845,   414,
     415,   416,   417,   418,   419,   846,   421,   422,   423,   847,
     425,   426,   848,   428,  1198,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   849,   442,   850,
     444,  1199,   445,   446,  1200,   447,   851,   449,   450,   451,
     452,   453,  1201,   454,   852,   853,  1202,  1203,   457,   458,
     854,   460,   855,  1204,   462,   463,   856,   465,   466,   467,
     468,   469,  1205,  1206,   470,   471,   472,  1207,   473,   474,
     475,   476,  1208,   477,   478,   479,   480,   481,  1209,   858,
    1210,   484,   859,   486,   487,   488,   489,   490,   491,   492,
    1211,  1212,   493,  1213,  1214,   494,   495,   496,   497,   498,
     499,   860,   861,   862,   863,   864,   865,   866,   867,   868,
     869,   870,   511,   512,   513,   514,  1141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,  2198,
     118,   119,   120,  1142,   121,   122,   123,  1143,  1144,  1145,
     790,  1146,  1147,  1148,  1149,   791,   125,   126,  1150,   127,
     128,   129,   792,   131,   132,   133,   793,   794,   795,   796,
     797,  1151,   139,   140,   141,   142,   143,   144,  1152,  1153,
     145,   146,   147,   148,   798,   799,   151,  1154,   152,   153,
     154,   155,   800,  1155,   801,  1156,   802,   159,   160,   161,
     162,   163,   803,   165,   166,   167,  1157,   168,   169,   170,
     171,   172,   173,  1158,   804,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   805,   186,   187,   806,   189,
    1159,   190,  1160,   191,   192,   193,   194,   195,   196,  1161,
     197,   198,   199,   200,   201,  1162,  1163,   202,   203,   204,
    2199,   206,  1164,   207,   208,   209,  1165,   210,   211,   212,
    1166,   213,   214,   215,   216,   807,   218,   219,   220,   221,
     222,   808,  1167,   224,  1168,   225,   226,   809,   228,  1169,
     229,  1170,   230,   810,  1171,   811,   233,   234,   812,   813,
     237,  1172,   238,  1173,   814,   815,   241,   242,  1174,   243,
     244,   245,   246,   247,   248,   249,   816,   251,   252,   253,
     254,  1175,   255,   256,   257,   258,   259,   260,   261,  1176,
     262,   817,   818,   265,   266,   267,   268,   269,   819,   820,
    1177,   821,  1178,   273,   822,   823,   276,   824,   278,   279,
     280,   281,   282,   283,  1179,  1180,   284,   825,   286,   826,
    1181,   288,   289,   290,   291,   292,   293,   294,   295,   827,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     828,   829,   830,   320,   321,   322,   831,  1182,   324,   325,
     832,   327,  1183,   833,   329,   834,   331,   332,   333,  1184,
     334,   335,  1185,  1186,   336,   337,   338,  1187,  1188,   339,
     340,   835,   836,   343,   837,   838,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,  1189,  1190,  1191,
    1192,   357,   358,   839,   840,   361,   362,   841,   364,   365,
     366,  1193,   367,   368,   369,   370,   371,   372,  1194,   373,
     374,   375,   842,   377,   378,   379,   380,  1195,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,  1196,   394,   395,   843,   397,   398,   399,   844,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,  1197,   845,   414,   415,   416,   417,   418,  2200,
     846,   421,   422,   423,   847,   425,   426,   848,   428,  1198,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   849,   442,   850,   444,  1199,   445,   446,  1200,
     447,   851,   449,   450,   451,   452,   453,  1201,   454,   852,
     853,  1202,  1203,   457,   458,   854,   460,   855,  1204,   462,
     463,   856,   465,   466,   467,   468,   469,  1205,  1206,   470,
     471,   472,  1207,   473,   474,   475,   476,  1208,   477,   478,
     479,   480,   481,  1209,   858,  1210,   484,   859,   486,   487,
     488,   489,   490,   491,   492,  1211,  1212,   493,  1213,  1214,
     494,   495,   496,   497,   498,   499,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   869,   870,   511,   512,   513,
     514,   789,     0,   652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,   790,     0,     0,     0,     0,
     791,   125,   126,     0,   127,   128,   129,   792,   131,   132,
     133,   793,   794,   795,   796,   797,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   798,
     799,   151,     0,   152,   153,   154,   155,   800,     0,   801,
       0,   802,   159,   160,   161,   162,   163,   803,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   804,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     805,   186,   187,   806,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     807,   218,   219,   220,   221,   222,   808,  1317,   224,     0,
     225,   226,   809,   228,     0,   229,     0,   230,   810,     0,
     811,   233,   234,   812,   813,   237,     0,   238,     0,   814,
     815,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   816,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   817,   818,   265,   266,
     267,   268,   269,   819,   820,     0,   821,     0,   273,   822,
     823,   276,   824,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   825,   286,   826,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   827,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   828,   829,   830,   320,   321,
     322,   831,     0,   324,   325,   832,   327,     0,   833,   329,
     834,   331,   332,   333,     0,   334,   335,  1318,     0,   336,
     337,   338,     0,     0,   339,   340,   835,   836,   343,   837,
     838,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   839,   840,
     361,   362,   841,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   842,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   843,
     397,   398,   399,   844,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   845,   414,
     415,   416,   417,   418,   419,   846,   421,   422,   423,   847,
     425,   426,   848,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   849,   442,   850,
     444,     0,   445,   446,     0,   447,   851,   449,   450,   451,
     452,   453,     0,   454,   852,   853,     0,     0,   457,   458,
     854,   460,   855,  1319,   462,   463,   856,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,  1209,   858,
       0,   484,   859,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   860,   861,   862,   863,   864,   865,   866,   867,   868,
     869,   870,   511,   512,   513,   514,   789,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     3,     4,     0,
     790,     0,     0,     0,     0,   791,   125,   126,     0,   127,
     128,   129,   792,   131,   132,   133,   793,   794,   795,   796,
     797,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   798,   799,   151,     0,   152,   153,
     154,   155,   800,     0,   801,     0,   802,   159,   160,   161,
     162,   163,   803,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   804,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   805,   186,   187,   806,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   807,   218,   219,   220,   221,
     222,   808,     0,   224,     0,   225,   226,   809,   228,     0,
     229,     0,   230,   810,     0,   811,   233,   234,   812,   813,
     237,     0,   238,     0,   814,   815,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,   816,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   817,   818,   265,   266,   267,   268,   269,   819,   820,
       0,   821,     0,   273,   822,   823,   276,   824,   278,   279,
     280,   281,   282,   283,     0,     0,   284,   825,   286,   826,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   827,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     828,   829,   830,   320,   321,   322,   831,     0,   324,   325,
     832,   327,     0,   833,   329,   834,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   835,   836,   343,   837,   838,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   839,   840,   361,   362,   841,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   842,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   843,   397,   398,   399,   844,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,   845,   414,   415,   416,   417,   418,   419,
     846,   421,   422,   423,   847,   425,   426,   848,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   849,   442,   850,   444,     0,   445,   446,     0,
     447,   851,   449,   450,   451,   452,   453,     0,   454,   852,
     853,     0,     0,   457,   458,   854,   460,   855,     0,   462,
     463,   856,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,  1209,   858,     0,   484,   859,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   869,   870,   511,   512,   513,
     514,   112,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,   622,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   623,     0,   624,
       0,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   625,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,   231,     0,
     232,   233,   234,   235,   236,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,     0,
       0,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,     0,   324,   325,   326,   327,     0,   627,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,   342,   343,   344,
     629,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   630,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   632,
     444,     0,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     633,   460,   634,     0,   462,   463,   635,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   112,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,   157,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,   231,     0,   232,   233,   234,   235,   236,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,     0,     0,   284,   285,   286,   287,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,     0,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
     447,   448,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,  1712,   152,   153,   154,   155,   156,     0,     0,
    1713,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,  1714,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,  1715,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  1716,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,  1717,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,  1718,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,  1712,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,  1714,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,  1715,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,  2275,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,  1717,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,  1718,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     3,     4,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   548,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   549,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,   628,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   732,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,   628,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,   763,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,  1911,     0,     0,
       0,     0,  1912,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,  1919,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,  1920,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,  1921,   447,     0,   449,  1922,   451,
    1923,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,  1924,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   659,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     660,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   661,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   662,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   663,
     456,     0,     0,   664,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     696,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   727,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   730,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   734,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   751,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   779,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   782,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,   905,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,   928,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   659,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   663,
     456,     0,     0,   664,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  1276,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,  1278,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  1281,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,  1283,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,   547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  2194,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,  1449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    1450,     0,     0,  -777,     0,  1451,   125,   126,     0,   127,
     128,   129,  1452,   131,   132,   133,     0,  1453,  1454,  1455,
    1456,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,  1457,  1458,   151,     0,   152,   153,
     154,   155,     0,     0,  1459,     0,  1460,   159,   160,   161,
     162,   163,  1461,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  1462,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1463,   186,   187,  1464,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   964,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,     0,   218,   219,   220,   221,
     222,     0,     0,   224,     0,   225,   226,  1465,   228,     0,
     229,     0,   230,  1466,     0,  1467,   233,   234,  -777,  1468,
     237,     0,   238,     0,     0,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,  1469,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,  1470,     0,   265,   266,   267,   268,   269,  1471,  1472,
       0,  1473,     0,   273,  1474,  1475,   276,  1476,   278,   279,
     280,   281,   282,   283,     0,     0,   284,  1477,   286,  1478,
       0,   288,   289,   290,   291,   292,   293,   294,   295,  1479,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
    1480,  1481,  1482,   320,   321,   322,     0,     0,   324,   325,
    1483,   327,     0,     0,   329,  1484,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,  1485,   343,  1486,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,     0,  1487,   361,   362,     0,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,  1488,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,  1489,   397,   398,   399,  1490,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,  1491,   414,   415,   416,   417,   418,   419,
    1492,   421,   422,   423,  1493,   425,   426,  1494,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,  1495,   442,     0,   444,     0,   445,   446,     0,
     447,  1496,   449,   450,   451,   452,   453,     0,   454,  1497,
    1498,     0,     0,   457,   458,     0,   460,     0,     0,   462,
     463,  1499,   465,   466,   467,   468,   469,  1500,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,     0,  1501,     0,   484,  1502,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   522,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,   511,   512,   513,
     514,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,  2924,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     674,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   675,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   676,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   677,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   678,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,   775,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   676,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   678,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  1285,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,  1644,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  1817,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,   241,   242,     0,   243,
     244,   245,   246,   247,  2181,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   156,     0,     0,
       0,   158,   159,   160,   161,   162,   163,     0,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,     0,
     225,   226,   227,   228,     0,   229,     0,   230,     0,     0,
       0,   233,   234,   523,     0,   237,     0,   238,     0,   239,
     240,   241,   242,     0,   243,   244,   245,   246,   247,  2196,
     249,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   273,     0,
       0,   276,     0,   278,   279,   280,   281,   282,   283,     0,
       0,   284,     0,   286,     0,     0,   288,   289,   290,   291,
     292,   293,   294,   295,   524,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   319,   320,   321,
     322,   323,     0,   324,   325,     0,   327,     0,   328,   329,
     330,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,   341,     0,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,   427,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   525,   442,   443,
     444,     0,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,     0,     0,   457,   458,
     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,   482,   483,
       0,   484,     0,   486,   487,   488,   489,   490,   491,   492,
       0,     0,   493,     0,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,  1449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    1450,     0,     0,     0,     0,  1451,   125,   126,     0,   127,
     128,   129,  1452,   131,   132,   133,     0,  1453,  1454,  1455,
    1456,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,  1457,  1458,   151,     0,   152,   153,
     154,   155,     0,     0,  1459,     0,  1460,   159,   160,   161,
     162,   163,  1461,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  1462,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1463,   186,   187,  1464,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   964,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,     0,   218,   219,   220,   221,
     222,     0,     0,   224,     0,   225,   226,  1465,   228,     0,
     229,     0,   230,  1466,     0,  1467,   233,   234,     0,  1468,
     237,     0,   238,     0,     0,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,  1469,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,  1470,     0,   265,   266,   267,   268,   269,  1471,  1472,
       0,  1473,     0,   273,  1474,  1475,   276,  1476,   278,   279,
     280,   281,   282,   283,     0,     0,   284,  1477,   286,  1478,
       0,   288,   289,   290,   291,   292,   293,   294,   295,  1479,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
    1480,  1481,  1482,   320,   321,   322,     0,     0,   324,   325,
    1483,   327,     0,     0,   329,  1484,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,  1485,   343,  1486,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,     0,  1487,   361,   362,     0,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,  1488,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,  1489,   397,   398,   399,  1490,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,  1491,   414,   415,   416,   417,   418,   419,
    1492,   421,   422,   423,  1493,   425,   426,  1494,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,  1495,   442,     0,   444,     0,   445,   446,     0,
     447,  1496,   449,   450,   451,   452,   453,     0,   454,  1497,
    1498,     0,     0,   457,   458,     0,   460,     0,     0,   462,
     463,  1499,   465,   466,   467,   468,   469,  1500,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,     0,  1501,     0,   484,  1502,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,  1449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   511,   512,   513,
     514,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    1450,     0,     0,     0,     0,  1451,   125,   126,     0,   127,
     128,   129,  1452,   131,   132,   133,     0,  1453,  1454,  1455,
    1456,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,  1457,  1458,   151,     0,   152,   153,
     154,   155,     0,     0,  1459,     0,  1460,   159,   160,   161,
     162,   163,  1461,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  1462,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1463,   186,   187,  1464,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   964,
     205,   206,     0,   207,   208,   209,     0,  1800,   211,   212,
       0,   213,   214,   215,   216,     0,   218,   219,   220,   221,
     222,     0,     0,   224,     0,   225,   226,  1465,   228,     0,
     229,     0,   230,  1466,     0,  1467,   233,   234,     0,  1468,
     237,     0,   238,     0,     0,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,  1469,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,  1470,     0,   265,   266,   267,   268,   269,  1471,  1472,
       0,  1473,     0,   273,  1474,  1475,   276,  1476,   278,   279,
     280,   281,   282,   283,     0,     0,   284,  1477,   286,  1478,
       0,   288,   289,   290,   291,   292,   293,   294,   295,  1479,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
    1480,  1481,  1482,   320,   321,   322,     0,     0,   324,   325,
    1483,   327,     0,     0,   329,  1484,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,  1485,   343,  1486,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,     0,  1487,   361,   362,     0,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,  1488,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,  1489,   397,   398,   399,  1490,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,  1491,   414,   415,   416,   417,   418,   419,
    1492,   421,   422,   423,  1493,   425,   426,  1494,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,  1495,   442,     0,   444,     0,   445,   446,     0,
     447,  1496,   449,   450,   451,   452,   453,     0,   454,  1497,
    1498,     0,     0,   457,   458,     0,   460,     0,     0,   462,
     463,  1499,   465,   466,   467,   468,   469,  1500,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,     0,  1501,     0,   484,  1502,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,  3094,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   511,   512,   513,
     514,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    2847,     0,     0,     0,     0,  2848,   125,   126,     0,   127,
     128,   129,  2849,   131,   132,   133,     0,  1453,  2850,  1455,
    1456,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,  1457,  1458,   151,     0,   152,   153,
     154,   155,     0,     0,  2851,     0,  2852,   159,   160,   161,
     162,   163,  2853,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,  2854,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,  1463,   186,   187,  1464,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   964,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,     0,   218,   219,   220,   221,
     222,     0,     0,   224,     0,   225,   226,  1465,   228,     0,
     229,     0,   230,  2855,     0,  2856,   233,   234,  2857,  2858,
     237,     0,   238,     0,     0,     0,   241,   242,     0,   243,
     244,   245,   246,   247,   248,   249,  2859,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,  2860,     0,   265,   266,   267,   268,   269,  1471,  1472,
       0,  1473,     0,   273,  2861,  2862,   276,  2863,   278,   279,
     280,   281,   282,   283,     0,     0,   284,  2864,   286,  2865,
       0,   288,   289,   290,   291,   292,   293,   294,   295,  3095,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
    1480,  2867,  1482,   320,   321,   322,     0,     0,   324,   325,
    2869,   327,     0,     0,   329,  1484,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,     0,  2871,   343,  2872,     0,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,     0,  2873,   361,   362,     0,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,  1488,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,  2874,   397,   398,   399,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,  2875,   414,   415,   416,   417,   418,   419,
       0,   421,   422,   423,  2877,   425,   426,  1494,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,  3096,   442,     0,   444,     0,   445,   446,     0,
     447,  2879,   449,   450,   451,   452,   453,     0,   454,  1497,
    1498,     0,     0,   457,   458,     0,   460,     0,     0,   462,
     463,  2880,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,     0,  1501,     0,   484,  2882,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   511,   512,   513,
     514,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,     0,     0,     0,   158,   159,   160,   161,
     162,   163,     0,   165,   166,   167,     0,   168,   169,   170,
     171,   172,   173,     0,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,     0,   191,   192,   193,   194,   195,   196,     0,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,     0,   225,   226,   227,   228,     0,
     229,     0,   230,     0,     0,     0,   233,   234,   523,     0,
     237,     0,   238,     0,   239,   240,     0,   242,     0,   243,
     244,   245,   246,   247,   248,   249,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   264,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   273,     0,     0,   276,     0,   278,   279,
     280,   281,   282,   283,     0,     0,   284,     0,   286,     0,
       0,   288,   289,   290,   291,   292,   293,   294,   295,   524,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   319,   320,   321,   322,   323,     0,   324,   325,
       0,   327,     0,   328,   329,   330,   331,   332,   333,     0,
     334,   335,     0,     0,   336,   337,   338,     0,     0,   339,
     340,   341,     0,   343,     0,   345,   346,   347,   348,   349,
     350,   351,     0,   353,   354,   355,   356,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,     0,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,   427,   428,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   525,   442,   443,   444,     0,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,     0,     0,   457,   458,   459,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,     0,   470,
     471,   472,     0,   473,   474,   475,   476,     0,   477,   478,
     479,   480,   481,   482,   483,     0,   484,     0,   486,   487,
     488,   489,   490,   491,   492,     0,     0,   493,     0,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,  1739,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1450,     0,     0,     0,     0,
    1451,   125,   126,     0,   127,   128,   129,  1452,   131,   132,
     133,     0,  1453,  1454,  1455,  1456,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,  1457,
    1458,   151,     0,   152,   153,   154,   155,     0,     0,  1459,
       0,  1460,   159,   160,   161,   162,   163,  1461,   165,   166,
     167,     0,   168,   169,   170,   171,   172,   173,     0,  1462,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
    1463,   186,   187,  1464,   189,     0,   190,     0,   191,   192,
     193,   194,   195,   196,     0,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   964,   205,   206,     0,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,   216,
       0,   218,   219,   220,   221,   222,     0,     0,   224,     0,
     225,   226,  1465,   228,     0,   229,     0,   230,  1466,     0,
    1467,   233,   234,     0,  1468,   237,     0,   238,     0,     0,
       0,   241,   242,     0,   243,   244,   245,   246,   247,   248,
     249,  1469,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,     0,   262,  1470,     0,   265,   266,
     267,   268,   269,  1471,  1472,     0,  1473,     0,   273,  1474,
    1475,   276,  1476,   278,   279,   280,   281,   282,   283,     0,
       0,   284,  1477,   286,  1478,     0,   288,   289,   290,   291,
     292,   293,   294,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,  1480,  1481,  1482,   320,   321,
     322,     0,     0,   324,   325,  1483,   327,     0,     0,   329,
    1484,   331,   332,   333,     0,   334,   335,     0,     0,   336,
     337,   338,     0,     0,   339,   340,     0,  1485,   343,  1486,
       0,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   357,   358,     0,  1487,
     361,   362,     0,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,  1488,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,  1489,
     397,   398,   399,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,  1491,   414,
     415,   416,   417,   418,   419,     0,   421,   422,   423,  1493,
     425,   426,  1494,   428,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,     0,   442,     0,
     444,     0,   445,   446,     0,   447,  1496,   449,   450,   451,
     452,   453,     0,   454,  1497,  1498,     0,     0,   457,   458,
       0,   460,     0,     0,   462,   463,  1499,   465,   466,   467,
     468,   469,     0,     0,   470,   471,   472,     0,   473,   474,
     475,   476,     0,   477,   478,   479,   480,   481,     0,  1501,
       0,   484,  1502,   486,   487,   488,   489,   490,   491,   492,
       0,     1,   493,     0,     0,   494,   495,   496,   497,   498,
     499,     2,     0,     3,     4,     0,     0,     0,     1,     0,
       0,     0,   511,   512,   513,   514,     0,     0,     2,     0,
       0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
       7,     0,     0,     0,     0,     0,     0,     0,     6,     0,
       0,     0,     0,     0,     8,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,     9,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,    10,     0,   583,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,    10,     0,   583,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    12,     0,     0,
       0,     0,     0,     0,     0,     0,   584,     0,     0,     0,
       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,
      17,     0,     0,   584,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,    28,     0,     0,    29,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,    28,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,    32,    31,
       0,     0,     0,     0,     0,    33,     0,     0,     0,    34,
       0,     0,     0,     0,     0,    32,     0,     0,     0,    35,
       0,     0,    33,     0,     0,     0,    34,     0,     0,     0,
       0,    36,     0,     0,     0,    37,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,    37,     0,     0,    38,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    39,     0,
       0,     0,    38,     0,    41,     0,     0,     0,     0,    42,
       0,     0,     0,   585,     0,    39,     0,     0,     0,     0,
       0,    41,     0,     0,     0,    43,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   586,     0,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45
};

static const yytype_int16 yycheck[] =
{
       7,   745,   515,   731,     0,   646,  1393,     0,   672,     7,
      86,    87,     0,   895,    21,    45,     0,   578,     0,     0,
     695,    84,     0,    21,     0,  1628,   586,   740,     7,    23,
      24,  1138,  1124,   877,  1125,    88,    18,  1666,     0,   719,
      36,     0,    21,    88,   886,  1274,   937,   886,  1060,  1099,
    1112,  2192,   750,   984,    14,    18,  1104,  2106,  1816,  2108,
     784,   886,  1439,  1101,  1065,  2137,  1953,    21,   886,  2602,
    1255,   731,  2565,   733,   877,   735,  2127,  2600,   780,    86,
      87,    37,    21,  1547,  2240,  2241,  2242,  1027,    86,    87,
     642,  1129,  1032,  1581,  1582,   647,  1954,  1298,  1770,  2188,
     586,   585,    98,  2072,  2565,     0,   579,    86,    87,     0,
     992,     0,     0,     0,     0,     0,   110,     0,    44,     0,
       0,     0,     0,     0,    24,   938,   639,  2126,     0,     0,
    2616,  2623,    86,    87,     0,  2254,     0,     0,  2439,     0,
       0,     0,   962,    33,     0,     0,  1792,    86,    87,  1789,
     106,  1684,  1632,   958,   959,  1786,  1929,  2521,   978,     5,
       5,  2525,   604,  2933,     5,    80,     5,    13,    14,  1942,
     975,  1896,    13,    14,   687,   938,     5,     5,     5,  1686,
     714,     5,     5,  2272,  2265,    13,    14,     5,     5,    13,
      14,   904,    74,     5,  1038,    13,    14,     5,     5,     9,
       5,     5,     9,     5,     9,  2919,     5,   714,     5,   884,
       5,    26,    63,   709,    45,    45,     5,    32,     5,    30,
     171,    30,  2936,   147,   172,  1038,   139,    38,   124,    38,
      30,  2320,  2321,   107,  2323,     5,  2391,   161,    38,    13,
      14,     5,   166,  2261,   100,   100,   887,    82,   190,     3,
       4,     5,    53,    13,    14,     9,     4,   122,    93,   180,
     107,     9,    11,    82,   244,    11,     9,    16,  3099,  1113,
      16,   147,  1116,  1117,    93,   244,   119,  2821,  2775,    63,
     192,   119,  3229,   244,    11,   161,   168,    90,    15,    16,
     166,   226,   287,   217,   244,     8,   226,   289,    11,  1112,
      46,    63,    15,    16,     4,    63,    19,    20,    21,     9,
     244,  2893,   379,   237,     3,   107,   991,   877,   295,    46,
     275,   312,   137,   290,   104,  2374,   129,    55,  2484,   117,
    1043,  1222,  2535,   365,    80,    75,   888,   272,   192,   165,
    1231,   217,   272,   994,   122,    34,    35,   212,   900,  1112,
      64,   278,  3337,    80,   312,   132,  1585,   163,    40,   137,
      74,   237,   286,   117,   415,    41,   406,    30,    11,     0,
     149,   295,    15,    16,    30,   176,  3323,   295,   171,  3326,
     117,  1866,  3294,  2876,   108,   454,   120,    18,  3428,    40,
      21,    33,   193,  2534,   878,  2928,  1408,   198,   914,   388,
     180,   370,   453,   338,   920,    36,  2939,  2930,   366,   370,
     286,  3125,  1897,  2756,    45,  2758,   108,    59,  1093,   295,
     370,   200,   163,  2095,  3261,  1089,  1090,  1439,   468,  3469,
    1492,   108,  2635,   289,   289,   236,   370,  2509,   122,  3424,
     352,   279,  2531,   171,  2533,   514,   328,  2483,   108,  2485,
     126,   518,   416,   190,   389,    86,    87,    88,  3228,   389,
     194,  1274,  2431,   183,   218,   271,   393,    98,   448,   132,
    1922,  1923,  1924,   213,  3386,  3422,   132,   428,   293,   448,
     272,   170,   514,   172,   997,   198,   240,   448,   272,   230,
    1719,   279,   272,   175,   514,    11,   451,   323,   448,    15,
      16,   355,   358,   358,   307,    11,   357,   284,   221,    15,
      16,  1274,    12,  3057,   448,  3097,   451,    17,   509,   514,
     444,   451,   514,   370,   175,   514,   240,     0,  2683,    29,
    3361,   191,  3076,   454,   514,   350,   532,   274,  1282,   354,
      46,   518,   416,    43,    44,   514,  3043,   514,  2629,   327,
    3387,   509,   503,   514,  3324,  2644,   586,  1091,   454,   472,
     512,   637,   514,   445,   514,   516,   514,  1498,   444,  1946,
    1066,   386,   514,   357,    80,  2462,   403,   404,   291,   586,
     514,  1261,   413,   413,  1091,   396,   451,   396,   512,  1774,
     391,   515,   516,   428,  2612,   357,   396,   512,   517,   357,
     518,   516,   386,   585,   104,  2330,  3099,   637,  2072,   428,
    2143,  3325,  1054,   456,  2387,  1313,  2959,   337,   421,   626,
     476,   476,  2110,   586,  1825,   619,  3112,   621,   626,  1858,
     637,  2667,   685,   478,  2274,   428,  2267,  2144,  3099,   637,
     685,  1870,   457,    82,  1464,   425,   366,   626,   464,  2295,
    2130,  2792,  1457,  1458,    93,   500,   719,   651,   637,   515,
     515,   517,   517,  1713,  1484,   672,   673,   518,   514,   514,
     478,  1900,  2136,   514,   463,   514,   522,  1482,  1907,  1492,
    2799,  1332,   676,   637,  3048,   514,   514,   626,   695,  3053,
     514,   514,   500,   522,  3227,   512,   514,   514,   637,   516,
    1520,  3002,   514,   513,    13,    14,   514,   514,   704,   514,
     514,   704,   514,  1804,  1943,   514,   704,   514,  1947,   514,
     704,   621,   704,   704,  1399,   514,   704,   514,   704,  1492,
     693,   738,   739,  1840,   690,   742,  1297,  1542,  1543,  1630,
     514,  1302,   704,  3235,   514,   704,  1975,  1308,  3234,  1413,
     514,   505,   506,   709,   514,  1315,  2912,   505,   506,  1525,
     518,   510,   505,   506,   510,  1429,  1951,   451,  1534,   274,
     696,  2658,  1585,   120,  2773,   464,   476,   784,   505,   506,
     507,   508,   509,   510,   674,   675,   514,   677,   501,   502,
     503,   106,   505,   506,   507,   508,   509,   510,  3321,   161,
     500,   172,  3335,   161,     5,   505,   506,     5,   166,   704,
    2779,   132,    11,   704,   265,   704,   704,   704,   704,   704,
     454,   704,  1585,   704,   704,   704,   704,   704,  2917,  1315,
    1314,  1304,   704,   704,  2692,   911,    11,  2695,   704,  2697,
     704,   704,   918,   704,   704,   704,  2604,   194,  2735,  1524,
    1525,  3287,  3288,  3029,  1406,  3031,  3379,   166,   476,  1534,
     478,  1574,  1575,  1576,   507,   508,   509,   510,  3361,   320,
     877,    46,   478,  1548,  1387,   237,   883,   884,   147,   237,
     514,    80,   889,   877,   177,   892,   893,   148,   895,   896,
     897,   898,   886,   430,   500,  2096,   878,  1909,   244,  1743,
    3361,   532,  1577,  3339,   911,    80,  1719,   177,  2580,  1753,
    2582,   918,  1756,   911,   356,  3448,   476,   518,  3059,  3188,
     918,  3190,  1813,  2375,  2376,  2377,  2378,   244,   286,   936,
     937,   938,   911,   249,  1946,   250,   161,   308,   199,   918,
     500,   935,   479,  1594,   386,   260,   177,   240,   217,    37,
     957,  2826,   108,   274,   585,   586,  1719,   911,   274,  2834,
     514,  2449,   992,   284,   918,  2352,   420,  2431,   422,   976,
     240,   202,   911,   171,    37,  3151,   509,  1917,   377,   918,
     987,   988,   989,   516,   991,   992,   352,   994,  3039,   505,
     506,   507,   508,   509,   510,   626,  3265,  1841,   119,   147,
      30,   507,   508,   509,   510,   377,   637,  1001,   509,   240,
    1738,  2023,   237,   161,   503,   516,  1023,  1011,   166,  1072,
    1073,   392,  1075,   202,   370,   514,   295,  1072,  1073,   503,
    1075,    74,     3,  1040,  1041,  1029,  1597,    80,  1841,   251,
      40,    82,   516,   202,  1038,  1858,   420,  2276,   422,   549,
      93,  1711,    93,   370,   685,    85,   191,  1870,  2243,    26,
      60,   286,  3203,   294,    94,    32,  2953,  1074,   478,   217,
     433,  1078,  1079,   704,   117,  2747,   119,  1728,  1738,  1730,
     580,  1088,  1089,  1090,   172,   206,  1093,  1900,   118,   237,
     500,  1771,  1772,  1773,  1907,  1858,  1794,   173,  1758,   466,
     370,  2565,   448,  1763,   514,  1112,   106,  1870,  1832,   172,
    1066,  2112,    71,    72,  2115,   513,   314,   315,   316,   416,
     208,  1823,   132,  3279,  2215,  1827,   524,   420,  1830,   422,
    1943,   448,    13,    14,  1947,   342,   224,  1900,   286,   420,
    1953,   422,    59,   161,  1907,   208,   234,   295,   166,   159,
     420,   272,   422,   274,  2166,   448,   513,   188,   189,    26,
     190,   224,  1975,   206,   420,  1816,   422,   524,   514,   245,
     137,   234,  1128,   203,   381,   444,  1136,  2406,   448,   374,
    1943,   379,   342,   132,  1947,  2943,  2224,   514,  1749,   420,
    1953,   422,     8,  1754,   512,    11,   696,   514,   516,    15,
      16,   201,    26,    19,    20,    21,   514,    26,    32,   416,
     159,   370,  1975,    32,   445,  1222,   514,   448,   416,   237,
    2102,   381,   381,  1398,  1231,  1400,  1401,   258,   259,     4,
    1905,   274,   258,   259,     9,  2283,   279,   166,   274,   478,
       4,  2289,  1848,   279,   171,     9,  1852,   878,  1255,  1855,
     250,   449,   515,     4,   171,   518,   416,   416,     9,   466,
     260,   500,   460,  2198,   274,  2200,   342,  1274,   286,   279,
     137,     4,   272,   361,   284,   514,     9,   514,   476,   512,
     911,  1841,   514,   516,  2661,   328,   512,   918,   514,  1273,
     516,  1298,   380,   512,   514,  1273,   444,   516,   361,  3440,
     336,   344,   500,   514,   304,   381,   466,   466,  1315,   515,
    1985,  1273,   518,   137,  1273,  2779,   514,   380,   137,   919,
     507,   515,   953,   923,   518,  1332,   293,   660,   661,   662,
     279,  1338,  1314,   514,   965,   284,  2565,  1331,    13,    14,
     416,  1335,  3391,  1419,   375,   376,  1422,   909,   514,   375,
     376,  1427,  1315,  3425,  1430,  3427,   356,   515,  3407,  1435,
     518,   992,   500,   515,   512,   927,   518,   514,   516,   931,
     674,   675,   402,   677,  2531,   405,  2533,  2389,  1385,  1386,
    2392,   381,   198,   350,  1391,  2060,  1393,   354,    13,    14,
     466,  1398,  1399,  1400,  1401,  1393,  3468,   314,   315,   316,
     400,   515,   445,   514,   518,   221,  1413,  1414,   711,   171,
     713,   454,  1419,  3462,  1393,  1422,    13,    14,  3467,   386,
    1427,  1419,  1429,  1430,  1422,   435,   293,  2107,  1435,  1427,
     515,   515,  1430,   518,   518,     6,   446,  1435,     9,   514,
    1419,  1072,  1073,  1422,  1075,    16,   515,   515,  1427,   518,
     518,  1430,    26,   497,  1393,  2547,  1435,  2548,    32,    74,
      31,   516,   379,  2276,    35,  1419,   223,   515,  1422,   293,
     518,   289,  2579,  1427,   293,   291,  1430,    13,    14,   177,
    1419,  1435,  2532,  1422,   497,  1492,   435,   354,  1427,   356,
     457,  1430,   173,  2195,   516,  2197,  1435,   446,  2546,   416,
    2548,   515,   117,  2595,   518,  2436,  2437,  2171,   170,  3181,
     518,  3183,   514,  2276,   515,   515,   515,  1524,  1525,   386,
    2264,   515,    13,    14,   518,  1521,  1533,  1534,  1521,   171,
     354,   350,   449,  1521,  1541,   354,    13,    14,   294,  1521,
    1521,  1548,   240,   460,    59,  1521,   514,  2198,  2199,  2200,
     497,   515,   893,   171,   518,   515,   417,  2439,   518,  1059,
      13,    14,   386,   137,   245,   515,  1573,   386,   518,   223,
    1577,   515,  2414,  1580,   518,  2414,  2415,  2416,  1585,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  3191,  2414,
    2415,  1598,  1599,  2406,   152,  2413,  1603,   514,   350,   515,
    1607,   152,   518,  1610,  1611,  1612,  1613,  1614,  1615,  1616,
    1617,  1618,   152,  2842,  1621,   313,  1669,   515,    13,    14,
     518,  1628,   515,  1630,  1669,   518,   515,   515,   515,   518,
     518,   518,   152,   457,    26,  3099,   515,    40,   457,   518,
      32,   152,  1649,  2406,  1638,   515,    26,   515,   518,  2462,
     518,   515,    32,   515,   518,   515,   518,   515,   518,   274,
     518,   342,   515,  2314,   279,  1672,   515,   515,   515,   518,
     518,   518,   370,    13,    14,   515,  1683,  1684,   518,   377,
      13,    14,   514,  1314,  1647,   501,   502,   503,   274,   505,
     506,   507,   508,   509,   510,    40,   314,   315,   316,  2462,
     381,   515,   515,     8,   518,   518,    11,    55,   365,   366,
      15,    16,  1719,   328,    19,    20,    21,    13,    14,   293,
     466,  1728,   420,  1730,   422,    13,    14,    13,    14,   344,
      89,    36,    13,    14,   152,   416,    13,    14,    13,    14,
     480,  2302,   191,  2793,   152,   137,    13,    14,  2308,  2840,
     448,   516,  2565,   152,   102,  3142,   152,   137,    13,    14,
    3389,   379,   289,  1770,  3393,    13,    14,  1774,  2997,   352,
    1777,  1778,  1766,    13,    14,   123,   350,    13,    14,   428,
     354,    13,    14,    13,    14,   466,   514,  2500,  1419,    13,
      14,  1422,   171,   141,   262,   263,  1427,   145,   416,  1430,
     365,   366,  2565,   514,  1435,  1305,  1813,  1307,  2915,  1816,
     365,   366,   386,  1809,  2876,   365,   366,   514,  1825,   167,
    3449,   515,   170,   375,   376,  1832,  1833,   459,   460,   514,
     445,   449,  3402,  3403,  1841,  3434,  3435,   418,   186,   454,
    1040,  1041,   460,   219,   299,  2658,   224,  1841,   514,   224,
     224,  1858,   296,  1847,  1930,  1862,  1863,  2748,  1865,  2523,
    1936,   514,    40,  1870,  1871,  1872,  1873,  1874,  1875,  1876,
    3099,   235,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  2626,   457,   514,     5,     5,  1894,  1895,   324,
    1521,  1898,   514,  1900,   514,  2658,   514,  3361,  1905,     5,
    1907,   293,   514,   514,     5,   514,  2586,  3294,  2606,     5,
     514,  2562,     5,   293,   148,  2566,   221,  2568,     9,   514,
    1927,   514,  2735,  1930,   477,  1932,   518,   104,   301,  1936,
     518,   279,  1930,   515,   219,  2637,  1943,    40,  1936,   287,
    1947,   386,  1949,   166,  1951,   286,  1953,   166,   284,  3336,
      59,  1930,   235,  2604,   514,   428,    93,  1936,   350,   518,
     514,   309,   354,   428,    59,    59,   428,   265,  1975,  1600,
     350,   428,  2735,   108,   354,    40,  1930,   524,  1985,  1986,
     428,   428,  1936,   476,   377,   152,   291,  2831,   336,   100,
     274,  1930,   274,   514,   386,    60,    40,  1936,   274,  3386,
     274,   514,   274,     3,   514,   152,   386,   516,    13,   515,
     515,   171,   515,   515,   515,   515,   514,  3109,  2025,   518,
     515,   473,   224,  2030,  2031,   224,   514,   281,   281,  2842,
    2060,   514,   518,   463,   516,   514,   514,    39,  1669,   514,
     514,   106,   938,   514,  1385,  1386,   516,   938,  2055,  2056,
    1391,   514,   472,  2060,     9,   426,   426,    11,   352,   513,
     518,   426,   518,  2876,   524,   457,   279,  2074,   514,   171,
    2077,   514,  2079,   523,   428,   180,   162,   457,   518,  2842,
     518,   515,   454,   217,   265,   389,  2968,   226,  2095,  2096,
     290,   312,   312,   518,   518,  2102,   180,  2988,  2105,   515,
     514,   219,   226,   151,   274,   226,   295,  2105,   333,   466,
     175,    37,   287,  2876,   514,  2122,    42,   514,  3225,   152,
     152,   152,   152,   171,  2122,   476,  2105,  2688,  2135,    40,
     152,   274,  3361,   289,   289,    40,   201,    59,    11,    40,
    2953,  2843,  2844,  2122,   171,  2152,  2153,   166,   515,   515,
     166,  2105,   515,   515,  3166,   180,   514,     3,   514,   514,
      39,     3,  2169,   512,  2171,   512,  2105,   428,  2122,  1800,
     428,   428,   428,  2180,   518,   101,   515,   515,  1809,   513,
     515,   523,   497,  2122,  2997,   250,   516,   515,   515,   497,
    2953,  2198,  2199,  2200,   515,   260,   501,   502,   503,   515,
     505,   506,   507,   508,   509,   510,   515,   272,   515,   171,
     497,  2205,   514,   428,  1714,   514,  1112,   514,   155,   514,
     249,  1112,   514,   473,  1724,    40,  1726,    59,   518,  1729,
    2237,   499,   503,   290,  2997,  1735,  2243,  1737,   290,   304,
    2270,   451,   243,    59,   265,   518,   172,    59,   428,   514,
    1750,  2812,   152,   202,   180,  1755,   274,   152,  2252,  1759,
    1760,  1761,  1762,   152,  1764,  1765,   314,   315,   316,  2276,
     428,   428,   281,  3364,   428,  2259,  2270,   428,   281,    40,
     515,  2259,   208,   514,   352,   514,  3099,  2294,   514,   287,
     518,   356,  2943,   515,   289,    40,   152,  2259,   224,  1930,
    2259,  2308,   476,   279,   515,  1936,   171,  2314,   234,   514,
     514,    59,   515,   185,  2308,   166,   381,   515,   515,   512,
      80,   515,  2316,   515,  2318,   143,   171,   515,  2322,   198,
    2324,   379,   515,  3077,   524,   400,  3099,   300,   514,   518,
     290,   514,   268,   515,   515,  2352,   358,   515,   514,   180,
     152,   515,   514,     8,  2352,   518,    11,   439,   175,    40,
      15,    16,   515,   289,    19,    20,    21,   515,   416,   515,
     514,    40,    40,  2352,   515,    86,   518,   454,  1274,    60,
     518,    36,   514,  1274,  2391,   514,   171,   514,   314,  2949,
     515,   198,   475,  2391,   460,   321,   518,   513,   515,  2406,
       8,   449,   515,    11,   289,   513,    59,    15,    16,  2439,
     204,   515,   460,  2352,  2477,  2422,   515,   515,   515,   117,
     476,  2428,  2429,   503,    40,   106,   515,   515,   476,  2060,
     515,   226,  2439,   191,   515,   361,   514,    88,    46,   279,
     279,   516,  2472,  2450,   516,    53,  2453,  2078,  2455,   516,
     503,   428,   500,   516,   380,  2462,  2463,   516,   516,  2466,
    2467,   516,   516,  2094,  2471,  2472,   514,   516,   428,   516,
    3352,  2478,    80,   516,  2105,   516,   516,  3152,   516,  3154,
    3193,   516,   516,    40,   274,   513,  2493,   107,  3168,   476,
     516,  2122,   516,  2523,   514,  2491,  2503,    40,  2491,   516,
    3164,  2497,   516,  2491,     9,   516,   516,   513,   516,  2491,
    2491,   289,   516,   351,   335,  2491,  2523,   516,   514,   516,
     201,   514,   516,   449,   516,   177,  3167,   516,   454,  3170,
    1871,  1872,  1873,  1874,  1875,  1876,   516,   145,  1879,  1880,
    1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  3361,   516,
     202,   515,  3296,  3204,   515,  2562,   515,   514,  2565,  2566,
     518,  2568,   518,   515,    59,   198,   221,   515,   176,   250,
     513,  2565,   191,  2580,   518,  2582,   459,  3305,    91,   260,
     515,   344,   514,    40,   152,   193,   516,   515,   240,   124,
     198,   272,   152,    40,   515,   366,  1492,  2604,  3361,   366,
      40,  1492,   515,  2597,   514,  2601,  3286,   514,     7,     8,
      40,   454,   518,    12,   309,   514,  3280,  2117,    17,   279,
     514,  2605,    21,   304,    23,    24,   248,  2605,   236,    28,
      29,    30,  2628,   439,    33,  2631,   291,    36,    37,  2270,
     190,    40,   294,  2605,    43,    44,  2605,   514,  2655,   454,
    2680,  2658,    74,   292,    74,    80,     9,   515,   515,   514,
     368,   515,    59,   513,   513,    93,   133,   503,  2675,  2676,
     272,   289,    40,  2680,   515,   356,  2683,   439,   292,  2755,
     514,   292,   515,   291,   514,  2683,   515,    86,    87,  1585,
     515,  2685,   204,   459,  1585,   289,   289,   386,   122,    98,
     381,   515,   451,  2710,   103,   104,   105,   106,   107,   365,
     148,    25,  3363,     8,  2055,  2056,    11,  2724,   370,   400,
      15,    16,  2729,  2730,    19,    20,    21,  2734,  2735,   365,
      36,   297,  2739,   704,  2836,  2742,  2743,  2562,  1736,  2769,
    2747,  2748,  1648,  2193,  2751,  3258,  2236,  2258,  2755,   620,
    2314,  2549,  2949,  2597,  3311,  2762,  3417,  2755,  3070,  3374,
    3365,  3410,  1099,  3127,  2186,  2759,  2199,  2617,   420,  3363,
     422,  3372,  3333,  2541,  2568,  2183,  2755,  3360,  1270,  2502,
     750,  1297,  1832,   391,  1315,  3256,  2286,   439,  3195,  2501,
    3336,  3290,  3439,   445,  1335,  2491,   448,  1059,   910,  2806,
    2169,  2755,  1082,   910,  2135,  1708,  2373,  2814,  2439,  3345,
    2152,  1081,  3267,  1672,  3156,  1707,  2755,    21,  1084,  1941,
    2122,  2683,  2992,  1719,   637,     8,  2833,   888,  1719,   626,
    2352,  2351,    15,    16,  3091,  2842,    19,    20,    21,  2398,
    1956,  2472,   177,  3271,   886,  1841,   501,   502,   503,   886,
     505,   506,   507,   508,   509,   510,  3270,  2429,  2032,  2136,
    2491,  2078,  1987,   886,  2762,  2075,  2497,   202,  1414,  2876,
    2034,   886,  2446,   886,  1647,     8,  1949,    98,    11,   886,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
     498,    -1,  2523,    -1,    -1,   886,   886,   505,   506,   507,
     508,   509,   510,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    46,  2921,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,    -1,
      -1,    -1,    -1,  2927,    -1,  2931,  2943,    -1,  2968,    -1,
      -1,     8,  2949,    -1,    11,  2952,  2953,    80,    15,    16,
      -1,    -1,    19,    20,    21,  2949,    -1,    -1,    -1,   294,
      -1,  2968,  1858,    -1,    -1,    -1,    -1,  1858,    -1,    36,
    2601,    -1,    -1,   103,  1870,   105,    -1,   107,   313,  1870,
      -1,  2988,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2997,    -1,    -1,    -1,    -1,  3002,   291,  2628,    -1,    -1,
    2631,    -1,    -1,    -1,  1900,    -1,  3013,  3014,    -1,  1900,
    3017,  1907,  3019,    -1,    -1,    -1,  1907,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2526,  2527,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,  3030,  3044,    -1,    -1,
      -1,    -1,   377,   176,    -1,    -1,    -1,  1943,    -1,  2680,
      -1,  1947,  1943,    -1,  2554,    -1,  1947,  1953,    -1,    37,
     193,  3068,  1953,    -1,    42,   198,    -1,    -1,    -1,  2569,
    2570,  2571,  2572,  2573,  2574,  2575,  2576,  2577,  2578,  1975,
      -1,    -1,    -1,    -1,  1975,   420,    -1,   422,    -1,    -1,
      -1,    -1,  3099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   236,   439,  3099,    -1,    -1,   291,    -1,
     445,    -1,    -1,   448,    -1,    -1,    -1,    -1,  3114,  3115,
      -1,    -1,    -1,   101,  2755,  2466,  2467,    -1,    -1,    -1,
    3137,    -1,    -1,    -1,   533,  3142,    -1,    -1,  2769,   538,
      -1,    -1,   541,    -1,  3142,  3152,    -1,  3154,    -1,  3156,
     549,    -1,    -1,  3160,   221,  3162,    -1,  3164,   291,    -1,
      -1,    -1,    -1,  3142,    -1,    -1,    -1,    -1,   938,  3176,
     569,    -1,    -1,   938,  3181,    -1,  3183,    -1,    -1,   578,
     579,   580,    -1,    -1,  3191,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,  3192,  3204,  3194,    -1,
      -1,    -1,  3209,  3142,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
     619,   620,   621,    -1,   291,    -1,    -1,   626,    -1,   628,
     208,    -1,  3226,    -1,    -1,    -1,    -1,  3233,   637,    -1,
      -1,    -1,   641,   642,    -1,    -1,   224,   646,   647,   151,
    3257,    -1,    -1,  3249,    -1,    -1,   234,  3253,   391,    -1,
    3267,   660,   661,   662,    -1,    -1,    -1,    -1,    -1,   171,
      -1,    -1,    -1,  3280,    -1,   674,   675,    -1,   677,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3294,    -1,    -1,
     268,   690,    -1,    -1,    -1,    -1,  3294,   696,    -1,    12,
    2931,    -1,    -1,    -1,    17,  3312,    -1,   706,   938,    -1,
     709,   289,    -1,  2813,  2655,  3294,    29,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,  3336,
      43,    44,    -1,    -1,    -1,    -1,   314,  2968,  3336,    -1,
      -1,    -1,  1112,   321,   743,  3352,    -1,  1112,    -1,    -1,
      -1,    -1,    -1,    -1,  3361,  3294,  3363,  3336,   757,   758,
     759,   760,   761,    -1,    -1,   498,    -1,  3361,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,  3386,
    2276,    -1,  3378,   361,    -1,  2276,    -1,    -1,  3386,    -1,
      -1,   104,    -1,    -1,  3401,  3402,  3403,  3336,    -1,    -1,
      -1,    -1,   380,   533,  3398,    -1,    -1,  3386,   538,  3405,
      -1,   541,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
       8,  3428,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    -1,    -1,    -1,  3386,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   449,    -1,  2814,    -1,    -1,   454,   379,    -1,    -1,
      -1,    -1,  1112,  3114,  3115,    -1,    -1,    -1,   887,   888,
      -1,   890,    -1,    -1,   893,    -1,    -1,    -1,   628,    -1,
     899,   900,    -1,    -1,  1274,    -1,   905,    -1,    -1,  1274,
    2406,    -1,   911,    -1,   416,  2406,    -1,    -1,    -1,   918,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,   928,
      -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
      -1,    -1,    60,   171,    -1,     8,   945,   449,    11,    -1,
      -1,    -1,    15,    16,     0,    -1,    -1,    -1,   460,    -1,
      -1,  3192,    -1,  3194,    -1,    -1,  2462,    -1,    -1,    -1,
     877,  2462,    -1,    -1,   476,    -1,   706,    -1,    -1,  3079,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   106,   107,
      53,    -1,    -1,    -1,    -1,    -1,    -1,   996,   500,   117,
    3100,  3101,  3233,    -1,    -1,   171,    -1,    -1,    -1,    -1,
      -1,  2952,   514,    -1,    -1,    -1,    -1,    80,  3249,    -1,
      -1,    -1,  3253,    -1,  3124,    -1,    -1,   757,   758,   759,
     760,    -1,    -1,   221,    -1,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,  1042,  1274,    -1,  1045,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,   175,    -1,    -1,
    1059,  1060,    -1,    -1,    -1,    -1,    -1,  1066,    -1,  2565,
      -1,    -1,    -1,    -1,  2565,   303,    -1,    -1,    -1,    -1,
      -1,    -1,   145,   201,    -1,    -1,   314,   315,   316,  1088,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1098,
    1099,   147,    -1,   291,  1011,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1111,   176,    -1,   161,    -1,    -1,    -1,    -1,
     166,    -1,  1492,    -1,    -1,   171,    -1,  1492,    -1,  1128,
     193,  1038,   250,  1132,   180,   198,    -1,   100,  1137,   185,
      -1,    -1,   260,    -1,    -1,    98,    -1,  3378,   314,   315,
     316,   379,    -1,    -1,   272,    -1,   274,    -1,    -1,    -1,
     890,    -1,  2658,    -1,    -1,   893,    -1,  2658,    -1,    -1,
      -1,   217,    -1,   236,  3405,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   147,    -1,   304,    -1,   416,    -1,
      -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,
      -1,    -1,    -1,   166,    -1,    -1,  1113,    -1,   171,  1116,
    1117,    -1,    -1,   379,    -1,  1585,    -1,   180,   171,    -1,
    1585,   449,   185,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,    -1,   460,    -1,    -1,    -1,   549,    -1,   356,  2735,
     286,    -1,    -1,   289,  2735,    -1,    -1,    -1,   476,   295,
     416,    -1,    -1,    -1,   217,    -1,    -1,  3357,    -1,    -1,
      -1,    -1,  1492,   381,    -1,    -1,   579,   580,  1267,    -1,
    1269,    -1,   500,    -1,   237,    -1,  1275,    -1,    -1,    -1,
      37,    -1,   400,   449,   402,    42,   514,   405,    -1,   335,
    1289,    -1,    -1,    -1,   460,    -1,    -1,    -1,  1297,    -1,
      -1,    -1,    -1,  1302,    -1,  1304,  1305,    -1,  1307,  1308,
     476,    -1,   358,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,   286,    -1,    -1,   289,    -1,   391,    -1,
       8,    -1,   295,    11,   500,    -1,  1335,    15,    16,    -1,
      -1,    19,    20,    21,   101,    -1,  2842,    -1,   514,  1719,
      -1,  2842,    -1,    -1,  1719,  1585,    -1,    -1,    -1,    -1,
    1088,   314,   315,   316,    -1,    -1,    -1,    -1,  1098,    -1,
     416,    -1,   335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2876,  1111,    -1,   696,    -1,  2876,  1385,  1386,    -1,    -1,
      -1,    -1,  1391,    -1,  1393,   358,   514,    -1,   444,    -1,
      -1,    -1,  1132,    -1,    -1,    -1,    -1,  1406,   454,  1408,
    1409,    -1,    -1,  1320,  1321,   172,    -1,  1416,    -1,    -1,
    1419,    -1,    -1,  1422,    -1,    -1,   379,   473,  1427,   475,
     476,  1430,    -1,    -1,    -1,   498,  1435,    -1,  1437,    -1,
    1439,    -1,   505,   506,   507,   508,   509,   510,    -1,    -1,
      -1,   208,    -1,   416,    -1,    -1,    -1,  2953,    -1,    -1,
      -1,    -1,  2953,   416,    -1,    -1,   512,   224,    -1,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   444,    -1,   436,    -1,    -1,    -1,    -1,  1858,  1719,
      -1,   454,    -1,  1858,    -1,    -1,   449,    -1,    -1,    -1,
    1870,  2997,    -1,    -1,    -1,  1870,  2997,   460,   117,    -1,
     473,   268,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,
    1900,    -1,   289,    -1,    -1,  1900,    -1,  1907,    -1,  1269,
      -1,    -1,  1907,   221,    -1,  1275,    -1,   500,  1547,   512,
      -1,    -1,   515,   516,   517,    -1,    -1,   314,    -1,  1558,
      -1,   514,   171,    -1,   321,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1943,    -1,    -1,    -1,  1947,  1943,    -1,
      -1,    -1,  1947,  1953,    -1,    -1,    -1,    -1,  1953,    -1,
      -1,    -1,   905,    -1,    -1,    -1,    -1,    -1,  1597,    -1,
      -1,    -1,    -1,  3099,   361,  1975,    -1,    -1,  3099,    -1,
    1975,    -1,    -1,   291,     8,   928,    -1,    11,    -1,    -1,
      -1,    15,    16,   380,    -1,    19,    20,    21,  1858,    -1,
      -1,     8,  1539,    -1,    11,    -1,    -1,    -1,    15,    16,
    1870,    -1,    -1,    -1,  1551,  1644,  1553,  1646,    -1,  1648,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1385,  1386,    -1,
    1659,  1660,    -1,  1391,    -1,    -1,    -1,    -1,    -1,    46,
    1900,    -1,  1579,  1672,    -1,    -1,    53,  1907,    -1,    -1,
      -1,    -1,    -1,   996,    -1,    -1,  1416,    -1,    -1,    -1,
      -1,    -1,   449,    -1,   303,    -1,    -1,    -1,  1697,    -1,
    1699,    -1,    -1,    80,    -1,   314,   315,   316,    -1,    -1,
      -1,    -1,    -1,  1943,  1713,  1714,    -1,  1947,    -1,    -1,
      -1,    -1,    -1,  1953,    -1,  1724,  1725,  1726,  1727,    -1,
    1729,    -1,    -1,    -1,    -1,    -1,  1735,    -1,  1737,    -1,
      -1,    -1,    -1,    -1,    -1,  1975,  1059,  1060,    -1,    -1,
    1749,  1750,    -1,    -1,    -1,  1754,  1755,    -1,    -1,    -1,
    1759,  1760,  1761,  1762,    -1,  1764,  1765,    -1,   145,    -1,
     379,    -1,    -1,    -1,    -1,    -1,  1683,  1684,    -1,    -1,
    1779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1788,
    1789,  1790,  1791,  1792,  1793,    -1,    -1,    -1,    37,   176,
      -1,    -1,    -1,    42,    -1,    -1,    -1,   416,  1807,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,   198,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,  1743,    -1,    -1,    -1,
     449,    -1,    -1,    -1,    -1,    -1,  1753,    -1,    -1,  1756,
      -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,
      -1,    -1,   101,    -1,    -1,  3361,    -1,   476,    -1,    -1,
    3361,    -1,  1871,  1872,  1873,  1874,  1875,  1876,    -1,    -1,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,
      -1,   500,    -1,    -1,    -1,    -1,    -1,   291,  1626,    -1,
      -1,    -1,    -1,    -1,    -1,   514,  2276,    -1,    -1,    -1,
    1909,  2276,    -1,    -1,   291,    -1,  1646,    -1,  1648,    -1,
      -1,    -1,  1921,    -1,    -1,    -1,    -1,    -1,    -1,  1659,
      -1,  1930,    -1,   172,  1841,    -1,    -1,  1936,    -1,    -1,
      -1,    -1,  1941,    -1,  1672,    -1,    -1,  1946,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1955,  1956,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1697,    -1,   208,
      -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    -1,    -1,   224,    -1,    26,    40,    -1,
      -1,  1304,  1305,    32,  1307,   234,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,  2023,    -1,    -1,    -1,  2027,   268,
      -1,   893,    -1,  2032,    -1,    -1,  2406,    -1,    -1,    -1,
      -1,  2406,    -1,    -1,    -1,    -1,  2276,    -1,    -1,    -1,
      -1,    -1,    -1,  1960,   106,    -1,  2055,  2056,  1788,  1789,
    1790,  1791,    -1,  1793,    -1,    -1,    -1,   106,    -1,    -1,
      -1,    -1,    -1,  2072,    -1,   314,    -1,     0,    -1,    -1,
      -1,    -1,   321,    -1,    -1,   137,    -1,    -1,    -1,    -1,
      -1,    -1,  2462,    -1,    -1,  1408,    -1,  2462,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2105,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,  2117,    -1,
      -1,   498,   361,  2122,  1437,    -1,  1439,  2126,   505,   506,
     507,   508,   509,   510,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,  1871,  1872,  1873,  1874,  1875,  1876,   201,
      -1,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,
    1888,    -1,   201,    -1,    -1,    -1,    -1,  2166,    -1,    -1,
    2169,    -1,    -1,  2172,    -1,    -1,  2406,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2188,
      -1,  1921,    -1,    -1,    -1,  2565,    -1,    -1,   250,    -1,
    2565,    -1,  2109,    -1,    -1,    -1,    -1,    -1,   260,    -1,
     449,   250,    -1,    -1,    -1,    -1,    -1,  1079,    -1,    -1,
     272,   260,    -1,    -1,   147,    -1,  1088,    -1,    -1,    -1,
      -1,    -1,  2462,   272,    -1,  2142,  2143,    -1,   161,    -1,
      -1,   293,    -1,   166,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,   304,    -1,   293,  2254,    -1,   180,    -1,    -1,
      -1,  2260,   185,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2272,  2273,  2274,  2275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2286,  2658,  2288,
      -1,    -1,  2291,  2658,   217,    -1,  2295,    -1,   350,  2298,
      -1,    -1,   354,  2302,   356,    -1,    -1,    -1,    -1,    -1,
      -1,   350,    -1,    -1,   237,   354,    -1,   356,    -1,    -1,
      -1,  2320,  2321,    -1,  2323,    -1,    -1,  2055,  2056,   381,
      -1,    -1,    -1,    -1,   386,  2565,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    -1,   386,   400,    -1,
      -1,    -1,    -1,  2352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,    -1,   286,    -1,  2735,   289,    -1,    -1,    -1,
    2735,    -1,   295,  2372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2380,  2381,  2382,    -1,    -1,  1699,    -1,    -1,    -1,
    2389,    -1,  2391,  2392,    -1,    -1,    -1,    -1,    -1,  2398,
      -1,  1714,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,
      -1,  1724,   335,  1726,    -1,    -1,  1729,    -1,   457,    -1,
      -1,    -1,  1735,    -1,  1737,    -1,    -1,    -1,  2658,    -1,
      -1,    -1,  2431,    -1,    -1,   358,    -1,  1750,    -1,    -1,
      -1,  2169,  1755,    -1,    -1,    -1,  1759,  1760,  1761,  1762,
      -1,  1764,  1765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2466,  2467,    -1,
      -1,    -1,  2842,    -1,    -1,    -1,    -1,  2842,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   416,    -1,    -1,  2495,    -1,    -1,    -1,
      -1,    -1,  2501,  2410,  2411,  2735,  2876,    -1,    -1,    -1,
      -1,  2876,    -1,    -1,    -1,    -1,    -1,    -1,  2517,    -1,
      -1,   444,  2521,  1385,  1386,    -1,  2525,  2526,  2527,  1391,
    2260,   454,  2531,  2532,  2533,    -1,  2535,    -1,    -1,    -1,
      -1,    -1,    -1,  2273,  2274,  2275,    -1,    -1,    -1,    -1,
     473,    -1,   475,   476,    -1,  2554,    -1,  2556,  2288,    -1,
      -1,  2291,    -1,    -1,    -1,    -1,    -1,    -1,  2298,    -1,
    2569,  2570,  2571,  2572,  2573,  2574,  2575,  2576,  2577,  2578,
      -1,    -1,    -1,  2953,    -1,    -1,    -1,    -1,  2953,   512,
      -1,    -1,   515,   516,   517,    -1,  1909,    -1,    -1,    -1,
      -1,  2600,    -1,    -1,    -1,    -1,    -1,    -1,  2607,    -1,
      -1,    -1,  2842,    -1,    -1,    -1,    -1,    -1,  2617,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,  1941,    -1,
      -1,    -1,  2997,  1946,    -1,    -1,  2635,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2644,  2876,    -1,    -1,    -1,
    2380,  2381,  2382,    -1,    -1,    -1,  2655,    -1,  2565,    -1,
      -1,    -1,  2661,    -1,    -1,    -1,    -1,    -1,    -1,  2668,
    2669,  2670,  2671,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2680,    -1,    -1,  2683,    -1,    -1,    -1,  2687,  2688,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2696,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2023,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2032,
      -1,    -1,    -1,  2953,  2723,    -1,    -1,    -1,    -1,  3099,
      -1,    -1,    -1,    -1,  3099,    -1,    -1,    -1,  2466,  2467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2753,    -1,  2755,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,    -1,    -1,
    2769,    -1,    -1,    -1,  2773,    -1,    -1,    -1,    -1,    -1,
    2779,    -1,    -1,    -1,    -1,    -1,  2693,  2517,    -1,    -1,
      -1,    -1,    -1,    -1,  2793,    -1,    -1,    -1,    -1,    -1,
    2799,    -1,    -1,    -1,  2117,    -1,    -1,    -1,    -1,    -1,
    1672,    -1,    -1,  2812,  2813,  2814,    -1,    -1,    -1,    -1,
      -1,  2820,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   672,   673,    -1,    -1,    -1,  2837,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,  2166,    -1,    -1,    -1,    -1,    -1,  2172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3099,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2607,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,   113,   114,    -1,   738,
      -1,    -1,    -1,   742,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    -1,  2917,    -1,
      -1,    -1,    -1,    -1,  2831,    -1,    -1,  2655,    -1,  2836,
      -1,  2930,    -1,    -1,    -1,    -1,    -1,    -1,  2668,  2669,
    2670,  2671,    -1,    -1,    46,   784,  2945,    -1,    -1,    -1,
      -1,    53,  2680,  2952,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,  2286,    -1,    -1,  2883,  2884,    80,  2978,
      -1,    -1,    -1,    -1,    -1,  2984,    -1,    -1,    -1,    -1,
      -1,  3361,    -1,  2992,    -1,    -1,  3361,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1871,
    1872,  1873,  1874,  1875,  1876,    -1,    -1,  1879,  1880,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  3026,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   252,   253,   254,   255,   256,
     257,   258,   259,   145,   883,   262,   263,    -1,    -1,  3048,
     889,    -1,    -1,   892,  3053,    -1,   895,   896,   897,   898,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,  2389,    -1,    -1,  2392,
    3079,    -1,    -1,    -1,    -1,  2398,  2814,    -1,    -1,    -1,
    2820,   193,    -1,    -1,    -1,    -1,   198,   936,   937,    -1,
      -1,  3100,  3101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   957,  3118,
      -1,  3120,    -1,    -1,    -1,  3124,    -1,    -1,    -1,    -1,
      -1,  3361,    -1,    -1,   236,    -1,    -1,   976,    -1,    -1,
    3139,    -1,    -1,  3142,    -1,    -1,    -1,    -1,   987,   988,
     989,    -1,   991,   992,    -1,    -1,    -1,    -1,   375,   376,
      -1,    -1,     8,  3162,    -1,    11,    -1,  3166,  3167,    15,
      16,  3170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3087,  3088,    -1,    -1,  1023,    -1,    -1,    -1,    -1,   291,
      -1,    -1,  3099,  2055,  2056,    -1,  3195,    -1,    -1,    -1,
      46,  1040,  1041,  3202,    -1,    -1,    -1,    53,  2521,    -1,
      -1,    -1,  2525,  2526,  2527,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2952,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,  3232,    80,  1074,    15,    16,    -1,  1078,
    1079,  2554,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1089,  1090,    -1,   470,   471,    -1,  2569,  2570,  2571,  2572,
    2573,  2574,  2575,  2576,  2577,  2578,    -1,    46,    -1,    -1,
      -1,    -1,  3271,    -1,    53,    -1,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,  3294,    -1,   514,    -1,   145,
      -1,    80,    -1,    -1,    -1,    -1,     8,  2169,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3321,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,  3333,  3334,    -1,  3336,  3337,    -1,
      -1,    -1,    -1,    -1,    46,    -1,  3345,   193,  2661,    -1,
      -1,    53,   198,    -1,    -1,    -1,    -1,    -1,  3357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2687,    -1,    -1,    -1,    80,    -1,
    3379,    -1,    -1,  1222,    -1,    -1,    -1,  3386,  3118,    -1,
     236,    -1,  1231,    -1,    -1,    -1,   498,   176,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,   509,   510,  3139,
      -1,    -1,    -1,    -1,   193,    -1,  1255,    -1,    -1,   198,
      -1,    -1,    -1,    -1,    -1,  3424,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3162,    -1,    -1,    -1,    -1,    -1,
    3439,    -1,    -1,    -1,    -1,   291,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3361,    -1,     8,   236,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,  3202,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    46,    -1,   198,    -1,    -1,  1338,
    2813,    53,  3232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1398,
      -1,  1400,  1401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1413,  1414,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
    1429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2466,  2467,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,    -1,   498,    -1,    -1,    36,    -1,    -1,    -1,   505,
     506,   507,   508,   509,   510,    46,    -1,    -1,    -1,   221,
     222,  2984,    53,    -1,    -1,    -1,    -1,    -1,    -1,  2992,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,  1533,    -1,    -1,    -1,    -1,    80,
      -1,    -1,  1541,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      -1,    -1,   274,    -1,    -1,   277,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,  3048,    -1,    -1,    -1,   291,
    3053,  1580,   294,    -1,    -1,    -1,    -1,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,  1593,    -1,    -1,    -1,    -1,  1598,
    1599,    -1,    -1,    -1,  1603,    -1,  3079,    -1,  1607,    -1,
      -1,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,
      -1,    -1,  1621,    -1,    -1,    -1,    -1,  3100,  3101,  1628,
      -1,  1630,    -1,  2655,    -1,   176,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,   509,   510,    -1,
    1649,  3124,   193,    -1,    -1,    -1,    -1,   198,  2680,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,   391,
     221,   222,    -1,    -1,  1683,  1684,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3166,    -1,   236,    22,    -1,    -1,    -1,
      -1,    -1,  2724,    -1,    -1,    -1,    32,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    61,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1770,    98,    -1,   100,  1774,    -1,    -1,  1777,  1778,
      -1,    -1,    -1,    -1,    -1,   111,   498,    -1,    -1,   501,
     502,   503,  2814,   505,   506,   507,   508,   509,   510,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   524,    -1,  1813,    -1,    -1,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
      -1,    -1,    -1,  1832,  1833,    -1,    -1,    -1,    -1,    -1,
      -1,   167,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1862,  1863,    -1,  1865,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3357,    -1,   893,   213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1894,  1895,    -1,    -1,  1898,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1927,    -1,
    2952,    -1,    -1,  1932,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1949,    -1,  1951,    -1,    -1,    -1,    -1,   498,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1986,   314,   315,
     316,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,   325,
      -1,    -1,    -1,    -1,    -1,  1012,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2025,    -1,   354,    -1,
      -1,  2030,  2031,    -1,    -1,    -1,    -1,   363,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1055,    -1,
      -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,
     386,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,  2074,    -1,    -1,  2077,    -1,
    2079,  1088,    -1,    -1,    -1,    -1,   412,    -1,    -1,    -1,
     416,    -1,    -1,    -1,    -1,    -1,  2095,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   449,    -1,    -1,   452,    -1,    -1,   455,
       3,    -1,  1139,    -1,   460,     8,  2135,    -1,    11,    -1,
    3162,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     476,    -1,    -1,  2152,  2153,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,  2171,    46,   500,    -1,    -1,    -1,    -1,    -1,
      53,  2180,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,
      -1,   517,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,  2237,    -1,
      -1,    -1,    -1,    -1,  2243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1260,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,  2294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,  1311,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
     193,    -1,    -1,    53,    -1,   198,    -1,     8,    -1,  1336,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,
      80,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
     176,    -1,    -1,   236,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,  1381,    -1,  1383,   193,  1385,  1386,
      -1,  1388,   198,    -1,  1391,    -1,    -1,  1394,    -1,    -1,
    1397,    -1,    -1,    -1,    -1,  1402,    -1,    -1,  1405,    80,
      -1,   274,    -1,    -1,   277,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
     236,   294,    -1,  2422,    -1,    -1,    -1,    -1,    -1,  2428,
    2429,    -1,    -1,    -1,    -1,    -1,     8,    -1,  1445,    11,
    2439,    -1,    -1,    15,    16,    -1,   176,    19,    20,    21,
      -1,  2450,    -1,    -1,  2453,    -1,  2455,    -1,   274,    -1,
      -1,   277,    -1,   193,  2463,    -1,    -1,    -1,   198,    -1,
      -1,    -1,  2471,  2472,    46,   291,    -1,    -1,   294,  2478,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,  2493,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2503,    -1,   236,    -1,    80,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,   198,   391,    -1,
      -1,    -1,  1529,    -1,  2523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1545,    -1,
     221,   222,    -1,    -1,   274,    -1,    -1,   277,  1555,  1556,
    1557,    -1,    -1,    -1,  1561,   236,    -1,    -1,  1565,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,  2580,    -1,  2582,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
    1627,   193,    -1,    -1,    -1,   498,   198,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
     222,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,  1666,
      -1,   391,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1682,  2675,  2676,    -1,    -1,
    1687,    -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,    -1,    -1,  1704,    -1,   515,
      -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,
     391,  2710,    -1,    -1,    -1,    -1,    68,    69,    -1,   291,
      -1,    -1,    -1,    -1,    -1,  2724,    -1,    -1,    -1,    -1,
    2729,  2730,    -1,    -1,    -1,  2734,    -1,    -1,    -1,    -1,
    2739,    -1,    -1,  2742,  2743,    -1,    -1,    -1,  2747,  2748,
      -1,    -1,  2751,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,   113,   114,  2762,    68,    69,    -1,    -1,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,   110,  2806,    -1,   113,
     114,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,   391,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,   513,    -1,  2833,    -1,   188,   189,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1860,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1868,  1869,    -1,  1871,  1872,  1873,  1874,  1875,  1876,
      -1,    -1,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  1889,    -1,   188,   189,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     252,   253,   254,   255,   256,   257,   258,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2921,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1989,     8,    -1,  1992,    11,    -1,    -1,  2988,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,  3002,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,  3013,  3014,    -1,    -1,  3017,    -1,
    3019,    46,    -1,   375,   376,    -1,    -1,    -1,    53,    -1,
      -1,  2038,    -1,    -1,    -1,  2042,  2043,  2044,  2045,  2046,
    2047,  2048,  2049,    -1,    -1,  3044,    -1,    -1,  2055,  2056,
      -1,  2058,  2059,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2070,    -1,    -1,  2073,    -1,    -1,  3068,
      -1,   375,   376,    -1,  2081,  2082,  2083,  2084,  2085,  2086,
    2087,  2088,  2089,  2090,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2116,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,   470,   471,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,  3137,    -1,
      -1,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,  3156,    80,    -1,
      -1,  3160,  2169,    -1,    -1,  3164,   470,   471,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,  3176,    -1,    -1,
      -1,    -1,  3181,    -1,  3183,    -1,    -1,    -1,    -1,    -1,
     494,   495,  3191,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3209,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2248,  2249,    -1,    -1,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,   176,    -1,    -1,    -1,  3257,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,  3267,   294,
      -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,  3280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2305,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3312,   236,    -1,    -1,    -1,    -1,    -1,
    2327,  2328,  2329,    -1,    -1,  2332,  2333,  2334,  2335,  2336,
    2337,    -1,    -1,    -1,  2341,  2342,  2343,  2344,  2345,  2346,
    2347,  2348,  2349,  2350,    -1,    -1,    -1,    -1,  2355,  2356,
      -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,  2383,     8,    -1,    -1,
      11,  2388,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3401,  3402,  3403,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2421,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,  3428,
      -1,    -1,    -1,  2440,    -1,    -1,  2443,  2444,    -1,    -1,
      -1,    -1,    -1,    -1,  2451,  2452,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2465,  2466,
    2467,  2468,    -1,  2470,    -1,    -1,    -1,  2474,    -1,   391,
    3469,    -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2528,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    46,   198,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
     221,   222,    -1,   515,    -1,    -1,    -1,    -1,    -1,     8,
      80,    -1,    11,    -1,    -1,   236,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2632,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   274,    53,    -1,   277,    -1,  2655,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2711,    -1,  2713,    -1,    -1,    -1,
      -1,    -1,  2719,   193,    -1,    -1,    -1,    -1,   198,    -1,
      -1,  2728,    -1,    -1,  2731,    -1,  2733,    -1,    -1,    -1,
    2737,    -1,    -1,  2740,  2741,    -1,    -1,  2744,  2745,    -1,
      -1,   221,   222,    -1,    -1,  2752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2761,    -1,   236,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    24,    -1,   176,    -1,  2776,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,    -1,
      -1,   291,   221,   222,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,    -1,   498,   277,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,   291,    -1,   515,   294,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,    -1,    -1,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
     156,   391,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   168,    -1,    -1,    -1,    -1,   173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   202,  2951,  2952,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2976,
    2977,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,   245,    -1,    -1,    -1,
     249,    -1,    -1,    -1,  3001,    -1,    -1,    -1,  3005,   245,
    3007,  3008,  3009,   249,    -1,  3012,    -1,    -1,  3015,  3016,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3024,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3065,    -1,
     319,    -1,    -1,    -1,  3071,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   319,    -1,   334,    -1,  3084,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   334,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   367,  3116,
      -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,
      -1,   367,   381,    -1,   370,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,  3144,   384,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   402,   416,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,
     416,  3178,  3179,  3180,   433,    -1,    -1,   423,    -1,    -1,
     439,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,    -1,
      -1,  3198,    -1,   439,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3210,    -1,    -1,    -1,   466,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3254,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3272,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3282,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3332,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,  3376,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,  3431,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,    -1,    -1,    -1,   512,    -1,   514,    -1,
      -1,    -1,    -1,   519,   520,   521,   522,    -1,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,    -1,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,    -1,    -1,    -1,   512,    -1,
     514,    -1,    -1,    -1,    -1,   519,   520,   521,   522,    -1,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,    -1,    -1,   500,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,    -1,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,    -1,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,     3,
       4,     5,   512,    -1,   514,     9,    -1,    -1,    -1,   519,
     520,   521,   522,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,    -1,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,     3,     4,     5,     6,     7,
     514,     9,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,
       9,    -1,    -1,    -1,   512,    -1,   514,    -1,    -1,    -1,
      -1,   519,   520,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,   184,    -1,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
      -1,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,    -1,   514,    -1,    -1,    -1,    -1,
     519,   520,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,   223,    -1,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,    -1,   235,    -1,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,   291,   292,   293,    -1,   295,   296,   297,   298,    -1,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,    -1,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,    -1,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,    -1,
     465,   466,   467,   468,   469,   470,   471,    -1,    -1,   474,
      -1,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
     515,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,    -1,     3,
     500,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,   290,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,    -1,     3,   500,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     514,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,   290,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,    -1,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,   171,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,    -1,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,   171,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,    -1,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,    -1,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
      -1,     3,   500,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,    -1,     3,     4,     5,
      -1,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    15,
      16,    -1,   514,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,    -1,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,   497,    -1,     3,    -1,   501,   502,   503,     8,   505,
     506,   507,   508,   509,   510,    15,    16,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,   223,    -1,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,    -1,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,    -1,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,    -1,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,    -1,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,    -1,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,   176,
      -1,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,   198,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   176,    -1,
      53,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   236,
     198,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,   274,   236,   198,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,    -1,   221,   222,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   236,    -1,   277,
      -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,
     193,    -1,    -1,    -1,   236,   198,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,   236,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    -1,    -1,    -1,    -1,   515,   391,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    36,    -1,    -1,    -1,   515,   391,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    36,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,   498,    -1,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    36,    -1,
      -1,    -1,   515,    80,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,   176,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,   198,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   176,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,   274,    -1,    -1,   277,    -1,   193,    -1,    -1,    -1,
      -1,   198,    -1,    36,    -1,    -1,    -1,    -1,   291,    -1,
      -1,   294,    -1,    46,    -1,    -1,    -1,    -1,   176,    -1,
      53,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   236,
     198,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,   274,   236,   198,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   236,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,
     193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,     8,   277,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   291,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    -1,    80,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,   515,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,
     503,   236,   505,   506,   507,   508,   509,   510,    -1,    -1,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,   513,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,    -1,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,    -1,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,    -1,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
      -1,    -1,     8,    -1,    -1,    11,    -1,   505,   506,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      46,     8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,
     126,    -1,    -1,    -1,    -1,    53,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,
     176,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,    36,    -1,    -1,   166,
      80,    -1,    -1,    -1,   171,    -1,    46,    -1,    -1,   176,
      -1,    -1,    -1,    53,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
     236,   198,    -1,    -1,    -1,    -1,    -1,   165,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   274,   236,
     198,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,
      -1,    -1,    -1,   221,   222,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   236,    -1,
     277,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   274,    -1,    -1,   277,
      -1,    -1,    -1,   193,    -1,    -1,   236,    -1,   198,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,   323,   236,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    36,    -1,    -1,    -1,    40,    -1,
      -1,   391,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,   176,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   171,     8,    -1,    -1,
      11,   176,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   274,    -1,    -1,   277,    -1,    -1,   193,    -1,
      -1,    -1,    -1,   198,    -1,    36,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   274,
     198,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,   391,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   236,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   274,    53,    -1,   277,
      -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,   198,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     236,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   274,    53,
     498,   277,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,   291,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,     8,    -1,    -1,
      11,    -1,   176,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,   198,    36,    -1,    -1,   424,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,
     274,    -1,   498,   277,    -1,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,    -1,    -1,   291,    -1,    -1,
     294,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   236,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   274,    53,    -1,   277,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    80,    -1,    11,    -1,    -1,    -1,    15,    16,
     221,   222,    19,    20,    21,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,     8,    -1,    -1,    11,    -1,    -1,   176,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
     198,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,
      46,   505,   506,   507,   508,   509,   510,    53,    -1,    -1,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,    -1,   274,    -1,   498,   277,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,   291,   221,   222,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,   198,    -1,   291,    -1,    -1,   498,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,   168,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,   168,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,   290,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,   290,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,     4,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,    -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,    -1,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,    -1,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,    -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,    -1,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,    -1,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,    -1,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,    -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,    -1,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,    -1,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,    -1,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,    -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,    -1,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,    -1,   461,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,    -1,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,    -1,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,    -1,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,    -1,    -1,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,    -1,   321,
     322,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,    -1,
     412,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
      -1,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,    -1,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    22,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,    32,    -1,    34,    35,    -1,    -1,    -1,    22,    -1,
      -1,    -1,   494,   495,   496,   497,    -1,    -1,    32,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   127,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,    -1,   143,   127,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,   143,
      -1,    -1,    -1,    -1,    -1,    -1,   167,   151,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   167,    -1,    -1,    -1,   171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   314,   315,   316,    -1,    -1,    -1,    -1,
      -1,   322,    -1,    -1,   325,    -1,    -1,    -1,    -1,    -1,
     314,   315,   316,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,   325,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   363,
      -1,    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,   390,
      -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,   400,
      -1,    -1,   386,    -1,    -1,    -1,   390,    -1,    -1,    -1,
      -1,   412,    -1,    -1,    -1,   416,   400,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   412,    -1,
      -1,    -1,   416,    -1,    -1,   436,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   436,    -1,   455,    -1,    -1,    -1,    -1,   460,
      -1,    -1,    -1,   464,    -1,   449,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,   476,   460,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   514,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     514
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    86,
      98,   100,   111,   127,   128,   137,   143,   151,   153,   154,
     167,   171,   197,   213,   239,   314,   315,   316,   322,   325,
     354,   363,   379,   386,   390,   400,   412,   416,   436,   449,
     452,   455,   460,   476,   500,   514,   526,   527,   528,   529,
     530,   537,   548,   549,   550,   553,   554,   564,   582,   630,
     640,   643,   646,   649,   651,   654,   655,   659,   665,   666,
     670,   677,   681,   682,   683,   690,   695,   711,   714,   715,
     718,   720,   721,   722,   723,   725,   727,   728,   732,   785,
     786,   952,   954,   955,   956,   961,   964,   970,   971,   975,
     430,   479,   953,   202,   370,   381,   416,   466,   108,   191,
     551,   953,     3,    22,    23,    24,    25,    26,    27,    28,
      29,    31,    32,    33,    42,    43,    44,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    59,
      60,    61,    62,    63,    64,    67,    68,    69,    70,    71,
      72,    73,    75,    76,    77,    78,    79,    81,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    94,    95,
      96,    97,    98,    99,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     118,   120,   121,   122,   123,   124,   125,   127,   128,   129,
     130,   131,   134,   135,   136,   137,   138,   140,   141,   142,
     144,   145,   146,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   160,   162,   163,   164,   165,   167,
     169,   170,   172,   173,   174,   175,   176,   177,   179,   181,
     182,   183,   184,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   199,   200,   201,   202,   203,
     204,   205,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   218,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   233,   234,   235,   236,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   275,   276,   277,   278,   280,   281,
     282,   283,   284,   285,   287,   288,   291,   292,   293,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   329,   330,   331,
     332,   333,   334,   336,   337,   338,   339,   340,   341,   342,
     343,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   414,   415,   417,   418,   419,
     420,   421,   422,   423,   425,   426,   427,   430,   431,   432,
     433,   434,   436,   437,   438,   439,   440,   441,   442,   443,
     446,   447,   448,   450,   451,   452,   453,   455,   456,   457,
     458,   459,   460,   461,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   474,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   557,   633,   634,   635,   861,
     941,   945,     3,   175,   246,   409,   555,   557,   633,   953,
      55,   171,   514,   577,   177,   240,   294,   313,   370,   420,
     422,   439,   445,   448,   628,   648,   689,     5,    30,   325,
     557,   558,   940,   108,   551,    24,    81,    97,   146,   156,
     168,   173,   202,   245,   249,   319,   334,   367,   370,   377,
     381,   384,   402,   416,   423,   433,   439,   466,   660,   661,
     664,   953,   940,   100,   137,   464,   514,   529,   530,   537,
     553,   554,   564,   582,   630,   640,   643,   649,   651,   654,
     655,   659,   666,   673,   677,   683,   690,   711,   714,   715,
     718,   720,   952,   954,   956,   961,   964,   970,   975,   108,
      75,   213,    66,    79,    81,   158,   231,   280,   290,   302,
     320,   366,   411,   432,   434,   438,   460,   514,   556,   557,
     558,   721,   786,   788,   790,   800,   807,   808,   861,   863,
     864,   108,     5,   557,   559,   712,   712,   557,   940,    30,
     177,   240,   385,   426,   430,   557,   962,   963,   973,   953,
      30,   132,   741,   742,   177,   240,   370,   385,   426,   965,
     966,   973,   953,   557,   720,   732,   974,   557,   807,   416,
     738,   556,   172,   514,   958,   514,   342,   733,   734,   940,
     733,   721,   722,     0,   517,   464,   671,   122,   212,   451,
     147,   217,   295,   444,   744,   745,   790,   790,   721,   723,
     725,   518,    30,   426,   430,   720,   974,   191,   556,   940,
     191,   556,   191,   807,   191,   556,   274,   559,   512,   516,
     560,   561,   514,   108,   720,   556,   420,   422,   420,   422,
     352,   191,   556,   556,   173,   245,   342,   381,   416,   466,
     641,   377,   202,    30,   940,   191,     3,   251,   433,   107,
     416,   416,   466,   557,   374,   191,   557,   662,   947,   191,
     937,   940,   191,   940,   514,   669,   294,   422,   673,     3,
      37,    42,    49,    53,    54,    55,    56,    57,    71,    72,
      79,    81,    83,    89,   101,   112,   115,   152,   158,   164,
     170,   172,   175,   176,   181,   182,   193,   208,   209,   215,
     216,   218,   221,   222,   224,   234,   236,   246,   267,   268,
     269,   273,   277,   280,   282,   298,   299,   301,   302,   320,
     321,   324,   339,   361,   365,   380,   387,   391,   394,   409,
     411,   418,   426,   427,   432,   434,   438,   460,   461,   464,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   633,   637,   674,   676,   677,   679,   680,   671,   557,
     559,   555,   712,   514,   514,   166,   514,   721,   808,   514,
     514,   556,   514,   514,   171,   514,   514,   514,   514,   721,
     786,   790,   800,   507,   560,    40,   557,   801,   802,   801,
     379,   518,   724,    37,    42,   101,   172,   208,   224,   234,
     268,   314,   321,   361,   380,   449,   804,   802,    40,   557,
     801,   803,   500,   812,   559,   171,   503,   514,   514,   716,
     963,   963,   963,   497,   223,   516,   289,     4,     6,     7,
       8,     9,    10,    39,    54,    56,    57,    65,    71,    72,
      83,   112,   115,   117,   136,   152,   159,   164,   181,   182,
     215,   216,   218,   246,   267,   269,   274,   279,   282,   291,
     339,   365,   394,   426,   427,   435,   461,   498,   505,   506,
     507,   512,   514,   519,   520,   521,   522,   557,   559,   721,
     775,   824,   827,   830,   831,   832,   834,   835,   836,   837,
     839,   840,   855,   857,   858,   859,   860,   861,   862,   864,
     865,   880,   881,   892,   914,   919,   927,   928,   929,   941,
     942,   943,   926,   928,   965,   965,   559,   965,   497,   171,
     428,   503,   516,   560,   656,   807,     3,   170,   172,   464,
     677,   957,   959,   170,   960,   855,   898,   899,   733,   518,
     514,   949,   515,   515,   528,   556,   171,   294,   698,   656,
      30,   132,   739,   739,    59,   739,   161,   166,   237,   286,
     750,   752,   753,   778,   780,   781,   782,   180,   289,   454,
     289,   744,   745,   514,   417,   972,   497,   223,   152,    26,
      32,   137,   293,   350,   354,   386,   457,   542,   545,   546,
     350,   152,    40,    60,   106,   201,   250,   260,   272,   304,
     350,   356,   381,   386,   400,   531,   534,   545,   152,   350,
     386,   545,   152,   350,   386,   545,   152,    40,   552,   855,
     920,     3,    30,    34,    35,    36,    38,    39,    40,    41,
      45,    58,    65,    66,    74,    80,    82,    93,   100,   117,
     119,   126,   132,   133,   139,   143,   147,   159,   161,   166,
     168,   171,   178,   180,   185,   198,   206,   217,   219,   231,
     232,   237,   274,   279,   286,   289,   290,   294,   295,   314,
     315,   316,   317,   328,   335,   344,   358,   379,   396,   413,
     416,   424,   428,   429,   435,   444,   445,   449,   454,   460,
     462,   472,   473,   475,   476,   562,   563,   633,   637,   639,
     561,     3,    30,    37,    42,    49,    55,    81,    83,    89,
     101,   132,   170,   172,   175,   176,   193,   208,   221,   222,
     224,   234,   236,   246,   268,   277,   299,   301,   321,   361,
     380,   391,   409,   418,   438,   462,   464,   515,   633,   638,
     855,   901,   902,   944,   950,   557,   515,   514,   617,   370,
     628,   648,   274,   644,    40,   466,   191,   556,   191,   556,
     632,   191,   556,   191,   556,   191,   557,   647,    89,   686,
     152,   480,   191,    90,   129,   307,   421,   152,   516,   948,
      63,   357,   518,   663,   152,   518,   663,   152,   289,   667,
     668,   855,   950,   352,   515,   518,     4,   159,   289,   435,
     505,   506,   533,   536,   559,   672,   674,   675,   678,   943,
     673,   428,   514,   572,   576,   171,   855,   899,   514,     3,
      68,    69,   109,   110,   113,   114,   188,   189,   252,   253,
     254,   255,   256,   257,   258,   259,   262,   263,   375,   376,
     470,   471,   494,   495,   559,   842,   843,   844,   845,   846,
     847,   848,   849,   850,   851,   852,   853,   904,   905,   802,
     803,   855,   556,   855,   906,   505,   506,   557,   856,   857,
     881,   892,   908,   514,   855,   898,   909,   855,    58,   171,
     232,   429,   855,   899,   912,   855,   515,   558,   514,   418,
     758,   759,   759,   741,   742,   790,   219,   736,    37,   224,
     380,   804,   224,   299,   805,   790,   805,   224,   804,   514,
     224,   805,   148,   199,   792,   224,   759,   514,   558,   514,
     759,   296,   557,   559,   713,   855,   967,   969,   901,     3,
      37,    42,    49,    54,    55,    56,    57,    71,    72,    81,
      83,    89,   101,   112,   115,   164,   170,   172,   176,   193,
     208,   215,   216,   218,   221,   222,   224,   234,   236,   246,
     267,   268,   269,   277,   282,   299,   301,   321,   339,   361,
     365,   380,   387,   391,   394,   409,   418,   426,   427,   438,
     444,   461,   464,   633,   636,   818,   820,   821,   823,   825,
     827,   829,   831,   832,   833,   835,   836,   839,   840,   903,
     946,    40,   235,   557,   514,   512,   721,   463,   838,   855,
     918,   838,   838,   514,   514,   826,   826,   324,   721,   514,
     828,   522,    71,    72,   838,   855,   826,   514,   514,   478,
     500,   514,   841,   514,   841,   855,   855,   855,   148,   930,
     931,   855,   899,   900,   721,   855,   898,     9,   563,   558,
     882,   883,   884,   516,   560,   921,   560,   514,   559,   514,
     514,   559,   943,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    21,    36,    40,    46,    53,    80,   176,   193,
     198,   221,   222,   236,   274,   277,   291,   294,   391,   498,
     501,   502,   503,   505,   506,   507,   508,   509,   510,   890,
     891,   892,   894,   924,   477,   866,   301,   855,   518,   736,
     514,   559,   736,     3,   117,   240,   533,   559,   840,   968,
     104,   969,   969,   557,    40,   557,   515,   518,   671,   518,
     515,   734,   937,   938,    40,   949,   656,   192,   352,   219,
     386,   723,   723,    30,   746,   747,   855,    59,   723,   740,
     163,   271,   766,   226,   272,   338,   389,   451,     4,     9,
      30,   761,   855,   505,   506,   762,   763,   855,   857,   778,
     779,   753,   752,   750,   751,   166,   781,   284,   783,    59,
     729,   730,   731,   793,   856,   928,   928,   750,   778,   899,
     235,   556,    74,    82,    93,   168,   191,   328,   445,   557,
     599,   609,   624,    82,    93,   719,    93,   719,   514,   428,
     514,   597,   244,   448,   597,    93,   518,   428,   556,     3,
     823,   533,    59,   535,   533,   533,   106,   250,   260,    59,
     428,   476,   500,   532,   265,   370,   532,   534,   807,    93,
     428,   719,   370,   556,   428,   370,   551,   557,   572,   513,
     524,   901,   901,   902,   518,   744,   745,    13,    14,   428,
     428,   557,   616,   621,   476,   575,   556,   342,   381,   416,
     466,   641,   377,   152,   100,   582,   645,   649,   683,   975,
     144,   820,   556,   274,   531,   650,   274,   514,   617,    40,
     274,   617,   274,   514,   642,   274,   514,   191,   557,   611,
     687,     3,   152,   662,   562,   516,   947,   937,   940,   940,
     947,   515,   518,    13,   673,   679,     4,   943,     4,   943,
     559,   563,   574,   581,    55,   102,   123,   141,   145,   167,
     170,   186,   279,   287,   309,   336,   578,   713,    40,   515,
     855,   515,   171,   518,   515,   317,   907,   515,   856,   856,
      11,    15,    16,    19,    20,    21,   198,   221,   291,   501,
     502,   503,   505,   506,   507,   508,   509,   510,   892,   856,
     515,   809,   810,   863,   166,   171,   910,   911,   518,   515,
      40,   912,   899,   912,   912,   171,   515,    40,   801,   514,
     938,     4,     9,   557,   754,   756,   757,   928,   926,   177,
     240,   416,   420,   422,   448,   556,   737,   473,   813,   790,
     224,   790,   289,   454,   806,   790,   224,   928,   790,   281,
     281,   514,   790,   558,   814,   815,   514,   558,   814,   518,
     515,   518,   516,   514,   823,   514,   514,   516,    39,   822,
     514,   842,   843,   844,   845,   846,   847,   848,   849,   850,
     851,   852,   853,   854,   515,   518,   826,   564,   655,   690,
     717,   720,   954,   899,   900,   514,   472,   915,   916,   855,
     900,   943,   855,   885,   886,   887,   888,   838,   838,     8,
      15,    16,    19,    20,    21,   501,   502,   503,   505,   506,
     507,   508,   509,   510,   557,   890,   895,   515,   899,   426,
     426,   943,   943,   514,   557,   352,   935,   166,   513,   515,
     518,   524,   518,   523,   507,   561,   899,   943,   855,   854,
     854,   820,   855,   855,   855,   855,   855,   855,   855,   855,
       5,   563,   951,   426,    45,   413,   925,   947,   855,   855,
     514,   721,   913,   132,   159,   274,   279,   284,   435,   446,
     855,   279,   514,   855,   428,    53,   176,   193,   198,   236,
     391,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,    30,    38,   396,   889,   512,   516,   923,   180,   162,
     867,   365,   514,   881,   929,   171,   787,   901,   787,   514,
     559,   557,   556,   957,   548,   556,   855,   518,   515,   249,
     274,   735,   454,   658,   556,   692,   514,   557,   697,   707,
     708,   710,    41,   126,   748,   518,   454,   748,   265,   723,
     365,   366,   505,   506,   763,   765,   857,   389,   226,   290,
     312,   312,   518,   509,     4,   764,   943,   764,   365,   366,
     765,   556,   936,   278,   393,   784,   514,   938,   939,   518,
     180,   454,   198,   180,   219,   779,   751,   515,   350,   545,
     514,   191,   609,   940,   226,   274,   226,   454,   514,   602,
     819,   820,   940,   557,   191,   940,   191,   557,    26,   137,
     386,   541,   544,   563,   593,   607,   940,   563,   601,   620,
     940,   542,   940,   350,   386,   531,   545,   533,   947,   940,
     533,   947,   940,   533,   350,   386,   545,   940,   940,   940,
     940,   350,   386,   545,   940,   940,   559,   506,   855,   920,
     744,   744,   744,   462,   902,   192,   355,   743,   855,   855,
     557,   333,   571,   515,   518,   287,   171,   428,   566,   644,
     466,   556,   556,   632,   556,   556,   647,   556,   294,   628,
     514,   721,   514,   152,   152,   236,   557,   599,   609,   612,
     615,   625,   627,   476,   478,   604,   151,   720,   152,   476,
     688,   152,   515,   901,    40,   152,   581,   274,   289,   663,
     562,   663,   289,   663,   667,   855,   572,   507,   514,   533,
     573,   678,   860,   515,   518,    40,   570,   559,   570,   274,
     279,   336,   570,    59,   570,   820,   515,   855,   855,   855,
     910,   820,   856,   856,   856,   856,   856,   856,   132,   274,
     284,   856,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   515,   518,    40,   811,   855,   855,   911,   910,   820,
     515,   515,   515,   899,   820,   938,   515,   312,   509,   312,
     366,   509,   514,   514,   736,   420,   422,   420,   422,   556,
     738,   738,   738,   855,   180,   767,   806,   790,   855,   514,
     790,   166,   514,   558,   797,   806,   820,   515,   518,   814,
     515,   967,     3,   903,    39,   822,   557,   817,   817,     3,
     512,   512,   943,   428,   428,   428,   428,   820,   515,   513,
     899,   855,   139,   916,   917,   515,   515,   515,   524,   518,
     523,   516,   515,   515,   497,   497,   515,   515,   938,   514,
     855,   932,   557,   855,   855,   882,   931,   515,   515,   515,
     497,   856,   856,   145,   899,   171,   132,   159,   279,   284,
     435,   446,   514,   145,   895,   855,   413,   925,   855,   913,
     855,   428,   514,   721,   855,   920,   562,   514,   514,   155,
     868,   788,   789,   813,   744,   813,   943,   854,   949,   949,
     249,   514,   789,   473,   657,    40,    59,   693,   703,   710,
     921,   518,   787,   503,   499,   749,   747,   291,   890,   893,
     749,     4,   943,   765,   290,   451,   762,   518,   243,   938,
     729,    59,   928,   514,   558,    59,   265,   428,   855,   274,
     624,   514,   152,   514,   602,   202,   621,   622,   583,    40,
     175,   592,   618,   583,    26,   137,   354,   356,   386,   538,
     539,   540,   546,   547,   152,   663,   152,   663,   593,   607,
     593,   515,   518,   559,   586,   503,   516,   515,   518,   428,
     370,    93,   428,   719,   370,   428,   428,   428,   370,   552,
     524,   513,   524,   743,   743,   743,   902,   281,   281,   515,
     514,   565,   403,   404,   559,   580,   616,   571,   556,   650,
     514,    40,   617,   642,   514,   644,   352,   416,   559,   652,
     653,   621,   556,   556,   632,   556,   515,   518,   287,   597,
     287,   289,   596,   940,   476,   631,   556,   597,    40,   556,
     515,   416,   855,   647,   515,   152,   556,   947,   568,   579,
     678,   574,   559,   559,   279,   621,   507,   621,   559,   507,
     621,   559,   515,   515,   911,   171,   132,   284,   514,   812,
     809,   514,   515,   515,   515,   557,   754,   813,   738,   738,
     738,   738,   556,   556,   556,    59,   185,   776,   806,   938,
     514,   794,   795,   796,   858,   941,   938,   166,    80,   816,
     815,   515,   515,   512,   820,   515,   518,   515,   943,   513,
     943,   515,   843,   845,   846,   847,   846,   847,   847,   515,
     424,   855,   143,   855,   885,   895,   841,   841,   515,   855,
     932,   933,   934,    40,   198,   515,   935,   854,   855,    36,
      36,   855,   515,   855,   171,   514,   903,   855,   515,   145,
     856,   856,   145,   145,   855,   855,   513,   524,   514,   922,
     745,   473,   855,   300,   872,   518,   767,   743,   767,   515,
     717,   855,   358,   701,   557,   265,   320,   117,   303,   514,
     691,   720,   515,   518,   697,   657,   855,   163,   230,   514,
     749,   290,   556,   515,   939,   180,   721,   722,   928,   939,
     940,   940,   515,   152,   622,   609,   622,   583,   611,   518,
     515,   119,   206,   272,   274,   608,   514,    33,    59,   629,
     618,    74,    80,    93,   117,   119,   206,   274,   279,   328,
     344,   445,   454,   588,   589,   603,   175,   117,   190,   274,
     597,   532,   107,   117,   175,   274,   402,   405,   534,   597,
     386,   540,   439,   940,   557,   544,     3,    37,    42,    49,
      55,    81,    83,    89,   101,   170,   172,   175,   176,   193,
     208,   221,   222,   224,   234,   236,   246,   268,   273,   277,
     291,   299,   301,   321,   361,   380,   387,   391,   409,   418,
     438,   444,   464,   505,   506,   533,   559,   584,   623,   633,
     639,   820,   893,   944,   563,   620,   940,   940,   940,   940,
     940,   940,   940,   940,   940,   940,   572,   920,   920,   515,
     515,   515,   744,   107,   370,   532,   580,   514,   615,   720,
     688,    40,   581,   628,   191,   556,   515,   518,   515,   650,
     514,    40,   606,   604,   612,    86,   669,   107,   272,   617,
     720,   642,   720,   514,   611,   454,   685,   663,   515,   518,
     621,   856,   171,   514,   903,   814,   515,   518,   515,   767,
     556,   556,   556,   556,    30,   103,   181,   364,   514,   768,
     769,   770,   771,   772,   773,   774,   855,   855,   475,   869,
     515,   857,   896,   897,   198,   180,   791,   795,   514,   515,
     797,   798,   799,   947,   822,   943,   822,   557,   822,   513,
     513,   855,   518,   515,   557,   855,   857,   855,   855,   855,
     903,   515,   855,    36,    36,   855,   855,   145,   515,   506,
     920,   515,   901,   515,   855,   515,   514,   557,   873,   776,
     515,   776,   559,   515,   927,   460,   415,   453,   702,   557,
     696,   706,   289,   699,   503,   710,   701,   895,    59,   515,
     515,   459,   460,   726,   583,   609,   515,   515,   476,   614,
     120,   194,   204,   119,   456,   855,   117,    40,   514,   947,
     940,   856,   120,   194,   119,   279,   226,   556,   614,    88,
     629,   191,   279,   533,   855,   629,   279,   505,   506,   536,
     557,   820,   663,   663,     3,   246,   409,   944,   948,   503,
     428,   428,   513,   513,   743,   515,   515,   572,   454,   567,
     569,   621,   515,   631,    40,   416,   855,   515,   416,   274,
     514,   559,   688,   615,   151,   720,   149,   200,   596,   122,
     137,   327,   631,   107,   688,   476,   976,    40,   581,   289,
     557,   684,   514,   579,   856,   903,   515,   515,     9,   351,
     760,   776,   514,   388,   514,   515,   518,   557,   870,   871,
     335,   777,   518,   515,   514,   558,    59,   515,   901,   198,
     515,   798,   513,   820,   932,   513,   191,   515,   855,   855,
     855,   524,   513,   524,   515,   515,   557,   874,   869,   559,
     869,   518,   459,   921,   515,   518,    91,   701,   855,   515,
     939,   939,   344,   614,   514,   605,   583,   515,   190,   514,
     855,   274,   589,   614,   617,   940,    40,   152,   816,   948,
     509,   584,   940,   940,   515,   532,   124,   515,   604,   720,
     720,   556,   152,    40,   515,   940,   631,    30,    85,    94,
     118,   190,   203,   402,   405,   600,   600,   366,   366,    40,
      64,    74,   240,   416,   855,   515,   556,   514,   557,   700,
     709,   863,   515,   515,   514,   869,   899,   514,   899,   770,
      40,   518,   855,   454,   755,   857,   928,   938,   802,   744,
     514,   802,   855,   920,   920,   309,   875,   777,   777,   720,
     303,   720,   696,   289,   514,   694,   556,   583,   563,   610,
     613,   406,   468,   590,   591,   514,   585,   855,   515,   248,
     626,   190,   454,   543,   509,   439,   572,   559,   688,   596,
     976,   514,   556,   720,   604,   669,   720,    74,   292,    74,
     720,   685,   855,    80,   704,   515,   518,   704,     9,   777,
     515,   769,   515,   873,   871,   368,   515,   743,   928,   513,
     513,   513,    59,   744,   755,   755,   702,    93,   709,   133,
     617,   503,   515,   518,   531,   515,   272,   598,   172,   308,
     392,   289,   594,   595,   619,   585,   855,   439,    40,   514,
     976,   596,   631,   976,   292,   292,   514,   515,   947,   705,
     947,   688,   700,   705,   515,   755,   515,   757,   515,   515,
     898,   183,   337,   366,   876,   459,   940,   515,   275,   451,
     626,   584,   613,   515,   591,   204,   122,   451,   289,   619,
     289,   594,   720,   709,   704,   748,   813,   748,    53,   104,
     441,   855,   877,   878,   877,   877,   515,   720,   813,   386,
     595,    63,   272,   357,   386,   587,   587,   976,   515,   705,
     749,   749,   878,   365,   165,   323,   165,   323,   148,   879,
     879,   879,   708,   583,    25,   117,   279,   688,   748,    36,
     104,   180,   272,   425,   813,   813,   749,   878,   365,   297
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   525,   526,   527,   527,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   537,   537,   537,   537,   537,
     537,   537,   537,   538,   538,   539,   539,   540,   540,   540,
     540,   541,   541,   542,   542,   542,   542,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,   542,   542,   542,
     542,   542,   543,   543,   544,   544,   544,   544,   545,   545,
     546,   547,   547,   547,   654,   654,   654,   654,   556,   556,
     557,   557,   557,   558,   558,   559,   560,   560,   561,   562,
     563,   563,   563,   563,   718,   718,   718,   718,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   719,   719,   690,
     691,   691,   691,   691,   691,   692,   692,   693,   693,   693,
     694,   694,   694,   695,   695,   696,   697,   697,   698,   698,
     698,   699,   699,   699,   700,   700,   700,   701,   701,   702,
     702,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     707,   708,   708,   709,   709,   710,   651,   651,   651,   652,
     652,   653,   653,   714,   714,   714,   649,   649,   649,   650,
     650,   646,   646,   646,   647,   647,   648,   648,   648,   666,
     666,   666,   667,   667,   668,   668,   669,   669,   530,   530,
     531,   531,   532,   532,   532,   533,   533,   533,   533,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   535,   535,   536,   536,   536,   665,   665,
     952,   952,   952,   952,   952,   952,   953,   953,   953,   955,
     582,   582,   582,   583,   583,   584,   584,   584,   584,   584,
     584,   585,   585,   586,   587,   587,   587,   587,   587,   588,
     588,   588,   588,   589,   589,   589,   589,   589,   589,   589,
     589,   590,   590,   591,   591,   592,   592,   592,   593,   594,
     595,   595,   595,   595,   595,   596,   596,   596,   596,   597,
     598,   598,   599,   599,   600,   600,   600,   600,   600,   600,
     600,   600,   601,   601,   602,   603,   603,   603,   603,   604,
     604,   604,   604,   605,   606,   606,   606,   607,   608,   608,
     608,   608,   608,   608,   609,   609,   610,   610,   611,   612,
     612,   612,   613,   613,   614,   614,   615,   615,   615,   616,
     617,   617,   618,   618,   619,   620,   620,   620,   620,   621,
     621,   622,   622,   623,   623,   623,   624,   624,   624,   624,
     624,   624,   625,   625,   626,   626,   626,   626,   627,   628,
     628,   628,   628,   628,   628,   628,   628,   629,   629,   659,
     659,   659,   659,   659,   659,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   661,   661,   661,   661,   661,   661,   662,
     662,   663,   663,   663,   664,   664,   664,   640,   640,   640,
     640,   640,   640,   641,   641,   642,   642,   954,   564,   564,
     564,   565,   565,   565,   566,   566,   567,   567,   568,   568,
     569,   569,   570,   570,   571,   571,   572,   572,   573,   573,
     573,   573,   573,   573,   574,   575,   575,   576,   576,   577,
     577,   578,   578,   578,   578,   578,   578,   578,   578,   578,
     578,   578,   578,   578,   578,   578,   578,   579,   580,   580,
     580,   581,   581,   720,   720,   721,   721,   722,   722,   722,
     722,   722,   722,   722,   722,   723,   723,   724,   724,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   726,   726,
     727,   727,   728,   728,   729,   729,   729,   730,   730,   731,
     731,   732,   732,   732,   733,   733,   734,   735,   735,   735,
     736,   736,   737,   737,   737,   737,   737,   737,   737,   737,
     737,   738,   738,   739,   739,   739,   740,   741,   741,   742,
     742,   743,   743,   743,   744,   744,   745,   745,   746,   746,
     747,   747,   748,   748,   748,   749,   749,   749,   750,   750,
     750,   750,   751,   751,   752,   752,   752,   752,   753,   753,
     754,   754,   754,   754,   754,   754,   755,   755,   756,   756,
     757,   757,   757,   757,   758,   759,   759,   760,   760,   761,
     761,   761,   761,   761,   762,   763,   763,   763,   764,   764,
     765,   765,   766,   766,   767,   767,   767,   768,   768,   769,
     769,   770,   770,   770,   770,   770,   771,   772,   773,   774,
     775,   775,   776,   776,   777,   777,   778,   778,   779,   779,
     780,   780,   781,   782,   782,   782,   782,   783,   783,   784,
     784,   784,   785,   785,   786,   786,   787,   787,   788,   788,
     789,   789,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   791,   791,   792,   792,   792,   793,   793,   794,
     794,   795,   795,   796,   796,   797,   797,   798,   799,   799,
     800,   800,   800,   800,   800,   800,   800,   800,   800,   800,
     800,   801,   801,   801,   801,   802,   802,   803,   803,   803,
     803,   803,   804,   804,   804,   804,   804,   804,   805,   805,
     806,   806,   807,   807,   807,   807,   808,   808,   809,   810,
     810,   811,   811,   812,   812,   813,   813,   814,   814,   815,
     816,   816,   817,   817,   818,   818,   819,   819,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   821,   821,
     822,   822,   822,   823,   823,   823,   823,   823,   823,   823,
     824,   824,   824,   824,   825,   826,   826,   827,   827,   827,
     827,   827,   827,   827,   827,   827,   827,   827,   828,   828,
     829,   829,   830,   830,   831,   832,   833,   833,   834,   834,
     835,   836,   837,   837,   837,   837,   837,   837,   838,   838,
     839,   839,   839,   839,   840,   841,   841,   841,   842,   842,
     843,   843,   844,   844,   845,   845,   846,   846,   847,   847,
     848,   848,   849,   849,   850,   850,   851,   851,   852,   852,
     853,   853,   854,   854,   854,   854,   854,   854,   854,   854,
     854,   854,   854,   854,   854,   854,   854,   854,   854,   854,
     854,   854,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   857,   857,   857,
     858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
     858,   858,   858,   859,   859,   859,   859,   859,   859,   860,
     861,   861,   861,   861,   861,   861,   862,   862,   863,   863,
     864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
     864,   864,   864,   864,   865,   865,   866,   866,   867,   867,
     867,   868,   868,   869,   869,   870,   870,   871,   872,   872,
     872,   873,   874,   874,   875,   875,   876,   876,   876,   876,
     877,   877,   878,   878,   878,   878,   878,   879,   879,   879,
     879,   879,   880,   880,   881,   881,   882,   883,   883,   884,
     884,   885,   886,   886,   887,   887,   888,   888,   889,   889,
     889,   890,   890,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   892,   892,   893,
     893,   894,   894,   894,   894,   894,   894,   894,   894,   895,
     895,   896,   896,   897,   897,   898,   898,   899,   899,   900,
     900,   901,   901,   902,   902,   902,   903,   903,   904,   904,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   906,   906,   907,   908,   908,   909,
     909,   909,   909,   909,   909,   910,   911,   912,   912,   912,
     913,   913,   914,   915,   915,   916,   917,   917,   918,   918,
     919,   919,   561,   561,   561,   561,   920,   920,   921,   921,
     922,   922,   922,   923,   923,   923,   923,   923,   924,   924,
     925,   925,   926,   926,   927,   927,   928,   928,   929,   929,
     929,   930,   930,   931,   931,   932,   933,   933,   934,   934,
     935,   935,   935,   936,   936,   937,   937,   938,   938,   939,
     939,   940,   941,   941,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   942,   943,   944,
     944,   944,   945,   945,   945,   946,   946,   946,   947,   947,
     948,   948,   949,   949,   950,   951,   951,   715,   716,   716,
     717,   717,   717,   717,   717,   643,   643,   643,   644,   644,
     645,   645,   645,   645,   683,   683,   684,   685,   685,   686,
     686,   687,   687,   688,   688,   689,   689,   529,   529,   529,
     529,   529,   529,   554,   554,   555,   555,   681,   681,   682,
     670,   670,   670,   670,   671,   671,   672,   672,   672,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   674,
     674,   674,   675,   675,   676,   676,   677,   677,   678,   678,
     678,   678,   679,   680,   680,   964,   964,   964,   964,   965,
     965,   965,   965,   966,   966,   967,   968,   968,   968,   968,
     968,   968,   968,   969,   969,   711,   711,   711,   711,   711,
     712,   712,   713,   713,   956,   956,   956,   956,   956,   957,
     957,   957,   957,   957,   958,   958,   959,   959,   960,   960,
     655,   655,   656,   656,   656,   657,   657,   658,   658,   548,
     548,   549,   549,   550,   550,   551,   551,   552,   552,   961,
     961,   961,   961,   962,   962,   963,   963,   963,   970,   970,
     970,   970,   970,   970,   970,   970,   971,   971,   972,   972,
     973,   973,   974,   974,   553,   975,   975,   975,   975,   975,
     976,   976,   976,   976,   630,   630,   630,   631,   631,   631,
     632,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     1,     0,     2,     3,     2,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,     9,
       1,     4,     4,     7,     2,     1,     3,     2,     2,     0,
       4,     3,     0,     1,     0,     2,     3,     5,     2,     2,
       0,     8,     5,     0,     5,     5,     7,     2,     0,     1,
       1,     1,     3,     2,     0,     1,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     2,     6,     8,     5,     1,
       0,     1,     3,     2,     4,     5,     5,     8,     7,     1,
       0,     7,    10,     9,     0,     1,     0,     1,     1,     3,
       9,    12,     1,     3,     1,     3,     3,     0,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     3,     5,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     2,
       9,    12,    11,     0,     2,     1,     1,     1,     1,     1,
       1,     3,     0,     1,     2,     1,     1,     2,     2,     3,
       1,     1,     2,     2,     1,     2,     3,     5,     3,     2,
       5,     1,     1,     1,     0,     5,     7,     5,     2,     3,
       1,     1,     2,     2,     0,     3,     4,     4,     0,     3,
       2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     0,     3,     3,     3,     0,     1,     2,     1,
       2,     2,     2,     2,     3,     4,     1,     3,     1,     1,
       1,     1,     3,     1,     2,     0,     1,     2,     0,     1,
       3,     0,     2,     0,     3,     3,     1,     5,     3,     1,
       3,     1,     2,     1,     4,     5,     5,     6,     3,     7,
       4,    11,     1,     3,     2,     2,     2,     0,     3,     1,
       1,     2,     2,     2,     2,     1,     0,     1,     2,     6,
       4,     6,     4,     6,     8,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     3,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     8,    11,    10,
       7,    10,     9,     1,     1,     2,     3,     8,    11,     9,
       7,     0,     3,     3,     1,     1,     3,     0,     1,     3,
       1,     0,     1,     0,     1,     0,     1,     3,     1,     1,
       1,     3,     1,     0,     2,     2,     0,     2,     0,     1,
       0,     1,     1,     1,     3,     3,     1,     1,     3,     3,
       3,     3,     3,     3,     4,     3,     2,     1,     1,     1,
       1,     1,     3,     1,     1,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     7,     1,     2,     0,
       2,     0,     3,     3,     4,     4,     4,     4,     3,     2,
       1,     1,     0,     1,     1,     0,     2,     1,     5,     1,
       0,     2,     2,     0,     1,     0,     3,     5,     1,     3,
       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     3,     0,     1,     3,     1,
       2,     1,     1,     1,     1,     1,     2,     4,     4,     5,
       1,     1,     2,     0,     2,     0,     1,     3,     1,     0,
       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,
       2,     0,     4,     5,     1,     2,     2,     0,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     1,     4,
       9,     9,     3,     0,     2,     2,     0,     5,     3,     1,
       3,     5,     3,     1,     2,     1,     3,     5,     1,     2,
       3,     4,     5,     4,     5,     4,     6,     5,     4,     5,
       5,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     1,     1,     0,
       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,
       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,
       2,     0,     2,     4,     1,     1,     1,     0,     2,     3,
       5,     6,     2,     3,     1,     5,     5,     5,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     2,     4,
       1,     1,     1,     1,     2,     3,     0,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     1,     3,     0,
       1,     1,     1,     1,     5,     2,     1,     1,     1,     1,
       4,     1,     2,     2,     1,     3,     3,     2,     1,     0,
       5,     2,     5,     2,     1,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     0,     1,     3,     3,     5,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     3,     3,     3,
       3,     4,     3,     4,     3,     4,     5,     6,     6,     7,
       6,     7,     6,     7,     3,     4,     4,     6,     1,     4,
       3,     5,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     5,     6,     6,     7,     1,     1,     2,
       1,     1,     2,     2,     3,     1,     2,     4,     1,     1,
       2,     2,     4,     1,     1,     3,     1,     4,     1,     3,
       3,     6,     7,     9,     7,     7,     5,     1,     1,     1,
       5,     6,     6,     4,     4,     4,     4,     6,     5,     5,
       5,     4,     6,     4,     7,     9,     5,     0,     5,     4,
       0,     1,     0,     2,     0,     1,     3,     3,     2,     2,
       0,     6,     1,     0,     3,     0,     3,     3,     3,     0,
       1,     4,     2,     2,     2,     2,     2,     3,     2,     2,
       3,     0,     4,     3,     1,     5,     3,     1,     3,     1,
       2,     3,     1,     3,     1,     2,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     2,     1,     3,     1,     2,     1,
       0,     1,     3,     1,     3,     3,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     3,     5,     7,     7,     1,     0,     0,     2,
       0,     2,     3,     3,     3,     5,     7,     7,     0,     2,
       1,     0,     1,     0,     1,     3,     1,     2,     3,     2,
       1,     4,     2,     1,     0,     3,     1,     3,     1,     2,
       4,     2,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     1,     1,     2,     1,     1,     2,     1,     1,     2,
       7,     2,     5,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     3,     0,     1,     1,     1,     5,     3,     0,
       1,     1,     1,     1,     1,     4,     7,     6,     2,     0,
       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,
       8,     6,     8,     3,     2,     1,     0,     4,     6,     3,
       2,     4,     3,     5,     1,     0,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     1,     1,     1,     3,     5,
       1,     1,     1,     1,     3,     2,     2,     3,     4,     5,
       1,     1,     1,     1,     4,     6,     5,     4,     6,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     0,
       7,     3,     1,     2,     3,     2,     0,     2,     0,     2,
       4,     5,     8,     3,     5,     1,     0,     2,     0,     2,
       3,     3,     3,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     3,     1,     1,     1,     1,     0,
       1,     3,     1,     3,     2,     9,    12,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 498 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 514 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 526 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* stmt: %empty  */
#line 574 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name '(' copy_generic_opt_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-8].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name '(' copy_generic_opt_list ')'  */
#line 26 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_secret_name: %empty  */
#line 37 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 19953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_secret_name: ColId  */
#line 38 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 19959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_persist: %empty  */
#line 42 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 19965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_persist: TEMPORARY  */
#line 43 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 19971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_persist: PERSISTENT  */
#line 44 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                     { (yyval.str) = pstrdup("persistent"); }
#line 19977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* DropSecretStmt: DROP SECRET ColId  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->secret_name = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* DropSecretStmt: DROP SECRET ColId IF_P EXISTS  */
#line 15 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->secret_name = (yyvsp[-2].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 20850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 20862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 20868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 20880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 20892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 20898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 20921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 20927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 20933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 20939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 20945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 20957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* copy_generic_opt_arg: '*'  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* copy_generic_opt_arg: struct_expr  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_generic_opt_arg: %empty  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 127 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* opt_oids: WITH OIDS  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* opt_oids: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 143 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_opt_list: %empty  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* opt_binary: BINARY  */
#line 150 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* opt_binary: %empty  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_opt_item: BINARY  */
#line 159 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_opt_item: OIDS  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* copy_opt_item: FREEZE  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_item: CSV  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* copy_opt_item: HEADER_P  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: FORCE QUOTE columnList  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: FORCE QUOTE '*'  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: PARTITION BY columnList  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: PARTITION BY '*'  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: FORCE NULL_P columnList  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: ENCODING Sconst  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_file_name: Sconst  */
#line 231 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_file_name: STDIN  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_file_name: STDOUT  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 239 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 243 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 22858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 22947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 22959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 23957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 23965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 23988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* Typename: qualified_typename  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 24761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 24794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* qualified_typename: IDENT '.' IDENT  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 24806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 24818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* opt_array_bounds: %empty  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 24824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* SimpleTypename: GenericType  */
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* SimpleTypename: Numeric  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* SimpleTypename: Bit  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* SimpleTypename: Character  */
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* SimpleTypename: ConstDatetime  */
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* SimpleTypename: ConstInterval opt_interval  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 24863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* ConstTypename: Numeric  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* ConstTypename: ConstBit  */
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* ConstTypename: ConstCharacter  */
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* ConstTypename: ConstDatetime  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* GenericType: type_name_token opt_type_modifiers  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* opt_type_modifiers: %empty  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* Numeric: INT_P  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* Numeric: INTEGER  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* Numeric: SMALLINT  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* Numeric: BIGINT  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* Numeric: REAL  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* Numeric: FLOAT_P opt_float  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* Numeric: DOUBLE_P PRECISION  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: DEC opt_type_modifiers  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1783 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: BOOLEAN_P  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* opt_float: '(' Iconst ')'  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_float: %empty  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Bit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Bit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* ConstBit: BitWithLength  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* ConstBit: BitWithoutLength  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* BitWithoutLength: BIT opt_varying  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* Character: CharacterWithLength  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Character: CharacterWithoutLength  */
#line 1888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* ConstCharacter: CharacterWithLength  */
#line 1894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* ConstCharacter: CharacterWithoutLength  */
#line 1898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* CharacterWithoutLength: character  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* character: CHARACTER opt_varying  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* character: CHAR_P opt_varying  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* character: VARCHAR  */
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* character: NATIONAL CHARACTER opt_varying  */
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* character: NATIONAL CHAR_P opt_varying  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* character: NCHAR opt_varying  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* opt_varying: VARYING  */
#line 1943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* opt_varying: %empty  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* ConstDatetime: TIME opt_timezone  */
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* ConstInterval: INTERVAL  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* opt_timezone: %empty  */
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: year_keyword  */
#line 2039 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: month_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: day_keyword  */
#line 2043 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: hour_keyword  */
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_interval: minute_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_interval: second_keyword  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_interval: millisecond_keyword  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_interval: microsecond_keyword  */
#line 2053 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: week_keyword  */
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_interval: decade_keyword  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_interval: century_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_interval: millennium_keyword  */
#line 2061 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_interval: year_keyword TO month_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_interval: day_keyword TO hour_keyword  */
#line 2068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_interval: day_keyword TO minute_keyword  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: day_keyword TO second_keyword  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_interval: hour_keyword TO second_keyword  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_interval: minute_keyword TO second_keyword  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_interval: %empty  */
#line 2102 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: c_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr TYPECAST Typename  */
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr COLLATE any_name  */
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: '+' a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: '-' a_expr  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr '+' a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr '-' a_expr  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr '*' a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr '/' a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr '%' a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr '^' a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr POWER_OF a_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr '<' a_expr  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr '>' a_expr  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr '=' a_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr qual_Op a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: qual_Op a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr qual_Op  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr AND a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr OR a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: NOT a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: NOT_LA a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr GLOB a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr LIKE a_expr  */
#line 2214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr ILIKE a_expr  */
#line 2238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr IS NULL_P  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr ISNULL  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr IS NOT NULL_P  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr NOT NULL_P  */
#line 2329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr NOTNULL  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 25830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: row OVERLAPS row  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr IS TRUE_P  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr IS FALSE_P  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr IS UNKNOWN  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 25946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 25962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr IN_P in_expr  */
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: DEFAULT  */
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: c_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr TYPECAST Typename  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: '+' b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: '-' b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr '+' b_expr  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr '-' b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: b_expr '*' b_expr  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr '/' b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr '%' b_expr  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr '^' b_expr  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: b_expr POWER_OF b_expr  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr '<' b_expr  */
#line 2603 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr '>' b_expr  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr '=' b_expr  */
#line 2607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2611 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: b_expr qual_Op b_expr  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: qual_Op b_expr  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr qual_Op  */
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2621 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* c_expr: row  */
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* d_expr: columnref  */
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* d_expr: AexprConst  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* d_expr: '#' ICONST  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* d_expr: '$' ColLabel  */
#line 2675 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* d_expr: list_comprehension  */
#line 2682 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* d_expr: ARRAY select_with_parens  */
#line 2686 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* d_expr: case_expr  */
#line 2702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* d_expr: select_with_parens  */
#line 2704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* d_expr: select_with_parens indirection  */
#line 2715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* d_expr: EXISTS select_with_parens  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* indirection_expr: '?'  */
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* indirection_expr: PARAM  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* indirection_expr: '(' a_expr ')'  */
#line 2772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* indirection_expr: struct_expr  */
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* indirection_expr: func_expr  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_application: func_name '(' ')'  */
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr: func_expr_common_subexpr  */
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_windowless: func_application  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2935 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2955 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 26841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* within_group_clause: %empty  */
#line 3041 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* filter_clause: %empty  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* export_clause: EXPORT_STATE  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 26877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* export_clause: %empty  */
#line 3052 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* window_clause: WINDOW window_definition_list  */
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* window_clause: %empty  */
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* window_definition_list: window_definition  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 26901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 26907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* window_definition: ColId AS window_specification  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 26917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* over_clause: OVER window_specification  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 26923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* over_clause: OVER ColId  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* over_clause: %empty  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 26946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 26964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* opt_existing_window_name: ColId  */
#line 3124 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* opt_existing_window_name: %empty  */
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* opt_partition_clause: %empty  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3154 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_frame_clause: %empty  */
#line 3162 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* frame_extent: frame_bound  */
#line 3173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3246 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* frame_bound: CURRENT_P ROW  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* frame_bound: a_expr PRECEDING  */
#line 3264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* frame_bound: a_expr FOLLOWING  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* opt_window_exclusion_clause: %empty  */
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* qualified_row: ROW '(' ')'  */
#line 3303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* row: qualified_row  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* row: '(' expr_list ',' a_expr ')'  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* dict_arguments: dict_arg  */
#line 3321 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* dict_arguments_opt_comma: dict_arguments  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* map_arg: a_expr ':' a_expr  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* map_arguments: map_arg  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* map_arguments: map_arguments ',' map_arg  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* map_arguments_opt_comma: map_arguments  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* map_arguments_opt_comma: map_arguments ','  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* opt_map_arguments_opt_comma: %empty  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* sub_type: ANY  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* sub_type: SOME  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* sub_type: ALL  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* all_Op: Op  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* all_Op: MathOp  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: '+'  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: '-'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: '*'  */
#line 3365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* MathOp: '/'  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* MathOp: INTEGER_DIVISION  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* MathOp: '%'  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* MathOp: '^'  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* MathOp: POWER_OF  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* MathOp: '<'  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* MathOp: '>'  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* MathOp: '='  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* MathOp: LESS_EQUALS  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* MathOp: GREATER_EQUALS  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* MathOp: NOT_EQUALS  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* qual_Op: Op  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* qual_all_Op: all_Op  */
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* subquery_Op: all_Op  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* subquery_Op: LIKE  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* subquery_Op: NOT_LA LIKE  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* subquery_Op: GLOB  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* subquery_Op: NOT_LA GLOB  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* subquery_Op: ILIKE  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* subquery_Op: NOT_LA ILIKE  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* any_operator: all_Op  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* any_operator: ColId '.' any_operator  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* c_expr_list: c_expr  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* c_expr_list_opt_comma: c_expr_list  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* expr_list: a_expr  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* expr_list: expr_list ',' a_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* expr_list_opt_comma: expr_list  */
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* expr_list_opt_comma: expr_list ','  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* opt_expr_list_opt_comma: %empty  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_arg_list: func_arg_expr  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_arg_expr: a_expr  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* type_list: Typename  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* type_list: type_list ',' Typename  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_list: extract_arg FROM a_expr  */
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* extract_list: %empty  */
#line 3529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* extract_arg: IDENT  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* extract_arg: year_keyword  */
#line 3537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* extract_arg: month_keyword  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* extract_arg: day_keyword  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* extract_arg: hour_keyword  */
#line 3540 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* extract_arg: minute_keyword  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* extract_arg: second_keyword  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* extract_arg: millisecond_keyword  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* extract_arg: microsecond_keyword  */
#line 3544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* extract_arg: week_keyword  */
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 27715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* extract_arg: decade_keyword  */
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 27721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* extract_arg: century_keyword  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 27727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* extract_arg: millennium_keyword  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 27733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* extract_arg: Sconst  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* overlay_placing: PLACING a_expr  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* position_list: b_expr IN_P b_expr  */
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* position_list: %empty  */
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* substr_list: a_expr substr_from substr_for  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* substr_list: a_expr substr_for substr_from  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* substr_list: a_expr substr_from  */
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* substr_list: a_expr substr_for  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* substr_list: expr_list  */
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* substr_list: %empty  */
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* substr_from: FROM a_expr  */
#line 3631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* substr_for: FOR a_expr  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* trim_list: FROM expr_list_opt_comma  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* trim_list: expr_list_opt_comma  */
#line 3639 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* in_expr: select_with_parens  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 27872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 27878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 27892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* when_clause_list: when_clause  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* when_clause_list: when_clause_list when_clause  */
#line 3674 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 27916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* case_default: ELSE a_expr  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* case_default: %empty  */
#line 3690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* case_arg: a_expr  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* case_arg: %empty  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* columnref: ColId  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* columnref: ColId indirection  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 27956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* indirection_el: '[' a_expr ']'  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 27993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3732 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_slice_bound: a_expr  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* opt_slice_bound: %empty  */
#line 3743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* opt_indirection: %empty  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* opt_indirection: opt_indirection indirection_el  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_func_arguments: %empty  */
#line 3753 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_func_arguments: '(' ')'  */
#line 3754 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3755 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* extended_indirection_el: '[' a_expr ']'  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3793 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_extended_indirection: %empty  */
#line 3808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* opt_target_list_opt_comma: %empty  */
#line 3826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* target_list: target_el  */
#line 3830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* target_list: target_list ',' target_el  */
#line 3831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* target_list_opt_comma: target_list  */
#line 3835 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* target_list_opt_comma: target_list ','  */
#line 3836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* target_el: a_expr AS ColLabelOrString  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* target_el: a_expr IDENT  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* target_el: a_expr  */
#line 3864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* except_list: EXCLUDE ColId  */
#line 3874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_except_list: except_list  */
#line 3877 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_except_list: %empty  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* replace_list_el: a_expr AS ColId  */
#line 3881 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* replace_list: replace_list_el  */
#line 3885 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* replace_list: replace_list ',' replace_list_el  */
#line 3886 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* replace_list_opt_comma: replace_list  */
#line 3890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* replace_list_opt_comma: replace_list ','  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3894 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* opt_replace_list: REPLACE replace_list_el  */
#line 3895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* opt_replace_list: %empty  */
#line 3896 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* qualified_name_list: qualified_name  */
#line 3906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* name_list: name  */
#line 3912 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* name_list: name_list ',' name  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* name_list_opt_comma: name_list  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* name_list_opt_comma: name_list ','  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* name: ColIdOrString  */
#line 3928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* func_name: function_name_token  */
#line 3940 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* func_name: ColId indirection  */
#line 3943 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* AexprConst: Iconst  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* AexprConst: FCONST  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* AexprConst: Sconst opt_indirection  */
#line 3962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* AexprConst: BCONST  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* AexprConst: XCONST  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* AexprConst: func_name Sconst  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3994 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* AexprConst: ConstTypename Sconst  */
#line 4032 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* AexprConst: TRUE_P  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* AexprConst: FALSE_P  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* AexprConst: NULL_P  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* Iconst: ICONST  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* type_function_name: IDENT  */
#line 4078 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* type_function_name: unreserved_keyword  */
#line 4079 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* type_function_name: type_func_name_keyword  */
#line 4080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* function_name_token: IDENT  */
#line 4083 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* function_name_token: unreserved_keyword  */
#line 4084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* function_name_token: func_name_keyword  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* type_name_token: IDENT  */
#line 4088 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* type_name_token: unreserved_keyword  */
#line 4089 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* type_name_token: type_name_keyword  */
#line 4090 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* any_name: ColId  */
#line 4093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* any_name: ColId attrs  */
#line 4094 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* attrs: '.' attr_name  */
#line 4098 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* attrs: attrs '.' attr_name  */
#line 4100 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* opt_name_list: %empty  */
#line 4105 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* ColLabelOrString: ColLabel  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* ColLabelOrString: SCONST  */
#line 4113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* DetachStmt: DETACH opt_database IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_database: DATABASE  */
#line 44 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_database: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_database_alias: AS ColId  */
#line 49 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_database_alias: %empty  */
#line 50 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 29840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 29851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 29862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 29970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30187 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
