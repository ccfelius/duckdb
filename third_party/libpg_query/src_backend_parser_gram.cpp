/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 307,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 308,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 309,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 314,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 315,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 316,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 317,                /* PRECISION  */
  YYSYMBOL_PREPARE = 318,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 319,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 320,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 321,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 322,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 323,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 324,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 325,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 326,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 327,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 328,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 329,                    /* QUOTE  */
  YYSYMBOL_RANGE = 330,                    /* RANGE  */
  YYSYMBOL_READ_P = 331,                   /* READ_P  */
  YYSYMBOL_REAL = 332,                     /* REAL  */
  YYSYMBOL_REASSIGN = 333,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 334,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 335,                /* RECURSIVE  */
  YYSYMBOL_REF = 336,                      /* REF  */
  YYSYMBOL_REFERENCES = 337,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 338,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 339,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 340,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 341,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 342,                  /* RELEASE  */
  YYSYMBOL_RENAME = 343,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 344,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 345,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 346,                  /* REPLICA  */
  YYSYMBOL_RESET = 347,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 348,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 349,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 350,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 351,                /* RETURNING  */
  YYSYMBOL_RETURNS = 352,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 353,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 354,                    /* RIGHT  */
  YYSYMBOL_ROLE = 355,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 356,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 357,                   /* ROLLUP  */
  YYSYMBOL_ROW = 358,                      /* ROW  */
  YYSYMBOL_ROWS = 359,                     /* ROWS  */
  YYSYMBOL_RULE = 360,                     /* RULE  */
  YYSYMBOL_SAMPLE = 361,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 362,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 363,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 364,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 365,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 366,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 367,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 368,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 369,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 370,                   /* SECRET  */
  YYSYMBOL_SECURITY = 371,                 /* SECURITY  */
  YYSYMBOL_SELECT = 372,                   /* SELECT  */
  YYSYMBOL_SEMI = 373,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 374,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 375,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 376,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 377,                   /* SERVER  */
  YYSYMBOL_SESSION = 378,                  /* SESSION  */
  YYSYMBOL_SET = 379,                      /* SET  */
  YYSYMBOL_SETOF = 380,                    /* SETOF  */
  YYSYMBOL_SETS = 381,                     /* SETS  */
  YYSYMBOL_SHARE = 382,                    /* SHARE  */
  YYSYMBOL_SHOW = 383,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 384,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 385,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 386,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 387,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 388,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 389,                     /* SOME  */
  YYSYMBOL_SQL_P = 390,                    /* SQL_P  */
  YYSYMBOL_STABLE = 391,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 392,             /* STANDALONE_P  */
  YYSYMBOL_START = 393,                    /* START  */
  YYSYMBOL_STATEMENT = 394,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 395,               /* STATISTICS  */
  YYSYMBOL_STDIN = 396,                    /* STDIN  */
  YYSYMBOL_STDOUT = 397,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 398,                  /* STORAGE  */
  YYSYMBOL_STORED = 399,                   /* STORED  */
  YYSYMBOL_STRICT_P = 400,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 401,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 402,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 403,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 404,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 405,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 406,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 407,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 408,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 409,                    /* TABLE  */
  YYSYMBOL_TABLES = 410,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 411,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 412,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 413,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 414,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 415,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 416,                   /* TEXT_P  */
  YYSYMBOL_THEN = 417,                     /* THEN  */
  YYSYMBOL_TIES = 418,                     /* TIES  */
  YYSYMBOL_TIME = 419,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 420,                /* TIMESTAMP  */
  YYSYMBOL_TO = 421,                       /* TO  */
  YYSYMBOL_TRAILING = 422,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 423,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 424,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 425,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 426,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 427,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 428,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 429,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 430,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 431,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 432,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 433,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 434,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 435,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 436,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 437,                    /* UNION  */
  YYSYMBOL_UNIQUE = 438,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 439,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 440,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 441,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 442,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 443,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 444,                   /* UPDATE  */
  YYSYMBOL_USE_P = 445,                    /* USE_P  */
  YYSYMBOL_USER = 446,                     /* USER  */
  YYSYMBOL_USING = 447,                    /* USING  */
  YYSYMBOL_VACUUM = 448,                   /* VACUUM  */
  YYSYMBOL_VALID = 449,                    /* VALID  */
  YYSYMBOL_VALIDATE = 450,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 451,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 452,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 453,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 454,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 455,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 456,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 457,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 458,                /* VERSION_P  */
  YYSYMBOL_VIEW = 459,                     /* VIEW  */
  YYSYMBOL_VIEWS = 460,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 461,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 462,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 463,                     /* WHEN  */
  YYSYMBOL_WHERE = 464,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 465,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 466,                   /* WINDOW  */
  YYSYMBOL_WITH = 467,                     /* WITH  */
  YYSYMBOL_WITHIN = 468,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 469,                  /* WITHOUT  */
  YYSYMBOL_WORK = 470,                     /* WORK  */
  YYSYMBOL_WRAPPER = 471,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 472,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 473,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 474,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 475,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 476,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 477,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 478,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 479,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 480,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 481,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 482,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 483,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 484,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 485,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 486,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 487,                    /* YES_P  */
  YYSYMBOL_ZONE = 488,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 489,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 490,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 491,                  /* WITH_LA  */
  YYSYMBOL_492_ = 492,                     /* '<'  */
  YYSYMBOL_493_ = 493,                     /* '>'  */
  YYSYMBOL_494_ = 494,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 495,                /* POSTFIXOP  */
  YYSYMBOL_496_ = 496,                     /* '+'  */
  YYSYMBOL_497_ = 497,                     /* '-'  */
  YYSYMBOL_498_ = 498,                     /* '*'  */
  YYSYMBOL_499_ = 499,                     /* '/'  */
  YYSYMBOL_500_ = 500,                     /* '%'  */
  YYSYMBOL_501_ = 501,                     /* '^'  */
  YYSYMBOL_UMINUS = 502,                   /* UMINUS  */
  YYSYMBOL_503_ = 503,                     /* '['  */
  YYSYMBOL_504_ = 504,                     /* ']'  */
  YYSYMBOL_505_ = 505,                     /* '('  */
  YYSYMBOL_506_ = 506,                     /* ')'  */
  YYSYMBOL_507_ = 507,                     /* '.'  */
  YYSYMBOL_508_ = 508,                     /* ';'  */
  YYSYMBOL_509_ = 509,                     /* ','  */
  YYSYMBOL_510_ = 510,                     /* '#'  */
  YYSYMBOL_511_ = 511,                     /* '$'  */
  YYSYMBOL_512_ = 512,                     /* '?'  */
  YYSYMBOL_513_ = 513,                     /* '{'  */
  YYSYMBOL_514_ = 514,                     /* '}'  */
  YYSYMBOL_515_ = 515,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 516,                 /* $accept  */
  YYSYMBOL_stmtblock = 517,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 518,                /* stmtmulti  */
  YYSYMBOL_stmt = 519,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 520,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 521,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 522,               /* SeqOptList  */
  YYSYMBOL_opt_with = 523,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 524,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 525,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 526,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 527,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 528,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 529, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 530,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 531, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 532, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 533,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 534,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 535, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 536,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 537,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 538,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 539,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 540,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 541,               /* DetachStmt  */
  YYSYMBOL_opt_database = 542,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 543,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 544,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 545,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 546,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 547,           /* qualified_name  */
  YYSYMBOL_ColId = 548,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 549,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 550,                   /* Sconst  */
  YYSYMBOL_indirection = 551,              /* indirection  */
  YYSYMBOL_indirection_el = 552,           /* indirection_el  */
  YYSYMBOL_attr_name = 553,                /* attr_name  */
  YYSYMBOL_ColLabel = 554,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 555,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 556,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 557,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 558, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 559,                /* opt_using  */
  YYSYMBOL_opt_as = 560,                   /* opt_as  */
  YYSYMBOL_opt_program = 561,              /* opt_program  */
  YYSYMBOL_copy_options = 562,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 563,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 564,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 565,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 566,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 567,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 568,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 569, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 570,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 571,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 572,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 573,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 574,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 575, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 576,       /* generic_option_arg  */
  YYSYMBOL_key_action = 577,               /* key_action  */
  YYSYMBOL_ColConstraint = 578,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 579,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 580,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 581,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 582,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 583,      /* generic_option_elem  */
  YYSYMBOL_key_update = 584,               /* key_update  */
  YYSYMBOL_key_actions = 585,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 586,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 587,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 588,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 589,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 590,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 591,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 592,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 593,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 594,                  /* OptWith  */
  YYSYMBOL_definition = 595,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 596,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 597,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 598,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 599,                /* columnDef  */
  YYSYMBOL_def_list = 600,                 /* def_list  */
  YYSYMBOL_index_name = 601,               /* index_name  */
  YYSYMBOL_TableElement = 602,             /* TableElement  */
  YYSYMBOL_def_elem = 603,                 /* def_elem  */
  YYSYMBOL_opt_definition = 604,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 605,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 606,               /* columnElem  */
  YYSYMBOL_opt_column_list = 607,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 608,              /* ColQualList  */
  YYSYMBOL_key_delete = 609,               /* key_delete  */
  YYSYMBOL_reloption_elem = 610,           /* reloption_elem  */
  YYSYMBOL_columnList = 611,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 612,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 613,                /* func_type  */
  YYSYMBOL_ConstraintElem = 614,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 615,         /* TableElementList  */
  YYSYMBOL_key_match = 616,                /* key_match  */
  YYSYMBOL_TableLikeClause = 617,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 618,                  /* OptTemp  */
  YYSYMBOL_generated_when = 619,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 620,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 621,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 622,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 623,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 624,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 625,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 626,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 627,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 628,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 629,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 630,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 631,              /* macro_alias  */
  YYSYMBOL_param_list = 632,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 633,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 634,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 635,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 636,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 637,          /* opt_secret_name  */
  YYSYMBOL_secret_key = 638,               /* secret_key  */
  YYSYMBOL_secret_key_val = 639,           /* secret_key_val  */
  YYSYMBOL_scope_list_val_item = 640,      /* scope_list_val_item  */
  YYSYMBOL_scope_list_val = 641,           /* scope_list_val  */
  YYSYMBOL_CreateSeqStmt = 642,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 643,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 644,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 645,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 646,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 647,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 648,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 649,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 650,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 651,             /* using_clause  */
  YYSYMBOL_DropStmt = 652,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 653,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 654,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 655,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 656,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 657, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 658,           /* type_name_list  */
  YYSYMBOL_DropSecretStmt = 659,           /* DropSecretStmt  */
  YYSYMBOL_ExecuteStmt = 660,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 661,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 662,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 663,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 664,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 665,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 666,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 667,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 668,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 669, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 670,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 671,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 672,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 673,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 674,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 675,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 676,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 677,                /* IndexStmt  */
  YYSYMBOL_access_method = 678,            /* access_method  */
  YYSYMBOL_access_method_clause = 679,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 680,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 681,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 682,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 683,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 684,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 685,              /* insert_rest  */
  YYSYMBOL_insert_target = 686,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 687,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 688,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 689,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 690,       /* insert_column_item  */
  YYSYMBOL_set_clause = 691,               /* set_clause  */
  YYSYMBOL_opt_or_action = 692,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 693,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 694,               /* index_elem  */
  YYSYMBOL_returning_clause = 695,         /* returning_clause  */
  YYSYMBOL_override_kind = 696,            /* override_kind  */
  YYSYMBOL_set_target_list = 697,          /* set_target_list  */
  YYSYMBOL_opt_collate = 698,              /* opt_collate  */
  YYSYMBOL_opt_class = 699,                /* opt_class  */
  YYSYMBOL_insert_column_list = 700,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 701,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 702, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 703,             /* index_params  */
  YYSYMBOL_set_target = 704,               /* set_target  */
  YYSYMBOL_LoadStmt = 705,                 /* LoadStmt  */
  YYSYMBOL_file_name = 706,                /* file_name  */
  YYSYMBOL_repo_path = 707,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 708,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 709,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 710,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 711,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 712,               /* RenameStmt  */
  YYSYMBOL_opt_column = 713,               /* opt_column  */
  YYSYMBOL_SelectStmt = 714,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 715,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 716,         /* select_no_parens  */
  YYSYMBOL_select_clause = 717,            /* select_clause  */
  YYSYMBOL_opt_select = 718,               /* opt_select  */
  YYSYMBOL_simple_select = 719,            /* simple_select  */
  YYSYMBOL_value_or_values = 720,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 721,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 722,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 723,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 724, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 725,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 726,              /* with_clause  */
  YYSYMBOL_cte_list = 727,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 728,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 729,         /* opt_materialized  */
  YYSYMBOL_into_clause = 730,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 731,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 732,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 733,          /* all_or_distinct  */
  YYSYMBOL_by_name = 734,                  /* by_name  */
  YYSYMBOL_distinct_clause = 735,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 736,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 737,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 738,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 739,              /* sort_clause  */
  YYSYMBOL_sortby_list = 740,              /* sortby_list  */
  YYSYMBOL_sortby = 741,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 742,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 743,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 744,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 745,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 746,             /* limit_clause  */
  YYSYMBOL_offset_clause = 747,            /* offset_clause  */
  YYSYMBOL_sample_count = 748,             /* sample_count  */
  YYSYMBOL_sample_clause = 749,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 750,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 751,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 752,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 753,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 754,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 755,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 756,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 757, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 758,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 759,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 760,            /* first_or_next  */
  YYSYMBOL_group_clause = 761,             /* group_clause  */
  YYSYMBOL_group_by_list = 762,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 763,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 764,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 765,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 766,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 767,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 768,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 769,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 770,            /* having_clause  */
  YYSYMBOL_qualify_clause = 771,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 772,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 773,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 774,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 775,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 776,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 777,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 778,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 779,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 780,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 781,              /* from_clause  */
  YYSYMBOL_from_list = 782,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 783,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 784,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 785,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 786,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 787,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 788,             /* pivot_header  */
  YYSYMBOL_pivot_value = 789,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 790,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 791,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 792,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 793,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 794,             /* joined_table  */
  YYSYMBOL_alias_clause = 795,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 796,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 797,        /* func_alias_clause  */
  YYSYMBOL_join_type = 798,                /* join_type  */
  YYSYMBOL_join_outer = 799,               /* join_outer  */
  YYSYMBOL_join_qual = 800,                /* join_qual  */
  YYSYMBOL_relation_expr = 801,            /* relation_expr  */
  YYSYMBOL_func_table = 802,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 803,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 804,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 805,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 806,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 807,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 808,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 809,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 810,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 811,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 812,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 813,             /* opt_Typename  */
  YYSYMBOL_Typename = 814,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 815,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 816,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 817,            /* ConstTypename  */
  YYSYMBOL_GenericType = 818,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 819,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 820,                  /* Numeric  */
  YYSYMBOL_opt_float = 821,                /* opt_float  */
  YYSYMBOL_Bit = 822,                      /* Bit  */
  YYSYMBOL_ConstBit = 823,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 824,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 825,         /* BitWithoutLength  */
  YYSYMBOL_Character = 826,                /* Character  */
  YYSYMBOL_ConstCharacter = 827,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 828,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 829,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 830,                /* character  */
  YYSYMBOL_opt_varying = 831,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 832,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 833,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 834,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 835,             /* year_keyword  */
  YYSYMBOL_month_keyword = 836,            /* month_keyword  */
  YYSYMBOL_day_keyword = 837,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 838,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 839,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 840,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 841,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 842,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 843,             /* opt_interval  */
  YYSYMBOL_a_expr = 844,                   /* a_expr  */
  YYSYMBOL_b_expr = 845,                   /* b_expr  */
  YYSYMBOL_c_expr = 846,                   /* c_expr  */
  YYSYMBOL_d_expr = 847,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 848,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 849,              /* struct_expr  */
  YYSYMBOL_func_application = 850,         /* func_application  */
  YYSYMBOL_func_expr = 851,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 852,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 853, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 854,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 855,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 856,            /* filter_clause  */
  YYSYMBOL_export_clause = 857,            /* export_clause  */
  YYSYMBOL_window_clause = 858,            /* window_clause  */
  YYSYMBOL_window_definition_list = 859,   /* window_definition_list  */
  YYSYMBOL_window_definition = 860,        /* window_definition  */
  YYSYMBOL_over_clause = 861,              /* over_clause  */
  YYSYMBOL_window_specification = 862,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 863, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 864,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 865,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 866,             /* frame_extent  */
  YYSYMBOL_frame_bound = 867,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 868, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 869,            /* qualified_row  */
  YYSYMBOL_row = 870,                      /* row  */
  YYSYMBOL_dict_arg = 871,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 872,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 873, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 874,                  /* map_arg  */
  YYSYMBOL_map_arguments = 875,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 876,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 877, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 878,                 /* sub_type  */
  YYSYMBOL_all_Op = 879,                   /* all_Op  */
  YYSYMBOL_MathOp = 880,                   /* MathOp  */
  YYSYMBOL_qual_Op = 881,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 882,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 883,              /* subquery_Op  */
  YYSYMBOL_any_operator = 884,             /* any_operator  */
  YYSYMBOL_c_expr_list = 885,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 886,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 887,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 888,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 889,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 890,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 891,            /* func_arg_expr  */
  YYSYMBOL_type_list = 892,                /* type_list  */
  YYSYMBOL_extract_list = 893,             /* extract_list  */
  YYSYMBOL_extract_arg = 894,              /* extract_arg  */
  YYSYMBOL_overlay_list = 895,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 896,          /* overlay_placing  */
  YYSYMBOL_position_list = 897,            /* position_list  */
  YYSYMBOL_substr_list = 898,              /* substr_list  */
  YYSYMBOL_substr_from = 899,              /* substr_from  */
  YYSYMBOL_substr_for = 900,               /* substr_for  */
  YYSYMBOL_trim_list = 901,                /* trim_list  */
  YYSYMBOL_in_expr = 902,                  /* in_expr  */
  YYSYMBOL_case_expr = 903,                /* case_expr  */
  YYSYMBOL_when_clause_list = 904,         /* when_clause_list  */
  YYSYMBOL_when_clause = 905,              /* when_clause  */
  YYSYMBOL_case_default = 906,             /* case_default  */
  YYSYMBOL_case_arg = 907,                 /* case_arg  */
  YYSYMBOL_columnref = 908,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 909,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 910,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 911,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 912,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 913, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 914,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 915, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 916,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 917,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 918,                /* target_el  */
  YYSYMBOL_except_list = 919,              /* except_list  */
  YYSYMBOL_opt_except_list = 920,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 921,          /* replace_list_el  */
  YYSYMBOL_replace_list = 922,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 923,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 924,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 925,      /* qualified_name_list  */
  YYSYMBOL_name_list = 926,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 927,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 928, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 929,                     /* name  */
  YYSYMBOL_func_name = 930,                /* func_name  */
  YYSYMBOL_AexprConst = 931,               /* AexprConst  */
  YYSYMBOL_Iconst = 932,                   /* Iconst  */
  YYSYMBOL_type_function_name = 933,       /* type_function_name  */
  YYSYMBOL_function_name_token = 934,      /* function_name_token  */
  YYSYMBOL_type_name_token = 935,          /* type_name_token  */
  YYSYMBOL_any_name = 936,                 /* any_name  */
  YYSYMBOL_attrs = 937,                    /* attrs  */
  YYSYMBOL_opt_name_list = 938,            /* opt_name_list  */
  YYSYMBOL_param_name = 939,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 940,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 941,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 942,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 943,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 944,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 945,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 946,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 947,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 948,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 949,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 950,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 951,            /* generic_reset  */
  YYSYMBOL_reset_rest = 952,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 953,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 954,                 /* set_rest  */
  YYSYMBOL_generic_set = 955,              /* generic_set  */
  YYSYMBOL_var_value = 956,                /* var_value  */
  YYSYMBOL_zone_value = 957,               /* zone_value  */
  YYSYMBOL_var_list = 958,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 959,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 960,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 961,               /* opt_tables  */
  YYSYMBOL_var_name = 962,                 /* var_name  */
  YYSYMBOL_table_id = 963,                 /* table_id  */
  YYSYMBOL_ViewStmt = 964,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 965          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  691
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   70783

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  516
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  450
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2067
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3451

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   748


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   510,   511,   500,     2,     2,
     505,   506,   498,   496,   509,   497,   507,   499,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   515,   508,
     492,   494,   493,   512,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   503,     2,   504,   501,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   513,     2,   514,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   495,   502
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   498,   498,   514,   526,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   575,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,   458,     7,    13,    19,    25,     9,    13,
      44,    45,    46,    50,    51,    55,    59,    60,    64,    70,
      75,    76,    77,    78,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     9,
      23,    29,    36,    42,    49,    59,    63,    71,    72,    73,
      77,    86,    95,   102,   103,   108,   120,   125,   150,   155,
     160,   166,   176,   186,   192,   203,   214,   229,   230,   236,
     237,   242,   243,   249,   250,   254,   255,   260,   262,   268,
     269,   273,   274,   277,   278,   283,     7,    16,    25,    46,
      47,    50,    54,     7,    14,    22,     9,    19,    29,    42,
      43,     7,    15,    23,    34,    35,    40,    41,    42,    46,
      47,    52,    56,    57,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     7,    14,     2,     9,    15,    21,    28,
      35,    45,    46,    47,     2,     7,    21,    36,    56,    57,
      84,    85,    86,    87,    88,    89,    93,    94,    99,   104,
     105,   106,   107,   108,   113,   120,   121,   122,   139,   146,
     153,   163,   173,   185,   193,   202,   220,   221,   225,   226,
     230,   239,   262,   276,   283,   288,   290,   292,   294,   297,
     300,   301,   302,   303,   308,   312,   313,   318,   325,   330,
     331,   332,   333,   334,   335,   336,   337,   343,   344,   348,
     353,   360,   367,   374,   386,   387,   388,   389,   393,   398,
     399,   400,   405,   410,   411,   412,   413,   414,   415,   420,
     440,   469,   470,   474,   478,   479,   480,   484,   488,   496,
     497,   502,   503,   504,   508,   516,   517,   522,   523,   527,
     532,   536,   540,   545,   553,   554,   558,   559,   563,   564,
     570,   581,   594,   608,   622,   636,   650,   673,   677,   684,
     688,   696,   701,   708,   718,   719,   720,   721,   722,   729,
     736,   737,   742,   743,     9,    19,    29,    39,    49,    59,
      69,    79,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   114,
     115,   116,   117,   118,   119,   124,   125,   130,   131,   132,
     137,   138,   139,   142,   143,     8,    20,    33,    46,    58,
      70,    86,    87,    91,    95,     7,     1,    30,    53,    54,
      59,    63,    68,    72,    80,    81,    85,    86,    91,    92,
      96,    97,   102,   103,   104,   105,   106,   107,   112,   120,
     124,   129,   130,   135,   139,   144,   148,   152,   156,   160,
     164,   168,   172,   176,   180,   184,   188,   192,   196,   200,
     204,   212,   218,   219,   220,   225,   229,    47,    48,    52,
      53,    68,    69,    76,    84,    92,   100,   108,   116,   127,
     128,   155,   160,   168,   184,   201,   218,   235,   236,   255,
     259,   263,   267,   271,   280,   290,   299,   308,   318,   328,
     339,   353,   370,   370,   374,   374,   378,   378,   382,   388,
     395,   399,   400,   404,   405,   419,   426,   433,   443,   444,
     447,   460,   461,   462,   466,   477,   485,   490,   495,   500,
     505,   513,   521,   526,   531,   538,   539,   543,   544,   545,
     549,   556,   557,   561,   562,   566,   567,   568,   572,   573,
     577,   578,   594,   595,   598,   607,   618,   619,   620,   623,
     624,   625,   629,   630,   631,   632,   636,   637,   641,   643,
     659,   661,   666,   669,   677,   681,   685,   689,   693,   697,
     704,   709,   716,   717,   721,   726,   730,   734,   742,   749,
     750,   755,   756,   760,   761,   766,   768,   770,   775,   795,
     796,   798,   803,   804,   808,   809,   812,   813,   838,   839,
     844,   848,   849,   853,   854,   858,   859,   860,   861,   862,
     866,   879,   886,   893,   900,   901,   905,   906,   910,   911,
     915,   916,   920,   921,   925,   926,   930,   941,   942,   943,
     944,   948,   949,   954,   955,   956,   965,   971,   980,   981,
     994,   995,   999,  1000,  1004,  1005,  1011,  1017,  1025,  1034,
    1042,  1051,  1060,  1064,  1069,  1079,  1092,  1093,  1096,  1097,
    1098,  1101,  1109,  1119,  1120,  1123,  1131,  1140,  1144,  1151,
    1152,  1156,  1165,  1169,  1194,  1198,  1211,  1225,  1240,  1252,
    1265,  1279,  1293,  1306,  1321,  1340,  1346,  1351,  1357,  1364,
    1365,  1373,  1377,  1381,  1387,  1394,  1399,  1400,  1401,  1402,
    1403,  1404,  1408,  1409,  1421,  1422,  1427,  1434,  1441,  1448,
    1480,  1491,  1504,  1509,  1510,  1513,  1514,  1517,  1518,  1523,
    1524,  1529,  1533,  1539,  1560,  1568,  1581,  1584,  1588,  1588,
    1591,  1592,  1594,  1599,  1606,  1611,  1617,  1622,  1628,  1634,
    1640,  1649,  1651,  1654,  1658,  1659,  1660,  1661,  1662,  1663,
    1668,  1688,  1689,  1690,  1691,  1702,  1716,  1717,  1723,  1728,
    1733,  1738,  1743,  1748,  1753,  1758,  1764,  1770,  1776,  1783,
    1805,  1814,  1818,  1826,  1830,  1838,  1850,  1871,  1875,  1881,
    1885,  1898,  1906,  1916,  1918,  1920,  1922,  1924,  1926,  1931,
    1932,  1939,  1948,  1956,  1965,  1976,  1984,  1985,  1986,  1990,
    1990,  1993,  1993,  1996,  1996,  1999,  1999,  2002,  2002,  2005,
    2005,  2008,  2008,  2011,  2011,  2014,  2016,  2018,  2020,  2022,
    2024,  2026,  2028,  2030,  2035,  2040,  2046,  2053,  2058,  2064,
    2070,  2101,  2103,  2105,  2113,  2128,  2130,  2132,  2134,  2136,
    2138,  2140,  2142,  2144,  2146,  2148,  2150,  2152,  2154,  2156,
    2158,  2161,  2163,  2165,  2168,  2170,  2172,  2174,  2176,  2181,
    2186,  2193,  2198,  2205,  2210,  2217,  2222,  2230,  2238,  2246,
    2254,  2272,  2280,  2288,  2296,  2304,  2312,  2320,  2324,  2340,
    2348,  2356,  2364,  2372,  2380,  2388,  2392,  2396,  2400,  2404,
    2412,  2420,  2428,  2436,  2456,  2478,  2489,  2496,  2510,  2518,
    2526,  2546,  2548,  2550,  2552,  2554,  2556,  2558,  2560,  2562,
    2564,  2566,  2568,  2570,  2572,  2574,  2576,  2578,  2580,  2582,
    2584,  2586,  2588,  2592,  2596,  2600,  2614,  2615,  2619,  2633,
    2634,  2635,  2642,  2646,  2650,  2653,  2664,  2669,  2671,  2682,
    2706,  2717,  2728,  2732,  2739,  2743,  2747,  2764,  2772,  2781,
    2785,  2792,  2800,  2808,  2819,  2839,  2875,  2886,  2887,  2894,
    2900,  2902,  2904,  2908,  2917,  2922,  2929,  2944,  2951,  2955,
    2959,  2963,  2967,  2977,  2986,  3008,  3009,  3013,  3014,  3015,
    3019,  3020,  3027,  3028,  3032,  3033,  3038,  3046,  3048,  3062,
    3065,  3092,  3093,  3096,  3097,  3105,  3113,  3121,  3130,  3140,
    3158,  3204,  3213,  3222,  3231,  3240,  3252,  3253,  3254,  3255,
    3256,  3270,  3271,  3274,  3275,  3279,  3289,  3290,  3294,  3295,
    3299,  3306,  3307,  3312,  3313,  3318,  3319,  3322,  3323,  3324,
    3327,  3328,  3331,  3332,  3333,  3334,  3335,  3336,  3337,  3338,
    3339,  3340,  3341,  3342,  3343,  3344,  3347,  3349,  3354,  3356,
    3361,  3363,  3365,  3367,  3369,  3371,  3373,  3375,  3389,  3391,
    3396,  3400,  3407,  3412,  3418,  3422,  3429,  3434,  3441,  3446,
    3454,  3458,  3464,  3468,  3477,  3488,  3489,  3493,  3497,  3504,
    3505,  3506,  3507,  3508,  3509,  3510,  3511,  3512,  3513,  3523,
    3527,  3534,  3541,  3542,  3558,  3562,  3567,  3571,  3586,  3591,
    3595,  3598,  3601,  3602,  3603,  3606,  3613,  3623,  3637,  3638,
    3642,  3653,  3654,  3657,  3658,  3661,  3665,  3672,  3680,  3688,
    3696,  3706,  3707,  3712,  3713,  3717,  3718,  3719,  3723,  3732,
    3740,  3748,  3757,  3772,  3773,  3778,  3779,  3789,  3790,  3794,
    3795,  3799,  3800,  3803,  3819,  3827,  3837,  3838,  3841,  3842,
    3845,  3849,  3850,  3854,  3855,  3858,  3859,  3860,  3870,  3871,
    3875,  3877,  3883,  3884,  3888,  3889,  3892,  3903,  3906,  3917,
    3921,  3925,  3937,  3941,  3950,  3957,  3995,  3999,  4003,  4007,
    4011,  4015,  4019,  4025,  4042,  4043,  4044,  4047,  4048,  4049,
    4052,  4053,  4054,  4057,  4058,  4061,  4063,  4068,  4069,  4072,
    4076,  4077,     7,    18,    19,    23,    24,    25,    26,    27,
       7,    26,    50,    73,    80,    85,    86,    87,    88,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     7,    16,    25,    34,    43,    52,     5,    12,
      22,    23,     7,    19,    33,     9,    16,    26,    33,    44,
      45,    50,    51,    52,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    90,    91,    92,    97,    98,   103,
     107,   115,   116,   121,   122,   123,   129,   134,   142,   143,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      86,    93,   103,   105,   111,   115,   119,   134,   141,   142,
     143,   147,   148,     7,    15,    22,    29,    36,    45,    46,
      48,    49,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,
      31,    35,    42,    53,    54,    60,    61,     9,    19,     7,
      18,    25,    34,    35,    39,    40,     2,     7,    12,    17,
      26,    33,    43,    44,    51,     3,    10,    17,    24,    31,
      38,    45,    52,    61,    61,    63,    63,    65,    66,    70,
      71,     6,     8,    21,    34,    47,    65,    87,    88,    89,
      90,    11,    24,    37,    54,    55,    56,    61,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
  "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept", "stmtblock",
  "stmtmulti", "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "qualified_name", "ColId", "ColIdOrString", "Sconst",
  "indirection", "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "secret_key", "secret_key_val", "scope_list_val_item", "scope_list_val",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "opt_enum_val_list",
  "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "DropSecretStmt", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3042)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1996)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6743,   -52,   132, -3042, -3042,   264,   -52, 48510, 63075,   -52,
      88,  1275, 50454, -3042,   276,  8471,   -52, 53370, 70261,   284,
     255, 30795,   444, 53856, 53856, -3042, -3042, -3042, 63075, 53370,
   54342,   -52,   326, 63561, -3042,   -52, 32739, 50940,   178, -3042,
   53370,    41,    97, 54828, 53370,  3531,   568,   104, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042,   335, -3042, -3042, -3042, -3042,   244, -3042, -3042, -3042,
   -3042, -3042,   154, -3042,   338,   158, 30795, 30795,    68,   328,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, 32253, -3042,
   -3042, -3042, -3042, 55314, 53370, 55800, 51426, 56286, -3042,   625,
   -3042,   167, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
     170, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042,   188, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042,   191, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042,   355,   201, -3042, -3042, -3042,
     305, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042,  3531, 53370,   826,   842,   531, 56772, 64047, -3042, -3042,
   53370, -3042, -3042,   593,   759, -3042, -3042, 51912, -3042, -3042,
   -3042,   791,   982,   750, -3042, -3042,   643, -3042,   330, -3042,
   -3042,   641,   701, -3042, -3042, -3042, -3042, 63075, -3042, -3042,
   -3042, -3042,   779, -3042, 67449, -3042, 64533, 57258, 57744, -3042,
     666,  2586,  7848, 70278, 29821, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042,   335, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, 53856, 63075, 53856,
     738,   751,  1064,   758, 31281,   781, 33226,   827,   858,  1185,
     863,   888,   929,   934,    97, 30308,   876,   355, -3042, 58230,
   58230,    -8,  4001, -3042, 58230, 58716, -3042,   950, -3042,   625,
   -3042, -3042, -3042,  1278, -3042,   417,   967, -3042, 59202, 59202,
   59202,   992,  1266, -3042, -3042, -3042,   980, -3042, -3042,  1191,
   19740, 19740, 65019, 65019,   625, 65019,  1006, -3042, -3042,    54,
   -3042, -3042, -3042,    68,   989,   355, -3042, -3042, 50940, -3042,
   -3042,   277,  1323, 19740, 53370,   994, -3042,  1005,   994,  1014,
    1025, -3042,  6743, -3042, 53370,  1351,  1253, 50940,   446,   446,
    1489,   446,   612,   622,  2060,  2803, -3042,  1974, -3042,  1051,
    1144,  1108,  1389, -3042,   989,  1466,   886,  1283,  1494,  4669,
    1502,   945,  1507,   974,  1621, 19740, 46080,   355, -3042, 11072,
    1157,  1161, -3042, -3042, -3042, -3042,  1001,  1407, -3042,  1409,
   -3042,  1167,  1643, -3042, -3042,  1228, 59688, 60174, 60660, 61146,
    1602, -3042, -3042,  1550, -3042, -3042, -3042,  1241, -3042, -3042,
   -3042,  1530,   146, -3042, -3042, -3042, -3042, -3042, -3042,  1263,
   -3042,  1263,  1263, -3042, -3042, -3042, -3042,  1220,  1220,  1411,
    1225, -3042, -3042, -3042,  1584, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042,  1230,   684, -3042,  1263, -3042,
    1220, -3042, -3042, -3042, -3042, -3042, -3042, -3042, 69819, -3042,
   -3042, -3042, -3042,   656,   743, -3042,  1234, -3042, -3042, -3042,
   -3042,   165,  1265, -3042,  1707, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042,  1272, -3042,  2828,  1220,  1645,  1280,   168,
   -3042,  1654,   169, -3042,  1663,  1534, 14138, -3042,  1468, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,    97, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042,   506, -3042, -3042, 43113, 70278,
    1397,  1316, -3042,  1656, 19740, 19740,  1319,  1944, 58230, 58716,
   19740, 53370, -3042, 19740, 24339,  1324, 19740, 19740, 11583, 19740,
   28849, 58230,  4001,  1326, -3042,   733, 53370,  1331, -3042,  1430,
    1430,   326, 30795,  1627, -3042,   961,  1623,  1555, -3042, 30795,
    1555,  1286,  1344,  1631,  1555, -3042,   687,  1636,  1430, 33712,
    1352, -3042,  1430,  1568, -3042, -3042, 53856, 43113, 14138, 67920,
    1820, -3042, -3042, -3042, -3042,  1630, 63075,  1357, -3042, -3042,
   -3042, -3042, -3042, -3042,   786,  1858,   140,  1861, 19740,   140,
     140,  1363,   202,   202, -3042,  1364, -3042,   205,  1365,  1366,
    1869,  1873,   181,   144,   684,   140, 19740, -3042,   202,  1375,
    1898,  1387,  1899,   147,   177, -3042,   207, 19740, 19740, 19740,
    1762, 19740, 10561,  1904, 46080, -3042, 53370,   496, -3042,   355,
    1415,   625, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
     182,  7531, -3042, -3042, -3042, -3042,  1449, -3042, -3042, -3042,
   -3042,  1629, 19740, -3042, -3042,  1419,  1627, -3042,   212, -3042,
   -3042,  1627, -3042, -3042, -3042, -3042, -3042,   235,  1827, 42141,
   42627, 63075,   355, -3042, 65505, -3042, -3042, -3042, -3042, -3042,
   -3042,   570, -3042,   335, 44681,  1421,  1416,   994, 53370, 53370,
    1891, -3042, -3042, -3042,  1005, 50940,    63,  1720,  1557, -3042,
   -3042,    68,    68, 15141,  1625,   190,   869, 15652, 20251,  1775,
    1659,   600,   844,  1778, -3042,  1664,  1884, 24339, 19740, 19740,
     612,   622, 19740, -3042, -3042, -3042,  1721, 53370, 48996,   976,
     979,  1446,  1532,  1450,    32,  1865, -3042,  1451, -3042,  1537,
   53370, 69819,   137, -3042,  1903,   137,   137,   669,  1905,  1548,
     285,  1712,    29,   -98,  2618, -3042,  1451, 50940,   145,    33,
    1451, 53370,  1552,   780,  1451, 63075,  1316, 40079,  1460, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,   164,
   14138, -3042,  1072,  1255,  1291,   354,   134,  1367,  1372, 14138,
    1404,  1412,   166,  1453,  1556,  1571,  1634,  1639,  1644,  1667,
    1672,   160,  1678,  1680,  1692,  1697,  1710,  1724, -3042,  1741,
     184,  1743,   189, 14138,  1750, -3042,   187, -3042, 44681,    24,
   -3042, -3042,  1754,  1558, 63075,  1510, 53370, 63075,   679,  1832,
    1885,  1837, 63075, 68391, 53370,  1718,  2618,  1719,  1484,  1950,
    1723,  1161,  1725,  1487, -3042, 65991,  1992, -3042,  1852, -3042,
   -3042, -3042, -3042, -3042,  1498, -3042, -3042, 19740, -3042, -3042,
   -3042,  2000, -3042, 67920, 67920,  1263,  1263, -3042, -3042,  1971,
    1597,  1600,  2000, -3042,  2000, -3042, 63075, -3042, -3042, 67920,
   -3042, 63075,  1517,  1519,  2000, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042,  2000,  1603, -3042,  1604,  1605,  1606, -3042, -3042, -3042,
   -3042, -3042, 63075, 46080,  1521, 63075, -3042, 53370, 53370, -3042,
   53370, 63075, -3042,   680, 44681,  2016,   995, 70278, 47538, -3042,
   -3042, -3042, -3042,  1009,  1166, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042,   625, 46080, -3042,  2102, 53856, 43716,
    1524, 19740, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042,  1527,  1868, -3042, -3042,  5597,  1536, 43756,  1539,
   24339, 24339,   355,   267, -3042, -3042, 24339,  1540, 48024, 43636,
    1538,  1544, 44102, 16163, 19740, 16163, 16163, 44142, -3042,  1547,
   44182, 58230,  1533, 53370, 52398, -3042, -3042, -3042, 19740, 19740,
    4001, 52884,  1579, -3042, 30795, -3042,  1836, 30795, -3042, -3042,
    2733, -3042, 30795,  1842, 19740, 30795, -3042,  1782,  1788,  1559,
   30795, -3042, 53370,  1561, 53370, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042,  1562,   721, -3042,   770,  1902, -3042, -3042,
   19740, 19740, -3042, 44681,  1607, 19740, -3042, 19740, 45114, 38573,
   16674, 45114,  2057,  2057, 36142, -3042,  1727, 44222, -3042,  1569,
    2005,  7003,  1565, -3042, -3042,  1567, -3042,  1575,  1573, 40683,
     208,   355,   355, 19740, -3042, 19740,  2951,  2951, -3042,   192,
   67920, 19740, 19740, 19740, 19740, 19740, 19740, 19740, 19740, 45594,
    1666,   173, 63075, 19740, 19740,  1583,  1726, -3042, 19740,  1816,
   -3042,  1586, 19740,  1671,   866, 19740, 19740, 19740, 19740, 19740,
   19740, 19740, 19740, 19740, -3042, -3042, 26875,   199,   645,  1917,
    1936,   -38,   400, 19740,  1928, 11072, -3042,  1928, -3042, -3042,
   -3042, -3042, -3042,   215, -3042, -3042, -3042,  1562, -3042,  1562,
   -3042, 63075, -3042, 53370,   277, 49968, 19740, -3042, -3042,  1587,
    1594,   112, -3042,  1657, -3042, -3042, 53370, 36628,  1888, -3042,
     311,  1596, -3042, 43596,  1847,  1888,    68, -3042, -3042, 25361,
    1729,  1890,  1825, -3042, -3042,  1809,  1812, -3042,  1610, 44753,
   20762, 20762, -3042,  1356, 44681,  1413, -3042, -3042, -3042, -3042,
   -3042, -3042,    52, -3042, 53370,   477, 34198, -3042,  1611,    89,
   -3042,  1203,  1945,  1908,  1775,   844,  1633, -3042,   990,  1637,
   66477, 53370,  1913,  1875,  1925,  -126, 67920, -3042, -3042, -3042,
   -3042, 53370, 63075, 61632, 66963, 46566, 53370, 46080, -3042, -3042,
   -3042, -3042, 53370,   797, 53370,  4901, -3042, -3042, -3042,   137,
   -3042, -3042, -3042, -3042, -3042, 63075, 53370, -3042, -3042,   137,
   63075, 53370,   137, -3042,  1701, 53370, 53370, 53370, 53370,  1794,
   53370, 53370, -3042, -3042, -3042, 21273,    34,    34,  1860, 12094,
     131, -3042, 19740, 19740,  1830, -3042, -3042,   774,  1872,   103,
   -3042,  1653,  1704, 53370, 53370, 53370, 53370, 53370,  2857, -3042,
   -3042, -3042, -3042, -3042, 63075, 37600, -3042,   803,  1655, -3042,
    1665,  2020,  2618, -3042,  2023, 49482,   847,  2870,  2024,  1708,
    2026, 12605,  2124,  1910, -3042, -3042,  1915, -3042, -3042, 19740,
    1676,  1685,   165,   819, -3042, -3042,  1683,  1519,  1711,  1715,
    1698,  1699, 67920,   821, -3042,   840,  2000,   159,  1700,  1702,
    1529,  1426,   157,  1422,   168, -3042, 46080, -3042,   169, -3042,
    1929,   213, -3042, 14138, 19740, -3042, -3042, -3042, -3042, -3042,
   -3042,  1316, 27372, -3042,   853, -3042, -3042,  2174,   625,  2174,
     737, -3042, -3042,  2174, -3042,  2156,  2174, -3042, -3042, 67920,
   -3042,  8128, -3042, 19740, 19740, -3042, 19740,  2049, -3042,  2209,
    2209, 67920, 24339, 24339, 24339, 24339, 24339, 24339,   219,  1375,
   24339, 24339, 24339, 24339, 24339, 24339, 24339, 24339, 24339, 25872,
     483, -3042, -3042,   864,  2182, 19740, 19740,  2062,  2049, 19740,
   -3042, 67920,  1734, -3042,  1735,  1736, 19740, -3042, 67920, -3042,
   53370,  1739,   -11,   -15, -3042,  1728,  1730, -3042,  1627, -3042,
     986,   998, 53370,  2412,  3126,  3680, -3042, -3042, 19740,  2050,
    2733, 30795, -3042, 19740,  1742, -3042, -3042, 30795,  2063, -3042,
   -3042, -3042, 34684,  2733, 67920,   870, -3042, 53370, 67920,   881,
   43113, -3042, 14138, -3042, 67920, -3042, -3042, -3042, -3042, -3042,
   -3042,  1740,  1745, 19740,    91, -3042,  8273,  3449, -3042,  1722,
   -3042,  1746, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042,  1744, -3042,  1749,
   -3042,  1751, 53370, -3042, 21784, -3042, 63075, -3042, -3042, 19740,
   19740, 53370, -3042,  1762, -3042,  1753,  8371, -3042, -3042, -3042,
     246,  1012, 44801,   400,  6188,  6188,  6188, 45114, -3042, -3042,
   -3042,  1774, -3042, 24339, 24339, -3042,  4962,  1829, 10561, -3042,
   -3042,  2065, -3042,  1087, -3042,  1764, -3042, -3042,  5245, -3042,
   38573, 45038, 19740,   179, -3042, 19740,  1583, 19740,  1808,  6188,
    6188,  6188,   288,   288,   246,   246,   246,  1012,   400, -3042,
   -3042, -3042,  1765, 19740, 46080, -3042,  1770,  1771,  2126,  1387,
   19740, -3042, -3042, 30795,  1579,    24,  1579,  2000,  2951, -3042,
    1005, -3042, -3042,  1005, 44681, 53370, -3042, -3042,  2033,  1776,
   30795,  1818,  2243,  2227, 63075, -3042, -3042,  1780,  1928,  1793,
   -3042, -3042,  1801, 19740,  2169,  1801, -3042,  1888,     9,  2008,
    1173,  1173,  1356,  2009, -3042, -3042,  1851, -3042, -3042, -3042,
   19740, 13116,  1440, -3042,  1442, -3042, -3042, -3042, -3042, -3042,
    1787, -3042,  2058, -3042, 53370, -3042, -3042, 24339,  2239, 19740,
   35170,  2240,  2041, -3042, -3042, -3042,  1881,  1451, 19740,  2035,
   -3042,   142,  1799,  2157,   346,  2108, 63075, -3042,   265,   413,
   -3042,   193,  2159,   213,  2160,   213, 46080, 46080, 46080,   913,
   -3042, -3042, -3042,   625, -3042,  -133,   946, -3042, -3042, -3042,
   -3042,  1889,   794,  2618,  1451, -3042, -3042, -3042, -3042, -3042,
   -3042, -3042,   216,   988,  1451,  1893, -3042,  1894, -3042,  1895,
    1041,  1451, -3042, -3042,  9024, 44681,   635,   131,   131,   131,
   14138, -3042,  2034,  2044,  1814, 44681, 44681, -3042,   203, -3042,
   63075, -3042, -3042, -3042,  1830,  1885, 63075, 53370,  2618,  1819,
    2281,  1161,  1487, -3042,  1987,   485,  1828, -3042,  2329, -3042,
   -3042, 63075,   150, -3042, 63075, 53370, 53370, 53370, 62118, -3042,
   -3042, -3042,  1831,  1826, -3042,     3,  2055,  2056, 53370,  1871,
   53370,  1450,  2300, 53370, -3042,   947, 17185,  2194, 53370,  1839,
   -3042, -3042, -3042, -3042,  2000, -3042, -3042,   605,   605, -3042,
   -3042, 63075, -3042,  1843, -3042,  1845, -3042, -3042, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, 63075, -3042,
   -3042, 44681, -3042, -3042, 47052, -3042, -3042, -3042, -3042, -3042,
   46080, -3042,   625, -3042,   625,  2073, 63075, 41169,   625, 41655,
     625,  1844, -3042, 44681, 39067, 44681,  2062, -3042,   200,  2209,
    3865,  3865,  3865,  1251,  2184,   269,  1848,  3865,  3865,  3865,
     243,   243,   200,   200,   200,  2209,   483,   950, 48024,  1849,
   -3042, 44681, 44681, -3042, -3042,  1846, -3042, -3042, -3042, -3042,
    1850,  1853, -3042, -3042, -3042, -3042, -3042, -3042, 63075,  1174,
    1579,   178,   178,   178,   178, -3042, 53370, 53370, 53370, 44681,
    2298,  2179, -3042,  2733, 44681, 53370, -3042, 28359, 53370, -3042,
    2200, -3042,  2286, -3042, 53370,   951, -3042, -3042, -3042, -3042,
   -3042, 44286, 19740, -3042,  2229, -3042, 19740, 19740, -3042, 38573,
   -3042, -3042,  1864, 10561, 44609, -3042,  2172, 39107, 44681, -3042,
    1727, -3042,  2951, 19740,  2666,  3586, 19740,  1866, 19740,  2204,
   -3042, -3042,  1874, -3042, -3042, 67920, 19740,  1867,  5334, 24339,
   24339,  6270, -3042,  6913, 19740, 10561, -3042, 40119,  1862,  1877,
    1860, 17696, -3042,  2082,  1882, -3042,  2050,   131,  2050,  1880,
   -3042, -3042, -3042, -3042,  1902, -3042, 19740,  2029, 63075,    81,
    2457,   956, -3042,   355, 36628,  1818, 19740,   665, -3042, -3042,
    1879, -3042,  1801, -3042, -3042, -3042,  2103, -3042, -3042, -3042,
   53370, -3042,  1892, -3042, 34198,  2218, 10561, -3042, 34198, 53370,
   53370, 39147,  2247, -3042, 63075, 63075, 63075, -3042, 63075,  1900,
    1896,   762,  1911,   857, -3042,  2523,   762,  2225,   337,  1450,
     285,  4521,   249, -3042, -3042, -3042,  1967, 53370, -3042, 63075,
   -3042, -3042, -3042, -3042, -3042, 46566, -3042, -3042, 38086, 46080,
   -3042, 46080, 53370, 53370, 53370, 53370, 53370, 53370, 53370, 53370,
   53370, 53370, 19740, -3042, 19740,  1897,  1912,  1918,  1860, -3042,
   -3042, -3042, -3042, -3042, -3042,   -98, -3042,   203,   975,  1916,
   -3042, 49482,  3531,  1708,  2361,  1885,   624, 62589, 63075, -3042,
   -3042,   683, -3042, -3042,  1921,  1901,   977,  2618,  1923,  2377,
   -3042,   847, 49482, -3042, -3042, -3042,  2348, -3042,   666,   241,
   -3042,  1161, -3042,  3531,  1487, -3042,  3531, 44681, 63075,  1988,
   -3042,  1519,  1930, -3042, -3042,  1519, 67920,  1519, -3042, -3042,
     213,  1019, -3042, -3042, -3042, -3042, -3042, 63075,  1931, -3042,
    1931, -3042, -3042,  1931, -3042, -3042, -3042, -3042, 24339,  2271,
    1938, 67920, -3042, -3042, 53370, -3042, -3042, -3042,  1033,  1939,
    2050, 53370, 53370, 53370, 53370, -3042, -3042, -3042, 18207, 19740,
    1978, -3042,  1940, 14649,  2256, -3042, 27869, -3042,   218,  1949,
   34684, 63075, -3042, -3042, -3042, 19740, 44681, -3042, 44681, -3042,
   -3042, -3042,  7941, -3042,  1942,  1953, 63075, 19740, -3042, -3042,
   -3042,   843, 19740, 19740,  4962, -3042,  6446, 19740, 67920,  1049,
    4962,   230, 19740,  3833,  4578, 19740, 19740,  6982, 39187, -3042,
   22295, 13627, -3042,  1957, 19740, 39227, 37114, -3042, 30795,  2179,
    1959,  2179,   625,  1960, 44681, 19740, -3042, -3042, -3042, -3042,
    2003,   392, 32739,  2185, -3042,  1973, 63075, -3042,  2029, 44681,
   -3042, -3042, 38573, -3042, -3042, -3042, -3042, -3042,  2410,  1508,
    1964,  1966, -3042,  1353, -3042, -3042, 63075,  1968, -3042,  1969,
     762, -3042, 63075,  2010, -3042,   239,  2276,   100, -3042, 19740,
   -3042,  2365,  2440,  2523,  1977, 63075, 53370, 24339, -3042,   693,
     217, -3042,  2261, 53370,  2010,  2398, -3042, -3042, -3042,   857,
   -3042,  2299,  2212, -3042,   137, -3042, 19740,   857,  2214,   240,
   63075, -3042, -3042,  1878, -3042, 67920,   213,   213, -3042,  1981,
    1983,  1985,  1986,  1989,  1991,  1994,  1997,  2006,  2007,  2011,
   -3042,  2013,  2014,  2017,  2019,  2021,  2022,  2025,  2028,  1230,
    2030, -3042,  2032,  1879,  2036,  2037,  2039,  2040,  2043, 68862,
    2046,  2051,  2052,  2053,  1234,  2061,  1009,  1166, -3042, -3042,
   -3042, -3042,  2064, -3042, -3042, -3042,  1280,  2001, -3042, -3042,
   -3042,  2078, -3042,  2094, -3042, -3042, -3042, -3042, -3042,  2027,
    2038, -3042, -3042, -3042,   131,  1316,   128, -3042, 63075,  2066,
    1871,  2483, 18718,   754,  2259,  2031,  1055, -3042,  2329, -3042,
     625,  1708, -3042, 49482,  3217,   690,  2056, -3042,   245,  1871,
   -3042,  2436,  1708,  2089,  2517, -3042,  2280, 63075,  2059, -3042,
   -3042, -3042, -3042, 47052,  1931,  1282, 24339, 67920,  1083,  1084,
   -3042,  2564,  2231,  2179, -3042, -3042, -3042, -3042, -3042,  2071,
     -39,  2075, 10050,  2069, -3042, -3042, -3042, -3042, -3042, -3042,
   44681, 44681, 63075,  2253, -3042, -3042,  2074,  2076, 35656,  2525,
    2079, -3042, 14138, -3042,  2392, -3042, 29335, -3042, 44681, 19740,
   -3042, -3042, 40159,  2400,  4962,  4962,  6446,  1088, -3042,  4962,
   19740, 19740,  4962,  4962, 19740, -3042,  9537,   652, -3042,  1115,
   -3042, 39573, -3042, 69333, -3042, -3042,  1978,   625,  1978, -3042,
   -3042,  2080, -3042, -3042, -3042,  2138, -3042, -3042,  1116,  2502,
    2029, 19740, -3042, -3042,  2086, 34198, -3042, -3042, -3042, -3042,
   34198,   762, -3042,  2260,  2010,  2091, -3042, -3042, -3042, -3042,
   -3042, -3042, 39613, -3042,    78, 19740, -3042,   457,  1251, -3042,
   -3042, -3042, -3042,  2010,  1161, -3042, 53370,  2558,  2456, -3042,
   -3042, 44681, -3042, -3042,  2000,  2000, -3042, -3042,  2286, -3042,
   -3042, -3042, -3042,  1280,    55, 38086, 53370, 53370, -3042, -3042,
    2099, -3042, -3042,   -98,  2487,  1121,   847, -3042,  3531,  3531,
   44681, 53370,  2461, 49482, -3042, -3042, -3042,  2571,  2107, 53370,
    1871,   822,   822, -3042,  2258, -3042,  2262, -3042, -3042,  2575,
     281, -3042, 19229, 53370, -3042, -3042, 31767, -3042,  1282,  1126,
   -3042, -3042,  2113,  2115, -3042,  1978, 19740,  2117, 19740, -3042,
   22806,  2583,  2118, -3042, 19740,  2181, 26383, -3042, 19740, -3042,
   53370, 58230,    34,  2121, 58230, -3042, -3042, -3042, 19740, -3042,
    4962,  4962,  4962, 19740, -3042, 19740, -3042, -3042, -3042,  2328,
    2253, -3042,  2253, 19740,  3531,   355,  3519, 63075,   -33, -3042,
   44681, -3042, -3042, -3042, 53370, -3042, 46080, -3042,   762,   -89,
    2127, 19740, 39653,  2362, -3042, -3042,  2390, -3042,  2451, -3042,
    2192,   441,  2210, -3042, -3042, -3042, -3042,  1316,   625,  1708,
    2056,  2089, -3042,  2136, 53370,  3531,   847,   666, -3042, -3042,
   -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042,  3531,  2572,  2357,  2574,  3531, 44681,  1988, 19740,    83,
   -3042,  1127,  2570, -3042, -3042,  2640,  2253,  2144, 22806,  2146,
   -3042,  2148, 63075, 44681,  2294, -3042, -3042,  2150, -3042, -3042,
     131, 19740, -3042, 40200,  2153,  2155,  2601,  1860,  2181,  2181,
   -3042,   392, -3042, -3042,  2573, 31767,  2544,  1161,   762,  2186,
    1128, -3042, -3042, -3042, -3042, -3042,  2618, -3042, 39693,  2409,
     186,  2401,  2127, 19740, -3042,  2257, -3042, -3042, -3042,  2650,
   -3042, -3042, 49482,  2188,  2089,  2056,  1871,  2089,  2405, -3042,
    2408, -3042,  2191, 39733, 63075, 63075,  1708, 31767, 63075,  2193,
    2181, -3042,  2197, -3042, -3042, -3042, 52398, -3042,  2198,  2201,
   -3042, -3042, -3042, 19740,   549, -3042, -3042,  2245, 53370,  1135,
      21,  2390, 38086, -3042, 46080,  1410,   -89,  2498, -3042, -3042,
   -3042, -3042,   301,  2429, -3042,  2430, -3042, 44681, -3042,  3531,
   49482, -3042, -3042, -3042, -3042, -3042, -3042, 31767,  2570, -3042,
     311, -3042,  1579, -3042,   311, -3042, -3042, -3042, -3042,   625,
   -3042,  1538, 23317, 23317, 23317,  2208,  3531, -3042,  1579, -3042,
    2337,  2401, -3042, -3042, -3042, -3042, -3042,   514,   514,  2599,
   -3042,  2277, -3042,  2089,  1137, 63075,  1801, -3042,  1801, 24850,
    2368,   153, 43676,  2576, -3042,  2576,  2576, -3042, -3042, -3042,
   36628, -3042, -3042,  2703, -3042,   195, -3042, -3042, -3042,  1708,
     311, -3042, -3042,  2693, -3042, -3042, -3042, -3042, -3042,   151,
   -3042, -3042, -3042,  1579,   762, -3042, -3042, -3042,  1579,  1801,
   23828,  2374, -3042,  2442, -3042, -3042, -3042, -3042, -3042, -3042,
   -3042
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     154,   263,     0,  1342,  1341,  1413,   263,     0,  1291,   263,
     484,   401,     0,  1434,  1413,     0,   263,     0,   154,     0,
       0,     0,     0,     0,     0,   544,   547,   545,     0,     0,
       0,   263,   584,     0,  1433,   263,     0,     0,   576,   546,
       0,  1393,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    24,    23,    25,
      26,  1300,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,   520,   507,   589,   519,     0,     0,   153,   688,
     527,    36,    37,    38,    39,    40,    41,    42,  1432,    43,
     262,   261,   255,     0,     0,     0,     0,     0,  1412,     0,
     256,   110,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,
    1466,  1467,  1468,  1826,  1469,  1470,  1471,  1472,  1473,  1827,
    1474,  1475,  1476,  1772,  1773,  1828,  1774,  1775,  1477,  1478,
    1479,  1480,  1481,  1482,  1483,  1484,  1776,  1777,  1485,  1486,
    1487,  1488,  1489,  1778,  1829,  1779,  1490,  1491,  1492,  1493,
    1494,  1830,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,
    1503,  1831,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1513,  1780,  1781,  1514,  1515,  1516,  1517,  1518,  1519,
    1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,
    1540,  1541,  1782,  1542,  1543,  1544,  1545,  1546,  1783,  1547,
    1548,  1549,  1784,  1550,  1551,  1552,  1832,  1833,  1553,  1554,
    1785,  1835,  1555,  1556,  1786,  1787,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1565,  1836,  1566,  1567,  1568,  1569,
    1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,  1837,  1788,
    1578,  1579,  1580,  1581,  1582,  1789,  1790,  1791,  1583,  1838,
    1839,  1584,  1840,  1585,  1586,  1587,  1588,  1589,  1590,  1591,
    1841,  1592,  1842,  1593,  1594,  1595,  1596,  1597,  1598,  1599,
    1600,  1792,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,
    1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,
    1793,  1844,  1794,  1619,  1620,  1621,  1795,  1622,  1623,  1845,
    1624,  1796,  1625,  1797,  1626,  1627,  1628,  1629,  1630,  1631,
    1632,  1633,  1634,  1635,  1798,  1846,  1636,  1847,  1799,  1637,
    1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
    1648,  1800,  1848,  1649,  1650,  1801,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1802,  1663,
    1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
    1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1849,  1682,
    1683,  1684,  1803,  1685,  1686,  1687,  1688,  1689,  1690,  1691,
    1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,
    1702,  1703,  1804,  1704,  1705,  1706,  1850,  1707,  1708,  1805,
    1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,
    1719,  1720,  1721,  1806,  1722,  1807,  1723,  1724,  1725,  1726,
    1852,  1727,  1728,  1729,  1730,  1731,  1732,  1808,  1809,  1733,
    1734,  1810,  1735,  1811,  1736,  1737,  1812,  1738,  1739,  1740,
    1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,
    1751,  1752,  1753,  1754,  1813,  1814,  1755,  1853,  1756,  1757,
    1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,
    1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1825,  1768,  1769,  1770,  1771,     0,   111,   112,  1239,  1441,
       0,  1217,   110,  1785,  1792,  1806,  1289,  1290,   111,   258,
     483,     0,     0,     0,     0,     0,     0,   204,   395,   394,
       0,  1280,   400,     0,     0,   114,   106,  1651,   113,  1216,
     104,  1412,     0,     0,   421,   422,     0,   431,     0,   414,
     419,   415,     0,   440,   433,   441,   423,     0,   413,   434,
     424,   412,     0,   442,     0,   417,     0,     0,     0,   259,
     222,   401,     0,   154,     0,  1304,  1305,  1306,  1307,  1308,
    1309,  1314,  1310,  1311,  1312,  1313,  1315,  1316,  1317,  1318,
    1319,  1295,  1300,  1320,  1321,  1322,  1323,  1324,  1325,  1326,
    1327,  1328,  1329,  1330,  1331,  1332,  1333,     0,  1291,     0,
       0,  1778,  1829,  1783,     0,  1796,     0,  1799,  1800,  1685,
    1807,  1810,  1811,  1812,  1813,     0,   756,   113,   108,   740,
       0,   522,   692,   702,   740,   745,  1007,   768,  1008,     0,
     115,  1379,  1378,  1374,  1373,   193,  1254,  1421,  1555,  1595,
    1702,  1808,  1733,  1437,  1422,  1416,  1420,   260,   583,   581,
       0,  1188,  1555,  1595,  1689,  1702,  1808,  1350,  1354,     0,
     257,  1439,  1426,     0,  1427,   113,   528,   575,     0,   264,
    1392,     0,  1397,     0,  1665,   555,   558,  1248,   556,   520,
       0,     1,   154,  1299,  1407,     0,   160,     0,   579,   579,
       0,   579,     0,   512,     0,     0,   520,   515,   519,   689,
    1436,  1808,  1733,  1425,  1428,  1564,     0,     0,  1564,     0,
    1564,     0,  1564,     0,  1415,  1172,     0,  1218,   116,     0,
       0,   366,   399,   398,   397,   396,   401,  1564,  1264,  1564,
     205,     0,     0,   451,   452,     0,     0,     0,     0,     0,
    1275,   107,   105,     0,  1410,   429,   430,     0,   420,   416,
     418,   253,     0,  1240,  1854,  1855,  1856,   811,  1857,   840,
     818,   840,   840,  1858,  1859,  1860,  1861,   807,   807,  1529,
     820,  1862,  1863,  1864,  1564,  1865,  1866,   808,   809,   845,
    1867,  1868,  1869,  1870,  1871,     0,     0,  1872,   840,  1873,
     807,  1874,  1875,  1876,   812,  1877,   778,  1878,     0,  1879,
     810,   779,  1880,   848,   848,  1881,     0,   835,  1882,  1241,
    1242,   439,     0,   443,   793,   794,   795,   796,   821,   822,
     797,   827,   828,   832,   798,   880,   807,  1564,  1243,   439,
     435,  1564,   439,  1210,  1564,     0,     0,   214,     0,  1297,
    1334,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1892,
    1891,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,
    1914,  1912,  1913,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1929,  1928,  1930,  1931,
    1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1941,
    1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,
    1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    1962,  1963,  1335,  1336,  1348,     0,  1349,  1339,  1303,   154,
       0,   482,  1288,  1375,     0,     0,     0,  1128,   740,   745,
       0,     0,   758,     0,  1143,     0,  1149,     0,     0,     0,
     740,   527,     0,   702,   757,   109,     0,   738,   739,   630,
     630,   584,     0,   565,   750,     0,     0,   753,   751,     0,
     753,     0,     0,     0,   753,   749,   710,     0,   630,     0,
     738,   741,   630,     0,   760,  1294,     0,     0,     0,     0,
       0,  1419,  1417,  1418,  1423,     0,     0,     0,  1220,  1222,
    1223,  1096,  1233,   993,     0,  1773,  1774,  1775,  1164,  1776,
    1777,  1779,  1780,  1781,   947,  1782,  1231,  1784,  1786,  1787,
    1789,  1790,  1791,  1792,  1793,  1794,     0,  1232,  1797,  1631,
    1802,  1803,  1805,  1808,  1809,  1230,  1814,     0,     0,     0,
    1199,  1119,     0,     0,     0,   992,     0,  1165,  1173,   988,
       0,     0,   801,   802,   823,   824,   803,   829,   830,   804,
       0,  1195,   881,   976,  1183,   995,  1026,   997,  1006,   984,
    1063,   977,     0,   987,   979,  1191,   565,  1189,     0,   980,
    1219,   565,  1187,  1353,  1351,  1357,  1352,     0,     0,     0,
       0,     0,   109,  1399,  1400,  1391,  1389,  1390,  1388,  1387,
    1394,     0,  1396,  1300,  1114,  1116,     0,   557,     0,     0,
       0,   510,   509,     3,  1248,     0,     0,     0,     0,   577,
     578,     0,     0,     0,     0,     0,     0,     0,     0,   673,
     604,   605,   607,   670,   674,   682,     0,     0,     0,     0,
       0,   516,     0,  1435,  1431,  1429,     0,     0,     0,   138,
     138,     0,     0,     0,     0,     0,    98,    47,    91,     0,
       0,     0,     0,   236,   249,     0,     0,     0,     0,     0,
     246,     0,     0,   229,   223,   225,    49,     0,   138,     0,
      45,     0,     0,     0,    51,     0,   482,  1171,     0,   120,
    1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
    2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  2057,  2058,  2059,  2060,  2061,  2062,  1950,  2063,  2064,
    2065,  2066,  2067,   118,   119,   122,   121,   123,   117,   110,
       0,  1964,  1826,  1827,  1828,  1829,  1779,  1830,  1831,     0,
    1832,  1833,  1785,  1835,  1836,  1837,  1838,  1839,  1840,  1841,
    1842,  1792,  1844,  1845,  1846,  1847,  1848,  1849,  1990,  1850,
    1806,  1852,  1812,     0,  1853,   999,   111,  1236,  1122,   589,
    1120,  1249,     0,     0,     0,   480,     0,   204,     0,     0,
    1260,     0,     0,     0,     0,  1564,   200,  1564,   366,     0,
    1564,   366,  1564,     0,  1274,  1277,     0,   432,     0,   428,
     426,   425,   427,   839,   826,   834,   833,  1119,   816,   815,
     814,     0,   813,     0,     0,   840,   840,   838,   817,   793,
       0,     0,     0,   844,     0,   842,     0,   437,   438,     0,
     410,     0,   786,   782,     0,   853,   854,   855,   856,   863,
     864,   861,   862,   857,   858,   851,   852,   859,   860,   849,
     850,     0,   865,   866,   867,   868,   869,   870,   871,   872,
     799,   805,     0,     0,  1244,     0,   405,     0,     0,   407,
       0,     0,   219,     0,   217,     0,   401,   154,     0,   230,
    1344,  1345,  1343,     0,     0,  1302,   233,  1338,  1347,  1337,
    1346,  1301,   250,  1296,     0,     0,  1292,   470,     0,     0,
       0,     0,  1129,  1138,  1130,  1131,  1132,  1133,  1134,  1135,
    1136,  1137,     0,     0,   701,   699,     0,     0,     0,     0,
       0,     0,  1165,     0,   951,   977,     0,     0,     0,  1114,
    1148,     0,     0,     0,     0,     0,     0,  1114,  1154,     0,
       0,   724,   736,     0,   623,   629,   700,   698,     0,  1188,
     693,     0,   770,   750,     0,   749,     0,     0,   752,   746,
       0,   747,     0,     0,     0,     0,   748,     0,     0,     0,
       0,   696,     0,   736,     0,   697,   767,  1381,  1380,  1376,
    1363,  1362,  1371,   194,     0,  1125,     0,   154,  1424,  1438,
       0,  1119,   985,  1163,     0,     0,   990,  1076,   906,     0,
       0,   907,   885,   886,     0,  1198,  1207,  1114,  1118,     0,
     988,  1114,     0,   981,   982,     0,  1066,  1068,     0,     0,
    1166,  1221,   989,     0,  1226,     0,   880,   880,  1194,  1096,
       0,  1086,  1089,     0,     0,  1093,  1094,  1095,     0,     0,
       0,  1186,     0,  1104,  1106,     0,     0,   922,  1102,     0,
     925,     0,     0,     0,     0,  1090,  1091,  1092,  1082,  1083,
    1084,  1085,  1087,  1088,  1100,  1081,   903,     0,   978,     0,
    1029,     0,   902,  1192,   691,     0,  1224,   691,  1365,  1369,
    1370,  1368,  1364,     0,  1356,  1355,  1360,  1358,  1361,  1359,
    1440,     0,  1401,  1385,     0,  1382,  1117,   686,   559,  1212,
       0,   563,  1408,  1406,   159,   158,     0,     0,   532,   531,
     598,   590,   592,   598,     0,   530,     0,   646,   647,     0,
       0,     0,     0,   679,   677,  1220,  1233,   634,   608,   633,
       0,     0,   612,     0,   638,   881,   672,   514,   602,   603,
     606,   513,     0,   675,     0,   685,     0,   551,   553,   536,
     550,   548,   533,   541,   673,   607,     0,  1430,     0,     0,
       0,     0,     0,  1564,     0,     0,   781,    82,    63,   318,
     137,     0,     0,     0,     0,     0,     0,     0,    90,    87,
      88,    89,     0,     0,     0,     0,   234,   235,   248,     0,
     239,   240,   237,   241,   242,     0,     0,   227,   228,     0,
       0,     0,     0,   226,     0,     0,     0,     0,     0,     0,
       0,     0,  1414,  1409,  1167,  1172,   589,   589,   589,     0,
     587,   588,     0,     0,   469,   364,   374,     0,     0,     0,
    1264,     0,     0,     0,     0,     0,     0,     0,   401,  1265,
    1263,  1267,  1266,  1268,   204,     0,   209,     0,  1535,   188,
       0,     0,   199,   196,     0,   363,   337,     0,     0,  1279,
       0,     0,     0,  1564,   353,  1276,     0,  1411,   254,     0,
       0,     0,   439,     0,   837,   836,   787,   783,     0,     0,
       0,     0,     0,     0,   444,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   439,  1245,     0,   436,   439,  1211,
       0,   439,   221,     0,     0,  1298,  1340,   231,   251,   232,
     252,   482,   477,   505,     0,   485,   490,   467,     0,   467,
       0,   487,   491,   467,   486,     0,   467,   481,  1377,     0,
    1022,     0,  1012,     0,     0,   759,     0,     0,  1013,   953,
     954,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   971,
     970,  1014,   763,     0,   766,     0,     0,  1146,  1147,     0,
    1015,     0,     0,  1153,     0,     0,     0,  1020,     0,   703,
       0,     0,     0,   618,   622,   625,     0,   628,   565,   521,
    1555,  1595,     0,   576,   576,   576,   574,   564,     0,   650,
       0,     0,   725,     0,     0,   727,   729,     0,     0,   732,
     709,   708,     0,     0,     0,     0,   771,     0,  1216,     0,
       0,   195,     0,  1253,     0,  1258,  1259,  1256,  1252,  1255,
    1257,     0,     0,     0,  1162,  1158,     0,     0,  1071,  1073,
    1075,     0,  1080,  1086,  1089,  1093,  1094,  1095,  1090,  1091,
    1092,  1082,  1083,  1084,  1085,  1087,  1088,     0,  1108,     0,
    1062,     0,     0,  1197,     0,   949,     0,   983,   994,     0,
       0,  1069,   998,  1199,  1174,     0,     0,  1229,  1228,   882,
     891,   894,   926,   927,   898,   899,   900,   904,  1251,  1250,
    1193,     0,  1185,     0,     0,   883,   908,   913,     0,  1155,
     943,     0,   931,     0,   921,     0,   929,   933,   909,   924,
       0,   905,     0,  1186,  1105,  1107,     0,  1103,     0,   895,
     896,   897,   887,   888,   889,   890,   892,   893,   901,  1079,
    1077,  1078,     0,  1172,     0,  1184,     0,     0,  1031,     0,
       0,   928,  1190,     0,   770,   589,   770,     0,   880,  1402,
    1248,  1395,  1384,  1248,  1115,  1213,  1247,   561,     0,     0,
       0,  1404,   145,   149,     0,  1173,   179,   181,   691,     0,
     596,   597,   601,     0,     0,   601,   580,   529,  1803,  1685,
       0,     0,     0,     0,   639,   680,     0,   671,   636,   637,
       0,   635,  1220,   640,  1219,   641,   644,   645,   613,  1208,
     681,   683,     0,   676,     0,  1214,   535,   554,     0,     0,
       0,     0,     0,   518,   517,   687,     0,    48,     0,  1564,
      65,     0,     0,     0,     0,     0,     0,   268,     0,   368,
     268,   103,  1564,   439,  1564,   439,  1462,  1530,  1703,     0,
      61,   342,    94,     0,   131,   371,     0,   327,    84,    99,
     124,     0,     0,   224,    50,   238,   243,   127,   247,   244,
    1284,   245,   138,     0,    46,     0,   125,     0,  1282,     0,
       0,    52,   129,  1286,     0,  1171,     0,   587,   587,   587,
       0,  1121,     0,     0,     0,  1123,  1124,   468,     0,   365,
       0,   479,   458,   459,   469,  1262,     0,     0,   200,   366,
       0,   366,     0,  1264,     0,     0,     0,   206,     0,   207,
     201,     0,   190,   186,     0,     0,     0,     0,   364,   356,
     354,   387,     0,   361,   355,     0,     0,   313,     0,  1456,
       0,     0,     0,     0,   453,     0,     0,     0,     0,     0,
     806,   819,   411,   793,     0,   847,   846,   848,   848,   776,
     793,     0,   793,     0,   791,     0,   831,   800,   873,   874,
     875,   876,   877,   878,   879,   404,  1246,   406,     0,   408,
     220,   218,  1293,   474,     0,   473,   478,   472,   476,   471,
       0,   466,     0,   500,     0,     0,     0,     0,     0,     0,
       0,     0,  1009,  1127,     0,  1141,  1140,   952,   959,   962,
     966,   967,   968,  1142,     0,     0,     0,   963,   964,   965,
     955,   956,   957,   958,   960,   961,   969,   768,     0,     0,
     762,  1151,  1150,  1144,  1145,     0,  1017,  1018,  1019,  1152,
       0,     0,   737,   616,   614,   617,   619,   615,     0,     0,
     770,   576,   576,   576,   576,   573,     0,     0,     0,   769,
       0,   667,   731,     0,   755,     0,   728,     0,     0,   719,
       0,   726,   775,   742,     0,     0,   744,  1372,  1126,   582,
     986,     0,     0,  1159,     0,   948,     0,  1074,   996,     0,
    1097,  1061,     0,     0,     0,  1206,     0,  1115,  1065,  1067,
    1207,   991,   880,     0,     0,     0,     0,     0,     0,     0,
     932,   923,     0,   930,   934,     0,     0,     0,   917,     0,
       0,   915,   944,   911,     0,     0,   945,  1171,     0,  1175,
       0,     0,  1030,  1039,   694,   690,   650,   587,   650,     0,
    1366,  1386,  1383,   562,   154,  1405,     0,   168,     0,     0,
       0,     0,   171,   185,   182,  1404,     0,     0,   591,   593,
       0,  1098,   601,   595,   643,   642,     0,   611,   678,   609,
       0,   684,     0,   552,     0,   538,     0,   712,     0,     0,
       0,     0,     0,   317,     0,     0,     0,   268,     0,   376,
       0,   383,     0,     0,   368,   349,    83,     0,     0,     0,
      57,   102,    75,    67,    53,    81,     0,     0,    86,     0,
      79,    96,    97,    95,   100,     0,   278,   303,     0,     0,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1172,  1168,  1172,     0,     0,     0,   589,   585,
     586,  1000,   503,   504,   502,   229,   375,     0,     0,     0,
     198,   363,     0,  1279,     0,  1261,   401,     0,     0,   211,
     212,     0,   210,   191,     0,   189,     0,   200,   366,     0,
     341,   337,   362,   335,   334,   336,     0,  1457,   222,     0,
    1451,   366,  1278,     0,     0,   454,     0,   448,     0,  1273,
     825,   789,     0,   843,   841,   790,     0,   788,   784,   792,
     439,     0,   462,   501,   506,   488,   493,     0,   499,   495,
     494,   489,   497,   496,   492,  1010,  1021,  1139,     0,     0,
       0,     0,   761,   764,     0,  1016,  1011,   735,     0,     0,
     650,     0,     0,     0,     0,   567,   566,   572,     0,     0,
    1033,   730,     0,     0,     0,   717,   707,   713,     0,     0,
       0,     0,   773,   772,   743,     0,  1161,  1157,  1070,  1072,
    1109,  1196,  1114,  1201,  1203,     0,     0,     0,  1064,   950,
    1227,   884,     0,     0,   914,  1156,   935,     0,     0,     0,
     910,  1097,     0,     0,     0,     0,     0,   919,     0,  1179,
    1172,     0,  1178,     0,     0,     0,     0,  1005,   695,   667,
       0,   667,     0,     0,  1403,     0,  1398,   146,   147,   148,
       0,     0,     0,   163,   140,     0,     0,   180,   168,   156,
     599,   600,     0,   594,   610,  1209,  1215,   537,     0,   988,
       0,     0,   534,     0,   132,   268,     0,     0,    64,     0,
     385,   329,   377,   360,   344,     0,     0,     0,   269,     0,
     402,     0,     0,   350,     0,     0,     0,     0,   330,     0,
       0,   289,     0,     0,   360,     0,   367,   285,   286,     0,
      56,    76,     0,    72,     0,   101,     0,     0,     0,     0,
       0,    59,    71,     0,    54,     0,   439,   439,    62,  1240,
    1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
    1974,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1983,
    1872,   275,  1873,  1631,  1874,  1875,  1876,  1877,  1878,     0,
    1879,   779,  1880,  1881,  2059,  1882,  1082,  1083,   273,   274,
     370,   270,  1241,   271,   378,   272,     0,   373,   328,   128,
    1285,     0,   126,     0,  1283,   135,   133,   130,  1287,     0,
       0,  1003,  1004,  1001,   587,   482,   461,   203,     0,     0,
    1456,     0,     0,     0,  1564,     0,     0,   208,     0,   187,
       0,  1279,   197,   363,     0,   393,   313,   388,     0,  1456,
    1454,     0,  1279,  1450,     0,   445,     0,     0,     0,   785,
     777,   409,   475,     0,   498,   972,     0,     0,     0,     0,
     626,     0,   632,   667,   571,   570,   569,   568,   649,  1505,
    1786,  1684,     0,   653,   648,   651,   656,   658,   657,   659,
     655,   666,     0,   669,   754,  1110,  1112,     0,     0,     0,
       0,   718,     0,   720,     0,   722,     0,   774,  1160,  1204,
    1205,  1200,     0,   881,   941,   939,   936,     0,   937,   918,
       0,     0,   916,   912,     0,   946,     0,     0,  1176,     0,
    1025,     0,  1028,  1042,  1038,  1037,  1033,  1000,  1033,  1367,
     560,   167,   144,   170,   169,     0,  1173,   177,     0,     0,
     168,     0,   172,   455,     0,     0,   549,   711,   542,   543,
       0,   381,    66,     0,   360,     0,   268,   346,   345,   348,
     343,   347,     0,   403,     0,     0,   287,     0,   294,   332,
     333,   331,   288,   360,   366,   290,     0,     0,     0,    68,
      58,    55,    60,    69,     0,     0,    70,    73,   775,    85,
      78,  1983,  1992,     0,     0,     0,     0,     0,  1170,  1169,
       0,   457,   464,   229,     0,     0,   337,  1453,     0,     0,
     450,     0,     0,   363,   202,   213,   192,     0,     0,     0,
    1456,     0,     0,   265,     0,   310,     0,   215,  1455,     0,
       0,  1442,     0,     0,  1271,  1272,     0,   463,   973,     0,
     974,   765,     0,     0,   624,  1033,     0,     0,     0,   660,
     654,     0,  1032,  1034,     0,   621,  1113,   714,     0,   716,
       0,   740,   589,     0,   740,   723,  1202,  1023,     0,   938,
     942,   940,   920,  1172,  1180,  1172,  1177,  1027,  1041,  1044,
     669,  1225,   669,     0,     0,   155,     0,     0,   152,   139,
     157,  1099,   539,   540,     0,   268,     0,   359,   382,   299,
     277,     0,     0,     0,   284,   291,   392,   293,     0,    77,
      93,     0,     0,   372,   136,   134,  1002,   482,     0,  1279,
     313,  1450,   447,     0,     0,     0,   337,   222,  1452,   326,
     319,   320,   321,   322,   323,   324,   325,   340,   339,   311,
     312,     0,     0,     0,     0,     0,   449,  1273,     0,   174,
     183,     0,   174,   975,   627,     0,   669,     0,     0,     0,
     652,     0,     0,   668,     0,   525,  1111,     0,   706,   704,
     587,     0,   705,     0,     0,     0,     0,   589,   621,   621,
     141,     0,   142,   178,     0,     0,     0,   366,   384,   358,
       0,   351,   297,   296,   298,   302,     0,   300,     0,   316,
       0,   309,   277,     0,    80,     0,   379,   456,   460,     0,
     267,  1444,   363,     0,  1450,   313,  1456,  1450,     0,  1447,
       0,   446,     0,     0,     0,   176,  1279,     0,   176,     0,
     621,   662,     0,   661,  1036,  1035,   623,   715,     0,     0,
    1024,  1182,  1181,     0,  1048,   524,   523,     0,     0,     0,
       0,   392,     0,   338,     0,     0,   299,     0,   292,   389,
     390,   391,     0,   305,   295,   306,    74,    92,   380,     0,
     363,  1445,   266,   216,  1443,  1448,  1449,     0,   174,   173,
     598,   175,   770,   184,   598,   631,   526,   663,   620,     0,
     721,  1043,     0,     0,     0,     0,     0,   151,   770,   162,
       0,   309,   357,   352,   276,   301,   315,     0,     0,     0,
     307,     0,   308,  1450,     0,   176,   601,  1269,   601,  1772,
    1506,  1740,     0,  1060,  1049,  1060,  1060,  1040,   143,   150,
       0,   268,   281,     0,   280,     0,   369,   304,  1446,  1279,
     598,   164,   165,     0,  1053,  1052,  1051,  1055,  1054,     0,
    1047,  1045,  1046,   770,   386,   279,   283,   282,   770,   601,
       0,     0,  1057,     0,  1058,   161,  1270,   166,  1050,  1056,
    1059
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3042, -3042, -3042,  2042,   106,   107,  -710, -1157,  -909, -1152,
   -3042,   -82,   110, -3042, -3042,   204, -3042,  1008, -3042,   194,
    -627,   561, -3042,  1098, -3042, -3042,  2730, -3042,   111,   113,
    2137,  3896,  2764,  3234,   278,  -499,  -704, -1314,  -942,    10,
   -3042, -3042, -3042, -3042,  -963,   503, -1166, -3042,   421, -3042,
   -3042, -3042, -3042,  -181,   171, -3042,     5, -2127, -2828,  -526,
   -3042,  -631, -3042,  -287, -3042,  -575, -3042,  -794,  -583,  -614,
   -2717, -1109, -3042,  1615,  -334, -3042,   595, -3042, -2477, -3042,
   -3042,   587, -3042, -1116, -3042, -1782,   198,  -557, -2523, -2501,
   -2101,  -706,   252,  -564,   228, -2094, -1121, -3042,   607, -3042,
    -533, -3042,  -705, -2444,   114, -2673, -1622,    -7, -3042, -3042,
   -3042,  -555, -3042, -2467,   115,  1474, -2048,   116, -1638, -3042,
   -3042, -1168,   542, -2086,  -102, -3042,     8, -2043,   119, -3042,
   -3042,   120,    22,  -530,   316, -3042,   121, -3042, -3042,  1400,
    -787, -3042,  1454, -3042,   122,   960, -3042, -2509, -3042,  -455,
   -3042,  -495,  -501, -3042, -3042,    23,  -901,  1386, -3042, -3042,
   -3042,    11, -3042,  -411, -3042, -3042, -2516, -3042,    35, -3042,
   -3042, -3042, -3042, -3042,  -348,   329, -3042, -3042,  -487, -2481,
    -437, -3042, -2907, -2970, -3042, -3042,  -585, -2433, -2016,   123,
     126,  1378,   124,   125, -3042,   343,   127, -1091,     7,   315,
     -43,   -37, -3042,   -12, -3042, -3042, -3042,   671, -3042, -3042,
      16,    64,  1716, -3042, -1005, -3042, -1522,   734, -3042,  1859,
    1876, -2168,  -695,   -64, -3042,   710, -1624, -2078,  -521,  1130,
    1696,  1703,   449, -2159, -3042,  -477, -3042,   308, -3042, -3042,
     702,  1179, -1530, -1519, -3042, -2135, -3042,  -385,  -276, -3042,
   -3042, -3042, -3042, -3042, -2441, -2776,  -518,  1151, -3042,  1713,
   -3042, -3042, -3042, -3042,    15, -1394,  2836,   748,   108, -3042,
   -3042, -3042, -3042,   175, -3042,   901,  -103, -3042,  2250,  -535,
    -619,  1932,   -36,   174, -1797,    12,  2263,   517, -3042, -3042,
     515, -2031, -1474,   473,  -180,  1509, -3042, -3042,  -537, -1307,
    -780, -3042, -3042,   226,  1709, -3042, -3042, -3042,  1737,  2083,
   -3042, -3042,  2663,  3504, -3042,  -615,  3512,  1170,  -747,  1946,
    -872,  1947,  -875,  -879,  -883,  1951,  1956, -1488,  4903,  -791,
    -699, -2166, -3042,  1027,    17, -3042, -1434,    45, -3042, -3042,
   -3042, -3042, -2669, -3042,  -350, -3042,  -345, -3042, -3042, -3042,
   -1566, -3041, -1596, -3042,  1887,   879, -3042, -3042,   470, -3042,
   -3042, -3042, -3042, -1504, -3042,  5757,   782, -3042, -1967, -3042,
   -3042,  -935,  -666, -1041,  -958, -1256, -1306, -3042, -3042, -3042,
   -3042, -3042, -3042, -1537, -1732,  -175,   838, -3042, -3042,   921,
   -3042, -3042, -3042, -1694, -2041, -3042, -3042, -3042,   848,  1414,
     172,  -657, -1575, -3042,   889, -2295, -3042, -3042,   474, -3042,
    -482, -1086, -2374,  1821,    -3, -3042,  4872, -2471, -3042, -3042,
    -565, -2591, -1054,  -790, -3042,   129,  1153,    46, -3042,   130,
    1279, -3042, -3042, -3042,   133, -3042,   383,   135,   471, -3042,
     952, -3042,   716,   136, -3042, -3042,    93,  2827,    13, -2866
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   575,   576,  1802,  1749,  1530,  1185,
    1739,  1436,   577,  2542,  2543,  2544,  2189,  1166,  3284,  2190,
    1167,  1168,  2546,    52,    53,    54,   109,  1196,   578,   579,
     516,   626,  1057,   628,  1058,  1572,   728,  1273,  1274,   580,
    2244,  3083,  2641,  3084,  2332,  2238,  1446,  2326,  1863,  1779,
    1447,   522,  1877,  2642,  2585,  1864,   581,  2531,  2870,  3277,
    2557,  3416,  2806,  2807,  3274,  3275,  2534,  2192,  3343,  3344,
    2617,  1731,  3338,  2269,  3217,  2196,  2177,  2808,  2277,  3177,
    2915,  2193,  2788,  2270,  3270,  1815,  2271,  3271,  3036,  2272,
    1776,  1806,  2535,  3345,  2197,  1777,  2530,  2871,  1719,  2273,
    3281,  2274,   533,  2792,   582,  2620,  1339,   518,   507,   508,
     820,  1276,  1317,  1277,   583,   749,  1812,   584,  1330,  1790,
      62,   741,  1796,  1797,  2600,  2601,   585,  1803,   586,  2604,
    2605,   587,   588,  1103,  2487,  2111,   589,   566,   567,   839,
    1380,   568,   821,    68,   590,  1422,  1423,   847,    70,   694,
    1438,   591,  1439,  1440,   935,    71,  1531,   937,   938,    72,
      73,   593,  3115,  2928,  1345,  1816,  2282,   534,   594,  2753,
    2113,  2490,  3266,    76,  3017,  2116,  1127,  3020,  3230,  2746,
    3015,  2491,  3305,  3360,  3018,  2117,  2118,  3231,  2119,   595,
     643,  1529,   596,   597,  1000,  1978,   598,  1722,   599,  1059,
      83,    84,   973,    85,  3030,    86,    87,  1697,  1698,  1699,
     673,   685,   686,  2109,  1502,  1947,   678,  1131,  1666,   660,
     661,  2234,   702,  1771,  1661,  1662,  2122,  2498,  1690,  1691,
    1140,  1141,  1935,  3245,  1936,  1937,  1495,  1496,  3124,  1678,
    1682,  1683,  2143,  2133,  1669,  2401,  2953,  2954,  2955,  2956,
    2957,  2958,  2959,  1060,  2680,  3135,  1686,  1687,  1143,  1144,
    1145,  1695,  2153,    89,    90,  2094,  2474,  2475,   632,  2970,
    1519,  1700,  2684,  2685,  2686,  2974,  2975,  2976,   633,   968,
     969,   992,   987,  1509,  1955,   634,   635,  1912,  1913,  2370,
     994,  1949,  1965,  1966,  2692,  1833,   822,  2178,  1535,  1383,
     824,  1061,   825,  1358,  1062,  1362,   827,  1063,  1064,  1065,
     830,  1066,  1067,  1068,   833,  1354,  1069,  1070,  1373,  1402,
    1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1114,  1701,
    1072,  1073,  1074,  1075,  1076,  1077,   637,  1078,  1079,  1620,
    2088,  2473,  2963,  3132,  3133,  2737,  3005,  3159,  3257,  3375,
    3403,  3404,  3430,  1080,  1081,  1566,  1567,  1568,  1988,  1989,
    1990,  1991,  2082,  1614,  1615,  1082,  2875,  1617,  2009,  2966,
    2967,  1115,  1488,  1559,  1319,  1320,  1536,  1462,  1463,  1469,
    1887,  1477,  1481,  1917,  1918,  1489,  2050,  1083,  1984,  1985,
    2424,  1544,  1084,  1198,  1571,  2732,  2085,  1618,  2044,  1091,
    1085,  1092,  1087,  1555,  1556,  2435,  2704,  2705,  2015,  2150,
    1649,  2155,  2156,   843,  1088,  1089,  1090,  1321,   511,   836,
    3361,  1414,  1120,  1322,  2040,   600,   102,   601,    93,   602,
    1110,   682,  1111,  1113,   603,   654,   655,   604,   667,   668,
    1532,  1634,  1533,   605,    98,  1154,   656,   674,   606,  3111
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     506,   840,   690,  1086,   510,    58,   727,    81,    63,  1184,
      57,    74,  1150,    99,   506,   988,    88,  1116,   510,   933,
     703,  1480,    66,  1278,   509,  1325,  1752,   823,  1369,  1435,
    1763,  1328,  1753,  1650,    88,    75,   630,  1441,   636,  2125,
    1534,   592,  1718,   672,  1914,  2008,    92,  2503,  2092,   676,
    1969,   707,  1416,  2536,  1728,  1419,  1425,  1768,  1823,  2575,
    2576,  2577,  1827,  2476,  1459,  2478,   638,  1375,  1458,  1724,
    1652,  2226,  1457,   934,  2493,  1455,   708,  2901,   849,   506,
     506,  1624,  2529,   510,   510,   842,  1627,  2876,  2027,  2028,
    2899,  2873,  1186,  2457,  1190,   970,  1194,  1757,  2492,  1845,
     991,   630,   630,   636,   636,   713,    49,    50,   688,  2919,
      51,    55,  1564,    56,    59,    60,    61,  1562,   721,    64,
      65,    67,    69,    77,    78,    79,   669,    80,   965,    91,
      94,   638,   638,    95,  2916,    96,    97,   939,  2703,  2586,
    2767,  1429,  2245,   520,  2772,  -840,  1012, -1969, -1969, -1843,
     644,  2145,  -848,  2402,  -508,   640,  1355,  1356,  -511,  1781,
    2588,  3304,  2250,  1473,  2148, -1843,  2411,  1128,  1012, -1237,
    2606, -1834, -1237, -1983, -1983, -1834,  1102, -1234, -1234, -1974,
   -1974,  1139,  -848,  1367,  1142,  2373,  -845,   640,  1631, -1851,
    -845,  1012, -1238, -1843,   704,   705, -1851, -1992, -1992,  3103,
   -1235, -1235, -1994, -1994,  2594,  2590, -1238,  -807,   640,   680,
    -820,  1891,  -835, -1218,  1709,  3040,  1893,   640,  2042,  2537,
     640,  1098, -1080,   640,  2042,  1720,  2422,  3087,  1377,  2079,
   -1080,  1377,  1377,  2096,  1349,    21,  1755,  2080,  1628,  1429,
     640,  2687,  2648,  2650,  1012,  2653,  3107,  3193,  -465,  1012,
    3264,  1654,  -508,  3441,  1891,  1474,  -511,  1580,  1892,  1893,
   -1101,  1278,  1582,  1737,  3180,  2158,  1740,  1741, -1101,  1729,
    2242,  1350,  1729,  1729,  1670,  1011,  1377,  3023,  1891,  1450,
    1105,  3055,  1892,  1893,  2613,  3074,  1894,  1895,  1896,  -229,
    3379,  2385,  1590,  -644,  -229,  2383,  1720,  1375,  3006,  1580,
    3008,   642,   642,  1581,  1582,  2532,  1712,  2564,  3436,  2740,
    3272,     3,     4,   700,  3425,    82,  1820,    21,  1671,  2232,
    2089,  2175,  1766,   700,  1592,  3308,  2538,  3442,   608,  1464,
     103,  1767,  3051,    82,  1590,  3291,   629,  3160,  3364,  3162,
    2748,  2739,  3127,  2741,  2386,  3222,  2920,  2354,  1629,  1667,
    2346,    82,  2120,  3223,  3339,  3037,   658,  2107,  3423,  2670,
     689,  2558,   695,  3104,   971,  3057,  1592, -1968, -1968,  1747,
     108,   100,  3273,  3062,  2559,    25,    26,    27,  3105,  2176,
    2108,  2374,   541,   933,  3258,  1558,  3259,   724,  3073,  2468,
     607,  1736,  1751,  1748,  2749,  3097,  1758,  2659,  1278,  3448,
    2780,   629,   629,   706,  1355,  1356,  3109,  1931,  1655,  1393,
    1394,  1580,  3098,    82,   991,  1581,  1582,  3443,   101,  3387,
    1367,  2396,  2397,  2398,  2763,  3420,   970,  3208,  3351,  3038,
    2529,  3354,  2529,  2121,  1673,   757,  2533,  -508,  1931,  1685,
      32,  -511,   933,  1106,  1443,  1107,  1590,  1351,  1474,   789,
    2810,  3395,   696,  -780,   659,  1668,  3236,    25,    26,    27,
    3310,  1897,  2700,  1714,   609,  3380,  -664,  2090,  3437,  3426,
    1730,  1630,  3265,  1730,  1730,  1099,  1129,    37,  1592,  2233,
    1161,   698,  3191,  3290,  1898,  2387,  1706,  2355,  3340,  2384,
    3052,  1702,  1703,  2415,  1891,   104,  1674,  2356,  1892,  1893,
    1982,   972,  3125,  1862,  3382,  -508,   105,  2921,  1727,  -511,
      39,  3175,  2906,  2231,  1550,  1378,   946,  3224,  1378,  1378,
    2687,    42,    32,  2811,  2243,  1397,  1398,  3418,   730,  2794,
    3185,   690,  2316,  1769,  1727,  2943,  2159,  1727,  1727,  3169,
    2539,   106,  2540,  1972,   933,   933,   681,  2660,  1100,  3041,
     639,   699,  1899,  2934,  1983,  3192,  2008,   819,  1570,    37,
    1352,  1006,  1846,  1378,  2912,  3106,  1756,   932,   691,  3444,
    2797,  3341,  2541,    45,  1130,  3082,  2924,  3412,  3352,  2043,
    1715, -1080,   690,  3181,  -780,  2459,   725,   677,  2081,    88,
     726,   107,    39,   521,  2170,  1653,  1353,   936,  2540,  2582,
    2583,  2145,   683,    42,  2876,  2812,  2681,   506,  2873,  3200,
    2480,   510,   692,  2506,  2657,  2595,  1370,    43,   506, -1101,
    2501,  -508,   510,  3353,  1770,  -511,  2256,   700,  2823,  1704,
     640,   636,  1705,  1433,  1434,  1809,   707,  2565,  1371,  1545,
     961,    44,   636,  1151,  2609,  -840,  1370,  2039,  3031, -1843,
    1753,  3172,  1372,   506,   506,    45,  3173,  1547,  1645,   638,
    -508,   708,  -508,  2304,  -511, -1843,  -511,  2095,  1371, -1237,
     638, -1834, -1237,  1547,  1379, -1834,   506,  1415,  1418,  1889,
    1890,  2586,  1374,  3289,  3146,  1910,  -845,  1575,   697, -1851,
    1104,  1558, -1238, -1843,   959,  2322, -1851,    58,  3296,    81,
      63,  1908,    57,    74,  1109,    99, -1238,  1357,    88,  1104,
    1361,   725,  -835, -1218,    66,   726,  2231,  1625,   506,  1275,
    2097,  1328,  1316,  2972,  2495,  3183,  3080,    75,  3372,  3295,
    2801,  1433,  1434,   962,  1108,   943,  3064,  3065,    92,   758,
    3022,  1905,  1906,  1907,  1908,  3388,  2781,  1613,  1117,  2151,
    1824,  1825,  1747,  1365,  1366,   669,   669,  1135,   669,  1900,
    1901,  1902,   743,  1903,  1904,  1905,  1906,  1907,  1908,  1135,
    2469,  1474,  1474,  1742,  1136,   701,  1748,  1474,  2802,  -588,
    3413,  -229,  -229,  2191,  -588,  2195,  1610,  1611,  1612,  1613,
    3362,  2899,   693,  2175,  2803,  3024,  1799,   523,    49,    50,
    3013,   819,    51,    55,  3085,    56,    59,    60,    61,  3049,
     729,    64,    65,    67,    69,    77,    78,    79,  1923,    80,
     745,    91,    94,  1158,  2760,    95,   823,    96,    97,  1159,
    2205,  1517,  3329,  1137,   744,  3101,    82,   709,  3014,  1316,
    2208,  1938,  1834,  2211,  2381,  1137,  2926,   840,   743,  3098,
    1847,  2526,  3209,  2285,  1580,  -588,  1851,  1958,   725,   746,
     524,  2876,   726,  2152,  3414,  2873,  1278,  2024,  1278,  2671,
    2672,  2673,  2674,   933,  1981,  1558,   736,  2784,  2889,  3373,
    2890,  2381,  1518,  3050,  2011,   941,  3102,   642,    82,   689,
    2790,  2761,  1138,  3415,  2597,  2804,  1608,  1609,  1610,  1611,
    1612,  1613,  -588,  3438,  2805,  3210,  2334,  2025,  3374,  3178,
    2338,   997,  1158,  2340,  3211,  1743,  2791,   995,  1159,  2063,
     744,  1592,   998,  1744,  3394,  2008,  2432,   934,   745,   948,
    1160,   932,  1855,  2390,  1914,  1848,  3212,   506,   506,  1506,
     960,  3285,  1095,   506,   748,  1513,   506,   506,  1846,   506,
     506,   506,   506,  2325,  2710,    88,  1929,   750,  2311,  2313,
    2314,  2327,  2310,  2312,  2785,   506,  2309,   746,  2308,   510,
    2134,  1158,   506,  1570,  2578,  3165,   510,  1159,   753,  1903,
    1904,  1905,  1906,  1907,  1908,   754,  2631,   630,   706,   636,
     932,  1316,   819,  2635,   630,  2637,   636,   755,  1503,   725,
    1158,  1135,   747,  1569,  1359,  2335,  1159,    82,  3213,   690,
    2336,   506,  1427,  1857,  1782,  1428,  1158,   638,  1012,  1160,
    1729,  3214,  1159,  1580,   638,  2203,  1368,  2045,  2786,   506,
    2787,  1001,  1002,  1003,  1729,  2292,  2997,   528,  2064,   529,
     506,   506,   506,  2029,   506,   506,  2481,  1275,  3268,  2482,
     759,  1753,   748,  1783,  2501,  2065,  1720,  2315,  1590,  1720,
    2066,  2317,  1411,  1425,  2319,   532,  2337,  1721,  2512,   756,
    1723,  2227,  2228,  2229,  1370,   506,  1643,  1137,  1160,  1644,
    1500,  2167,  3318,  2255,  1161, -1965, -1965,  1510,  1784,  1782,
    1592,  1670,   932,   932,  1658,  1659,  1371,  1665,  2067,  3325,
    3326,  2348,  2349,  2350,  2351,  2352,  2353,  1160,  2204,  2357,
    2358,  2359,  2360,  2361,  2362,  2363,  2364,  2365,  2366,   708,
     708,  2566,   708,  1160,  1138,  1370,   506,  2214,  1783,   977,
     506,   506,  2221,  1093,  1094,  1671,  1096,  1104,  1785,  2573,
     506,   506,   506,  1761,  1163,   506,   762,  1371,  2083,  2719,
    2574,  3366,  2084,  2289,  1511,  1562,  3154,  2563,  1516,   110,
     760,  1372,   519,  3091,   819,   978,  2614,  3155,   523,   569,
    1859,   846,  2622,  1161,   523,  1012,  1164,  2504,  1932,  2179,
    2206,  1504,  1012,  1933,   657,  2209,  1852,  2907,   670,  1853,
    2939,   980,  2908,  1474,  1474,  1474,  1474,  1474,  1474,  1754,
    1672,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1011,  1370,  1785,  1891,  2449,  1437,  3215,  1892,  1893,
    3216,  1730,  1894,  1895,  1896,  1453,   946,  1971,  1729,  1162,
    1972,   524,  1161,  1163,  1371,  1730,   725,   524, -1218,   732,
     726,   733,  2450,   944,  2191,  2191,  2191,  1165,  1374,  1359,
    2068,  1673,  2444,  2445,    82,   734,   945,   735,  2008,  1011,
    2379,  1161,  1891,   947,  1368,  1164,  1892,  1893, -1966, -1966,
    1894,  1895,  1896,  1316,  1528,  1437,  1973,  1161,  1497,  1974,
    2239,  1729,  1316,  2240,  3434,  1727,   950,   629,  1188,  1541,
    1011,    45,  1163,  1891,   629,  2299,  1521,  1892,  1893,  1727,
    1525,  1894,  1895,  1896, -1967, -1967,  1316,   933,  1922,  2260,
    1924,  1925,  2261,  1674,  2275,   984,  2276,  1192,  3421,  2682,
    3422,  1163,  2689,  1503,  1189,  2293,   819,  2300,  1974,  1542,
    2301,  3397,   953,  2166,  1505,  1789,  1165,  1163,  1791,  1574,
    1546,  1792,  2341,  1793,  1474,  1474,  2302,  3409,  1576,  2301,
     506,  2567,   955,  1193,  2347,  2938,   819,   819,  1326,  2329,
    2451,  3447,  2330,   954,  1326,  2452,  1626,  1560,   956,  1164,
    2367,  1327,   819,  2368,   964,  1632,  2413,  1437,  1437,  2414,
   -1970, -1970,  2447,  2814,  2375, -1971, -1971,  2416,  1862,  2821,
    2414,  2380,  2551,   957,  2553,  1165,  2548,  2160,  2550,  2391,
    2477,  2392,  3445,  2777,  2571,  2779,  1275,  3446,   528,  2778,
     529,  2393,  2987,  2394,   528,   933,   529, -1972, -1972,  2554,
    1898,   932,  2555,  2643,  1165, -1973, -1973,  2412,  2895,  1730,
    2813,  2412,  2822,  1132,   958,  1134,   532,  2418,  1275,   959,
    1165,   993,   532,    88,   506,   996,   706,   706,   523,   706,
    1171,   936,  2560,  2625,   977,  2561,  1972,  2694,  1474,  3254,
    2414,  3255,  2755,   506,   506,  2756, -1975, -1975,  1898,   506,
    1172,   506,   999, -1281,  1007,   510,   506,   506,   506,   506,
    1004,  2897,  1730,  2911,  2261,  1005,  2240,  1006,  1899,  1112,
     978,   506,   506,  1727,  1097,   636,  1101,   506,  1562, -1996,
     506,   510,  2515,  1118,   510,   506,  1512,   506,   506,   510,
    1119,   524,   510,   506,  1173,  2453,   980,   510,  1125,   630,
    1121,   636,   630,   638,   636,  2932,  2454,   630,  2933,   636,
     630,  1122,   636,   506,   506,   630,  1899,   636,   506,  2940,
     506,  1126,  2941,   506,  1979,  2593,  1727,  1975,  1133,   638,
    2633,  2634,   638,    88,  1153,  2988,  1152,   638,  1974,  1976,
     638,  3094,  1275,   525,  2261,   638,   506,  1899,   506, -1976,
   -1976,  2501,  1977,   819,   506,   506,   506,   506,   506,   506,
     506,   506,  1275,  1980, -1977, -1977,   506,   506,  2092,  3120,
    3121,   506,  1974,  2414,  3149,   506,  1155,  1974,   506,   506,
     506,   506,   506,   506,   506,   506,   506,  1174,  1156,   506,
    1387,  1388,  1950,  2191,  1157,  1952,   506,  2877,  1316,  2195,
    1956,  3156,  3166,  1959,  1972,  3167,  1169,  3199,  1963,  2127,
    2240,  3119,  3233,  3306,  3333,  1974,  3307,  3334,   526,   506,
     984,  3378,  1170,  3419,  3307,   527,  3307, -1978, -1978,  2868,
    1187,  -520, -1979, -1979,   708,  1191,  1175, -1980, -1980,  1505,
    3032,  1195,   506,  1323,  1176,  -520,  1324,  1109,  2723,  2724,
    -520,  2821,  1332,   506,   506,  1329,  1177,  1331,  1393,  1394,
   -1981, -1981,  3232,  1333,  1664, -1982, -1982,  1334,   528,  1344,
     529, -1984, -1984, -1985, -1985,  1900,  1901,  1902,  1346,  1903,
    1904,  1905,  1906,  1907,  1908, -1986, -1986,   530,  1178,   819,
   -1987, -1987,  1347,   531,  2146,  2147,   532,  1348,  1275,  1353,
    1275,  -520,  1861, -1988, -1988,  1357,  1528,  1158,  1360,  3081,
    1361,  2179,  1363,  1159,   835,  1364,  3396, -1989, -1989,  1376,
    3398,  -520,    82,  1900,  1901,  1902,  1382,  1903,  1904,  1905,
    1906,  1907,  1908,  2640, -1991, -1991, -1993, -1993,   506,  1180,
    1474,  1474,  1316, -1995, -1995,   506,   506,  1772,  1773,   933,
    1381,  -639,  -639,  2999,  1900,  1901,  1902,  1384,  1903,  1904,
    1905,  1906,  1907,  1908,  1181,  1395,  1396,  1413,  -520,  2024,
    1397,  1398,    21,  1412,  1397,  1398,  3439,  -520,  -643,  -643,
    -642,  -642,  1417,  1183,  1316,  3028,  3029,  3405,  3406,  3431,
    3432,  1420,   506,  1426,  2279,  1637,  1639,  1421,  1444,   629,
    1158,  1445,   629,  1448,  1451,   819,  1159,   629,  2501,  1478,
     629,  3232,  1491,   540,  1160,   629,  1493,  1579,   570,  1275,
    1580,  1494,  1501,  1507,  1581,  1582,  1316,   506,  1508,  1514,
     646,  1515,    82,  2931,  2051,   932,  1520,  1524,  1526,  2771,
    1537,  1538,  1540,  -811,   687,   687,  -818,  2935,  1545,    45,
    -664,  -665,   819,  3232,  -808,  1590,   506,   506,  -809,   506,
    1549,  2052, -1996,  2894,   819,   506,   506,   506,   506,   506,
     506,  2903,  1550,   506,   506,   506,   506,   506,   506,   506,
     506,   506,   506,  -812,  -810,  3060,  1554,  1592,   506,   506,
    2049,  2098,   506,  1563,   819,  2922,  3384,  1619,  1171,   506,
    1573,   819,  1647,  3232,  1621,   717,  3197,  1160,  1623,  1635,
    1646,  1651,    25,    26,    27,  1656,  1657,  1136,  1172,  1138,
    1692,   506,  1694,  1696,   506,  -520,   506,  1452,   510,   640,
     506,  1725,  1707,  1726,   510,  1727,  1732,   819,  1734,  1474,
    1733,   819,  1738,   932,  1745,  1316,   630,   819,   636,  1746,
    2446,  1750,   630,  1760,   636,  1765,   506,  1778,   835,  1774,
    1787,   706,  1173,  1788,  2965,  1794,  1801,  1804,  1161,  1805,
    1807,  1808,  1811,  1810,  2053,  1817,   638,    32,    10,  2054,
    1818, -1996,   638,  1819,  2055,   690,  3048,   506,  2983,  1012,
    1826,   725,   506,   506,  3142,   726,  1828,  1562, -1996,  1829,
    1836,  2874,  1837, -1996,  1840,  1841,  1842,  1843,  1846,  1854,
    1880,  3287,  2643,  1882,    37,  1883,   506,   506,  1930,  3069,
    3070,   506,  1885,  1948,  2212,  1888,  1911,  1919,  1163,  2817,
    1920,  1385,  1386,  1927,  3248,   506,  1951,  1960,   506,  2403,
     506, -1996,  1957,  1961,  1962,  2406,  1967,    39,  1580,    21,
    1983,  1970,  2014,  2017,  2019,  1174,   506,  1275,    42,  1369,
    2213,  1161,  2020,   506,  2021,  2041,   506,  2022,  2048,  2059,
     510,  2060,  2062,  2086,  2087,  2093,  2105,   974,  1474,  2930,
    2106,   699,   975,   506,  2110,  2123,  2126,   510,   630,  2137,
     636,  2135,  2136,  2263,  1601,  2138,   506,   698,  2139,  2140,
    2157,  2161,    82,  2162,  1175,   630,  2977,   636,  1387,  1388,
      45,  -589,  1176,   506,   506,  2172,  -589,  2219,   638,  2165,
    1437,  1163,  2168,  2173,  1177,  3118,  2333,  2174,  -520,   700,
     506,  1165,   506,  2241,  2056,   638,  2237,  1865,  2246,   976,
    2262,   506,  -520,  2247,  2286,  2057,  2868,  -520,  2265,   835,
    2264,  2266,  2280,  2220,  2283,  2281,  1178,  1992,  2287,  1275,
    1275,  1275,  2290,  1753,  1993,  1994,  2294,   699,  1995,  1996,
    1997,  2291,  1389,  1390,  1391,  1392,  1393,  1394,  2288,  2295,
    1395,  1396,  1866,  2296,  2297,  2298,  2306,  -589,  2307,    25,
      26,    27,  2318, -1996,  2331,  2339,  1916,   506,  -520,   690,
    1891,  1867,  2369,  1316,  1915,  2407,  2400,  1180,   977,  2464,
    3046,  2427,  2448,  2388,  3269,  2389,  1146,  1474,  -520,  1868,
    2376,  2377,  2378,  1869,  1165,  2382,  2419,  2405,  1437,  2420,
    1789,  2429,  1181,  1791,  -589,  2430,  1792,  2431,  1793,  2441,
    2428,   819,  2443,   700,   978,  1870,   629,  1633,  1871,  2455,
    2465,  1183,   629,   826,    32,  2470,  2471,  2472,  2483,   506,
     979,  2484,  2486,  2488,  1872,  -520,  2489,  2496,  3068,  2494,
     980,  2497,  -645,  2507,  -520,  2508,  2510,  2511,  2514,  2518,
    2519,   828,  2520,  2522,  2524,  2525,  2528,  2547,  2549,  2579,
    2562,    37,  1397,  1398,  2568,  2569,  2570,   932, -1996,  2580,
    2581,  2592,   981,  1275,  2591,  1608,  1609,  1610,  1611,  1612,
    1613,    38,  2596,  2598,  2599,  2612,  2615,  2611,  2619,  2616,
    2623,   835,  2628,  1147,    39,  2630,  2647,  2638,  3186,  2639,
    2655,  2658,  2665,  2661,  2664,    42,  2666,  2678,   752,  2667,
    2679,   506,  2690,  1560,  2691,   510,  2707,   982,  2697,    43,
    2701,  2717,  2715,  2721,   983,  1873,  2736,  2730,   933,  2718,
    2745,  2049,  2731,  1874,  2762,   636,  2742,  2764,  3371,   845,
     690,  2738,  3269,    44,  2768,  2776,  2809,  2466,  2766,  2825,
     506,  2902,  2783,  2891,  2688,  1875,  2733,    45,   629,  2782,
    2910,   701, -1728,   638,   984,   506,  2789,  2914,  2892,   506,
     506,  2898,   690,  2868,  2893,   629,   506,  2909,  2913,  1399,
    1400,  1876,  2918,   985,  2929,  2927,   506,  3246,  2936,   506,
    2240,   506,  -520,  2937,  2962,  2942,  2964,  3250,   819,   506,
    2968,  2979,   506,   506,  2500,  2973,  3012,   506,   506,  2980,
    3237,  2024,  3239,  3000,   506,  3007,  3010,  3021,  3019,  3025,
    3026,  2556,  3027,  2770,  3033,  3034,  3039,  3035,  3043,   506,
    3044,  3247,  3045,  3053,  3056,  3059,  3058,  3063, -1234,   506,
   -1964,  1979, -1965, -1966,  1975,  3075, -1967,  2754, -1968,  3076,
      88, -1969,   986,   835, -1970,   687,  1976,  1148,   725,   506,
   -1728,  1121,   726, -1971, -1972,  3077,  2584,   826, -1973,  1977,
   -1975, -1976,  3249,  3088, -1977,  3252, -1978,  3092, -1979, -1980,
    1980,  3078, -1981,   835,   835, -1982,  3093, -1984,  2874, -1985,
    2603,  3108,  3079, -1986, -1987,   828, -1988, -1989,  1275,   835,
   -1990,  2872,  1275, -1991,  1275, -1728,  3110,  3112, -1992, -1993,
   -1994,  3331,  3324,  3113,  3116,   506,  3335,   506, -1995, -1728,
    2750, -1235,  3086,  3122, -1728,  3123,  3126,   689,  3130, -1728,
    3128,  3134,  3137,  3136,  3140,  3141,  3143,  3148, -1728,  3163,
    3164,  3168,  3171, -1728,  3319,  2794,  3176,  3174,  3188,  2900,
    1789,  2795,  1437,  1791,  3189,  3196,  1792,  3198,  1793,  3204,
    2645,  3205,  2646,  3206,  2796,  3221,  2651,  3219,  2654,  3234,
    3235,  3220,  3238,  3241,    21, -1728,  3251,  3242,  3244,   819,
    2923,  3256,  3276,  2925,  3280,  3052,  2797,  3282,  2798,  3283,
     690,  3292,  3286,  3299,  3298, -1728,  3300,   829,  3304,  3309,
    3311,   506,  3313,  3003,   819,  3316,  3317,  3321,  1171,  3322,
    3323,  1998,  1999,  2000,  3328,  2001,  2002,  2003,  2004,  2005,
    2006,   506,   506,  3330,  1011,  3337,   506,  1891,  1172,   506,
    3332,  1892,  1893,  2688,  3342,  1894,  1895,  1896,   506,  3348,
    3349,  3355, -1728,  3350,  3356, -1728,  3357,  3376,  3386,  3365,
     506, -1728,  2712,  3367,  3369,   506,   506,  3370,   826,   690,
     506,   819,  3389,  3391,  3407,   506,  3410,  3387,   506,   506,
    3429,  3388,  1173,   506,  1316,  2799,  3424,   506,  3435,  3440,
     727,   506,  3449,  3450,  1123,   510,   828,  3066,   506,  3359,
   -1728,  2199,  2545,  2102,   542,   942,  2824,  2587,  1560,  2828,
     835,  2644,  3117,   630,  2751,   636,  3346,  3417,  2896,   523,
    3184,  3385,  3392, -1728,    25,    26,    27,  3411,  3218,  2527,
     974,   505,   517,  1717,  2552,   975,   538,  3383,  2523,  3390,
    1560,   538,   506,   638, -1281,   627,  2793,   641,   641,  2878,
     506,  2800,   645,   538,   653,  2874,  2801,   653,  3381,    82,
     671,   675,  1786,  2602,   675,    82,  3095,   538,   538,   506,
    2917,  2758,  1844,  2320,  1856,  1174,  3302,  1822,   819,  3263,
    3363,   677,   524,  2757,  3327,  3433,  1878,  2743,  2513,    32,
    1498,  2769,   976,  2499,  1648,  2164,  2869,  1689,  2669,  3368,
     974,  1475,  2509,  1688,  2802,   975,  1500,  1499,  2132, -1728,
     627,   627,  2872,  3312,  3240,  2163,  1693,   631,  2485, -1728,
    2803,  2971,   671,  2410,  1175,  2584,    37,   675,   538,   675,
     675,   675,  1176,  3145,   848,   963, -1728,   949, -1728, -1728,
     826,  1465,  2662,  1898,  1177,  2663,   835,  2693,  3190,  2328,
    1835,   829,  3315,  1454,  1456,   506,  3314,  2699,  1460,    39,
    2439,   977,   976,  1461,  2462,  2423,  2502,    82,   828,   690,
      42,  2460,  2440,  1939,  2709, -1728,  1178,  3011, -1728, -1728,
   -1728,  3100,  2417,  2101,    43,   714,   932,     0,     0,   506,
     819,     0,     0,     0,     0,  1385,  1386,   978,    82,   687,
       0,    82,     0,     0,     0,   506,     0,     0,    44,   526,
       0,  1899,     0,   979,     0,     0,     0,     0,     0,     0,
       0,  2804,  2752,   980,     0,  1316,  1626,  1180,     0,     0,
    2805,   977,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   506,   506,     0,     0,   506,     0,   506,
       0,     0,  1181,     0,     0,   981,     0,     0,  1560,   528,
       0,   529,   835,     0,     0,     0,     0,   978,     0,     0,
       0,  1183,  1387,  1388,   506,     0,  1953,  2278,   530,     0,
    3009,     0,     0,   979,   531,     0,     0,   532,     0,     0,
     523,     0,     0,   980,  1475,     0,     0,    21,   506,     0,
     982,     0,   826,     0,     0,     0,     0,   983,     0,   835,
       0,     0,     0,   629,     0, -1281,     0,     0,  1385,  1386,
       0,   835,     0,     0,     0,   981,     0,   689,  2872,     0,
     828,     0,   826,   826,     0,     0,  1389,  1390,  1391,  1392,
    1393,  1394,   829,     0,  1395,  1396,  1149,   984,   826,     0,
       0,   835,     0,   524,     0,  3201,  3202,     0,   835,     0,
     828,   828,     0,     0,     0,   506,   985,     0,     0,   506,
     982,     0,     0,   510,     0,     0,   828,   983,     0,   506,
       0,   506,     0,   506,     0,     0, -1730,   506,     0,   506,
       0,   506,     0,   636,   835,  1387,  1388,     0,   835,     0,
       0,   506,     0,     0,   835,  2254,   506,     0,   506,     0,
       0,     0,     0,     0,     0,     0,   506,   984,  1900,  1901,
    1902,   638,  1903,  1904,  1905,  1906,  1907,  1908,     0,  1275,
       0,  3260,     0,  3262,   506,   986,   985,    25,    26,    27,
    1954,     0,     0,     0,     0,     0,     0,     0,  3096,     0,
       0,     0,     0,     0,     0,     0,  1397,  1398,     0,  1389,
    1390,  1391,  1392,  1393,  1394,     0,     0,  1395,  1396,     0,
       0,  1437,  3294,     0,     0,     0,     0,     0,     0,     0,
       0,   506,     0,     0, -1730,     0,     0,   831,  3297,    82,
       0,   506,  3301,     0,     0,     0,     0,     0,     0,  1849,
       0,  1850,    32,     0,   506,   986,   539,     0,     0,     0,
       0,   539,     0,     0,   829,     0,     0,     0,   506,     0,
       0,     0,   510,   539,     0,     0,     0,  1560,     0, -1730,
     528,     0,   529,     0,     0,     0,   506,   539,   539,    37,
       0,     0,   636, -1730,     0,  3161,   675,     0, -1730,   826,
     675,   740,     0, -1730,   675,   531,     0,     0,   532,     0,
     506,   538, -1730,     0,   510,     0,     0, -1730,     0,     0,
     638,     0,    39,  1399,  1400,     0,   506,   828,     0,  1397,
    1398,   761,     0,    42,   636,  2872,     0,  1275,     0,     0,
     838,   538,   538,  1401,     0,     0,     0,    43,   539, -1730,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     506,     0,   638,  2869,   510,     0,  3393,  1475,  1475, -1730,
       0,    44,     0,  1475,  3099,   506,   506,   506,     0,     0,
       0,   940,   517,   641,   636,    45,     0,     0,   505,     0,
     675,     0,     0,  3408,    21,     0,     0,     0,     0,   627,
       0,     0,   506,   967,   967,     0,     0,     0,   967,   990,
       0,     0,   638,    82,    82,     0, -1730,     0,     0, -1730,
       0,     0,   653,   653,   653, -1730,   829,     0,     0,     0,
       0,     0,     0,     0,     0,   826,   653,   653,     0,   653,
       0,     0,     0,   506,     0,     0,  1399,  1400,   835,     0,
       0,     0,   675,     0,     0,     0,   829,   829,   538,     0,
       0,     0,     0,   828, -1730,     0,     0,  1579,   675,     0,
    1580,   675,   829,     0,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,   831,     0,     0,     0,     0,  3288, -1730,     0,    82,
       0,    82,     0,     0,     0,  1588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,     0,  1591,     0,     0,     0,     0,     0,  2091,     0,
     675,   675,   675,   675,     0,     0,     0,     0,     0,     0,
      82,     0,     0,     0,    25,    26,    27,  1592,     0,     0,
       0,     0,  2171,     0,     0,   677,    82,     0,     0,     0,
      82,   826,  2180,     0,  2183,     0,     0,  2194,     0,     0,
       0,     0,     0,  2198,     0,  2200,  1475,     0,     0,     0,
       0,     0,     0, -1730,     0,     0,     0,  2207,     0,   828,
       0,     0,  2210, -1730,     0,     0,  2215,  2216,  2217,  2218,
       0,  2222,  2223,     0,     0,     0,     0,     0,   826,    32,
   -1730,     0, -1730, -1730,  1011,     0,     0,  1891,     0,     0,
     826,  1892,  1893,     0,     0,  1894,  1895,  1896,     0,     0,
    2869,     0,     0,     0,     0,     0,   828,     0,     0,     0,
       0,  1593,  2713,     0,     0,   835,    37,     0,   828, -1730,
     826,     0, -1730, -1730, -1730,     0,     0,   826,  1594,     0,
       0,     0,     0,  1595,     0,     0,     0,  3161,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   828,    39,
       0,     0,   831,   829,    82,   828,  1596,  1597,     0,     0,
      42,     0,     0,   826,     0,     0,     0,   826,     0,     0,
   -1745,  1598,     0,   826,    43,     0,    21,     0,     0,     0,
       0,    82,     0,     0,     0,     0,     0,     0,    21,     0,
       0,   828,     0,     0,     0,   828,     0,     0,    44,     0,
       0,   828,   967,   990,     0,   675,     0,  1599,  1472,     0,
    1600,     0,    45,     0,   967,   967,     0,     0,   835,     0,
     538,     0,     0,     0,  1601,     0,   627,  1602,     0,     0,
       0,     0,     0,   627,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   538,     0,     0,     0,     0,     0,     0,
    1527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1539,   539,     0,     0,     0,     0,     0,     0, -1745,  1475,
    1475,  1475,  1475,  1475,  1475,     0,     0,  1475,  1475,  1475,
    1475,  1475,  1475,  1475,  1475,  1475,  1475,     0,     0,   829,
       0,   539,   539,  1898,     0,     0,   835,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3261,     0,     0,     0,
     538,     0,     0, -1745,     0,     0,    25,    26,    27,     0,
       0,   835,     0,  1603,   831,     0,     0, -1745,    25,    26,
      27,  1011, -1745,     0,  1891,     0,     0, -1745,  1892,  1893,
       0,     0,  1894,  1895,  1896,     0, -1745,     0,     0,     0,
       0, -1745,     0,     0,     0,  1640,     0,     0,  1642,  2990,
       0,  1899,     0,  1011,     0,     0,  1891,     0,     0,     0,
    1892,  1893,   538,   538, -1996, -1996, -1996,     0,   835,   675,
       0,    32,     0, -1745,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,  1472,     0, -1745,     0,   829,     0,     0,   539,     0,
       0,   675,  1716,     0,     0,     0,  1849,     0,    37,     0,
    1475,  1475,     0,     0,   675,     0,   679,     0,  1604,     0,
      37,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,
    1613,   675,     0,     0,     0,   675,     0,     0,     0,  1762,
   -1745,    39,   829, -1745,  2426,     0,     0,     0,     0, -1745,
       0,     0,    42,    39,   829,     0,     0,   826,     0,     0,
       0,     0,     0,     0,    42,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,   835,   831,     0,    43,   716,
       0,   719,     0,   723,   829,   828,     0,     0, -1745,     0,
      44,   829,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,    45,     0,   831,   831,     0,   835,
       0, -1745,     0,     0,     0,     0,    45,     0,   974,     0,
       0,     0,   831,   975,  1475,     0,     0,   829,     0,     0,
    1898,   829,     0,     0,     0,     0,     0,   829,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   832,     0,
       0,     0,     0,     0,     0,     0,   834,     0,  1900,  1901,
    1902,     0,  1903,  1904,  1905,  1906,  1907,  1908,  1775,   677,
     675,   740,     0,     0,     0,     0,  1795,     0,   675,  2618,
     976,     0,     0,     0,     0,     0,     0,   835,     0,  1814,
       0,     0,     0,     0,     0,     0,     0, -1745,  1899,     0,
       0,     0,     0,     0,     0,     0,     0, -1745,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1832,     0,     0,     0, -1745,  1832, -1745, -1745,     0,     0,
    1899,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   826,     0,     0,     0,     0,   977,
       0,     0,     0,     0,     0,     0,   838,     0,     0,   838,
       0,   538,   538, -1745,   538,   838, -1745, -1745, -1745,     0,
       0,     0,   828,     0,     0,     0,     0,     0,     0,     0,
    1492,     0,     0,     0,     0,   978,     0,     0,     0,     0,
       0,     0,  1527,     0,     0,     0,     0,     0,     0,     0,
       0,   979,     0,  1523,     0,     0,     0,     0,     0,     0,
       0,   980,     0,     0,  1472,  1472,     0,     0,     0,     0,
    1472,     0,   505,   831,     0,   835,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   967,     0,   538,  1934,     0,
       0,     0,     0,   981,     0,   675,     0,   826,   627,     0,
       0,   627,     0,     0,     0,     0,   627,     0,     0,   627,
       0,     0,     0,     0,   627,     0,   538,     0,   538,     0,
    1565,     0,     0,     0,     0,   828,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   982,     0,
       0,     0,   832,  2007,     0,   983,     0,     0,  2013,     0,
     834,     0,     0,     0,     0,  1900,  1901,  1902,     0,  1903,
    1904,  1905,  1906,  1907,  1908,     0,     0,     0,     0,     0,
    2773,  2774,     0,     0,     0,   826,  1475,  1475,     0,     0,
       0,   829,   539,   539,     0,   984,   838, -1996, -1996, -1996,
       0,  1903,  1904,  1905,  1906,  1907,  1908,     0,  2826,     0,
     826,     0,     0,   828,   985,     0,     0,     0,     0,   831,
       0,     0,     0,  2879,  2880,  2881,  2882,  2883,  2884,  2885,
    2886,  2887,  2888,     0,     0,     0,     0,     0,   828,     0,
       0,     0,     0,     0,     0,  2099,     0,   675,     0,   675,
       0,     0,     0,     0,     0,     0,     0,     0,   731,     0,
     675,  2115,   738,     0,     0,     0,   742,   826,     0,     0,
       0,     0,     0,  1472,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   986,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   828,     0,     0,   675,     0,
     538,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1716,   538,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   538,  2181,   538,  2185,     0,
     538,     0,     0,     0,     0,   831,   538,     0,   538,     0,
       0,     0,   835,   832,     0,     0,     0,     0,     0,   838,
     538,   834,   952,     0,   838,   538,     0,     0,     0,   538,
     538,   538,   538,     0,   538,   538,     0,     0,     0,     0,
       0,     0,     0,     0,   826,     0,     0,     0,   829,     0,
       0,     0,   831,     0,     0,  1475,     0,   675,   675,   675,
     675,   675,     0,     0,   831,     0,     0,     0,   740,  2259,
       0,  1171,   828,     0,     0,     0,     0,     0,   826,  2268,
    1475,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1172,     0,     0,   831,     0,  1011,     0,     0,  1891,
    1124,   831,     0,  1892,  1893,     0,   828,  1894,  1895,  1896,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2991,     0,     0,  3047,     0,     0,
       0,     0,     0,     0,     0,  1173,  2815,   831,     0,     0,
       0,   831,     0,     0,  2816,     0,     0,   831,     0,     0,
       0,   829,  1336,  1338,  1341,  1343,   826,     0,     0,     0,
       0,   539,   539,     0,   539,     0,  1472,  1472,  1472,  1472,
    1472,  1472,     0,     0,  1472,  1472,  1472,  1472,  1472,  1472,
    1472,  1472,  1472,  1472,   828,   832,     0,     0,     0,     0,
       0,     0,     0,   834,  1475,     0,     0,     0,     0,     0,
       0,     0,  2817,     0,   538,  1158,     0,     0,     0,     0,
       0,  1159,     0,     0,     0,     0,   675,     0,     0,  1171,
       0,     0,     0,     0,     0,   627,     0,     0,  1174,   829,
       0,   627,     0,     0,     0,     0,   538,   539,     0,  1172,
       0,   538,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   829,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1964,     0,  1968,     0,
       0,     0,     0,     0,     0,     0,     0,  1175,     0,     0,
       0,     0,     0,  1173,     0,  1176,   538,     0,     0,     0,
    2436,     0,     0,     0,   826,   538,     0,  1177,     0,  2818,
       0,     0,     0,     0,     0,  1898,     0,     0,     0,     0,
       0,   829,  1160,     0,     0,     0,     0,  1472,  1472,     0,
       0,     0,   828,     0,     0,     0,     0,     0,     0,  1178,
       0,     0,     0,  1475,  2007,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   832,     0,     0,
       0,     0,     0,     0,     0,   834,     0,  1467,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   627,     0,     0,
       0,     0,     0,  1899,     0,     0,  1174,   832,   832,   538,
    1180,     0,     0,     0,   627,   834,   834,  3187,  2115,     0,
       0,     0,     0,   832,     0,     0,     0,     0,     0,     0,
       0,   834,     0,     0,     0,  1181,     0,  3194,  3195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   829,     0,
       0,     0,     0,     0,  1183,  1175,  2819,     0,   538,  2820,
    3207,  1472,     0,  1176,   538,     0,     0,  1158,     0,     0,
     539,   831,     0,  1159,     0,  1177,     0,     0,     0,     0,
    1775,  1171,   829,     0,     0,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   539,  1161,   539,     0,     0,
     539,  1172,     0,     0,     0,     0,   539,  1178,   539,     0,
    1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,     0,
     539,     0,     0,     0,     0,   539,     0,     0,     0,   539,
     539,   539,   539,     0,   539,   539,     0,     0,     0,     0,
       0,     0,     0,     0,  1775,  1173,     0,     0,  1590,     0,
    1795,   675,  1179,     0,     0, -1996,  1163,     0,  1180,     0,
     829,     0,     0,  1475,     0,  1795,  1727,     0,  1775,   675,
     675,   675,     0,     0,  1160,     0,     0,     0,     0,     0,
    1592,   826,   538,  1181,   675,     0,     0,   675,  1182,     0,
       0,     0,   675,  1708,     0,     0,     0,     0,     0,     0,
       0,     0,  1183,     0,     0,  2636,  1735,     0,     0,   828,
    1900,  1901,  1902,     0,  1903,  1904,  1905,  1906,  1907,  1908,
       0,     0,   838,     0,   832,     0,     0,  1759,     0,     0,
       0,     0,   834,     0,     0,     0,     0,     0,  1174,     0,
    1775,  1775,     0,  1775,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   831,  1165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   505,     0, -1996,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1175,     0,  3377,
       0, -1996,  2668,     0,     0,  1176, -1996,     0,   829,     0,
     675,   675,   675,     0,   539,     0,     0,  1177,     0,   538,
       0,  1472,   538,     0,     0,     0,     0,     0,   538,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1161,     0,
       0,     0,     0,  2007, -1996,     0,  2409,     0,     0,  1178,
       0,  1968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     832,   831,  1780,  1472,  1472,     0,     0,     0,   834,     0,
    1800,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2201,     0,   539,  1601,  1163,     0,
    1180,     0,  2747,  1579,     0,  1565,  1580,     0,  2115,     0,
    1581,  1582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   675,  1181,     0,     0,   538,     0,
    2202,     0,   538,   538,   538,     0,     0,     0,  1775,  1716,
    1775,  1590,  1814,     0,  1183,     0,     0,     0, -1996,   831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   538,     0,  2827,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1592,   831,     0,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   832,     0,     0,   539,
       0,     0,  1579,     0,   834,  1580, -1996,     0,     0,  1581,
    1582,  1165,     0,     0,     0,  2268,     0,     0,     0,     0,
       0,   675,  1795,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1716,     0,     0,     0,
    1590,   831,     0,   832,     0,     0,  2456, -1996,   539,     0,
       0,   834,  1814,     0,  2517,   832,     0,  1946,     0,     0,
       0,     0,     0,   834,     0,     0,     0,     0,     0,     0,
       0,  1775,  1592,     0,     0,   829,     0, -1996,     0,     0,
       0,     0,  1472,     0,     0,   832,     0,     0,   538,     0,
       0,     0,   832,   834, -1996,   675,   675,   675,   675, -1996,
     834,     0,     0,     0,     0,     0,     0,  1472,     0,     0,
    1472, -1996,     0,     0,   538,   838,     0,     0,  1608,  1609,
    1610,  1611,  1612,  1613,     0,     0,     0,     0,   832,     0,
    2981,     0,   832,     0,     0,  2722,   834, -1996,   832,     0,
     834,     0,     0,     0,     0,     0,   834,     0,   831,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3004,     0,   627,     0,     0,     0, -1996,     0,     0,     0,
       0,     0,   539,     0,     0,     0,  3016,     0,     0,     0,
    2115,     0,   831, -1996,     0,     0,  2007,     0, -1996,     0,
    1601,     0,     0,     0,     0,     0,     0,     0,     0,  2100,
    1716,  2103,     0,     0,     0,     0,  1775,     0,     0,     0,
       0,     0,  2112,     0,     0,     0,     0,     0,     0,   838,
     538,  1472,     0,  1071,  1071,     0, -1996,   675,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3067,     0,     0,     0,     0,     0,
    2149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     831,     0,     0,     0,     0,  1579,     0,     0,  1580,     0,
       0,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,  1601,
       0,     0,     0,     0,     0,     0,     0,     0,  1197, -1996,
       0,     0,  1318,  1588,     0,     0,     0,     0,     0,   539,
       0,     0,   539,  1590,     0,     0,     0,     0,  1964,     0,
    1591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1775,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,  2268,     0,  2248,
    2249,  2251,  2252,  2253,     0,     0,     0,     0,     0,     0,
       0,  3114,     0,     0,     0,     0,     0,     0,     0,     0,
    1472,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1996,     0,
       0,     0,     0,     0,     0,     0,  3131,     0,     0,     0,
       0,     0,   538,     0, -1996,     0,     0,     0,   831,     0,
     538,  1608,  1609,  1610,  1611,  1612,  1613,     0,   539,  1424,
       0,     0,   539,   539,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3158,     0,  1593,
       0,     0,   832,     0,     0,     0,     0,     0,     0,     0,
     834,   539,     0,     0,     0,     0,  1594,     0,     0,   538,
       0,  1595,     0,     0,   538,     0,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,     0,     0,     0,     0,
    1442,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
     538,     0,     0, -1996,     0,     0,     0,     0,     0,  1598,
    1608,  1609,  1610,  1611,  1612,  1613,     0,     0,  2395,     0,
     538,   538,     0,     0,     0,     0,     0,  1449,     0,     0,
       0,     0,     0,  1466,     0,   675,  1468,  1716,     0,  1479,
    1482,  1487,  1490,   538,     0,  1599,     0,     0,  1600,  1442,
       0,     0,     0,     0,     0,     0,     0,   675,     0,     0,
    3229,     0,  1601,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1964,     0,
    1472,  1318,     0,     0,   538,   967,     0,     0,   967,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1543,     0,     0,  2409,     0,     0,     0,     0,     0,
       0,  3016,     0,     0,     0,     0,     0,     0,   675,  1548,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,     0,
    1551,  1552,  1553,     0,  1557,  1561,     0,     0,     0,   832,
       0,     0,     0,     0,     0,     0,     0,   834,   675,  1442,
       0,  1442,  1442,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,     0,  1622,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   831,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3229,
     539,     0,     0,     0,     0,     0,  1663,     0,     0,     0,
    1679,  1684,     0,     0,  1442,     0,     0,  1442,  1442,     0,
       0,  1071,  1071,     0,     0,     0,  1716,     0,     0,     0,
       0,     0,   832,     0,     0,     0,     0,     0,   838,   838,
     834,  3229,   838,     0,     0,     0,     0,     0,     0,     0,
    1934,     0,     0,     0,     0,     0,  1604,     0,     0,  1605,
    1606,  1607,   538,  1608,  1609,  1610,  1611,  1612,  1613,     0,
       0,     0,     0,     0,     0,     0,  1884,     0,     0,     0,
       0,     0,     0,     0,  1716,     0,     0,     0,     0,     0,
       0,  3229,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     832,     0,     0,  2589,     0,     0,     0,     0,   834,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   838,
       0,  2607,  2608,  2610,     0,   832,     0,     0,     0,     0,
       0,     0,     0,   834,  2115,     0,  2621,     0,     0,  2624,
       0,     0,     0,  1318,  2629,     0,     0,     0,     0,     0,
       0,     0,  1318,     0,     0,     0,  1579,     0,     0,  1580,
       0,     0,  3139,  1581,  1582,     0,     0, -1996, -1996, -1996,
    2409,     0,     0,     0,     0,     0,  1318,     0,     0,     0,
       0,     0,   832,     0,     0,     0,     0,     0,     0,     0,
     834,     0,     0,  1821,  1590,     0,     0,     0,     0,     0,
       0,  1591,     0,     0,  1830,     0,  1831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1838,     0,     0,   539,
       0,     0,     0,     0,   539,     0,  1592,     0,     0,     0,
       0,     0,     0,  1839,     0,     0,     0,     0,  1579,     0,
       0,  1580,     0,     0,     0,  1581,  1582,     0,     0,     0,
     539,     0,  2675,  2676,  2677,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1858,  1860,     0,     0,     0,
     539,   539,     0,     0,     0,     0,  1590,     0,     0,     0,
       0,     0,     0, -1996,     0,     0,     0,     0,     0,   832,
       0,     0,     0,   539,     0,     0,     0,   834,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1592,     0,
       0,     0,     0,     0,  1881,     0,     0,     0,     0,     0,
    1593,     0,     0,   832,     0,     0,     0,     0,     0,     0,
       0,   834,     0,     0,   539,     0,     0,  1594,     0,     0,
       0,     0,  1595,     0,     0,     0,  1487,     0,  1487,  1487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1071,  1071,     0,     0,     0,  2765,     0,     0,     0,
       0,  2725,     0,     0,     0,     0,     0,  1071,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   832, -1996,     0,     0,     0,     0,     0,  1986,   834,
    1987,     0,     0,     0,  1579,     0,     0,  1580,     0, -1996,
       0,  1581,  1582,     0, -1996,  1585,  1586,  1587,     0,     0,
       0,     0,     0,  1601,     0,     0,     0,     0,  2026,     0,
       0,     0,     0,     0,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  1590,  2905,     0,     0,  2046,  2047,     0,  1591,
       0,  2058, -1996,     0,     0,  2061,     0,     0,  2069,  2070,
    2071,  2072,  2073,  2074,  2075,  2076,  2077,     0,     0,  2078,
       0,     0,     0,     0,  1592,     0,  1071,     0,  1318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2104,
       0,     0,  2144,  2144,     0,  1601,     0,     0,     0,     0,
       0,     0,   539,     0,     0,     0,     0,  2944,  2945,  2946,
    2947,     0,  1603,     0,     0,     0,     0,     0,     0,   832,
       0,     0,     0,  1552,  1553,     0,     0,   834,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1442,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,  1442,     0,     0,  1442,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1594,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1996,     0,     0,     0,     0,     0,
       0,     0,     0, -1996, -1996,     0,     0,     0,  2225,     0,
       0,     0,  1318,     0,     0,  2235,  2236,  1604,  1598,     0,
   -1996, -1996, -1996,     0,  1608,  1609,  1610,  1611,  1612,  1613,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3054,
       0,     0,     0,     0,     0,     0,     0,     0,  2303,  2305,
       0,  1476,     0,     0,  1318,     0,     0, -1996,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1442,     0,     0,     0,     0,     0,
       0,     0,     0,   -44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1424,  2321,     0, -1996,
       0,     0,     0,     0,     0,     1,  1608,  1609,  1610,  1611,
    1612,  1613,     0,     0,     0,     2,     0,     3,     4,     0,
       0,     0,     0,     0,     0,     0,  2343,  2344,     0,  2345,
       5,     0,     0,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     8,     0,  2371,  2372,
       0,     0,  2104,     0,     0,     0,     0,     9,  1616,     0,
    1603,     0,     0,     0,     0,     0,   832,     0,     0,    10,
       0,    11,  1442,     0,   834,     0,     0,     0,     0,     0,
       0,  2399,    12,     0,     0,     0,  2404,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,     0,     0,
       0,  1616,     0,     0,     0,  1318,    15,     0,     0,     0,
       0,     0,    16,     0,     0,     0,  2421,     0,     0,     0,
      17,     0,    18,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1476,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,  2434,     0,     0,
       0,  1579,  2437,  2438,  1580,     0,     0,     0,  1581,  1582,
       0,     0,     0,     0,     0,  1604,    22,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,     0,     0,
       0,     0,    23,     0,  1616,     0,     0,     0,     0,  1590,
       0,     0,     0,     0,     0,  2458, -1996,     0,  2461,  2479,
    2463,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,  2467,  3203,     0,     0,
    1579,  1592,     0,  1580,     0,     0,     0,  1581,  1582,     0,
       0,     0,  2505,  2505,     0,     0,     0,     0,     0,  3227,
       0,  1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1663,     0,  1590,     0,
       0,     0,     0,     0,     0, -1996,     0,     0,     0,  1588,
       0,     0,     0,  1684,  2076,     0,     0,     0,     0,  1590,
      25,    26,    27,     0,  2726,     0,  1591,     0,    28,     0,
    1592,    29,  1071,     0,     0,     0,     0,     0,     0,     0,
    3267,  2521,     0,     0,     0,  1616,     0,     0,     0,     0,
       0,  1592,     0,     0,     0, -1996,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,    31,
    3293,     0, -1996,     0,     0,     0,     0, -1996,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
       0,     0,    33,  2994,     0,     0,    34,  1553,     0,     0,
       0,     0,     0,  1318,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0, -1996,     0,     0,    36,     0,
       0,     0,    37,     0, -1996,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2632,     0,     0,     0,
       0, -1996,    38,     0,     0,  1593, -1996,     0,     0,     0,
       0,  1616,     0,     0,     0,    39,     0,     0,    40,  2627,
       0,    41,  1594,     0,     0,     0,    42,  1595,  1601,     0,
       0,     0,     0,     0,     0,     0,  1616,     0,     0,     0,
      43,     0,     0,     0, -1996,     0,     0,     0,     0,     0,
    1596,  1597,     0,  1616,     0,  1616,     0,  1476,  1476,     0,
    1909,     0,     0,  1476,    44,  1598,  1616,     0,     0,  1616,
       0,     0,     0,     0,  1616,     0,     0,  1616,    45,     0,
       0,   -44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,     0,     0,
       0,  1599,     0,     0,  1600,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,     0, -1996,     0,     0,
    1616,     0,     0,     0,     0,  1616,     0,     0,  1616,  1616,
    1616,     0,     0,     0,  1616,     0,     0,     0,  1616,     0,
       0,     0,     0,     0,     0,  2696,     0,     0,     0,  2698,
    1987,     0,     0,     0,     0,     0,  2702,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2711,     0,     0,  2714,
       0,  2716,     0,     0,     0,     0,     0,     0,     0,  2720,
       0,     0,     0,     0,     0,     0, -1996,  2727,  2728,     0,
       0,     0,     0,     0,  2735,     0,     0,     0,     0,  1616,
       0,     0,     0,     0,     0,     0,     0,  1603,     0,  2744,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2759,
       0,     0, -1996,     0,     0,     0,     0,     0,     0,  1608,
    1609,  1610,  1611,  1612,  1613,     0,     0,     0,     0,  1071,
    1616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1442,     0,     0,     0,     0,     0,  1616,     0,     0,     0,
       0,  1616,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1909,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1996,     0,     0,     0,  2225,     0,  2225,  1608,  1609,
    1610,  1611,  1612,  1613,     0,     0,     0,     0,     0,     0,
       0,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,     0,     0,     0,     0,  2018,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,     0,     0,  1579,
       0,     0,  1580,     0,     0,     0,  1581,  1582,  1583,  1584,
    1585,  1586,  1587,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,  1589,     0,     0,     0,     0,     0,  1590,     0,     0,
       0,  2960,  2961,     0,  1591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2978,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
    2982,     0,     0,     0,     0,  2984,  2985,     0,     0,     0,
    2986,     0,     0,     0,     0,  2989,     0,     0,  2992,  2993,
       0,     0,     0,  2225,  1318,     0,     0,  3001,  1616,     0,
       0,     0,     0,     0,     0,     0,  1909,  1909,  1071,  1476,
    1476,  1476,  1476,  1476,  1476,     0,     0,  1476,  1476,  1476,
    1476,  1476,  1476,  1476,  1476,  1476,  1476,  1909,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1442,     0,     0,     0,
       0,  1442,  3042,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3061,
    1594,     0,     0,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1858,  1860,
       0,     0,     0,  1616,  1616,     0,     0,     0,  1596,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1616,     0,     0,     0,  1616,  1616,  1616,
    1616,  1616,  1616,  1616,  1616,     0,     0,     0,     0,  1599,
    1476,  1476,  1600,  1616,  1616,  3090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1616,  1601,     0,  1616,  1602,
       0,     0,     0,     0,     0,     0,  1616,  1616,  1616,  1616,
    1616,  1616,  1616,  1616,  1616,  1616,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1561,     0,     0,     0,     0,
       0,  1616,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   543,     0,     0,  1318,     0,     0,     0,     0,
       0,     0,  2434,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3150,  3151,     0,     0,  3152,     0,  1553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1476,  1603,     0,     0,     0,     0,
       0,     0,     0,     0,  3170,     0,     0,   544,     0,     0,
       0,     0,     0,     0,     0,     0,  1858,  1860,     0,     0,
       0,     0,     0,   545,     0,     0,     0,  1442,  3182,  1579,
       0,     0,  1580,     0,     0,     0,  1581,  1582,  1583,  1584,
    1585,  1586,  1587,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,  2706,  1616,     0,     0,     0,     0,  1590,     0,     0,
     546,     0,  1616,  1616,  1591,     0,     0,     0,     0,     0,
     547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   548,     0,     0,  3226,     0,   549,     0,  1592,
    1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,  1610,
    1611,  1612,  1613,  2960,     0,     0,     0,  3243,     0,     0,
       0,  1071,     0,     0,     0,     0,   550,     0,     0,     0,
       0,  3253,     0,     0,     0,     0,  2225,     0,  2225,     0,
       0,     0,     0,     0,     0,     0,  1071,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1616,     0,
       0,     0,     0,     0,  3278,     0,     0,     0,     0,   551,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
    1616,  1616,  1616,     0,     0,  1909,  1909,  1909,  1909,  1909,
    1909,     0,     0,  1593,  1909,  1909,  1909,  1909,  1909,  1909,
    1909,  1909,  1909,  1909,     0,     0,     0,     0,  1616,  1616,
    1594,  3303,     0,     0,     0,  1595,  1579,     0,     0,  1580,
       0,  2960,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,
       0,     0,     0,     0,  1071,     0,  1616,     0,  1596,  1597,
     553,  1616,     0,     0,  1588,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,  1590,   554,     0,     0,  1616,     0,
       0,  1591,     0,     0,     0,     0,  3347,     0,     0,     0,
       0,  1616,     0,     0,  1616,  1616,     0,     0,     0,     0,
       0,  1909,  1909,     0,  1442,     0,  1592,     0,   555,  1599,
       0,   556,  1600,     0,     0,  1616,  1476,  1476,  1616,     0,
    1616,     0,   558,     0,  1616,   559,  1601,     0,     0,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   560,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   561,     0,     0,
       0,     0,     0,     0,   562,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   563,  3402,  3402,  3402,  1616,     0,
     564,  1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,     0,     0,     0,
    1593,     0,  3402,     0,     0,     0,     0,   565,     0,  1588,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,  1590,
       0,     0,  1595,     0,     0,  1603,  1591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3402,     0,  1596,  1597,     0,     0,     0,
       0,  1592,     0,     0,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1579,
       0,     0,  1580,     0,  1616,     0,  1581,  1582,  1583,  1584,
    1585,  1586,  1587,     0,     0,     0,  1599,     0,     0,  1600,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,     0,  1601,     0,  1476,  1602,  1590,     0,     0,
       0,     0,     0,     0,  1591,     0,     0,     0,     0,     0,
    1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,  1610,
    1611,  1612,  1613,     0,     0,  1593,     0,  2018,     0,  1592,
       0,     0,     0,  1616,     0,  1616,     0,     0,     0,  1616,
       0,     0,  1594,     0,     0,     0,     0,  1595,  1616,     0,
       0,  1616,     0,  1616,     0,     0,     0,  1616,     0,     0,
    1909,  1909,     0,     0,  1616,  1616,     0,     0,     0,     0,
    1596,  1597,  1616,     0,     0,   543,     0,     0,     0,     0,
       0,  1616,     0,     0,     0,  1598,     0,     0,     0,     0,
       0,     0,  1603,     0,     0,     0,  1616,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1599,     0,  1593,  1600,     0,     0,     0,     0,     0,
     544,     0,     0,     0,  1476,     0,     0,     0,  1601,     0,
    1594,  1602,     0,     0,     0,  1595,   545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1596,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   546,     0,     0,     0,  1604,     0,     0,
    1605,  1606,  1607,   547,  1608,  1609,  1610,  1611,  1612,  1613,
       0,     0,     0,     0,  2342,   548,     0,     0,     0,  1599,
     549,     0,  1600,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,  1603,     0,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1909,  1476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,   552,  1616,  1616,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1616,     0,     0,     0,  1616,
       0,  1616,  1616,  1616,     0,     0,  1616,     0,     0,  1616,
    1616,     0,     0,     0,     0,  1603,     0,     0,  1616,     0,
       0,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,     0,     0,     0,     0,  2425,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   554,  1616,
       0,     0,     0,     0,     0,  1909,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1616,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   555,     0,     0,   556,     0,     0,     0,     0,     0,
       0,   557,     0,     0,     0,   558,     0,  1616,   559,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1604,     0,     0,  1605,  1606,  1607,   560,  1608,  1609,  1610,
    1611,  1612,  1613,     0,     0,  1909,     0,  2442,     0,     0,
     561,     0,     0,     0,     0,     0,     0,   562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   563,     0,     0,
       0,     0,     0,   564,     0,     0,     0,  1616,  1616,  1616,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1616,     0,     0,
     565,     0,     0,     0,     0,     0,     0,     0,     0,  1616,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1616,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,  1008,   640,
    1009,  1010,  1011,  1012,  1013,  1616,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
    1616,     0,     0,  1014,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,  1015,   135,
    1016,  1017,     0,   138,   139,   140,   141,   142,   143,  1018,
     610,   144,   145,  1019,  1020,   148,     0,   149,   150,   151,
     152,   611,     0,   612,  1616,  1021,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1022,  1023,   184,  1024,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,  1616,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1025,   213,   214,   215,   216,   217,   613,  1026,
     219,     0,   220,   221,  1027,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,  1028,  1029,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1030,  1031,     0,  1032,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1033,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1034,   311,  1035,   313,   314,
     315,   316,  1036,   317,   318,   319,   320,  1037,   615,   322,
    1038,   324,   325,   326,     0,   327,   328,     0,     0,  1039,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     617,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   618,   352,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,  1040,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,  1041,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,  1042,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   620,   436,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
     445,     0,   446,  1043,  1044,     0,     0,   449,   450,   621,
     452,   622,  1045,   454,   455,   623,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,  1046,     0,
     476,   477,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,  1052,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,     0,  2572,
     111,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,  1014,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1015,   135,  1016,  1017,     0,   138,   139,   140,   141,
     142,   143,  1018,   610,   144,   145,  1019,  1020,   148,     0,
     149,   150,   151,   152,   611,     0,   612,     0,  1021,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1022,  1023,   184,
    1024,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1025,   213,   214,   215,   216,
     217,   613,  1026,   219,     0,   220,   221,  1027,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1028,  1029,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1030,  1031,
       0,  1032,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1033,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1034,   311,
    1035,   313,   314,   315,   316,  1036,   317,   318,   319,   320,
    1037,   615,   322,  1038,   324,   325,   326,     0,   327,   328,
       0,     0,  1039,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   617,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     618,   352,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,  1040,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,  1041,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,  1042,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   620,   436,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,   445,     0,   446,  1043,  1044,     0,     0,
     449,   450,   621,   452,   622,  1045,   454,   455,   623,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,  1046,     0,   476,   477,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,  1050,     0,     0,     0,     0,
    1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,     0,  3153,   111,  1008,   640,  1009,  1010,  1011,  1012,
    1013,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,  1014,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,  1015,   135,  1016,  1017,     0,   138,
     139,   140,   141,   142,   143,  1018,   610,   144,   145,  1019,
    1020,   148,     0,   149,   150,   151,   152,   611,     0,   612,
       0,  1021,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1022,  1023,   184,  1024,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1025,   213,
     214,   215,   216,   217,   613,  1026,   219,     0,   220,   221,
    1027,   223,     0,   224,     0,   225,   226,    21,   227,   228,
     229,   230,   231,   232,     0,   233,     0,  1028,  1029,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1030,  1031,     0,  1032,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1033,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1034,   311,  1035,   313,   314,   315,   316,  1036,   317,
     318,   319,   320,  1037,   615,   322,  1038,   324,   325,   326,
       0,   327,   328,     0,     0,  1039,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   617,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    25,    26,    27,
       0,   349,   350,   618,   352,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,  1040,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,  1041,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    32,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,  1042,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   620,   436,     0,   437,   438,    37,
     439,   440,   441,   442,   443,   444,   445,     0,   446,  1043,
    1044,     0,     0,   449,   450,   621,   452,   622,  1045,   454,
     455,   623,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,    39,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   624,  1046,     0,   476,   477,   478,   479,
     480,   481,   482,     0,     0,   483,     0,    43,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,  1047,
       0,    44,     0,     0,     0,     0,  1048,  1049,  1050,     0,
       0,     0,     0,  1051,     0,  1052,  3129,     0,     0,     0,
    1053,  1054,  1055,  1056,   111,  1008,   640,  1009,  1010,  1011,
    1012,  1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1014,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1015,   135,  1016,  1017,     0,
     138,   139,   140,   141,   142,   143,  1018,   610,   144,   145,
    1019,  1020,   148,     0,   149,   150,   151,   152,   611,     0,
     612,     0,  1021,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1022,  1023,   184,  1024,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1025,
     213,   214,   215,   216,   217,   613,  1026,   219,     0,   220,
     221,  1027,   223,     0,   224,     0,   225,   226,    21,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1028,  1029,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1030,  1031,     0,  1032,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1033,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1034,   311,  1035,   313,   314,   315,   316,  1036,
     317,   318,   319,   320,  1037,   615,   322,  1038,   324,   325,
     326,     0,   327,   328,     0,     0,  1039,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   617,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    25,    26,
      27,     0,   349,   350,   618,   352,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,  1040,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,  1041,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    32,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,  1042,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   620,   436,     0,   437,   438,
      37,   439,   440,   441,   442,   443,   444,   445,     0,   446,
    1043,  1044,     0,     0,   449,   450,   621,   452,   622,  1045,
     454,   455,   623,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,    39,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   624,  1046,     0,   476,   477,   478,
     479,   480,   481,   482,     0,     0,   483,     0,    43,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
    1047,     0,    44,     0,     0,     0,     0,  1048,  1049,  1050,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,  1279,  1008,   640,  1009,  1010,
    1011,  1012,  1013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,  1280,   120,   121,   122,     0,     0,     0,  1281,
       0,  1014,     0,     0,  1282,   124,   125,     0,   126,   127,
     128,  1283,   130,   131,   132,   133,  1015,  1284,  1016,  1017,
       0,   138,   139,   140,   141,   142,   143,  1018,   610,   144,
     145,  1019,  1020,   148,     0,   149,   150,   151,   152,   611,
       0,  1285,     0,  1286,   156,   157,   158,   159,   160,  1287,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,  1288,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1022,  1023,   184,  1024,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
    1289,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1025,   213,   214,   215,   216,   217,   613,  1026,   219,     0,
     220,   221,  1027,   223,     0,   224,     0,   225,  1290,     0,
    1291,   228,   229,  1292,  1293,   232,     0,   233,     0,  1028,
    1029,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,  1294,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,  1295,   259,   260,   261,
     262,   263,   264,  1030,  1031,     0,  1032,     0,   268,  1296,
    1297,   271,  1298,   273,   274,   275,   276,   277,   278,     0,
       0,   279,  1299,   281,  1300,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1301,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1034,  1302,  1035,   313,   314,   315,   316,
    1036,   317,   318,  1303,   320,  1037,   615,   322,  1038,   324,
     325,   326,     0,   327,   328,     0,     0,  1039,   330,   331,
       0,     0,   332,   333,   334,  1304,   336,  1305,   617,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   618,  1306,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,  1040,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,  1307,   389,   390,   391,
    1041,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,  1308,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,  1309,   417,   418,  1042,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,  1310,   434,   620,   436,     0,   437,
     438,     0,   439,  1311,   441,   442,   443,   444,   445,     0,
     446,  1043,  1044,     0,     0,   449,   450,   621,   452,   622,
    1045,   454,   455,  1312,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,  1046,  1313,   476,  1314,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,  1047,     0,     0,     0,     0,     0,     0,  1048,  1049,
    1050,     0,     0,     0,     0,  1051,     0,  1052,  1315,     0,
       0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,  1009,
    1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1014,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1015,   135,  1016,
    1017,  1483,   138,   139,   140,   141,   142,   143,  1018,   610,
     144,   145,  1019,  1020,   148,     0,   149,   150,   151,   152,
     611,     0,   612,     0,  1021,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1022,  1023,   184,  1024,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1025,   213,   214,   215,   216,   217,   613,  1026,   219,
       0,   220,   221,  1027,   223,     0,   224,     0,   225,   226,
    1484,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1028,  1029,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1030,  1031,     0,  1032,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,  1485,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1033,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1034,   311,  1035,   313,   314,   315,
     316,  1036,   317,   318,   319,   320,  1037,   615,   322,  1038,
     324,   325,   326,     0,   327,   328,     0,     0,  1039,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   617,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   618,   352,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,  1040,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,  1041,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
    1042,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   620,   436,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,   445,
       0,   446,  1043,  1044,     0,  1486,   449,   450,   621,   452,
     622,  1045,   454,   455,   623,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,  1046,     0,   476,
     477,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,  1047,     0,     0,     0,     0,     0,     0,  1048,
    1049,  1050,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,  1279,  1008,   640,
    1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,  1281,     0,  1014,     0,     0,  1282,   124,   125,     0,
     126,   127,   128,  1283,   130,   131,   132,   133,  1015,  1284,
    1016,  1017,     0,   138,   139,   140,   141,   142,   143,  1018,
     610,   144,   145,  1019,  1020,   148,     0,   149,   150,   151,
     152,   611,     0,  1285,     0,  1286,   156,   157,   158,   159,
     160,  1287,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,  1288,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1022,  1023,   184,  1024,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1025,   213,   214,   215,   216,   217,   613,  1026,
     219,     0,   220,   221,  1027,   223,     0,   224,     0,   225,
    1290,     0,  1291,   228,   229,  1292,  1293,   232,     0,   233,
       0,  1028,  1029,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,  1294,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,  1295,   259,
     260,   261,   262,   263,   264,  1030,  1031,     0,  1032,     0,
     268,  1296,  1297,   271,  1298,   273,   274,   275,   276,   277,
     278,     0,     0,   279,  1299,   281,  1300,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1301,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1034,  1302,  1035,   313,   314,
     315,   316,  1036,   317,   318,  1303,   320,  1037,   615,   322,
    1038,   324,   325,   326,     0,   327,   328,     0,     0,  1039,
     330,   331,     0,     0,   332,   333,   334,  1304,   336,  1305,
     617,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   618,  1306,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,  1040,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,  1307,   389,
     390,   391,  1041,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,  1308,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,  1309,   417,
     418,  1042,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,  1310,   434,   620,   436,
       0,   437,   438,     0,   439,  1311,   441,   442,   443,   444,
     445,     0,   446,  1043,  1044,     0,     0,   449,   450,   621,
     452,   622,  1045,   454,   455,  1312,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,  1046,  2230,
     476,  1314,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,  1052,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,  1279,  1008,
     640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,  1281,     0,  1014,     0,     0,  1282,   124,   125,
       0,   126,   127,   128,  1283,   130,   131,   132,   133,  1015,
    1284,  1016,  1017,     0,   138,   139,   140,   141,   142,   143,
    1018,   610,   144,   145,  1019,  1020,   148,     0,   149,   150,
     151,   152,   611,     0,  1285,     0,  1286,   156,   157,   158,
     159,   160,  1287,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,  1288,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1022,  1023,   184,  1024,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1025,   213,   214,   215,   216,   217,   613,
    1026,   219,     0,   220,   221,  1027,   223,     0,   224,     0,
     225,  1290,     0,  1291,   228,   229,  1292,  1293,   232,     0,
     233,     0,  1028,  1029,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,  1294,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,  1295,
     259,   260,   261,   262,   263,   264,  1030,  1031,     0,  1032,
       0,   268,  1296,  1297,   271,  1298,   273,   274,   275,   276,
     277,   278,     0,     0,   279,  1299,   281,  1300,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1301,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1034,  1302,  1035,   313,
     314,   315,   316,  1036,   317,   318,  1303,   320,  1037,   615,
     322,  1038,   324,   325,   326,     0,   327,   328,     0,     0,
    1039,   330,   331,     0,     0,   332,   333,   334,  1304,   336,
    1305,   617,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   618,  1306,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,  1040,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,  1307,
     389,   390,   391,  1041,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,  1308,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,  1309,
     417,   418,  1042,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,  1310,   434,   620,
     436,     0,   437,   438,     0,   439,  1311,   441,   442,   443,
     444,   445,     0,   446,  1043,  1044,     0,     0,   449,   450,
     621,   452,   622,  1045,   454,   455,  1312,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,  1046,
       0,   476,  1314,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,  1047,     0,     0,     0,     0,     0,
       0,  1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,
    1052,  2284,     0,     0,     0,  1053,  1054,  1055,  1056,   111,
    1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119, -1087,   120,   121,   122,
       0,     0,     0,     0, -1087,  1014,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1015,   135,  1016,  1017,     0,   138,   139,   140,   141,   142,
     143,  1018,   610,   144,   145,  1019,  1020,   148,     0,   149,
     150,   151,   152,   611,     0,   612,     0,  1021,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1022,  1023,   184,  1024,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1025,   213,   214,   215,   216,   217,
     613,  1026,   219,     0,   220,   221,  1027,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  1028,  1029,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1030,  1031,     0,
    1032,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1033,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1034,   311,  1035,
     313,   314,   315,   316,  1036,   317,   318,   319,   320,  1037,
     615,   322,  1038,   324,   325,   326,     0,   327,   328,     0,
       0,  1039,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   617,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   618,
     352,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,  1040,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,  1041,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,  1042,   420, -1087,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     620,   436,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,   445,     0,   446,  1043,  1044,     0,     0,   449,
     450,   621,   452,   622,  1045,   454,   455,   623,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
    1046,     0,   476,   477,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,  1047,     0,     0,     0,     0,
       0,     0,  1048,  1049,  1050,     0,     0,     0,     0,  1051,
       0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,
    1279,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,  1281,     0,  1014,     0,     0,  1282,
     124,   125,     0,   126,   127,   128,  1283,   130,   131,   132,
     133,  1015,  1284,  1016,  1017,     0,   138,   139,   140,   141,
     142,   143,  1018,   610,   144,   145,  1019,  1020,   148,     0,
     149,   150,   151,   152,   611,     0,  1285,     0,  1286,   156,
     157,   158,   159,   160,  1287,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,  1288,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,  1022,  1023,   184,
    1024,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1025,   213,   214,   215,   216,
     217,   613,  1026,   219,     0,   220,   221,  1027,   223,     0,
     224,     0,   225,  1290,     0,  1291,   228,   229,  1292,  1293,
     232,     0,   233,     0,  1028,  1029,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,  1294,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,  1295,   259,   260,   261,   262,   263,   264,  1030,  1031,
       0,  1032,     0,   268,  1296,  1297,   271,  1298,   273,   274,
     275,   276,   277,   278,     0,     0,   279,  1299,   281,  1300,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1301,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1034,  1302,
    1035,   313,   314,   315,   316,  1036,   317,   318,  1303,   320,
    1037,   615,   322,  1038,   324,   325,   326,     0,   327,   328,
       0,     0,  1039,   330,   331,     0,     0,   332,   333,   334,
    1304,   336,  1305,   617,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     618,  1306,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,  1040,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,  1307,   389,   390,   391,  1041,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
    1308,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,  1309,   417,   418,  1042,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,  1310,
     434,   620,   436,     0,   437,   438,     0,   439,  1311,   441,
     442,   443,   444,   445,     0,   446,  1043,  1044,     0,     0,
     449,   450,   621,   452,   622,  1045,   454,   455,  1312,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,  1046,     0,   476,  1314,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,  1050,     0,     0,     0,     0,
    1051,     0,  1052,  2998,     0,     0,     0,  1053,  1054,  1055,
    1056,  1279,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,  1281,     0,  1014,     0,     0,
    1282,   124,   125,     0,   126,   127,   128,  1283,   130,   131,
     132,   133,  1015,  1284,  1016,  1017,     0,   138,   139,   140,
     141,   142,   143,  1018,   610,   144,   145,  1019,  1020,   148,
       0,   149,   150,   151,   152,   611,     0,  1285,     0,  1286,
     156,   157,   158,   159,   160,  1287,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,  1288,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1022,  1023,
     184,  1024,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1025,   213,   214,   215,
     216,   217,   613,  1026,   219,     0,   220,   221,  1027,   223,
       0,   224,     0,   225,  1290,     0,  1291,   228,   229,  1292,
    1293,   232,     0,   233,     0,  1028,  1029,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,  1294,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,  1295,   259,   260,   261,   262,   263,   264,  1030,
    1031,     0,  1032,     0,   268,  1296,  1297,   271,  1298,   273,
     274,   275,   276,   277,   278,     0,     0,   279,  1299,   281,
    1300,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1301,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1034,
    1302,  1035,   313,   314,   315,   316,  1036,   317,   318,  1303,
     320,  1037,   615,   322,  1038,   324,   325,   326,     0,   327,
     328,     0,     0,  1039,   330,   331,     0,     0,   332,   333,
     334,  1304,   336,  1305,   617,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   618,  1306,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
    1040,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,  1307,   389,   390,   391,  1041,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,  1308,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,  1309,   417,   418,  1042,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
    1310,   434,   620,   436,     0,   437,   438,     0,   439,  1311,
     441,   442,   443,   444,   445,     0,   446,  1043,  1044,     0,
       0,   449,   450,   621,   452,   622,  1045,   454,   455,  1312,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,  1046,     0,   476,  1314,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,  1047,     0,     0,
       0,     0,     0,     0,  1048,  1049,  1050,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   111,  1008,   640,  1009,  1010,     0,  1012,  1013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1014,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1015,   135,  1016,  1017,     0,   138,   139,
     140,   141,   142,   143,  1018,   610,   144,   145,  1019,  1020,
     148,     0,   149,   150,   151,   152,   611,     0,   612,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1022,
    1023,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1025,   213,   214,
     215,   216,   217,   613,  1026,   219,     0,   220,   221,  1027,
     223,     0,   224,     0,   225,   226,    21,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1028,  1029,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1030,  1031,     0,  1032,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1033,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1034,   311,  1035,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1037,   615,   322,  1038,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   617,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    25,    26,    27,     0,
     349,   350,   618,   352,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,  1040,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,  1041,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    32,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,  1042,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   620,   436,     0,   437,   438,    37,   439,
     440,   441,   442,   443,   444,   445,     0,   446,  1043,  1044,
       0,     0,   449,   450,   621,   452,   622,  1045,   454,   455,
     623,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,    39,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   624,  1046,     0,   476,   477,   478,   479,   480,
     481,   482,     0,     0,   483,     0,    43,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     0,     0,
      44,     0,     0,     0,   111,  1008,   640,  1009,  1010,  1011,
    1012,  1013,  1051,     0,  1052,     0,     0,     0,     0,  1053,
    1054,  1055,  1056,   112,   113,   114,   115,   116,   117,   118,
     119,  1660,   120,   121,   122,     0,     0,     0,     0,     0,
    1014,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1015,   135,  1016,  1017,     0,
     138,   139,   140,   141,   142,   143,  1018,   610,   144,   145,
    1019,  1020,   148,     0,   149,   150,   151,   152,   611,     0,
     612,     0,  1021,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1022,  1023,   184,  1024,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1025,
     213,   214,   215,   216,   217,   613,  1026,   219,     0,   220,
     221,  1027,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1028,  1029,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1030,  1031,     0,  1032,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1033,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1034,   311,  1035,   313,   314,   315,   316,  1036,
     317,   318,   319,   320,  1037,   615,   322,  1038,   324,   325,
     326,     0,   327,   328,     0,     0,  1039,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   617,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   618,   352,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,  1040,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,  1041,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,  1042,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   620,   436,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
    1043,  1044,     0,     0,   449,   450,   621,   452,   622,  1045,
     454,   455,   623,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,  1046,     0,   476,   477,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
    1047,     0,     0,     0,     0,     0,     0,  1048,  1049,  1050,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,   111,  1675,   640,  1009,  1010,
    1011,  1676,  1013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,  1677,   120,   121,   122,     0,     0,     0,     0,
       0,  1014,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,   133,  1015,   135,  1016,  1017,
       0,   138,   139,   140,   141,   142,   143,  1018,   610,   144,
     145,  1019,  1020,   148,     0,   149,   150,   151,   152,   611,
       0,   612,     0,  1021,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1022,  1023,   184,  1024,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1025,   213,   214,   215,   216,   217,   613,  1026,   219,     0,
     220,   221,  1027,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,  1028,
    1029,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1030,  1031,     0,  1032,     0,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1033,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1034,   311,  1035,   313,   314,   315,   316,
    1036,   317,   318,   319,   320,  1037,   615,   322,  1038,   324,
     325,   326,     0,   327,   328,     0,     0,  1039,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   617,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   618,   352,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,  1040,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
    1041,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,  1042,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   620,   436,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,   445,     0,
     446,  1043,  1044,     0,     0,   449,   450,   621,   452,   622,
    1045,   454,   455,   623,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,  1046,     0,   476,   477,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,  1047,     0,     0,     0,     0,     0,     0,  1048,  1049,
    1050,     0,     0,     0,     0,  1051,     0,  1052,     0,     0,
       0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,  1009,
    1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1014,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1015,   135,  1016,
    1017,     0,   138,   139,   140,   141,   142,   143,  1018,   610,
     144,   145,  1019,  1020,   148,     0,   149,   150,   151,   152,
     611,     0,   612,     0,  1021,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1022,  1023,   184,  1024,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1025,   213,   214,   215,   216,   217,   613,  1026,   219,
       0,   220,   221,  1027,   223,     0,   224,     0,   225,   226,
    1484,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1028,  1029,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1030,  1031,     0,  1032,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1033,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1034,   311,  1035,   313,   314,   315,
     316,  1036,   317,   318,   319,   320,  1037,   615,   322,  1038,
     324,   325,   326,     0,   327,   328,     0,     0,  1039,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   617,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   618,   352,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,  1040,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,  1041,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
    1042,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   620,   436,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,   445,
       0,   446,  1043,  1044,     0,     0,   449,   450,   621,   452,
     622,  1045,   454,   455,   623,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,  1046,     0,   476,
     477,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,  1047,     0,     0,     0,     0,     0,     0,  1048,
    1049,  1050,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,
    1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,  1014,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,  1015,   135,
    1016,  1017,     0,   138,   139,   140,   141,   142,   143,  1018,
     610,   144,   145,  1019,  1020,   148,     0,   149,   150,   151,
     152,   611,     0,   612,     0,  1021,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1022,  1023,   184,  1024,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1025,   213,   214,   215,   216,   217,   613,  1026,
     219,     0,   220,   221,  1027,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,  1028,  1029,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1030,  1031,     0,  1032,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1033,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1034,   311,  1035,   313,   314,
     315,   316,  1036,   317,   318,   319,   320,  1037,   615,   322,
    1038,   324,   325,   326,     0,   327,   328,     0,     0,  1039,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     617,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   618,   352,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,  1040,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,  1041,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,  1042,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   620,   436,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
     445,     0,   446,  1043,  1044,     0,     0,   449,   450,   621,
     452,   622,  1045,   454,   455,   623,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,  1046,     0,
     476,   477,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,  1052,
    2010,     0,     0,     0,  1053,  1054,  1055,  1056,   111,  1008,
     640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1014,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1015,
     135,  1016,  1017,     0,   138,   139,   140,   141,   142,   143,
    1018,   610,   144,   145,  1019,  1020,   148,     0,   149,   150,
     151,   152,   611,     0,   612,     0,  1021,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1022,  1023,   184,  1024,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1025,   213,   214,   215,   216,   217,   613,
    1026,   219,     0,   220,   221,  1027,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1028,  1029,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1030,  1031,     0,  1032,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1033,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1034,   311,  1035,   313,
     314,   315,   316,  1036,   317,   318,   319,   320,  1037,   615,
     322,  1038,   324,   325,   326,     0,   327,   328,     0,     0,
    1039,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   617,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   618,   352,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,  1040,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,  1041,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,  1042,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   620,
     436,     0,   437,   438,  2626,   439,   440,   441,   442,   443,
     444,   445,     0,   446,  1043,  1044,     0,     0,   449,   450,
     621,   452,   622,  1045,   454,   455,   623,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,  1046,
       0,   476,   477,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,  1047,     0,     0,     0,     0,     0,
       0,  1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,
    1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,   111,
    1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,  1014,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1015,   135,  1016,  1017,     0,   138,   139,   140,   141,   142,
     143,  1018,   610,   144,   145,  1019,  1020,   148,     0,   149,
     150,   151,   152,   611,     0,   612,     0,  1021,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,  1022,  1023,   184,  1024,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1025,   213,   214,   215,   216,   217,
     613,  1026,   219,     0,   220,   221,  1027,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  1028,  1029,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1030,  1031,     0,
    1032,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1033,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1034,   311,  1035,
     313,   314,   315,   316,  1036,   317,   318,   319,   320,  1037,
     615,   322,  1038,   324,   325,   326,     0,   327,   328,     0,
       0,  1039,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   617,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   618,
     352,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,  1040,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,  1041,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,  1042,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     620,   436,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,   445,     0,   446,  1043,  1044,     0,     0,   449,
     450,   621,   452,   622,  1045,   454,   455,   623,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
    1046,     0,   476,   477,   478,   479,   480,   481,   482,     0,
    2734,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,  1047,     0,     0,     0,     0,
       0,     0,  1048,  1049,  1050,     0,     0,     0,     0,  1051,
       0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,
     111,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,  2948,   120,   121,
     122,     0,     0,     0,     0,     0,  1014,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,  1015,   135,  1016,  1017,     0,   138,   139,   140,   141,
     142,   143,  1018,   610,   144,   145,  1019,  1020,   148,     0,
     149,   150,   151,   152,   611,     0,   612,     0,  1021,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,  2949,   174,
     175,   176,   177,   178,   179,   180,   181,  1022,  1023,   184,
    1024,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1025,   213,   214,   215,   216,
     217,   613,  1026,   219,     0,   220,   221,  1027,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  2950,  1029,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1030,  1031,
       0,  1032,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1033,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1034,   311,
    1035,   313,   314,   315,   316,  1036,   317,   318,   319,   320,
    1037,   615,   322,  1038,   324,   325,   326,     0,   327,   328,
       0,     0,  1039,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   617,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     618,   352,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,  1040,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,  2951,  1041,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,  1042,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   620,   436,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,   445,     0,   446,  1043,  1044,     0,     0,
     449,   450,   621,   452,   622,  1045,   454,   455,   623,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,  1046,     0,   476,   477,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,  1050,     0,     0,     0,     0,
    1051,     0,  2952,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,   111,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,  1014,     0,     0,
     123,   124,   125,     0,   126,   127,   128,   129,   130,   131,
     132,   133,  1015,   135,  1016,  1017,     0,   138,   139,   140,
     141,   142,   143,  1018,   610,   144,   145,  1019,  1020,   148,
       0,   149,   150,   151,   152,   611,     0,   612,     0,  1021,
     156,   157,   158,   159,   160,   161,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,  1022,  1023,
     184,  1024,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1025,   213,   214,   215,
     216,   217,   613,  1026,   219,     0,   220,   221,  1027,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,  1028,  1029,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1030,
    1031,     0,  1032,     0,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1033,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1034,
     311,  1035,   313,   314,   315,   316,  1036,   317,   318,   319,
     320,  1037,   615,   322,  1038,   324,   325,   326,     0,   327,
     328,     0,     0,  1039,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   617,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   618,   352,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
    1040,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,  1041,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,  1042,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   620,   436,     0,   437,   438,  3089,   439,   440,
     441,   442,   443,   444,   445,     0,   446,  1043,  1044,     0,
       0,   449,   450,   621,   452,   622,  1045,   454,   455,   623,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,  1046,     0,   476,   477,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,  1047,     0,     0,
       0,     0,     0,     0,  1048,  1049,  1050,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   111,  1008,   640,  1009,  1010,  1011,  1012,  1013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1014,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1015,   135,  1016,  1017,     0,   138,   139,
     140,   141,   142,   143,  1018,   610,   144,   145,  1019,  1020,
     148,     0,   149,   150,   151,   152,   611,     0,   612,     0,
    1021,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1022,
    1023,   184,  1024,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1025,   213,   214,
     215,   216,   217,   613,  1026,   219,     0,   220,   221,  1027,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1028,  1029,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1030,  1031,     0,  1032,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1033,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1034,   311,  1035,   313,   314,   315,   316,  1036,   317,   318,
     319,   320,  1037,   615,   322,  1038,   324,   325,   326,     0,
     327,   328,     0,     0,  1039,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   617,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   618,   352,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,  1040,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,  1041,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,  1042,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   620,   436,     0,   437,   438,  3225,   439,
     440,   441,   442,   443,   444,   445,     0,   446,  1043,  1044,
       0,     0,   449,   450,   621,   452,   622,  1045,   454,   455,
     623,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,  1046,     0,   476,   477,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,  1047,     0,
       0,     0,     0,     0,     0,  1048,  1049,  1050,     0,     0,
       0,     0,  1051,     0,  1052,     0,     0,     0,     0,  1053,
    1054,  1055,  1056,   111,  1008,   640,  1009,  1010,  1011,  1012,
    1013,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,  1014,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,  1015,   135,  1016,  1017,     0,   138,
     139,   140,   141,   142,   143,  1018,   610,   144,   145,  1019,
    1020,   148,     0,   149,   150,   151,   152,   611,     0,   612,
       0,  1021,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
    1022,  1023,   184,  1024,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1025,   213,
     214,   215,   216,   217,   613,  1026,   219,     0,   220,   221,
    1027,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,  1028,  1029,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1030,  1031,     0,  1032,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1033,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1034,   311,  1035,   313,   314,   315,   316,  1036,   317,
     318,   319,   320,  1037,   615,   322,  1038,   324,   325,   326,
       0,   327,   328,     0,     0,  1039,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   617,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   618,   352,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,  1040,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,  1041,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,  1042,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   620,   436,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,   445,     0,   446,  1043,
    1044,     0,     0,   449,   450,   621,   452,   622,  1045,   454,
     455,   623,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,  1046,     0,   476,   477,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,  1047,
       0,     0,     0,     0,     0,     0,  1048,  1049,  1050,     0,
       0,     0,     0,  1051,     0,  1052,     0,     0,     0,     0,
    1053,  1054,  1055,  1056,   111,  1008,   640,  1009,  1010,  1011,
    1012,  1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1014,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1015,   135,  1016,  1017,     0,
     138,   139,   140,   141,   142,   143,  1018,   610,   144,   145,
    1019,  1020,   148,     0,   149,   150,   151,   152,   611,     0,
     612,     0,  1021,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1022,  1023,   184,  1024,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1025,
     213,   214,   215,   216,   217,   613,  1026,   219,     0,   220,
     221,  1027,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1028,  1029,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1030,  1031,     0,  1032,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1033,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1034,   311,  1035,   313,   314,   315,   316,  1036,
     317,   318,   319,   320,  1037,   615,   322,  1038,   324,   325,
     326,     0,   327,   328,     0,     0,  1039,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   617,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   618,   352,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,  1040,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,  1041,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,  1042,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   620,   436,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
    1043,  1044,     0,     0,   449,   450,   621,   452,   622,  1045,
     454,   455,   623,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,  1046,     0,   476,   477,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
    1047,     0,     0,     0,     0,     0,     0,  1680,  1681,  1050,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,   111,  2142,   640,  1009,  1010,
    1011,  1012,  1013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,  1014,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,   133,  1015,   135,  1016,  1017,
       0,   138,   139,   140,   141,   142,   143,  1018,   610,   144,
     145,  1019,  1020,   148,     0,   149,   150,   151,   152,   611,
       0,   612,     0,  1021,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1022,  1023,   184,  1024,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1025,   213,   214,   215,   216,   217,   613,  1026,   219,     0,
     220,   221,  1027,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,  1028,
    1029,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1030,  1031,     0,  1032,     0,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1033,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1034,   311,  1035,   313,   314,   315,   316,
    1036,   317,   318,   319,   320,  1037,   615,   322,  1038,   324,
     325,   326,     0,   327,   328,     0,     0,  1039,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   617,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   618,   352,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,  1040,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
    1041,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,  1042,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   620,   436,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,   445,     0,
     446,  1043,  1044,     0,     0,   449,   450,   621,   452,   622,
    1045,   454,   455,   623,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,  1046,     0,   476,   477,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,  1047,     0,     0,     0,     0,     0,     0,  1048,  1049,
    1050,     0,     0,     0,     0,  1051,     0,  1052,     0,     0,
       0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,  1009,
    1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1014,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1015,   135,  1016,
    1017,     0,   138,   139,   140,   141,   142,   143,  1018,   610,
     144,   145,  1019,  1020,   148,     0,   149,   150,   151,   152,
     611,     0,   612,     0,  1021,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1022,  1023,   184,  1024,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1025,   213,   214,   215,   216,   217,   613,  1026,   219,
       0,   220,   221,  1027,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1028,  1029,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1030,  1031,     0,  1032,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1033,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1034,   311,  1035,   313,   314,   315,
     316,  1036,   317,   318,   319,   320,  1037,   615,   322,  1038,
     324,   325,   326,     0,   327,   328,     0,     0,  1039,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   617,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   618,   352,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,  1040,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,  1041,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
    1042,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   620,   436,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,   445,
       0,   446,  1043,  1044,     0,     0,   449,   450,   621,   452,
     622,  1045,   454,   455,   623,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,  1046,     0,   476,
     477,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,  1047,     0,     0,     0,     0,     0,     0,  1048,
    2224,  1050,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,
    1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,  1014,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,  1015,   135,
    1016,  1017,     0,   138,   139,   140,   141,   142,   143,  1018,
     610,   144,   145,  1019,  1020,   148,     0,   149,   150,   151,
     152,   611,     0,   612,     0,  1021,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,  1022,  1023,   184,  1024,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   779,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,  1025,   213,   214,   215,   216,   217,   613,  1026,
     219,     0,   220,   221,  1027,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,  1028,  1029,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,  1030,  1031,     0,  1032,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1033,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,  1034,   311,  1035,   313,   314,
     315,   316,  1036,   317,   318,   319,   320,  1037,   615,   322,
    1038,   324,   325,   326,     0,   327,   328,     0,     0,  1039,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     617,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   618,   352,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,  1040,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,  1041,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,  1042,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   620,   436,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
     445,     0,   446,  1043,  1044,     0,     0,   449,   450,   621,
     452,   622,  1045,   454,   455,   623,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,  1046,     0,
     476,   477,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,  1050,     0,     0,     0,     0,  1051,     0,  2433,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,   111,  1008,
     640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1014,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,  1015,
     135,  1016,  1017,     0,   138,   139,   140,   141,   142,   143,
    1018,   610,   144,   145,  1019,  1020,   148,     0,   149,   150,
     151,   152,   611,     0,   612,     0,  1021,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1022,  1023,   184,  1024,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,  1025,   213,   214,   215,   216,   217,   613,
    1026,   219,     0,   220,   221,  1027,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,  1028,  1029,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1030,  1031,     0,  1032,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1033,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1034,   311,  1035,   313,
     314,   315,   316,  1036,   317,   318,   319,   320,  1037,   615,
     322,  1038,   324,   325,   326,     0,   327,   328,     0,     0,
    1039,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   617,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   618,   352,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,  1040,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,  1041,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,  1042,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   620,
     436,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,   445,     0,   446,  1043,  1044,     0,     0,   449,   450,
     621,   452,   622,  1045,   454,   455,   623,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,  1046,
       0,   476,   477,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,  1047,     0,     0,     0,     0,     0,
       0,  1048,  2996,  1050,     0,     0,     0,     0,  1051,     0,
    1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,   111,
    1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,  1014,     0,     0,   123,   124,
     125,     0,   126,   127,   128,   129,   130,   131,   132,   133,
    1015,   135,  1016,  1017,     0,   138,   139,   140,   141,   142,
     143,  1018,   610,   144,   145,  1019,  1020,   148,     0,   149,
     150,   151,   152,   611,     0,   612,     0,  1021,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,  2949,   174,   175,
     176,   177,   178,   179,   180,   181,  1022,  1023,   184,  1024,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   779,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,  1025,   213,   214,   215,   216,   217,
     613,  1026,   219,     0,   220,   221,  1027,   223,     0,   224,
       0,   225,   226,     0,   227,   228,   229,   230,   231,   232,
       0,   233,     0,  2950,  1029,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   264,  1030,  1031,     0,
    1032,     0,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,     0,   279,   280,   281,   282,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1033,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,  1034,   311,  1035,
     313,   314,   315,   316,  1036,   317,   318,   319,   320,  1037,
     615,   322,  1038,   324,   325,   326,     0,   327,   328,     0,
       0,  1039,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   617,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   618,
     352,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,  1040,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  2951,  1041,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,  1042,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     620,   436,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,   445,     0,   446,  1043,  1044,     0,     0,   449,
     450,   621,   452,   622,  1045,   454,   455,   623,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
    1046,     0,   476,   477,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,  1047,     0,     0,     0,     0,
       0,     0,  1048,  1049,  1050,     0,     0,     0,     0,  1051,
       0,  2952,     0,     0,     0,     0,  1053,  1054,  1055,  1056,
     111,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,  1014,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
    3399,  1015,   135,  1016,  1017,     0,   138,   139,   140,   141,
     142,   143,  1018,   610,   144,   145,  1019,  1020,   148,     0,
     149,   150,   151,   152,   611,     0,   612,     0,  1021,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,  3400,
     175,   176,   177,   178,   179,   180,   181,  1022,  1023,   184,
    1024,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   779,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,  1025,   213,   214,   215,   216,
     217,   613,  1026,   219,     0,   220,   221,  1027,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,  1028,  1029,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,  1030,  1031,
       0,  1032,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,  1033,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,  1034,   311,
    1035,   313,   314,   315,   316,  1036,   317,   318,   319,   320,
    1037,   615,   322,  1038,   324,   325,   326,     0,   327,   328,
       0,     0,  1039,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   617,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     618,   352,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,  1040,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,  1041,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,  1042,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   620,   436,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,   445,     0,   446,  1043,  1044,     0,     0,
     449,   450,   621,   452,   622,  1045,   454,   455,   623,   457,
     458,  3401,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,  1046,     0,   476,   477,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,  1050,     0,     0,     0,     0,
    1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,   111,  1008,   640,  1009,  1010,  1011,  1012,  1013,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,  1014,     0,     0,
     123,   124,   125,     0,   126,   127,   128,   129,   130,   131,
     132,   133,  1015,   135,  1016,  1017,     0,   138,   139,   140,
     141,   142,   143,  1018,   610,   144,   145,  1019,  1020,   148,
       0,   149,   150,   151,   152,   611,     0,   612,     0,  1021,
     156,   157,   158,   159,   160,   161,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
    3400,   175,   176,   177,   178,   179,   180,   181,  1022,  1023,
     184,  1024,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,  1025,   213,   214,   215,
     216,   217,   613,  1026,   219,     0,   220,   221,  1027,   223,
       0,   224,     0,   225,   226,     0,   227,   228,   229,   230,
     231,   232,     0,   233,     0,  1028,  1029,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,  1030,
    1031,     0,  1032,     0,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1033,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,  1034,
     311,  1035,   313,   314,   315,   316,  1036,   317,   318,   319,
     320,  1037,   615,   322,  1038,   324,   325,   326,     0,   327,
     328,     0,     0,  1039,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   617,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   618,   352,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
    1040,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,  1041,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,  1042,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   620,   436,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,   445,     0,   446,  1043,  1044,     0,
       0,   449,   450,   621,   452,   622,  1045,   454,   455,   623,
     457,   458,  3401,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,  1046,     0,   476,   477,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,  1047,     0,     0,
       0,     0,     0,     0,  1048,  1049,  1050,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   111,  1008,   640,  1009,  1010,  1011,  1012,  1013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1014,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1015,   135,  1016,  1017,     0,   138,   139,
     140,   141,   142,   143,  1018,   610,   144,   145,  1019,  1020,
     148,     0,   149,   150,   151,   152,   611,     0,   612,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1022,
    1023,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1025,   213,   214,
     215,   216,   217,   613,  1026,   219,     0,   220,   221,  1027,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1028,  1029,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1030,  1031,     0,  1032,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,  1033,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1034,   311,  1035,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1037,   615,   322,  1038,   324,   325,   326,     0,
     327,   328,     0,     0,  1039,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   617,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   618,   352,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,  1040,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,  1041,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,  1042,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   620,   436,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,   445,     0,   446,  1043,  1044,
       0,     0,   449,   450,   621,   452,   622,  1045,   454,   455,
     623,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,  1046,     0,   476,   477,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     0,     0,
       0,     0,     0,     0,     0,  1470,  1471,     0,     0,     0,
       0,     0,  1051,     0,  1052,     0,     0,     0,     0,  1053,
    1054,  1055,  1056,   111,  1008,   640,  1009,  1010,  1011,  1012,
    1013,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,  1014,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132, -1996,  1015,   135,  1016,  1017,     0,   138,
     139,   140,   141,   142,   143,  1018,   610,   144,   145,  1019,
    1020,   148,     0,   149,   150,   151,   152,   611,     0,   612,
       0,  1021,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,  3400,   175,   176,   177,   178,   179,   180,   181,
    1022,  1023,   184,  1024,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,  1025,   213,
     214,   215,   216,   217,   613,  1026,   219,     0,   220,   221,
    1027,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230, -1996,   232,     0,   233,     0,  1028,  1029,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244, -1996,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,  1030,  1031,     0,  1032,     0,   268,     0,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281, -1996,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1033,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,  1034,   311,  1035,   313,   314,   315,   316,     0,   317,
     318,     0,   320,  1037,   615,   322,  1038,   324,   325,   326,
       0,   327,   328,     0,     0,  1039,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   617,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   618,   352,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,  1040,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,  1041,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415, -1996,   417,   418,  1042,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   620,   436,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,   445,     0,   446,  1043,
    1044,     0,     0,   449,   450,   621,   452,   622,  1045,   454,
     455,   623,   457,   458,  3401,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,  1046,     0,   476,   477,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504, -1996,
       0,     0,     0,     0,     0,     0,  1048,  1049,  1050,     0,
       0,     0,     0,  1051,     0,  1052,     0,     0,     0,     0,
    1053,  1054,  1055,  1056,   111,  1008,   640,  1009,  1010,     0,
    1012,  1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
    1014,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,  1015,   135,  1016,  1017,     0,
     138,   139,   140,   141,   142,   143,  1018,   610,   144,   145,
    1019,  1020,   148,     0,   149,   150,   151,   152,   611,     0,
     612,     0,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,  1022,  1023,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,  1025,
     213,   214,   215,   216,   217,   613,  1026,   219,     0,   220,
     221,  1027,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,  1028,  1029,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,  1030,  1031,     0,  1032,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,  1033,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  1034,   311,  1035,   313,   314,   315,   316,     0,
     317,   318,   319,   320,  1037,   615,   322,  1038,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   617,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   618,   352,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,  1040,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,  2128,
    2129,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,  1042,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   620,   436,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
    1043,  1044,     0,     0,   449,   450,   621,   452,   622,  1045,
     454,   455,   623,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,  1046,     0,   476,   477,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       0,     0,     0,     0,     0,     0,     0,  2130,  2131,     0,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,   111,  1008,   640,  1009,  1010,
    1011,  1012,  1013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,  1014,     0,     0,   123,   124,   125,     0,   126,   127,
     128,   129,   130,   131,   132,   133,  1015,   135,  1016,  1017,
       0,   138,   139,   140,   141,   142,   143,  1018,   610,   144,
     145,  1019,  1020,   148,     0,   149,   150,   151,   152,   611,
       0,   612,     0,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,  1022,  1023,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
    1025,   213,   214,   215,   216,   217,   613,  1026,   219,     0,
     220,   221,  1027,   223,     0,   224,     0,   225,   226,     0,
     227,   228,   229,   230,   231,   232,     0,   233,     0,  1028,
    1029,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  1030,  1031,     0,  1032,     0,   268,     0,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   280,   281,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1033,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,  1034,   311,  1035,   313,   314,   315,   316,
       0,   317,   318,   319,   320,  1037,   615,   322,  1038,   324,
     325,   326,     0,   327,   328,     0,     0,  1039,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   617,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   618,   352,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,  1040,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
    1041,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,  1042,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   620,   436,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,   445,     0,
     446,  1043,  1044,     0,     0,   449,   450,   621,   452,   622,
    1045,   454,   455,   623,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,  1046,     0,   476,   477,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     0,     0,     0,     0,     0,     0,     0,  1470,  1471,
       0,     0,     0,     0,     0,  1051,     0,  1052,     0,     0,
       0,     0,  1053,  1054,  1055,  1056,   111,  1008,   640,  1009,
    1010,     0,  1012,  1013,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,  1014,     0,     0,   123,   124,   125,     0,   126,
     127,   128,   129,   130,   131,   132,   133,  1015,   135,  1016,
    1017,     0,   138,   139,   140,   141,   142,   143,  1018,   610,
     144,   145,  1019,  1020,   148,     0,   149,   150,   151,   152,
     611,     0,   612,     0,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,  1022,  1023,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   779,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,  1025,   213,   214,   215,   216,   217,   613,  1026,   219,
       0,   220,   221,  1027,   223,     0,   224,     0,   225,   226,
       0,   227,   228,   229,   230,   231,   232,     0,   233,     0,
    1028,  1029,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   258,   259,   260,
     261,   262,   263,   264,  1030,  1031,     0,  1032,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   280,   281,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,  1033,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,  1034,   311,  1035,   313,   314,   315,
     316,     0,   317,   318,   319,   320,  1037,   615,   322,  1038,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   617,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   618,   352,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,  1040,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,  1041,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
    1042,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   620,   436,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,   445,
       0,   446,  1043,  1044,     0,     0,   449,   450,   621,   452,
     622,  1045,   454,   455,   623,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,  1046,     0,   476,
     477,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     0,     0,     0,     0,     0,     0,   111,  1008,
     640,  1009,  1010,  1011,  1012,  1013,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,  1014,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,     0,  1015,
     135,  1016,  1017,     0,   138,   139,   140,   141,   142,   143,
    1018,   610,   144,   145,  1019,  1020,   148,     0,   149,   150,
     151,   152,   611,     0,   612,     0,  1021,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,  1022,  1023,   184,  1024,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   779,   200,   201,
       0,   202,   203,   204,     0,   205,     0,   207,     0,   208,
     209,   210,   211,  1025,   213,   214,   215,   216,   217,   613,
    1026,   219,     0,   220,   221,  1027,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,     0,   232,     0,
     233,     0,  1028,  1029,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,  1030,  1031,     0,  1032,
       0,   268,     0,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,     0,   279,   280,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,  1033,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,  1034,   311,  1035,   313,
     314,   315,   316,     0,   317,   318,     0,   320,  1037,   615,
     322,  1038,   324,   325,   326,     0,   327,   328,     0,     0,
    1039,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   617,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   618,   352,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,  1040,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,  1041,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,     0,
     417,   418,  1042,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   620,
     436,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,   445,     0,   446,  1043,  1044,     0,     0,   449,   450,
     621,   452,   622,  1045,   454,   455,   623,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,  1046,
       0,   476,   477,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     0,     0,     0,     0,     0,     0,
       0,  1048,  1049,  1050,     0,   850,  1429,   640,  1051,     0,
    1052,  1012,     0,     0,     0,  1053,  1054,  1055,  1056,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,   851,
       0,     0,     0,     0,   852,   124,   125,     0,   126,   127,
     128,   853,   130,   131,   132,   854,   855,   856,   857,   858,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   859,   860,   148,     0,   149,   150,   151,   152,   861,
       0,   862,     0,   863,   156,   157,   158,   159,   160,   864,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   865,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   866,   867,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     868,   213,   214,   215,   216,   217,   869,  1430,   219,     0,
     220,   221,   870,   223,     0,   224,     0,   225,   871,     0,
     872,   228,   229,   873,   874,   232,     0,   233,     0,   875,
     876,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   877,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   878,   879,   260,   261,
     262,   263,   264,   880,   881,     0,   882,     0,   268,   883,
     884,   271,   885,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   886,   281,   887,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   888,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   889,   890,   891,   313,   314,   315,   892,
       0,   317,   318,   893,   320,     0,   894,   322,   895,   324,
     325,   326,     0,   327,   328,  1431,     0,   329,   330,   331,
       0,     0,   332,   333,   896,   897,   336,   898,   899,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   900,   901,   353,   354,   902,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   903,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   904,   389,   390,   391,
     905,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,   906,   406,   407,   408,   409,
     410,   411,   907,   413,   414,   415,   908,   417,   418,   909,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   910,   434,   911,   436,     0,   437,
     438,     0,   439,   912,   441,   442,   443,   444,   445,     0,
     446,   913,   914,     0,     0,   449,   450,   915,   452,   916,
    1432,   454,   455,   917,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,  1267,   919,     0,   476,   920,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   921,   922,   923,   924,
     925,   926,   927,   928,   929,   930,   931,   501,   502,   503,
     504,     0,     0,     0,     0,     0,     0,     0,  1433,  1434,
    2323,     0,   111,  1008,   640,  1009,  1010,  2324,  1012,     0,
       0,     0,     0,     0,     0,  1056,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1014,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1015,   135,  1016,  1017,     0,   138,   139,
     140,   141,   142,   143,  1018,     0,   144,   145,  1019,  1020,
     148,     0,   149,   150,   151,   152,   153,     0,   154,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1022,
    1023,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1025,   213,   214,
     215,   216,   217,   218,  1026,   219,     0,   220,   221,  1027,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,  2969,  1028,  1029,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1030,  1031,     0,  1032,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1034,   311,  1035,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1037,   321,   322,  1038,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,  1040,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,  1042,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,   445,     0,   446,  1043,  1044,
       0,     0,   449,   450,   451,   452,   453,  1045,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,  1046,     0,   476,   477,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     0,     0,
       0,     0,   111,  1008,   640,  1009,  1010,     0,  1012,     0,
       0,     0,  1051,     0,  2683,     0,     0,     0,     0,  1053,
    1054,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,  1014,     0,
       0,   123,   124,   125,     0,   126,   127,   128,   129,   130,
     131,   132,   133,  1015,   135,  1016,  1017,     0,   138,   139,
     140,   141,   142,   143,  1018,     0,   144,   145,  1019,  1020,
     148,     0,   149,   150,   151,   152,   153,     0,   154,     0,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,  1022,
    1023,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,  1025,   213,   214,
     215,   216,   217,   218,  1026,   219,     0,   220,   221,  1027,
     223,     0,   224,     0,   225,   226,     0,   227,   228,   229,
     230,   231,   232,     0,   233,     0,  1028,  1029,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   258,   259,   260,   261,   262,   263,   264,
    1030,  1031,     0,  1032,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   280,
     281,   282,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
    1034,   311,  1035,   313,   314,   315,   316,     0,   317,   318,
     319,   320,  1037,   321,   322,  1038,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,  1040,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,  1042,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,   445,     0,   446,  1043,  1044,
       0,     0,   449,   450,   451,   452,   453,  1045,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,  1046,     0,   476,   477,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     0,     0,
       0,     0,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1051,     0,  2683,     0,     0,     0,     0,  1053,
    1054,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,   966,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,  -520,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,  -520,   220,   221,   222,
     223,  -520,   224,     0,   225,     0,     0,     0,   228,   229,
     513,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,  -520,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,  -520,   283,   284,   285,   286,   287,   288,   289,
     290,   514,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,  -520,
     327,   328,     0,     0,   329,   330,   331,     0,  -520,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   515,   434,   435,   436,     0,   437,   438,     0,   439,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
       0,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,   457,   458,   459,   460,   461,  -520,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,   475,     0,   476,     0,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   512,     0,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1121,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   513,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   514,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   351,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   515,   434,   435,
     436,     0,   437,   438,     0,   439,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,     0,     0,   449,   450,
     451,   452,   453,     0,   454,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,   475,
       0,   476,     0,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   850,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2408,  3144,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     3,     4,     0,   851,     0,
       0,     0,     0,   852,   124,   125,     0,   126,   127,   128,
     853,   130,   131,   132,   854,   855,   856,   857,   858,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     859,   860,   148,     0,   149,   150,   151,   152,   861,     0,
     862,     0,   863,   156,   157,   158,   159,   160,   864,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     865,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   866,   867,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   868,
     213,   214,   215,   216,   217,   869,     0,   219,     0,   220,
     221,   870,   223,     0,   224,     0,   225,   871,    21,   872,
     228,   229,   873,   874,   232,     0,   233,     0,   875,   876,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     877,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   878,   879,   260,   261,   262,
     263,   264,   880,   881,     0,   882,     0,   268,   883,   884,
     271,   885,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   886,   281,   887,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   888,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   889,   890,   891,   313,   314,   315,   892,     0,
     317,   318,   893,   320,     0,   894,   322,   895,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   896,   897,   336,   898,   899,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    25,    26,
      27,     0,   349,   350,   900,   901,   353,   354,   902,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   903,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   904,   389,   390,   391,   905,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    32,   906,   406,   407,   408,   409,   410,
     411,   907,   413,   414,   415,   908,   417,   418,   909,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   910,   434,   911,   436,     0,   437,   438,
      37,   439,   912,   441,   442,   443,   444,   445,     0,   446,
     913,   914,     0,     0,   449,   450,   915,   452,   916,     0,
     454,   455,   917,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,    39,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   918,   919,     0,   476,   920,   478,
     479,   480,   481,   482,     0,     0,   483,     0,    43,   484,
     485,   486,   487,   488,   489,   921,   922,   923,   924,   925,
     926,   927,   928,   929,   930,   931,   501,   502,   503,   504,
       0,   111,    44,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,   125,     0,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,   610,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   611,     0,   612,     0,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   613,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,   226,    21,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   614,     0,   279,   280,   281,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   615,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   616,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   336,   337,   617,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    25,    26,    27,     0,   349,
     350,   618,   352,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   619,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      32,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   620,   436,     0,   437,   438,    37,   439,   440,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   621,   452,   622,     0,   454,   455,   623,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
      39,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   624,   475,     0,   476,   477,   478,   479,   480,   481,
     482,     0,     0,   483,     0,    43,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     0,   111,    44,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   625,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
       0,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,   610,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   611,     0,   612,     0,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   613,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,   226,     0,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   614,     0,   279,   280,   281,   282,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   615,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   616,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   617,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   618,   352,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   619,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   620,
     436,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,   445,     0,   446,   447,   448,     0,     0,   449,   450,
     621,   452,   622,     0,   454,   455,   623,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   624,   475,
       0,   476,   477,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   111,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     625,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,   125,     0,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,   610,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   611,     0,
     612,     0,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   613,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,   226,     0,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   280,   281,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   615,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   617,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   618,   352,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     619,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   620,   436,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
     447,   448,     0,     0,   449,   450,   621,   452,   622,     0,
     454,   455,   623,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,   475,     0,   476,   477,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,   125,     0,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,   610,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   611,     0,   612,     0,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   613,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,   226,     0,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   280,   281,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   615,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   617,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     618,   352,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   620,   436,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,   445,     0,   446,   447,   448,     0,     0,
     449,   450,   621,   452,   622,     0,   454,   455,   623,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,   475,     0,   476,   477,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3228,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,   710,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
      21,     0,   228,   229,   513,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   514,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      25,    26,    27,     0,   349,   350,   351,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    32,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   515,   434,   435,   436,     0,
     437,   438,    37,   439,     0,   441,   442,   443,   444,   445,
       0,   446,   711,   448,     0,     0,   712,   450,   451,   452,
     453,     0,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,    39,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   624,   475,     0,   476,
       0,   478,   479,   480,   481,   482,     0,     0,   483,     0,
      43,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   512,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,    21,     0,   228,   229,
     513,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   514,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    25,    26,    27,     0,
     349,   350,   351,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    32,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   515,   434,   435,   436,     0,   437,   438,    37,   439,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
       0,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,    39,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   624,   475,     0,   476,     0,   478,   479,   480,
     481,   482,     0,     0,   483,     0,    43,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     0,   512,
      44,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   951,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1522,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2154,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2408,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2516,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3138,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2012,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2114,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,  2257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3003,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,  2829,
    1429,   640,     0,     0,  1992,  1012,     0,     0,     0,     0,
       0,  1993,  1994,  2258,     0,  1995,  1996,  1997,   112,   113,
     114,   115,   116,   117,   118,   119,  1200,   120,   121,   122,
    1201,  1202,  1203,  2830,  1204,  1205,  1206,  1207,  2831,   124,
     125,  1208,   126,   127,   128,  2832,   130,   131,   132,     0,
     767,  2833,   769,   770,  1209,   138,   139,   140,   141,   142,
     143,  1210,  1211,   144,   145,   771,   772,   148,  1212,   149,
     150,   151,   152,     0,  1213,  2834,  1214,  2835,   156,   157,
     158,   159,   160,  2836,   162,   163,   164,  1215,   165,   166,
     167,   168,   169,   170,  1216,  2837,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   777,   778,   184,  1217,
     185,  1218,   186,   187,   188,   189,   190,   191,  1219,   192,
     193,   194,   195,   196,  1220,  1221,   197,   198,   779,   200,
     201,  1222,   202,   203,   204,  1223,   205,   206,   207,  1224,
     208,   209,   210,   211,     0,   213,   214,   215,   216,   217,
       0,  1225,   219,  1226,   220,   221,   780,   223,  1227,   224,
    1228,   225,  2838,  1229,  2839,   228,   229,  2840,  2841,   232,
    1230,   233,  1231,     0,     0,   236,   237,  1232,   238,   239,
     240,   241,   242,   243,   244,  2842,   246,   247,   248,   249,
    1233,   250,   251,   252,   253,   254,   255,   256,  1234,   257,
    2843,     0,   260,   261,   262,   263,   264,   787,   788,  1235,
     789,  1236,   268,  2844,  2845,   271,  2846,   273,   274,   275,
     276,   277,   278,  1237,  1238,   279,  2847,   281,  2848,  1239,
     283,   284,   285,   286,   287,   288,   289,   290,  2849,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   796,  2850,   798,
     313,   314,   315,  2851,  1240,   317,   318,  2852,   320,  1241,
       0,   322,   800,   324,   325,   326,  1242,   327,   328,  1243,
    1244,  2853,   330,   331,  1245,  1246,   332,   333,     0,  2854,
     336,  2855,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,  1247,  1248,  1249,  1250,   349,   350,     0,
    2856,   353,   354,     0,   356,   357,   358,  1251,   359,   360,
     361,   362,   363,   364,  1252,   365,   366,   367,   804,   369,
     370,   371,   372,  1253,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,  1254,   386,   387,
    2857,   389,   390,   391,   806,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,  1255,  2858,
     406,   407,   408,   409,   410,   411,  2859,   413,   414,   415,
    2860,   417,   418,   810,   420,  1256,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,  2861,   434,
       0,   436,  1257,   437,   438,  1258,   439,  2862,   441,   442,
     443,   444,   445,  1259,   446,   813,   814,  1260,  1261,   449,
     450,     0,   452,     0,  1262,   454,   455,  2863,   457,   458,
     459,   460,   461,  2864,  1264,   462,   463,   464,  1265,   465,
     466,   467,   468,  1266,   469,   470,   471,   472,   473,     0,
     817,  1268,   476,  2865,   478,   479,   480,   481,   482,  1269,
    1270,   483,  1271,  1272,   484,   485,   486,   487,   488,   489,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   501,   502,   503,   504,     0,   512,     0,  1998,  1999,
    2000,  1992,  2866,  2867,  2003,  2004,  2005,  2006,  1993,  1994,
       0,     0,  1995,  1996,  1997,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   513,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   514,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   351,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   515,   434,   435,   436,     0,
     437,   438,     0,   439,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,     0,     0,   449,   450,   451,   452,
     453,     0,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,   475,     0,   476,
       0,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     0,     0,     0,  1998,  1999,  2000,     0,  2001,
    2002,  2003,  2004,  2005,  2006,  1579,     0,     0,  1580,     0,
       0,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,  1579,     0,     0,  1580,     0,
    1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,  1579,     0,     0,  1580,     0,
    1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,  1579,     0,     0,  1580,     0,
    1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,  1579,     0,     0,  1580,  1593,
    1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,     0,
       0,  1595,     0,  1588,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,     0,     0,     0,     0,  1593,
    1591,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1598,
       0,  1595,     0,     0,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1593,
       0,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,
       0,  1595,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,  1593,
       0,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,
       0,  1595,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,  1593,
       0,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,
       0,  1595,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,  1596,  1597,     0,     0,     0,     0,
       0,  1603,     0,     0,     0,  1599,     0,     0,  1600,  1598,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,     0,  1599,     0,     0,  1600,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1604,     0,     0,  1605,
    1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,     0,
       0,  1603,     0,  2656,     0,     0,     0,     0,     0,     0,
       0,  1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,
    1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,
       0,  1603,     0,  2708,     0,     0,     0,     0,     0,  1590,
       0,  1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,
    1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,
       0,  1592,     0,  2775,     0,     0,     0,     0,     0,  1590,
       0,  1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,
    1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,
       0,  1592,     0,  2995,     0,     0,     0,     0,     0,  1590,
       0,  1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,
    1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,
       0,  1592,     0,  3002,     0,     0,     0,     0,     0,  1590,
       0,  1579,     0,     0,  1580,  1593,  1591,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,     0,     0,     0,
       0,     0,  1594,     0,     0,     0,     0,  1595,     0,  1588,
       0,  1592,     0,     0,     0,     0,     0,     0,     0,  1590,
       0,     0,     0,     0,     0,  1593,  1591,     0,     0,     0,
    1596,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1594,     0,     0,  1598,     0,  1595,     0,     0,
       0,  1592,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,     0,     0,
    1596,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1599,  1594,     0,  1600,  1598,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,  1593,     0,     0,     0,     0,
    1596,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1599,  1594,     0,  1600,  1598,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,  1593,     0,     0,     0,     0,
    1596,  1597,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1599,  1594,     0,  1600,  1598,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,     0,     0,     0,     0,
    1596,  1597,     0,     0,     0,     0,     0,  1603,     0,     0,
       0,  1599,     0,     0,  1600,  1598,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1603,     0,     0,
       0,  1599,     0,     0,  1600,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1603,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,     0,     0,  1603,     0,  3157,
       0,     0,     0,     0,     0,     0,     0,  1579,     0,     0,
    1580,     0,     0,     0,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,  1588,     0,  1603,     0,  3179,
       0,     0,     0,     0,     0,  1590,     0,  1579,     0,     0,
    1580,     0,  1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,  1588,     0,  1592,     0,  3279,
       0,     0,     0,     0,     0,  1590,     0,  1579,     0,     0,
    1580,     0,  1591,     0,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,  1588,     0,  1592,     0,  3336,
       0,     0,     0,     0,     0,  1590,     0,     0,  1579,     0,
       0,  1580,  1591,     0,     0,  1581,  1582,  1583,  1584,  1585,
    1586,  1587,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  1612,  1613,     0,  1588,  1592,     0,  3358,
       0,     0,     0,     0,     0,     0,  1590,     0,     0,     0,
       0,  1593,     0,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1594,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,  1592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1593,     0,     0,     0,     0,  1596,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1594,     0,
       0,  1598,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1593,     0,     0,     0,     0,  1596,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1599,  1594,     0,
    1600,  1598,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,     0,  1593,     0,     0,     0,  1596,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1599,     0,  1594,
    1600,  1598,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1596,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,  1599,     0,     0,
    1600,     0,  1598,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,     0,     0,  1599,     0,
       0,  1600,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,  1602,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1604,     0,
       0,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,
    1613,     0,     0,  1764,  1603,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1604,     0,
       0,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,
    1613,     0,     0,  2729,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1604,     0,
       0,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,
    1613,     0,     0,  3147,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1199,     0,     0,  1604,
       0,     0,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,
    1612,  1613,     0,     0,  3320,   112,   113,   114,   115,   116,
     117,   118,   119,  1200,   120,   121,   122,  1201,  1202,  1203,
     851,  1204,  1205,  1206,  1207,   852,   124,   125,  1208,   126,
     127,   128,   853,   130,   131,   132,   854,   855,   856,   857,
     858,  1209,   138,   139,   140,   141,   142,   143,  1210,  1211,
     144,   145,   859,   860,   148,  1212,   149,   150,   151,   152,
     861,  1213,   862,  1214,   863,   156,   157,   158,   159,   160,
     864,   162,   163,   164,  1215,   165,   166,   167,   168,   169,
     170,  1216,   865,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   866,   867,   184,  1217,   185,  1218,   186,
     187,   188,   189,   190,   191,  1219,   192,   193,   194,   195,
     196,  1220,  1221,   197,   198,   199,   200,   201,  1222,   202,
     203,   204,  1223,   205,   206,   207,  1224,   208,   209,   210,
     211,   868,   213,   214,   215,   216,   217,   869,  1225,   219,
    1226,   220,   221,   870,   223,  1227,   224,  1228,   225,   871,
    1229,   872,   228,   229,   873,   874,   232,  1230,   233,  1231,
     875,   876,   236,   237,  1232,   238,   239,   240,   241,   242,
     243,   244,   877,   246,   247,   248,   249,  1233,   250,   251,
     252,   253,   254,   255,   256,  1234,   257,   878,   879,   260,
     261,   262,   263,   264,   880,   881,  1235,   882,  1236,   268,
     883,   884,   271,   885,   273,   274,   275,   276,   277,   278,
    1237,  1238,   279,   886,   281,   887,  1239,   283,   284,   285,
     286,   287,   288,   289,   290,   888,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   889,   890,   891,   313,   314,   315,
     892,  1240,   317,   318,   893,   320,  1241,   894,   322,   895,
     324,   325,   326,  1242,   327,   328,  1243,  1244,   329,   330,
     331,  1245,  1246,   332,   333,   896,   897,   336,   898,   899,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
    1247,  1248,  1249,  1250,   349,   350,   900,   901,   353,   354,
     902,   356,   357,   358,  1251,   359,   360,   361,   362,   363,
     364,  1252,   365,   366,   367,   903,   369,   370,   371,   372,
    1253,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,  1254,   386,   387,   904,   389,   390,
     391,   905,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,  1255,   906,   406,   407,   408,
     409,   410,   411,   907,   413,   414,   415,   908,   417,   418,
     909,   420,  1256,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   910,   434,   911,   436,  1257,
     437,   438,  1258,   439,   912,   441,   442,   443,   444,   445,
    1259,   446,   913,   914,  1260,  1261,   449,   450,   915,   452,
     916,  1262,   454,   455,   917,   457,   458,   459,   460,   461,
    1263,  1264,   462,   463,   464,  1265,   465,   466,   467,   468,
    1266,   469,   470,   471,   472,   473,  1267,   919,  1268,   476,
     920,   478,   479,   480,   481,   482,  1269,  1270,   483,  1271,
    1272,   484,   485,   486,   487,   488,   489,   921,   922,   923,
     924,   925,   926,   927,   928,   929,   930,   931,   501,   502,
     503,   504,   512,     0,     0,     0,     0,     0,     0,     0,
       0,  2023,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     513,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   514,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   515,   434,   435,   436,     0,   437,   438,     0,   439,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
       0,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,   475,     0,   476,     0,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   512,     0,
       0,     0,     0,     0,     0,     0,     0,  2649,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   513,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   514,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   351,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   515,   434,   435,
     436,     0,   437,   438,     0,   439,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,     0,     0,   449,   450,
     451,   452,   453,     0,   454,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,   475,
       0,   476,     0,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   850,  1429,   640,     0,     0,     0,
    1012,     0,     0,  2652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,   851,     0,
       0,     0,     0,   852,   124,   125,     0,   126,   127,   128,
     853,   130,   131,   132,   854,   855,   856,   857,   858,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     859,   860,   148,     0,   149,   150,   151,   152,   861,     0,
     862,     0,   863,   156,   157,   158,   159,   160,   864,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     865,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   866,   867,   184,  1636,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   868,
     213,   214,   215,   216,   217,   869,  1430,   219,     0,   220,
     221,   870,   223,     0,   224,     0,   225,   871,     0,   872,
     228,   229,   873,   874,   232,     0,   233,     0,   875,   876,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     877,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   878,   879,   260,   261,   262,
     263,   264,   880,   881,     0,   882,     0,   268,   883,   884,
     271,   885,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   886,   281,   887,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   888,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   889,   890,   891,   313,   314,   315,   892,     0,
     317,   318,   893,   320,     0,   894,   322,   895,   324,   325,
     326,     0,   327,   328,  1431,     0,   329,   330,   331,     0,
       0,   332,   333,   896,   897,   336,   898,   899,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   900,   901,   353,   354,   902,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   903,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   904,   389,   390,   391,   905,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,   906,   406,   407,   408,   409,   410,
     411,   907,   413,   414,   415,   908,   417,   418,   909,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   910,   434,   911,   436,     0,   437,   438,
       0,   439,   912,   441,   442,   443,   444,   445,     0,   446,
     913,   914,     0,     0,   449,   450,   915,   452,   916,  1432,
     454,   455,   917,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,  1267,   919,     0,   476,   920,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   921,   922,   923,   924,   925,
     926,   927,   928,   929,   930,   931,   501,   502,   503,   504,
     850,  1429,   640,     0,     0,     0,  1012,  1433,  1434,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,   851,     0,     0,     0,     0,   852,
     124,   125,     0,   126,   127,   128,   853,   130,   131,   132,
     854,   855,   856,   857,   858,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   859,   860,   148,     0,
     149,   150,   151,   152,   861,     0,   862,     0,   863,   156,
     157,   158,   159,   160,   864,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   865,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   866,   867,   184,
    1638,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   868,   213,   214,   215,   216,
     217,   869,  1430,   219,     0,   220,   221,   870,   223,     0,
     224,     0,   225,   871,     0,   872,   228,   229,   873,   874,
     232,     0,   233,     0,   875,   876,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   877,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,   878,   879,   260,   261,   262,   263,   264,   880,   881,
       0,   882,     0,   268,   883,   884,   271,   885,   273,   274,
     275,   276,   277,   278,     0,     0,   279,   886,   281,   887,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   888,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   889,   890,
     891,   313,   314,   315,   892,     0,   317,   318,   893,   320,
       0,   894,   322,   895,   324,   325,   326,     0,   327,   328,
    1431,     0,   329,   330,   331,     0,     0,   332,   333,   896,
     897,   336,   898,   899,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     900,   901,   353,   354,   902,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   903,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   904,   389,   390,   391,   905,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
     906,   406,   407,   408,   409,   410,   411,   907,   413,   414,
     415,   908,   417,   418,   909,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   910,
     434,   911,   436,     0,   437,   438,     0,   439,   912,   441,
     442,   443,   444,   445,     0,   446,   913,   914,     0,     0,
     449,   450,   915,   452,   916,  1432,   454,   455,   917,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
    1267,   919,     0,   476,   920,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   921,   922,   923,   924,   925,   926,   927,   928,   929,
     930,   931,   501,   502,   503,   504,   850,  1429,   640,     0,
       0,     0,  1012,  1433,  1434,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
     851,     0,     0,     0,     0,   852,   124,   125,     0,   126,
     127,   128,   853,   130,   131,   132,   854,   855,   856,   857,
     858,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   859,   860,   148,     0,   149,   150,   151,   152,
     861,     0,   862,     0,   863,   156,   157,   158,   159,   160,
     864,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   865,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   866,   867,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   868,   213,   214,   215,   216,   217,   869,  1430,   219,
       0,   220,   221,   870,   223,     0,   224,     0,   225,   871,
       0,   872,   228,   229,   873,   874,   232,     0,   233,     0,
     875,   876,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   877,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,   878,   879,   260,
     261,   262,   263,   264,   880,   881,     0,   882,     0,   268,
     883,   884,   271,   885,   273,   274,   275,   276,   277,   278,
       0,     0,   279,   886,   281,   887,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   888,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   889,   890,   891,   313,   314,   315,
     892,     0,   317,   318,   893,   320,     0,   894,   322,   895,
     324,   325,   326,     0,   327,   328,  1431,     0,   329,   330,
     331,     0,     0,   332,   333,   896,   897,   336,   898,   899,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   900,   901,   353,   354,
     902,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   903,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   904,   389,   390,
     391,   905,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,   906,   406,   407,   408,
     409,   410,   411,   907,   413,   414,   415,   908,   417,   418,
     909,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   910,   434,   911,   436,     0,
     437,   438,     0,   439,   912,   441,   442,   443,   444,   445,
       0,   446,   913,   914,     0,     0,   449,   450,   915,   452,
     916,  1432,   454,   455,   917,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,  1267,   919,     0,   476,
     920,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   921,   922,   923,
     924,   925,   926,   927,   928,   929,   930,   931,   501,   502,
     503,   504,     0,     0,  1579,     0,     0,  1580,     0,  1433,
    1434,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,     0,     0,     0,  2120,     0,     0,
       0,     0,  1590,     0,  1579,     0,     0,  1580,     0,  1591,
       0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,  1592,     0,     0,     0,     0,     0,
       0,     0,  1590,     0,  1579,     0,     0,  1580,     0,  1591,
       0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,  1592,     0,     0,     0,  2121,     0,
       0,     0,  1590,     0,  1579,     0,     0,  1580,     0,  1591,
       0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,  1592,     0,  1879,     0,     0,     0,
       0,     0,  1590,     0,  1579,     0,     0,  1580,  1593,  1591,
       0,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,     0,     0,     0,     0,  1594,     0,     0,     0,     0,
    1595,     0,  1588,     0,  1592,     0,     0,     0,  1915,     0,
       0,     0,  1590,  1916,     0,     0,     0,     0,  1593,  1591,
       0,     0,     0,  1596,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1594,     0,     0,  1598,     0,
    1595,     0,     0,     0,  1592,     0,     0,  3427,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,  1596,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,  1593,     0,
       0,     0,     0,  1596,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,  1593,     0,
       0,     0,     0,  1596,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,  1594,     0,  1600,  1598,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,  1596,  1597,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,  1599,     0,     0,  1600,  1598,     0,
       0,     0,  3428,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,  1599,     0,     0,  1600,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,  2124,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,     0,     0,  1886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1604,     0,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,     0,     0,
    1603,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,     0,
    1603,     0,  1921,     0,     0,     0,     0,     0,  1590,     0,
    1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,     0,
    1592,     0,     0,     0,     0,     0,     0,     0,  1590,     0,
    1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,     0,
    1592,     0,  1928,     0,     0,     0,     0,     0,  1590,     0,
    1579,     0,     0,  1580,     0,  1591,     0,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,     0,  1604,     0,     0,  1605,  1606,
    1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,  1588,     0,
    1592,     0,     0,     0,     0,     0,     0,     0,  1590,     0,
       0,     0,     0,     0,  1593,  1591,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1579,     0,  1595,  1580,     0,     0,
    1592,  1581,  1582,  1583,  1584,  1585,  1586,  1587,     0,  1926,
       0,     0,     0,     0,  1593,     0,     0,     0,     0,  1596,
    1597,     0,  1588,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,  1590,     0,  1598,     0,  1595,     0,     0,  1591,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1593,     0,     0,     0,     0,  1596,
    1597,     0,     0,     0,  1592,     0,     0,     0,     0,     0,
    1599,  1594,     0,  1600,  1598,     0,  1595,     0,     0,     0,
       0,     0,     0,     0,  2016,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,  1593,     0,     0,     0,     0,  1596,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1599,  1594,     0,  1600,  1598,     0,  1595,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1599,     0,     0,  1600,  1598,     0,     0,     0,  1593,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,     0,  1594,     0,     0,     0,     0,
    1595,     0,     0,     0,     0,     0,  1603,     0,     0,     0,
    1599,     0,     0,  1600,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1596,  1597,     0,     0,  1601,     0,     0,
    1602,     0,     0,     0,     0,     0,     0,     0,  1598,     0,
       0,     0,     0,     0,     0,     0,  1603,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1599,     0,     0,  1600,     0,     0,
       0,     0,     0,     0,     0,     0,  1603,     0,     0,     0,
       0,  1601,     0,     0,  1602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,
    1610,  1611,  1612,  1613,     0,     0,  1603,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1579,     0,     0,
    1580,     0,     0,     0,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,
    1610,  1611,  1612,  1613,     0,  1588,     0,     0,     0,  2706,
       0,     0,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,     0,  1591,     0,     0,     0,     0,     0,     0,     0,
    1603,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,
    1610,  1611,  1612,  1613,     0,     0,     0,  1592,     0,  1579,
       0,     0,  1580,     0,     0,     0,  1581,  1582,  1583,  1584,
    1585,  1586,  1587,  2695,     0,     0,     0,     0,     0,     0,
       0,  1604,     0,     0,  1605,  1606,  1607,  1588,  1608,  1609,
    1610,  1611,  1612,  1613,     0,     0,     0,  1590,     0,     0,
       0,     0,     0,     0,  1591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
       0,  1579,     0,     0,  1580,     0,     0,     0,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1604,     0,     0,  1605,  1606,
    1607,  1593,  1608,  1609,  1610,  1611,  1612,  1613,     0,  1588,
       0,     0,     0,     0,     0,     0,     0,     0,  1594,  1590,
       0,     0,     0,  1595,     0,     0,  1591,     0,     0,  1579,
       0,     0,  1580,     0,     0,     0,  1581,  1582,     0,     0,
    1585,  1586,  1587,     0,     0,     0,  1596,  1597,     0,     0,
       0,  1592,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,  1598,     0,     0,     0,     0,     0,  1590,     0,     0,
       0,     0,     0,  1593,  1591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1594,     0,     0,     0,     0,  1595,     0,  1599,     0,  1592,
    1600,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,  1602,  1596,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1594,     0,     0,     0,     0,  1595,     0,  1599,
       0,     0,  1600,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,     0,     0,  1602,
    1596,  1597,     0,  1593,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1598,     0,     0,     0,     0,
    1594,     0,     0,  1603,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1596,  1597,
       0,  1599,     0,     0,  1600,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,     0,  1601,     0,
       0,  1602,     0,     0,     0,     0,  1579,     0,     0,  1580,
       0,     0,     0,  1581,  1582,     0,     0,  1585,  1586,  1587,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,  1599,
       0,     0,  1600,     0,  1588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,     0,  1601,     0,     0,  1602,
       0,  1591,     0,     0,     0,     0,     0,     0,  1604,     0,
       0,  1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,
    1613,     0,     0,     0,     0,     0,  1592,     0,     0,     0,
       0,     0,  1579,     0,     0,  1580,     0,     0,     0,  1581,
    1582,     0,     0,  1585,  1586,  1587,     0,  1603,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1590,     0,     0,     0,     0,     0,     0,  1591,     0,     0,
    1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,  1610,
    1611,  1612,  1613,     0,     0,  1603,     0,     0,     0,     0,
       0,     0,  1592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1604,     0,     0,  1605,  1606,  1607,     0,  1608,
    1609,  1610,  1611,  2141,  1613,  1596,  1597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
    1604,     0,     0,  1605,  1606,  1607,     0,  1608,  1609,  1610,
    1611,  1612,  1613,  1594,     0,     0,  1599,     0,  1595,  1600,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1601,     0,     0,     0,     0,     0,     0,
       0,  1596,  1597,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1599,     0,     0,  1600,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1601,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1603,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1603,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1604,     0,     0,
    1605,  1606,  1607,     0,  1608,  1609,  1610,  1611,  1612,  1613,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1199,     0,  2038,
       0,     0,     0,  1604,     0,     0,  1605,  1606,  1607,     0,
    1608,  1609,  1610,  1611,  1612,  1613,   112,   113,   114,   115,
     116,   117,   118,   119,  1200,   120,   121,   122,  1201,  1202,
    1203,   851,  1204,  1205,  1206,  1207,   852,   124,   125,  1208,
     126,   127,   128,   853,   130,   131,   132,   854,   855,   856,
     857,   858,  1209,   138,   139,   140,   141,   142,   143,  1210,
    1211,   144,   145,   859,   860,   148,  1212,   149,   150,   151,
     152,   861,  1213,   862,  1214,   863,   156,   157,   158,   159,
     160,   864,   162,   163,   164,  1215,   165,   166,   167,   168,
     169,   170,  1216,   865,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   866,   867,   184,  1217,   185,  1218,
     186,   187,   188,   189,   190,   191,  1219,   192,   193,   194,
     195,   196,  1220,  1221,   197,   198,   199,   200,   201,  1222,
     202,   203,   204,  1223,   205,   206,   207,  1224,   208,   209,
     210,   211,   868,   213,   214,   215,   216,   217,   869,  1225,
     219,  1226,   220,   221,   870,   223,  1227,   224,  1228,   225,
     871,  1229,   872,   228,   229,   873,   874,   232,  1230,   233,
    1231,   875,   876,   236,   237,  1232,   238,   239,   240,   241,
     242,   243,   244,   877,   246,   247,   248,   249,  1233,   250,
     251,   252,   253,   254,   255,   256,  1234,   257,   878,   879,
     260,   261,   262,   263,   264,   880,   881,  1235,   882,  1236,
     268,   883,   884,   271,   885,   273,   274,   275,   276,   277,
     278,  1237,  1238,   279,   886,   281,   887,  1239,   283,   284,
     285,   286,   287,   288,   289,   290,   888,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   889,   890,   891,   313,   314,
     315,   892,  1240,   317,   318,   893,   320,  1241,   894,   322,
     895,   324,   325,   326,  1242,   327,   328,  1243,  1244,   329,
     330,   331,  1245,  1246,   332,   333,   896,   897,   336,   898,
     899,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,  1247,  1248,  1249,  1250,   349,   350,   900,   901,   353,
     354,   902,   356,   357,   358,  1251,   359,   360,   361,   362,
     363,   364,  1252,   365,   366,   367,   903,   369,   370,   371,
     372,  1253,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,  1254,   386,   387,   904,   389,
     390,   391,   905,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,  1255,   906,   406,   407,
     408,   409,   410,   411,   907,   413,   414,   415,   908,   417,
     418,   909,   420,  1256,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   910,   434,   911,   436,
    1257,   437,   438,  1258,   439,   912,   441,   442,   443,   444,
     445,  1259,   446,   913,   914,  1260,  1261,   449,   450,   915,
     452,   916,  1262,   454,   455,   917,   457,   458,   459,   460,
     461,  1263,  1264,   462,   463,   464,  1265,   465,   466,   467,
     468,  1266,   469,   470,   471,   472,   473,  1267,   919,  1268,
     476,   920,   478,   479,   480,   481,   482,  1269,  1270,   483,
    1271,  1272,   484,   485,   486,   487,   488,   489,   921,   922,
     923,   924,   925,   926,   927,   928,   929,   930,   931,   501,
     502,   503,   504,  1199,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
    1200,   120,   121,   122,  1201,  1202,  1203,   851,  1204,  1205,
    1206,  1207,   852,   124,   125,  1208,   126,   127,   128,   853,
     130,   131,   132,   854,   855,   856,   857,   858,  1209,   138,
     139,   140,   141,   142,   143,  1210,  1211,   144,   145,   859,
     860,   148,  1212,   149,   150,   151,   152,   861,  1213,   862,
    1214,   863,   156,   157,   158,   159,   160,   864,   162,   163,
     164,  1215,   165,   166,   167,   168,   169,   170,  1216,   865,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     866,   867,   184,  1217,   185,  1218,   186,   187,   188,   189,
     190,   191,  1219,   192,   193,   194,   195,   196,  1220,  1221,
     197,   198,   199,   200,   201,  1222,   202,   203,   204,  1223,
     205,   206,   207,  1224,   208,   209,   210,   211,   868,   213,
     214,   215,   216,   217,   869,  1225,   219,  1226,   220,   221,
     870,   223,  1227,   224,  1228,   225,   871,  1229,   872,   228,
     229,   873,   874,   232,  1230,   233,  1231,   875,   876,   236,
     237,  1232,   238,   239,   240,   241,   242,   243,   244,   877,
     246,   247,   248,   249,  1233,   250,   251,   252,   253,   254,
     255,   256,  1234,   257,   878,   879,   260,   261,   262,   263,
     264,   880,   881,  1235,   882,  1236,   268,   883,   884,   271,
     885,   273,   274,   275,   276,   277,   278,  1237,  1238,   279,
     886,   281,   887,  1239,   283,   284,   285,   286,   287,   288,
     289,   290,   888,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   889,   890,   891,   313,   314,   315,   892,  1240,   317,
     318,   893,   320,  1241,   894,   322,   895,   324,   325,   326,
    1242,   327,   328,  1243,  1244,   329,   330,   331,  1245,  1246,
     332,   333,   896,   897,   336,   898,   899,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,  1247,  1248,  1249,
    1250,   349,   350,   900,   901,   353,   354,   902,   356,   357,
     358,  1251,   359,   360,   361,   362,   363,   364,  1252,   365,
     366,   367,   903,   369,   370,   371,   372,  1253,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1254,   386,   387,   904,   389,   390,   391,   905,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,  1255,   906,   406,   407,   408,   409,   410,   411,
     907,   413,   414,   415,   908,   417,   418,   909,   420,  1256,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   910,   434,   911,   436,  1257,   437,   438,  1258,
     439,   912,   441,   442,   443,   444,   445,  1259,   446,   913,
     914,  1260,  1261,   449,   450,   915,   452,   916,  1262,   454,
     455,   917,   457,   458,   459,   460,   461,  1263,  1264,   462,
     463,   464,  1265,   465,   466,   467,   468,  1266,   469,   470,
     471,   472,   473,  1267,   919,  1268,   476,   920,   478,   479,
     480,   481,   482,  1269,  1270,   483,  1271,  1272,   484,   485,
     486,   487,   488,   489,   921,   922,   923,   924,   925,   926,
     927,   928,   929,   930,   931,   501,   502,   503,   504,  1199,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,  2186,   117,   118,   119,  1200,   120,   121,   122,
    1201,  1202,  1203,   851,  1204,  1205,  1206,  1207,   852,   124,
     125,  1208,   126,   127,   128,   853,   130,   131,   132,   854,
     855,   856,   857,   858,  1209,   138,   139,   140,   141,   142,
     143,  1210,  1211,   144,   145,   859,   860,   148,  1212,   149,
     150,   151,   152,   861,  1213,   862,  1214,   863,   156,   157,
     158,   159,   160,   864,   162,   163,   164,  1215,   165,   166,
     167,   168,   169,   170,  1216,   865,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   866,   867,   184,  1217,
     185,  1218,   186,   187,   188,   189,   190,   191,  1219,   192,
     193,   194,   195,   196,  1220,  1221,   197,   198,   199,  2187,
     201,  1222,   202,   203,   204,  1223,   205,   206,   207,  1224,
     208,   209,   210,   211,   868,   213,   214,   215,   216,   217,
     869,  1225,   219,  1226,   220,   221,   870,   223,  1227,   224,
    1228,   225,   871,  1229,   872,   228,   229,   873,   874,   232,
    1230,   233,  1231,   875,   876,   236,   237,  1232,   238,   239,
     240,   241,   242,   243,   244,   877,   246,   247,   248,   249,
    1233,   250,   251,   252,   253,   254,   255,   256,  1234,   257,
     878,   879,   260,   261,   262,   263,   264,   880,   881,  1235,
     882,  1236,   268,   883,   884,   271,   885,   273,   274,   275,
     276,   277,   278,  1237,  1238,   279,   886,   281,   887,  1239,
     283,   284,   285,   286,   287,   288,   289,   290,   888,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   889,   890,   891,
     313,   314,   315,   892,  1240,   317,   318,   893,   320,  1241,
     894,   322,   895,   324,   325,   326,  1242,   327,   328,  1243,
    1244,   329,   330,   331,  1245,  1246,   332,   333,   896,   897,
     336,   898,   899,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,  1247,  1248,  1249,  1250,   349,   350,   900,
     901,   353,   354,   902,   356,   357,   358,  1251,   359,   360,
     361,   362,   363,   364,  1252,   365,   366,   367,   903,   369,
     370,   371,   372,  1253,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,  1254,   386,   387,
     904,   389,   390,   391,   905,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,  1255,   906,
     406,   407,   408,   409,   410,  2188,   907,   413,   414,   415,
     908,   417,   418,   909,   420,  1256,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   910,   434,
     911,   436,  1257,   437,   438,  1258,   439,   912,   441,   442,
     443,   444,   445,  1259,   446,   913,   914,  1260,  1261,   449,
     450,   915,   452,   916,  1262,   454,   455,   917,   457,   458,
     459,   460,   461,  1263,  1264,   462,   463,   464,  1265,   465,
     466,   467,   468,  1266,   469,   470,   471,   472,   473,  1267,
     919,  1268,   476,   920,   478,   479,   480,   481,   482,  1269,
    1270,   483,  1271,  1272,   484,   485,   486,   487,   488,   489,
     921,   922,   923,   924,   925,   926,   927,   928,   929,   930,
     931,   501,   502,   503,   504,   850,     0,   640,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,   851,
       0,     0,     0,     0,   852,   124,   125,     0,   126,   127,
     128,   853,   130,   131,   132,   854,   855,   856,   857,   858,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   859,   860,   148,     0,   149,   150,   151,   152,   861,
       0,   862,     0,   863,   156,   157,   158,   159,   160,   864,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   865,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   866,   867,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     868,   213,   214,   215,   216,   217,   869,  1430,   219,     0,
     220,   221,   870,   223,     0,   224,     0,   225,   871,     0,
     872,   228,   229,   873,   874,   232,     0,   233,     0,   875,
     876,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   877,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,   878,   879,   260,   261,
     262,   263,   264,   880,   881,     0,   882,     0,   268,   883,
     884,   271,   885,   273,   274,   275,   276,   277,   278,     0,
       0,   279,   886,   281,   887,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   888,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   889,   890,   891,   313,   314,   315,   892,
       0,   317,   318,   893,   320,     0,   894,   322,   895,   324,
     325,   326,     0,   327,   328,  1431,     0,   329,   330,   331,
       0,     0,   332,   333,   896,   897,   336,   898,   899,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   900,   901,   353,   354,   902,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   903,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   904,   389,   390,   391,
     905,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,   906,   406,   407,   408,   409,
     410,   411,   907,   413,   414,   415,   908,   417,   418,   909,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   910,   434,   911,   436,     0,   437,
     438,     0,   439,   912,   441,   442,   443,   444,   445,     0,
     446,   913,   914,     0,     0,   449,   450,   915,   452,   916,
    1432,   454,   455,   917,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,  1267,   919,     0,   476,   920,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   921,   922,   923,   924,
     925,   926,   927,   928,   929,   930,   931,   501,   502,   503,
     504,   850,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     3,     4,     0,   851,     0,     0,     0,     0,
     852,   124,   125,     0,   126,   127,   128,   853,   130,   131,
     132,   854,   855,   856,   857,   858,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   859,   860,   148,
       0,   149,   150,   151,   152,   861,     0,   862,     0,   863,
     156,   157,   158,   159,   160,   864,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   865,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   866,   867,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   868,   213,   214,   215,
     216,   217,   869,     0,   219,     0,   220,   221,   870,   223,
       0,   224,     0,   225,   871,     0,   872,   228,   229,   873,
     874,   232,     0,   233,     0,   875,   876,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   877,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   878,   879,   260,   261,   262,   263,   264,   880,
     881,     0,   882,     0,   268,   883,   884,   271,   885,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   886,   281,
     887,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     888,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   889,
     890,   891,   313,   314,   315,   892,     0,   317,   318,   893,
     320,     0,   894,   322,   895,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     896,   897,   336,   898,   899,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   900,   901,   353,   354,   902,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     903,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   904,   389,   390,   391,   905,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,   906,   406,   407,   408,   409,   410,   411,   907,   413,
     414,   415,   908,   417,   418,   909,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     910,   434,   911,   436,     0,   437,   438,     0,   439,   912,
     441,   442,   443,   444,   445,     0,   446,   913,   914,     0,
       0,   449,   450,   915,   452,   916,     0,   454,   455,   917,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,  1267,   919,     0,   476,   920,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   921,   922,   923,   924,   925,   926,   927,   928,
     929,   930,   931,   501,   502,   503,   504,   111,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,   125,     0,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
     610,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   611,     0,   612,     0,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   613,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
     226,     0,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,     0,   279,   280,   281,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   615,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   336,   337,
     617,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   618,   352,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   620,   436,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   621,
     452,   622,     0,   454,   455,   623,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,   477,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   111,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,   125,     0,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,   154,
       0,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,   226,     0,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     280,   281,   282,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,   477,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,  1709,   149,
     150,   151,   152,   153,     0,     0,  1710,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,  1711,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
    1712,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,  1713,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,  1714,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,  1715,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,  1709,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,  1711,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,  1712,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,  2267,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,  1714,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
    1715,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     3,     4,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,   536,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   537,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   616,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   720,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     616,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   751,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,  1932,     0,     0,     0,     0,  1933,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,  1940,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
    1941,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,  1942,   439,     0,   441,  1943,   443,  1944,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,  1945,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,   640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   647,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   648,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   649,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     650,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   651,   448,     0,     0,   652,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   684,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   715,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   718,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   722,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   737,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,   841,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,   844,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
     966,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,   989,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   647,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   651,   448,     0,     0,   652,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   512,     0,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,     0,   126,   127,   128,     0,   130,   131,
     132,   133,   134,     0,   136,   137,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,   155,
     156,   157,   158,   159,   160,     0,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,   223,
       0,   224,     0,   225,     0,     0,     0,   228,   229,   513,
       0,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,   239,   240,   241,   242,  1335,   244,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,     0,   259,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   268,     0,     0,   271,     0,   273,
     274,   275,   276,   277,   278,     0,     0,   279,     0,   281,
       0,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     514,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
       0,   312,   313,   314,   315,   316,     0,   317,   318,     0,
     320,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
     334,     0,   336,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,   351,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     515,   434,   435,   436,     0,   437,   438,     0,   439,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,     0,
       0,   449,   450,   451,   452,   453,     0,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,   475,     0,   476,     0,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   512,     0,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,     0,
     126,   127,   128,     0,   130,   131,   132,   133,   134,     0,
     136,   137,     0,   138,   139,   140,   141,   142,   143,     0,
       0,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,   155,   156,   157,   158,   159,
     160,     0,   162,   163,   164,     0,   165,   166,   167,   168,
     169,   170,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,     0,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
     195,   196,     0,     0,   197,   198,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,     0,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   220,   221,   222,   223,     0,   224,     0,   225,
       0,     0,     0,   228,   229,   513,     0,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,   239,   240,   241,
     242,  1337,   244,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,   259,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     268,     0,     0,   271,     0,   273,   274,   275,   276,   277,
     278,     0,     0,   279,     0,   281,     0,     0,   283,   284,
     285,   286,   287,   288,   289,   290,   514,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,     0,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,     0,   329,
     330,   331,     0,     0,   332,   333,   334,     0,   336,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,     0,     0,     0,     0,   349,   350,   351,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   515,   434,   435,   436,
       0,   437,   438,     0,   439,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,     0,     0,   449,   450,   451,
     452,   453,     0,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,     0,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,
     476,     0,   478,   479,   480,   481,   482,     0,     0,   483,
       0,     0,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   512,     0,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   125,     0,   126,   127,   128,     0,
     130,   131,   132,   133,   134,     0,   136,   137,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,   223,     0,   224,     0,   225,     0,     0,     0,   228,
     229,   513,     0,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,   239,   240,   241,   242,  1340,   244,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,     0,   259,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   268,     0,     0,   271,
       0,   273,   274,   275,   276,   277,   278,     0,     0,   279,
       0,   281,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   514,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   312,   313,   314,   315,   316,     0,   317,
     318,     0,   320,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,   334,     0,   336,     0,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,   351,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   515,   434,   435,   436,     0,   437,   438,     0,
     439,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,     0,     0,   449,   450,   451,   452,   453,     0,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,   475,     0,   476,     0,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   512,
       0,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,     0,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,   136,   137,     0,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   153,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,   162,   163,   164,     0,   165,   166,
     167,   168,   169,   170,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,     0,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,   195,   196,     0,     0,   197,   198,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,     0,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   220,   221,   222,   223,     0,   224,
       0,   225,     0,     0,     0,   228,   229,   513,     0,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,   239,
     240,   241,   242,  1342,   244,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   257,
       0,   259,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   268,     0,     0,   271,     0,   273,   274,   275,
     276,   277,   278,     0,     0,   279,     0,   281,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,   514,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,     0,   312,
     313,   314,   315,   316,     0,   317,   318,     0,   320,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
       0,   329,   330,   331,     0,     0,   332,   333,   334,     0,
     336,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,     0,     0,     0,   349,   350,   351,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   515,   434,
     435,   436,     0,   437,   438,     0,   439,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,     0,     0,   449,
     450,   451,   452,   453,     0,   454,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,     0,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
     475,     0,   476,     0,   478,   479,   480,   481,   482,     0,
       0,   483,     0,     0,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   512,     0,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,     0,   126,   127,
     128,     0,   130,   131,   132,   133,   134,     0,   136,   137,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,   223,     0,   224,     0,   225,     0,     0,
       0,   228,   229,   513,     0,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,   239,   240,   241,   242,  2182,
     244,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,     0,   259,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   268,     0,
       0,   271,     0,   273,   274,   275,   276,   277,   278,     0,
       0,   279,     0,   281,     0,     0,   283,   284,   285,   286,
     287,   288,   289,   290,   514,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,   334,     0,   336,     0,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,   351,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   515,   434,   435,   436,     0,   437,
     438,     0,   439,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,     0,     0,   449,   450,   451,   452,   453,
       0,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   475,     0,   476,     0,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   763,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,     0,   120,
     121,   122,     0,     0,     0,   764,     0,     0,  -781,     0,
     765,   124,   125,     0,   126,   127,   128,   766,   130,   131,
     132,     0,   767,   768,   769,   770,     0,   138,   139,   140,
     141,   142,   143,     0,     0,   144,   145,   771,   772,   148,
       0,   149,   150,   151,   152,     0,     0,   773,     0,   774,
     156,   157,   158,   159,   160,   775,   162,   163,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   776,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   777,   778,
     184,     0,   185,     0,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,   195,   196,     0,     0,   197,   198,
     779,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,     0,   208,   209,   210,   211,     0,   213,   214,   215,
     216,   217,     0,     0,   219,     0,   220,   221,   780,   223,
       0,   224,     0,   225,   781,     0,   782,   228,   229,  -781,
     783,   232,     0,   233,     0,     0,     0,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   785,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   257,   786,     0,   260,   261,   262,   263,   264,   787,
     788,     0,   789,     0,   268,   790,   791,   271,   792,   273,
     274,   275,   276,   277,   278,     0,     0,   279,   793,   281,
     794,     0,   283,   284,   285,   286,   287,   288,   289,   290,
     795,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   796,
     797,   798,   313,   314,   315,     0,     0,   317,   318,   799,
     320,     0,     0,   322,   800,   324,   325,   326,     0,   327,
     328,     0,     0,   329,   330,   331,     0,     0,   332,   333,
       0,   801,   336,   802,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,     0,     0,     0,     0,   349,
     350,     0,   803,   353,   354,     0,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     804,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   805,   389,   390,   391,   806,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
       0,   807,   406,   407,   408,   409,   410,   411,   808,   413,
     414,   415,   809,   417,   418,   810,   420,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     811,   434,     0,   436,     0,   437,   438,     0,   439,   812,
     441,   442,   443,   444,   445,     0,   446,   813,   814,     0,
       0,   449,   450,     0,   452,     0,     0,   454,   455,   815,
     457,   458,   459,   460,   461,   816,     0,   462,   463,   464,
       0,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,     0,   817,     0,   476,   818,   478,   479,   480,   481,
     482,     0,     0,   483,     0,     0,   484,   485,   486,   487,
     488,   489,   512,     0,   535,     0,     0,     0,     0,     0,
       0,     0,     0,   501,   502,   503,   504,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     513,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,  2904,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   514,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   515,   434,   435,   436,     0,   437,   438,     0,   439,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
       0,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,   475,     0,   476,     0,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   512,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   513,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   514,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   351,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   515,   434,   435,
     436,     0,   437,   438,     0,   439,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,     0,     0,   449,   450,
     451,   452,   453,     0,   454,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,   475,
       0,   476,     0,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   513,     0,   662,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   663,   286,   287,
     288,   289,   290,   514,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   351,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   389,   390,   391,   392,
     393,   394,   395,   396,   664,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   665,
     411,   412,   413,   414,   415,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   515,   434,   435,   436,     0,   437,   438,
       0,   439,     0,   441,   442,   443,   444,   445,     0,   446,
     666,   448,     0,     0,   449,   450,   451,   452,   453,     0,
     454,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,   475,     0,   476,     0,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   513,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,   739,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   514,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     351,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   515,
     434,   435,   436,     0,   437,   438,     0,   439,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,     0,     0,
     449,   450,   451,   452,   453,     0,   454,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,   475,     0,   476,     0,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   513,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
     837,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   514,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   351,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   515,   434,   435,   436,     0,
     437,   438,     0,   439,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,     0,     0,   449,   450,   451,   452,
     453,     0,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,   475,     0,   476,
       0,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,     0,   126,   127,   128,     0,   130,
     131,   132,   133,   134,     0,   136,   137,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
     223,     0,   224,     0,   225,     0,     0,     0,   228,   229,
     513,     0,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,     0,   259,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   268,     0,     0,   271,     0,
     273,   274,   275,   276,   277,   278,     0,     0,   279,     0,
     281,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   514,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,   334,     0,   336,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,   351,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   389,   390,   391,   392,   393,   394,
     395,   396,   664,   398,   399,   400,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   515,   434,   435,   436,     0,   437,   438,     0,   439,
       0,   441,   442,   443,   444,   445,     0,   446,   666,   448,
       0,     0,   449,   450,   451,   452,   453,     0,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,   474,   475,     0,   476,     0,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   512,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,   121,   122,     0,
       0,     0,     0,     0,     0,  1641,     0,     0,   124,   125,
       0,   126,   127,   128,     0,   130,   131,   132,   133,   134,
       0,   136,   137,     0,   138,   139,   140,   141,   142,   143,
       0,     0,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   153,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,   162,   163,   164,     0,   165,   166,   167,
     168,   169,   170,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
       0,   186,   187,   188,   189,   190,   191,     0,   192,   193,
     194,   195,   196,     0,     0,   197,   198,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,     0,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,   223,     0,   224,     0,
     225,     0,     0,     0,   228,   229,   513,     0,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   257,     0,
     259,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   268,     0,     0,   271,     0,   273,   274,   275,   276,
     277,   278,     0,     0,   279,     0,   281,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,   514,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   312,   313,
     314,   315,   316,     0,   317,   318,     0,   320,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,     0,
     329,   330,   331,     0,     0,   332,   333,   334,     0,   336,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,     0,     0,     0,     0,   349,   350,   351,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   515,   434,   435,
     436,     0,   437,   438,     0,   439,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,     0,     0,   449,   450,
     451,   452,   453,     0,   454,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,     0,   465,   466,
     467,   468,     0,   469,   470,   471,   472,   473,   474,   475,
       0,   476,     0,   478,   479,   480,   481,   482,     0,     0,
     483,     0,     0,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   125,     0,   126,   127,   128,
       0,   130,   131,   132,   133,   134,     0,   136,   137,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,     0,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,   223,     0,   224,     0,   225,     0,     0,     0,
     228,   229,   513,     0,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,   239,   240,   241,   242,  1813,   244,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,     0,   259,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   268,     0,     0,
     271,     0,   273,   274,   275,   276,   277,   278,     0,     0,
     279,     0,   281,     0,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   514,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,     0,   312,   313,   314,   315,   316,     0,
     317,   318,     0,   320,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,   334,     0,   336,     0,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,   351,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   515,   434,   435,   436,     0,   437,   438,
       0,   439,     0,   441,   442,   443,   444,   445,     0,   446,
     447,   448,     0,     0,   449,   450,   451,   452,   453,     0,
     454,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,   474,   475,     0,   476,     0,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,   125,     0,   126,   127,   128,     0,   130,   131,   132,
     133,   134,     0,   136,   137,     0,   138,   139,   140,   141,
     142,   143,     0,     0,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,   162,   163,   164,     0,   165,
     166,   167,   168,   169,   170,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,     0,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,   195,   196,     0,     0,   197,   198,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
       0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,   223,     0,
     224,     0,   225,     0,     0,     0,   228,   229,   513,     0,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
     239,   240,   241,   242,  2169,   244,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     257,     0,   259,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   268,     0,     0,   271,     0,   273,   274,
     275,   276,   277,   278,     0,     0,   279,     0,   281,     0,
       0,   283,   284,   285,   286,   287,   288,   289,   290,   514,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,     0,   329,   330,   331,     0,     0,   332,   333,   334,
       0,   336,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,     0,     0,     0,     0,   349,   350,
     351,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   515,
     434,   435,   436,     0,   437,   438,     0,   439,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,     0,     0,
     449,   450,   451,   452,   453,     0,   454,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,     0,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,   475,     0,   476,     0,   478,   479,   480,   481,   482,
       0,     0,   483,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   513,     0,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,   239,   240,   241,   242,
    2184,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   514,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   351,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   515,   434,   435,   436,     0,
     437,   438,     0,   439,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,     0,     0,   449,   450,   451,   452,
     453,     0,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,   475,     0,   476,
       0,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   763,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,   764,     0,     0,     0,
       0,   765,   124,   125,     0,   126,   127,   128,   766,   130,
     131,   132,     0,   767,   768,   769,   770,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   771,   772,
     148,     0,   149,   150,   151,   152,     0,     0,   773,     0,
     774,   156,   157,   158,   159,   160,   775,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   776,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   777,
     778,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,     0,   213,   214,
     215,   216,   217,     0,     0,   219,     0,   220,   221,   780,
     223,     0,   224,     0,   225,   781,     0,   782,   228,   229,
       0,   783,   232,     0,   233,     0,     0,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   784,   244,   785,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   786,     0,   260,   261,   262,   263,   264,
     787,   788,     0,   789,     0,   268,   790,   791,   271,   792,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   793,
     281,   794,     0,   283,   284,   285,   286,   287,   288,   289,
     290,   795,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     796,   797,   798,   313,   314,   315,     0,     0,   317,   318,
     799,   320,     0,     0,   322,   800,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   801,   336,   802,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,     0,   803,   353,   354,     0,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   804,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   805,   389,   390,   391,   806,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,   807,   406,   407,   408,   409,   410,   411,   808,
     413,   414,   415,   809,   417,   418,   810,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   811,   434,     0,   436,     0,   437,   438,     0,   439,
     812,   441,   442,   443,   444,   445,     0,   446,   813,   814,
       0,     0,   449,   450,     0,   452,     0,     0,   454,   455,
     815,   457,   458,   459,   460,   461,   816,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,     0,   817,     0,   476,   818,   478,   479,   480,
     481,   482,     0,     0,   483,     0,     0,   484,   485,   486,
     487,   488,   489,   763,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,   502,   503,   504,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,     0,     0,     0,   764,     0,     0,
       0,     0,   765,   124,   125,     0,   126,   127,   128,   766,
     130,   131,   132,     0,   767,   768,   769,   770,     0,   138,
     139,   140,   141,   142,   143,     0,     0,   144,   145,   771,
     772,   148,     0,   149,   150,   151,   152,     0,     0,   773,
       0,   774,   156,   157,   158,   159,   160,   775,   162,   163,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   776,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     777,   778,   184,     0,   185,     0,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,   195,   196,     0,     0,
     197,   198,   779,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,     0,   208,   209,   210,   211,     0,   213,
     214,   215,   216,   217,     0,     0,   219,     0,   220,   221,
     780,   223,     0,   224,     0,   225,   781,     0,   782,   228,
     229,     0,   783,   232,     0,   233,     0,     0,     0,   236,
     237,     0,   238,   239,   240,   241,   242,   243,   244,   785,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   257,   786,     0,   260,   261,   262,   263,
     264,   787,   788,     0,   789,     0,   268,   790,   791,   271,
     792,   273,   274,   275,   276,   277,   278,     0,     0,   279,
     793,   281,   794,     0,   283,   284,   285,   286,   287,   288,
     289,   290,   795,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   796,   797,   798,   313,   314,   315,     0,     0,   317,
     318,   799,   320,     0,     0,   322,   800,   324,   325,   326,
       0,   327,   328,     0,     0,   329,   330,   331,     0,     0,
     332,   333,     0,   801,   336,   802,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,     0,     0,     0,
       0,   349,   350,     0,   803,   353,   354,     0,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   804,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   805,   389,   390,   391,   806,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,     0,   807,   406,   407,   408,   409,   410,   411,
     808,   413,   414,   415,   809,   417,   418,   810,   420,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   811,   434,     0,   436,     0,   437,   438,     0,
     439,   812,   441,   442,   443,   444,   445,     0,   446,   813,
     814,     0,     0,   449,   450,     0,   452,     0,     0,   454,
     455,   815,   457,   458,   459,   460,   461,   816,     0,   462,
     463,   464,     0,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,     0,   817,     0,   476,   818,   478,   479,
     480,   481,   482,     0,     0,   483,     0,     0,   484,   485,
     486,   487,   488,   489,   763,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   501,   502,   503,   504,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,   764,     0,
       0,     0,     0,   765,   124,   125,     0,   126,   127,   128,
     766,   130,   131,   132,     0,   767,   768,   769,   770,     0,
     138,   139,   140,   141,   142,   143,     0,     0,   144,   145,
     771,   772,   148,     0,   149,   150,   151,   152,     0,     0,
     773,     0,   774,   156,   157,   158,   159,   160,   775,   162,
     163,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     776,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   777,   778,   184,     0,   185,     0,   186,   187,   188,
     189,   190,   191,     0,   192,   193,   194,   195,   196,     0,
       0,   197,   198,   779,   200,   201,     0,   202,   203,   204,
       0,  1798,   206,   207,     0,   208,   209,   210,   211,     0,
     213,   214,   215,   216,   217,     0,     0,   219,     0,   220,
     221,   780,   223,     0,   224,     0,   225,   781,     0,   782,
     228,   229,     0,   783,   232,     0,   233,     0,     0,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     785,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   257,   786,     0,   260,   261,   262,
     263,   264,   787,   788,     0,   789,     0,   268,   790,   791,
     271,   792,   273,   274,   275,   276,   277,   278,     0,     0,
     279,   793,   281,   794,     0,   283,   284,   285,   286,   287,
     288,   289,   290,   795,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   796,   797,   798,   313,   314,   315,     0,     0,
     317,   318,   799,   320,     0,     0,   322,   800,   324,   325,
     326,     0,   327,   328,     0,     0,   329,   330,   331,     0,
       0,   332,   333,     0,   801,   336,   802,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,     0,     0,
       0,     0,   349,   350,     0,   803,   353,   354,     0,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   804,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   805,   389,   390,   391,   806,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,     0,   807,   406,   407,   408,   409,   410,
     411,   808,   413,   414,   415,   809,   417,   418,   810,   420,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   811,   434,     0,   436,     0,   437,   438,
       0,   439,   812,   441,   442,   443,   444,   445,     0,   446,
     813,   814,     0,     0,   449,   450,     0,   452,     0,     0,
     454,   455,   815,   457,   458,   459,   460,   461,   816,     0,
     462,   463,   464,     0,   465,   466,   467,   468,     0,   469,
     470,   471,   472,   473,     0,   817,     0,   476,   818,   478,
     479,   480,   481,   482,     0,     0,   483,     0,     0,   484,
     485,   486,   487,   488,   489,  2829,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,   502,   503,   504,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,     0,     0,     0,  2830,
       0,     0,     0,     0,  2831,   124,   125,     0,   126,   127,
     128,  2832,   130,   131,   132,     0,   767,  2833,   769,   770,
       0,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     145,   771,   772,   148,     0,   149,   150,   151,   152,     0,
       0,  2834,     0,  2835,   156,   157,   158,   159,   160,  2836,
     162,   163,   164,     0,   165,   166,   167,   168,   169,   170,
       0,  2837,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   777,   778,   184,     0,   185,     0,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,   195,   196,
       0,     0,   197,   198,   779,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,     0,   208,   209,   210,   211,
       0,   213,   214,   215,   216,   217,     0,     0,   219,     0,
     220,   221,   780,   223,     0,   224,     0,   225,  2838,     0,
    2839,   228,   229,  2840,  2841,   232,     0,   233,     0,     0,
       0,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,  2842,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   257,  2843,     0,   260,   261,
     262,   263,   264,   787,   788,     0,   789,     0,   268,  2844,
    2845,   271,  2846,   273,   274,   275,   276,   277,   278,     0,
       0,   279,  2847,   281,  2848,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  3071,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   796,  2850,   798,   313,   314,   315,     0,
       0,   317,   318,  2852,   320,     0,     0,   322,   800,   324,
     325,   326,     0,   327,   328,     0,     0,   329,   330,   331,
       0,     0,   332,   333,     0,  2854,   336,  2855,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,     0,
       0,     0,     0,   349,   350,     0,  2856,   353,   354,     0,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   804,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,  2857,   389,   390,   391,
       0,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,     0,  2858,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,  2860,   417,   418,   810,
     420,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,  3072,   434,     0,   436,     0,   437,
     438,     0,   439,  2862,   441,   442,   443,   444,   445,     0,
     446,   813,   814,     0,     0,   449,   450,     0,   452,     0,
       0,   454,   455,  2863,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,     0,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,     0,   817,     0,   476,  2865,
     478,   479,   480,   481,   482,     0,     0,   483,     0,     0,
     484,   485,   486,   487,   488,   489,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   501,   502,   503,
     504,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   125,     0,   126,
     127,   128,     0,   130,   131,   132,   133,   134,     0,   136,
     137,     0,   138,   139,   140,   141,   142,   143,     0,     0,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,   162,   163,   164,     0,   165,   166,   167,   168,   169,
     170,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,     0,   186,
     187,   188,   189,   190,   191,     0,   192,   193,   194,   195,
     196,     0,     0,   197,   198,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,     0,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   220,   221,   222,   223,     0,   224,     0,   225,     0,
       0,     0,   228,   229,   513,     0,   232,     0,   233,     0,
     234,   235,     0,   237,     0,   238,   239,   240,   241,   242,
     243,   244,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   257,     0,   259,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   268,
       0,     0,   271,     0,   273,   274,   275,   276,   277,   278,
       0,     0,   279,     0,   281,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,   514,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,     0,   312,   313,   314,   315,
     316,     0,   317,   318,     0,   320,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,     0,   329,   330,
     331,     0,     0,   332,   333,   334,     0,   336,     0,   338,
     339,   340,   341,   342,   343,   344,     0,   346,   347,   348,
       0,     0,     0,     0,   349,   350,   351,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,     0,   365,     0,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   389,   390,
     391,   392,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   515,   434,   435,   436,     0,
     437,   438,     0,   439,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,     0,     0,   449,   450,   451,   452,
     453,     0,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,     0,   465,   466,   467,   468,
       0,   469,   470,   471,   472,   473,   474,   475,     0,   476,
       0,   478,   479,   480,   481,   482,     0,     0,   483,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   763,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,   121,   122,     0,     0,     0,   764,     0,     0,     0,
       0,   765,   124,   125,     0,   126,   127,   128,   766,   130,
     131,   132,     0,   767,   768,   769,   770,     0,   138,   139,
     140,   141,   142,   143,     0,     0,   144,   145,   771,   772,
     148,     0,   149,   150,   151,   152,     0,     0,   773,     0,
     774,   156,   157,   158,   159,   160,   775,   162,   163,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   776,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   777,
     778,   184,     0,   185,     0,   186,   187,   188,   189,   190,
     191,     0,   192,   193,   194,   195,   196,     0,     0,   197,
     198,   779,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,     0,   208,   209,   210,   211,     0,   213,   214,
     215,   216,   217,     0,     0,   219,     0,   220,   221,   780,
     223,     0,   224,     0,   225,   781,     0,   782,   228,   229,
       0,   783,   232,     0,   233,     0,     0,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   785,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   257,   786,     0,   260,   261,   262,   263,   264,
     787,   788,     0,   789,     0,   268,   790,   791,   271,   792,
     273,   274,   275,   276,   277,   278,     0,     0,   279,   793,
     281,   794,     0,   283,   284,   285,   286,   287,   288,   289,
     290,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     796,   797,   798,   313,   314,   315,     0,     0,   317,   318,
     799,   320,     0,     0,   322,   800,   324,   325,   326,     0,
     327,   328,     0,     0,   329,   330,   331,     0,     0,   332,
     333,     0,   801,   336,   802,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,     0,     0,     0,     0,
     349,   350,     0,   803,   353,   354,     0,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   804,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   805,   389,   390,   391,     0,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,     0,   807,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   809,   417,   418,   810,   420,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,   434,     0,   436,     0,   437,   438,     0,   439,
     812,   441,   442,   443,   444,   445,     0,   446,   813,   814,
       0,     0,   449,   450,     0,   452,     0,     0,   454,   455,
     815,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,     0,   465,   466,   467,   468,     0,   469,   470,   471,
     472,   473,     0,   817,     0,   476,   818,   478,   479,   480,
     481,   482,     0,     1,   483,     0,     0,   484,   485,   486,
     487,   488,   489,     2,     0,     3,     4,     0,     0,     0,
       1,     0,     0,     0,   501,   502,   503,   504,     0,     0,
       2,     0,     0,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     8,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     9,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,    10,     0,   571,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,    10,     0,   571,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0,    12,     0,     0,
       0,     0,     0,     0,   572,     0,     0,     0,     0,     0,
      16,    13,     0,     0,     0,     0,     0,     0,    17,     0,
       0,   572,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,     0,    20,    17,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    20,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,    32,    31,     0,     0,     0,     0,     0,
      33,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      32,     0,     0,     0,    35,     0,     0,    33,     0,     0,
       0,    34,     0,     0,     0,     0,    36,     0,     0,     0,
      37,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,    37,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,     0,    38,     0,    41,
       0,     0,     0,     0,    42,     0,     0,     0,   573,     0,
      39,     0,     0,     0,     0,     0,    41,     0,    43,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   574,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,   566,    45,   660,     7,     0,   505,     0,     0,   719,
       0,     0,   707,     0,    21,   634,     0,   683,    21,   574,
      84,   956,     0,   727,     7,   731,  1183,   564,   808,   938,
    1196,   736,  1184,  1119,    18,     0,    21,   938,    21,  1663,
     998,    18,  1158,    36,  1478,  1549,     0,  2125,  1623,    37,
    1524,    88,   839,  2180,  1163,   842,   846,  1313,  1364,  2227,
    2228,  2229,  1369,  2094,   947,  2096,    21,   814,   947,  1160,
    1124,  1765,   947,   574,  2115,   947,    88,  2593,   573,    86,
      87,  1086,  2176,    86,    87,   567,  1091,  2558,  1576,  1577,
    2591,  2558,   719,  2060,   721,   630,   723,  1188,  2114,  1413,
     635,    86,    87,    86,    87,    98,     0,     0,    44,  2618,
       0,     0,  1054,     0,     0,     0,     0,  1052,   106,     0,
       0,     0,     0,     0,     0,     0,    33,     0,   627,     0,
       0,    86,    87,     0,  2611,     0,     0,   592,  2433,  2240,
    2514,     4,  1780,    55,  2518,     5,     9,    13,    14,     5,
      24,  1681,     5,  1950,     0,     5,   771,   772,     0,  1327,
    2246,    78,  1784,   954,  1683,     5,  1963,   697,     9,     5,
    2264,     5,     5,    13,    14,     5,   675,    13,    14,    13,
      14,   702,     5,   798,   702,  1917,     5,     5,  1097,     5,
       9,     9,     5,     5,    86,    87,     5,    13,    14,  2916,
      13,    14,    13,    14,  2252,  2248,     5,     5,     5,   168,
       5,    11,     5,     5,    72,   115,    16,     5,    45,    26,
       5,   167,    30,     5,    45,    80,   135,  2900,    63,    30,
      38,    63,    63,  1627,    88,   167,    91,    38,     3,     4,
       5,  2407,  2336,  2337,     9,  2339,  2919,  3075,   120,     9,
     283,   188,    98,   102,    11,   954,    98,    11,    15,    16,
      30,   965,    16,  1172,   186,   176,  1175,  1176,    38,   240,
     167,   125,   240,   240,   222,     8,    63,  2758,    11,   945,
       3,  2804,    15,    16,   281,  2876,    19,    20,    21,     4,
     269,   306,    46,   284,     9,   306,    80,  1044,  2739,    11,
    2741,    23,    24,    15,    16,    40,   164,    91,   113,  2477,
     399,    34,    35,   289,   161,     0,  1357,   167,   266,   188,
     358,   447,  1280,   289,    78,  3232,   133,   176,    73,   948,
     198,  1289,   115,    18,    46,  3201,    21,  3006,  3308,  3008,
     259,  2476,   381,  2478,   359,    64,   105,   128,   113,   159,
    1887,    36,    41,    72,   168,   116,    30,   245,  3399,  2390,
      45,   494,   118,   118,   372,  2809,    78,    13,    14,   467,
     106,   423,   461,  2817,   507,   307,   308,   309,   133,   505,
     268,  1918,   106,   938,  3160,  1051,  3162,   109,  2859,  2083,
     106,  1171,   363,   491,   313,  2911,   363,   128,  1102,  3440,
    2527,    86,    87,    88,  1019,  1020,  2922,  1493,   345,   252,
     253,    11,  2913,    98,   949,    15,    16,   266,   470,   118,
    1035,  1943,  1944,  1945,  2502,  3395,   961,  3100,  3294,   190,
    2524,  3297,  2526,   122,   382,   105,   171,   283,  1524,  1138,
     372,   283,   997,   166,   939,   168,    46,   301,  1147,   214,
     113,  3358,   208,    40,   128,   265,  3125,   307,   308,   309,
    3236,   194,  2429,   321,   209,   444,   505,   505,   273,   316,
     441,   236,   505,   441,   441,   421,    30,   409,    78,   348,
     287,   143,  3073,  3200,   217,   500,  1152,   268,   302,   500,
     273,  1148,  1149,  1967,    11,   363,   444,   278,    15,    16,
    1541,   509,  2943,  1445,  3332,   351,   374,   266,   505,   351,
     442,  3034,  2598,  1769,   505,   350,   162,   236,   350,   350,
    2686,   453,   372,   186,   421,   368,   369,  3393,   521,    72,
    3053,   574,  1846,   509,   505,  2670,   447,   505,   505,  3020,
     347,   409,   349,   509,  1099,  1100,   505,   278,   494,   449,
     106,   213,   285,  2647,   463,   500,  2060,   564,  1057,   409,
     414,   507,   507,   350,  2607,   320,   421,   574,     0,   418,
     113,   385,   379,   505,   128,   447,  2624,    63,  3295,   406,
     438,   389,   625,   505,   171,   406,   503,   409,   389,   573,
     507,   459,   442,   505,  1710,  1125,   456,   574,   349,   396,
     397,  2131,   505,   453,  3075,   268,  2403,   614,  3075,  3086,
    2098,   614,   508,  2132,  2346,  2253,   469,   467,   625,   389,
    2124,   467,   625,  3296,  1319,   467,  1794,   289,   379,  1150,
       5,   614,  1150,   496,   497,  1341,   673,   421,   491,   505,
     625,   491,   625,   707,  2266,   505,   469,  1589,  2775,   505,
    1802,  3025,   505,   660,   661,   505,  3030,   513,  1113,   614,
     506,   673,   508,   504,   506,   505,   508,  1625,   491,   505,
     625,   505,   505,   513,   509,   505,   683,   509,   509,  1470,
    1471,  2782,   505,  3199,  2979,  1476,   505,   505,   444,   505,
     678,  1357,   505,   505,   505,  1861,   505,   692,  3207,   692,
     692,   501,   692,   692,   681,   692,   505,   505,   692,   697,
     505,   503,   505,   505,   692,   507,  1972,   505,   725,   726,
     505,  1426,   729,   505,  2118,   268,  2894,   692,   179,  3206,
     273,   496,   497,   625,   457,   609,   496,   497,   692,   409,
    2756,   498,   499,   500,   501,   444,  2528,   501,   684,   272,
    1365,  1366,   467,    69,    70,   662,   663,   157,   665,   492,
     493,   494,   169,   496,   497,   498,   499,   500,   501,   157,
    2084,  1470,  1471,   104,   162,   437,   491,  1476,   321,   157,
     266,   496,   497,  1725,   162,  1727,   498,   499,   500,   501,
    3306,  3292,   457,   447,   337,  2762,  1333,   173,   692,   692,
     408,   808,   692,   692,  2898,   692,   692,   692,   692,   116,
     505,   692,   692,   692,   692,   692,   692,   692,  1484,   692,
     335,   692,   692,    26,   159,   692,  1363,   692,   692,    32,
    1739,   144,  3265,   233,   241,   145,   521,   509,   446,   846,
    1749,  1498,  1379,  1752,  1930,   233,  2628,  1412,   169,  3350,
    1415,   505,    30,  1811,    11,   233,  1421,  1514,   503,   374,
     236,  3332,   507,   386,   350,  3332,  1570,  1571,  1572,  2391,
    2392,  2393,  2394,  1428,  1540,  1541,   345,   115,  2572,   330,
    2574,  1967,   195,   190,  1550,   607,   196,   609,   573,   574,
      33,   226,   280,   379,   409,   438,   496,   497,   498,   499,
     500,   501,   280,  3419,   447,    83,  1869,  1573,   359,  3036,
    1873,   494,    26,  1876,    92,   246,    59,   639,    32,    53,
     241,    78,   505,   254,  3357,  2429,  2012,  1428,   335,   614,
     133,   938,  1427,  1938,  2368,  1417,   114,   944,   945,   975,
     625,   500,   664,   950,   459,   981,   953,   954,   507,   956,
     957,   958,   959,  1862,  2442,   939,  1491,   198,  1841,  1842,
    1843,  1862,  1841,  1842,   202,   972,  1841,   374,  1840,   972,
    1669,    26,   979,  1472,  2230,  3016,   979,    32,   187,   496,
     497,   498,   499,   500,   501,     3,  2293,   972,   673,   972,
     997,   998,   999,  2300,   979,  2302,   979,   247,    37,   503,
      26,   157,   409,   507,   778,   268,    32,   692,   186,  1052,
     273,  1018,   506,     4,   335,   509,    26,   972,     9,   133,
     240,   199,    32,    11,   979,  1735,   800,  1592,   266,  1036,
     268,   648,   649,   650,   240,  1822,  2730,   413,   172,   415,
    1047,  1048,  1049,  1580,  1051,  1052,  2100,  1054,  3175,  2103,
     409,  2203,   459,   374,  2558,   189,    80,  1844,    46,    80,
     194,  1848,   836,  1853,  1851,   441,   329,    91,  2154,   426,
      91,  1766,  1767,  1768,   469,  1082,   506,   233,   133,   509,
     972,  1708,  3250,  1788,   287,    13,    14,   979,   409,   335,
      78,   222,  1099,  1100,  1131,  1132,   491,  1134,   232,  3258,
    3259,  1892,  1893,  1894,  1895,  1896,  1897,   133,  1735,  1900,
    1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1131,
    1132,  2212,  1134,   133,   280,   469,  1133,  1754,   374,   168,
    1137,  1138,  1759,   662,   663,   266,   665,  1125,   459,   504,
    1147,  1148,  1149,   363,   347,  1152,   367,   491,   503,  2455,
     515,  3310,   507,  1819,   980,  2090,   504,   363,   984,     6,
     459,   505,     9,   409,  1171,   204,  2275,   515,   173,    16,
       4,   505,  2281,   287,   173,     9,   379,     4,     4,  1716,
    1745,   220,     9,     9,    31,  1750,   506,   504,    35,   509,
    2664,   230,   509,  1892,  1893,  1894,  1895,  1896,  1897,  1187,
     331,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,
    1909,     8,   469,   459,    11,   128,   938,   395,    15,    16,
     398,   441,    19,    20,    21,   947,   162,   506,   240,   343,
     509,   236,   287,   347,   491,   441,   503,   236,   505,   413,
     507,   415,   155,   505,  2186,  2187,  2188,   450,   505,  1023,
     384,   382,  2043,  2044,   939,   413,   505,   415,  2762,     8,
    1926,   287,    11,   505,  1038,   379,    15,    16,    13,    14,
      19,    20,    21,  1280,   996,   997,   506,   287,   970,   509,
     506,   240,  1289,   509,  3411,   505,   505,   972,   343,   503,
       8,   505,   347,    11,   979,  1832,   988,    15,    16,   505,
     992,    19,    20,    21,    13,    14,  1313,  1862,  1483,   506,
    1485,  1486,   509,   444,   467,   354,   469,   343,  3396,  2405,
    3398,   347,  2408,    37,   379,   506,  1333,   506,   509,  1014,
     509,  3362,   505,   343,   373,  1330,   450,   347,  1330,  1061,
    1025,  1330,  1879,  1330,  2043,  2044,   506,  3378,  1070,   509,
    1357,   363,   167,   379,  1891,  2661,  1363,  1364,   363,   506,
     273,  3439,   509,   505,   363,   278,  1088,  1052,   505,   379,
     506,   370,  1379,   509,   498,  1097,   506,  1099,  1100,   509,
      13,    14,  2048,  2540,  1921,    13,    14,   506,  2330,  2541,
     509,  1928,  2186,   505,  2188,   450,  2183,   194,  2185,   413,
    2095,   415,  3433,  2524,   363,  2526,  1413,  3438,   413,  2525,
     415,   413,  2718,   415,   413,  1970,   415,    13,    14,   506,
     217,  1428,   509,  2324,   450,    13,    14,  1964,  2585,   441,
    2539,  1968,  2541,   699,   505,   701,   441,  1974,  1445,   505,
     450,   491,   441,  1427,  1451,   167,  1131,  1132,   173,  1134,
      40,  1428,   506,   506,   168,   509,   509,   506,  2157,  3153,
     509,  3155,   506,  1470,  1471,   509,    13,    14,   217,  1476,
      60,  1478,   505,   198,   283,  1478,  1483,  1484,  1485,  1486,
     488,   506,   441,   506,   509,   219,   509,   507,   285,   166,
     204,  1498,  1499,   505,   488,  1478,   507,  1504,  2433,   217,
    1507,  1504,  2159,   509,  1507,  1512,   220,  1514,  1515,  1512,
     505,   236,  1515,  1520,   104,   428,   230,  1520,   167,  1504,
     506,  1504,  1507,  1478,  1507,   506,   439,  1512,   509,  1512,
    1515,   506,  1515,  1540,  1541,  1520,   285,  1520,  1545,   506,
    1547,   288,   509,  1550,  1537,  2251,   505,  1537,    59,  1504,
    2297,  2298,  1507,  1537,   410,   506,   505,  1512,   509,  1537,
    1515,   506,  1569,   288,   509,  1520,  1573,   285,  1575,    13,
      14,  3075,  1537,  1580,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,  1537,    13,    14,  1593,  1594,  3163,   506,
     506,  1598,   509,   509,   506,  1602,   488,   509,  1605,  1606,
    1607,  1608,  1609,  1610,  1611,  1612,  1613,   197,   219,  1616,
     184,   185,  1504,  2555,   148,  1507,  1623,  2559,  1625,  2561,
    1512,   506,   506,  1515,   509,   509,   343,   506,  1520,  1666,
     509,  2937,   506,   506,   506,   509,   509,   509,   363,  1646,
     354,   506,   148,   506,   509,   370,   509,    13,    14,  2558,
     148,   143,    13,    14,  1666,   148,   246,    13,    14,   373,
    2776,    40,  1669,   506,   254,   157,   505,  1644,  2459,  2460,
     162,  2823,   505,  1680,  1681,   268,   266,   268,   252,   253,
      13,    14,  3116,    40,    59,    13,    14,   459,   413,    87,
     415,    13,    14,    13,    14,   492,   493,   494,   148,   496,
     497,   498,   499,   500,   501,    13,    14,   432,   298,  1716,
      13,    14,   471,   438,   358,   359,   441,   187,  1725,   456,
    1727,   213,  1444,    13,    14,   505,  1448,    26,   317,  2895,
     505,  2268,   148,    32,   564,   505,  3360,    13,    14,   505,
    3364,   233,  1427,   492,   493,   494,    39,   496,   497,   498,
     499,   500,   501,  2318,    13,    14,    13,    14,  1765,   349,
    2459,  2460,  1769,    13,    14,  1772,  1773,    13,    14,  2324,
     505,   358,   359,  2731,   492,   493,   494,   505,   496,   497,
     498,   499,   500,   501,   374,   256,   257,   507,   280,  2493,
     368,   369,   167,   148,   368,   369,  3420,   289,   358,   359,
     358,   359,   148,   393,  1811,   452,   453,  3373,  3374,  3405,
    3406,   148,  1819,   345,  1807,  1099,  1100,   283,   421,  1504,
      26,   505,  1507,   167,   505,  1832,    32,  1512,  3332,   505,
    1515,  3265,   506,    12,   133,  1520,   505,     8,    17,  1846,
      11,   411,   215,   220,    15,    16,  1853,  1854,   293,   505,
      29,   220,  1537,  2640,   128,  1862,   220,   505,   290,  2516,
      40,   231,   505,     5,    43,    44,     5,  2658,   505,   505,
     505,   505,  1879,  3307,     5,    46,  1883,  1884,     5,  1886,
     505,   155,    53,  2578,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  2596,   505,  1900,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1908,  1909,     5,     5,  2814,   144,    78,  1915,  1916,
    1595,  1633,  1919,     9,  1921,  2621,   506,   468,    40,  1926,
     505,  1928,   506,  3357,   295,   104,  3083,   133,   509,   102,
     509,    40,   307,   308,   309,   215,   379,   162,    60,   280,
     162,  1948,   278,    59,  1951,   437,  1953,     3,  1951,     5,
    1957,   505,   231,   421,  1957,   505,    91,  1964,   421,  2658,
     509,  1968,    59,  1970,    59,  1972,  1951,  1974,  1951,   421,
     141,   259,  1957,   421,  1957,   515,  1983,   467,   808,   421,
     148,  1666,   104,    98,  2683,   148,   268,   268,   287,   505,
      40,   268,   505,   268,   268,     3,  1951,   372,    96,   273,
     148,   172,  1957,   505,   278,  2048,  2797,  2014,  2707,     9,
      39,   503,  2019,  2020,  2972,   507,   419,  2952,   189,   419,
     503,  2558,   503,   194,   421,   421,   421,   421,   507,    13,
     506,  3197,  2933,   506,   409,   167,  2043,  2044,   505,  2826,
    2827,  2048,   506,   464,   343,   506,   506,   509,   347,   171,
     506,   107,   108,   506,  3140,  2062,   220,   275,  2065,  1951,
    2067,   232,   220,   275,   505,  1957,   505,   442,    11,   167,
     463,   509,   345,   504,   509,   197,  2083,  2084,   453,  2859,
     379,   287,   515,  2090,   509,   419,  2093,   514,   505,   273,
    2093,   505,   421,   176,   158,   167,   509,    37,  2797,  2636,
     506,   213,    42,  2110,   447,   509,   259,  2110,  2093,   284,
    2093,   382,   222,  1798,   285,   306,  2123,   143,   306,   509,
     509,   176,  1807,   215,   246,  2110,  2691,  2110,   184,   185,
     505,   157,   254,  2140,  2141,   222,   162,   343,  2093,   506,
    1862,   347,   505,   268,   266,  2936,  1868,   222,   143,   289,
    2157,   450,  2159,   281,   428,  2110,   326,    55,   505,    99,
     505,  2168,   157,   459,    40,   439,  3075,   162,   148,   999,
     505,   148,   148,   379,   148,   467,   298,     8,   268,  2186,
    2187,  2188,   506,  3335,    15,    16,   503,   213,    19,    20,
      21,   506,   248,   249,   250,   251,   252,   253,   283,   488,
     256,   257,   100,   488,   506,   506,   506,   233,   506,   307,
     308,   309,   283,   384,    40,    59,   167,  2224,   213,  2262,
      11,   119,    40,  2230,   162,   162,   176,   349,   168,   421,
    2795,   509,   167,   505,  3176,   505,   176,  2936,   233,   137,
     506,   506,   506,   141,   450,   506,   506,   505,  1970,   504,
    2245,   507,   374,  2245,   280,   506,  2245,   506,  2245,   506,
     514,  2268,   488,   289,   204,   163,  1951,  1097,   166,   505,
     505,   393,  1957,   564,   372,   505,   505,   151,   245,  2286,
     220,   505,   464,    40,   182,   280,    59,   494,  2825,   509,
     230,   490,   284,   284,   289,   444,   509,   239,    59,    59,
     259,   564,   421,   268,   505,   148,   198,   148,   148,   275,
     421,   409,   368,   369,   421,   421,   421,  2324,   489,   275,
     506,    40,   262,  2330,   505,   496,   497,   498,   499,   500,
     501,   429,   345,   505,     5,   509,   281,   506,   467,   283,
      40,  1171,   148,   283,   442,   506,   273,   504,  3054,   504,
     506,   167,   506,   505,   505,   453,   506,    59,   537,   506,
     181,  2368,   162,  2048,    78,  2368,   194,   307,   139,   467,
     506,   167,   506,   506,   314,   273,   294,   515,  2933,   505,
     351,  2066,   505,   281,   505,  2368,   506,   284,  3323,   568,
    2433,   509,  3334,   491,   176,   148,   171,  2082,   506,   432,
    2407,    40,   506,   506,  2407,   303,  2470,   505,  2093,   509,
     509,   437,     0,  2368,   354,  2422,   505,    40,   506,  2426,
    2427,   505,  2465,  3332,   506,  2110,  2433,   506,   505,   485,
     486,   329,    84,   373,   504,   447,  2443,  3136,   167,  2446,
     509,  2448,   437,   505,   466,   506,   506,  3142,  2455,  2456,
     194,   509,  2459,  2460,   285,   506,   453,  2464,  2465,   506,
    3126,  3165,  3128,   506,  2471,   506,   506,   494,   283,    59,
     506,  2193,   506,  2516,   506,   506,   200,   467,   113,  2486,
      40,  3138,   505,   222,    86,   273,   187,   273,   507,  2496,
     507,  2484,   507,   507,  2484,   494,   507,  2490,   507,   421,
    2484,   507,   442,  1333,   507,   684,  2484,   447,   503,  2516,
      98,   506,   507,   507,   507,   421,  2238,   808,   507,  2484,
     507,   507,  3141,    40,   507,  3144,   507,   268,   507,   507,
    2484,   504,   507,  1363,  1364,   507,   505,   507,  3075,   507,
    2262,   105,   504,   507,   507,   808,   507,   507,  2555,  1379,
     507,  2558,  2559,   507,  2561,   143,   467,    40,   507,   507,
     507,  3267,  3257,   283,   505,  2572,  3276,  2574,   507,   157,
     113,   507,   506,     9,   162,   344,   505,  2262,   509,   167,
     505,   328,   506,   509,    59,   506,   194,   187,   176,   509,
     452,    89,   506,   181,  3251,    72,   505,   337,    40,  2592,
    2595,    78,  2324,  2595,   148,   506,  2595,   120,  2595,   148,
    2332,    40,  2334,   506,    91,    40,  2338,   359,  2340,   506,
     505,   359,   505,    40,   167,   213,   505,   509,   447,  2636,
    2623,   303,   505,  2626,   244,   273,   113,   186,   115,   447,
    2683,   505,   432,   286,    72,   233,    72,   564,    78,     9,
     506,  2658,   506,   505,  2661,   361,   506,   504,    40,   504,
      59,   492,   493,   494,    91,   496,   497,   498,   499,   500,
     501,  2678,  2679,   129,     8,   266,  2683,    11,    60,  2686,
     494,    15,    16,  2686,   283,    19,    20,    21,  2695,   432,
      40,   286,   280,   505,   286,   283,   505,   452,   200,   506,
    2707,   289,    36,   506,   506,  2712,  2713,   506,   999,  2752,
    2717,  2718,   283,   283,   506,  2722,   379,   118,  2725,  2726,
     144,   444,   104,  2730,  2731,   202,   358,  2734,    25,    36,
    3229,  2738,   358,   291,   692,  2738,   999,  2819,  2745,  3304,
     328,  1733,  2181,  1645,    14,   608,  2542,  2244,  2433,  2555,
    1580,  2330,  2933,  2738,   297,  2738,  3282,  3388,  2587,   173,
    3047,  3336,  3345,   351,   307,   308,   309,  3381,  3102,  2174,
      37,     7,     8,  1158,  2187,    42,    12,  3334,  2171,  3343,
    2465,    17,  2789,  2738,   198,    21,  2534,    23,    24,  2561,
    2797,   268,    28,    29,    30,  3332,   273,    33,  3331,  2484,
      36,    37,  1328,  2261,    40,  2490,  2908,    43,    44,  2816,
    2612,  2495,  1412,  1853,  1428,   197,  3227,  1363,  2825,  3167,
    3307,   409,   236,  2494,  3261,  3410,  1448,  2484,  2157,   372,
     971,  2516,    99,  2123,  1118,  1705,  2558,  1141,  2389,  3316,
      37,   954,  2140,  1140,   321,    42,  2738,   971,  1669,   437,
      86,    87,  2859,  3238,  3130,  1704,  1143,    21,  2110,   447,
     337,  2686,    98,  1962,   246,  2587,   409,   103,   104,   105,
     106,   107,   254,  2976,   288,   625,   464,   614,   466,   467,
    1171,   949,  2367,   217,   266,  2368,  1716,  2414,  3068,  1862,
    1381,   808,  3242,   947,   947,  2902,  3241,  2427,   947,   442,
    2021,   168,    99,   947,  2066,  1984,  2124,  2592,  1171,  2952,
     453,  2063,  2023,  1499,  2440,   503,   298,  2745,   506,   507,
     508,  2914,  1970,  1644,   467,    98,  2933,    -1,    -1,  2936,
    2937,    -1,    -1,    -1,    -1,   107,   108,   204,  2623,  1118,
      -1,  2626,    -1,    -1,    -1,  2952,    -1,    -1,   491,   363,
      -1,   285,    -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   438,   505,   230,    -1,  2972,  2688,   349,    -1,    -1,
     447,   168,  2979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2990,  2991,    -1,    -1,  2994,    -1,  2996,
      -1,    -1,   374,    -1,    -1,   262,    -1,    -1,  2683,   413,
      -1,   415,  1832,    -1,    -1,    -1,    -1,   204,    -1,    -1,
      -1,   393,   184,   185,  3021,    -1,   283,   147,   432,    -1,
    2742,    -1,    -1,   220,   438,    -1,    -1,   441,    -1,    -1,
     173,    -1,    -1,   230,  1147,    -1,    -1,   167,  3045,    -1,
     307,    -1,  1333,    -1,    -1,    -1,    -1,   314,    -1,  1879,
      -1,    -1,    -1,  2738,    -1,   198,    -1,    -1,   107,   108,
      -1,  1891,    -1,    -1,    -1,   262,    -1,  2752,  3075,    -1,
    1333,    -1,  1363,  1364,    -1,    -1,   248,   249,   250,   251,
     252,   253,   999,    -1,   256,   257,   283,   354,  1379,    -1,
      -1,  1921,    -1,   236,    -1,  3088,  3089,    -1,  1928,    -1,
    1363,  1364,    -1,    -1,    -1,  3112,   373,    -1,    -1,  3116,
     307,    -1,    -1,  3116,    -1,    -1,  1379,   314,    -1,  3126,
      -1,  3128,    -1,  3130,    -1,    -1,     0,  3134,    -1,  3136,
      -1,  3138,    -1,  3116,  1964,   184,   185,    -1,  1968,    -1,
      -1,  3148,    -1,    -1,  1974,   288,  3153,    -1,  3155,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3163,   354,   492,   493,
     494,  3116,   496,   497,   498,   499,   500,   501,    -1,  3176,
      -1,  3164,    -1,  3166,  3181,   442,   373,   307,   308,   309,
     447,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2910,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   368,   369,    -1,   248,
     249,   250,   251,   252,   253,    -1,    -1,   256,   257,    -1,
      -1,  2933,  3205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3228,    -1,    -1,    98,    -1,    -1,   564,  3221,  2914,
      -1,  3238,  3225,    -1,    -1,    -1,    -1,    -1,    -1,  1418,
      -1,  1420,   372,    -1,  3251,   442,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,  1171,    -1,    -1,    -1,  3265,    -1,
      -1,    -1,  3265,    29,    -1,    -1,    -1,  2952,    -1,   143,
     413,    -1,   415,    -1,    -1,    -1,  3283,    43,    44,   409,
      -1,    -1,  3265,   157,    -1,  3007,   522,    -1,   162,  1580,
     526,   527,    -1,   167,   530,   438,    -1,    -1,   441,    -1,
    3307,   537,   176,    -1,  3307,    -1,    -1,   181,    -1,    -1,
    3265,    -1,   442,   485,   486,    -1,  3323,  1580,    -1,   368,
     369,   557,    -1,   453,  3307,  3332,    -1,  3334,    -1,    -1,
     566,   567,   568,   505,    -1,    -1,    -1,   467,   104,   213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3357,    -1,  3307,  3075,  3357,    -1,  3349,  1470,  1471,   233,
      -1,   491,    -1,  1476,   147,  3372,  3373,  3374,    -1,    -1,
      -1,   607,   608,   609,  3357,   505,    -1,    -1,   614,    -1,
     616,    -1,    -1,  3376,   167,    -1,    -1,    -1,    -1,   625,
      -1,    -1,  3399,   629,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,  3357,  3088,  3089,    -1,   280,    -1,    -1,   283,
      -1,    -1,   648,   649,   650,   289,  1333,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1716,   662,   663,    -1,   665,
      -1,    -1,    -1,  3440,    -1,    -1,   485,   486,  2268,    -1,
      -1,    -1,   678,    -1,    -1,    -1,  1363,  1364,   684,    -1,
      -1,    -1,    -1,  1716,   328,    -1,    -1,     8,   694,    -1,
      11,   697,  1379,    -1,    15,    16,    17,    18,    19,    20,
      21,   808,    -1,    -1,    -1,    -1,  3198,   351,    -1,  3164,
      -1,  3166,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,  1621,    -1,
     746,   747,   748,   749,    -1,    -1,    -1,    -1,    -1,    -1,
    3205,    -1,    -1,    -1,   307,   308,   309,    78,    -1,    -1,
      -1,    -1,  1711,    -1,    -1,   409,  3221,    -1,    -1,    -1,
    3225,  1832,  1721,    -1,  1723,    -1,    -1,  1726,    -1,    -1,
      -1,    -1,    -1,  1732,    -1,  1734,  1669,    -1,    -1,    -1,
      -1,    -1,    -1,   437,    -1,    -1,    -1,  1746,    -1,  1832,
      -1,    -1,  1751,   447,    -1,    -1,  1755,  1756,  1757,  1758,
      -1,  1760,  1761,    -1,    -1,    -1,    -1,    -1,  1879,   372,
     464,    -1,   466,   467,     8,    -1,    -1,    11,    -1,    -1,
    1891,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
    3332,    -1,    -1,    -1,    -1,    -1,  1879,    -1,    -1,    -1,
      -1,   172,    36,    -1,    -1,  2455,   409,    -1,  1891,   503,
    1921,    -1,   506,   507,   508,    -1,    -1,  1928,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,  3369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1921,   442,
      -1,    -1,   999,  1580,  3349,  1928,   217,   218,    -1,    -1,
     453,    -1,    -1,  1964,    -1,    -1,    -1,  1968,    -1,    -1,
       0,   232,    -1,  1974,   467,    -1,   167,    -1,    -1,    -1,
      -1,  3376,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,  1964,    -1,    -1,    -1,  1968,    -1,    -1,   491,    -1,
      -1,  1974,   948,   949,    -1,   951,    -1,   268,   954,    -1,
     271,    -1,   505,    -1,   960,   961,    -1,    -1,  2558,    -1,
     966,    -1,    -1,    -1,   285,    -1,   972,   288,    -1,    -1,
      -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   989,    -1,    -1,    -1,    -1,    -1,    -1,
     996,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1006,   537,    -1,    -1,    -1,    -1,    -1,    -1,    98,  1892,
    1893,  1894,  1895,  1896,  1897,    -1,    -1,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1907,  1908,  1909,    -1,    -1,  1716,
      -1,   567,   568,   217,    -1,    -1,  2636,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,
    1056,    -1,    -1,   143,    -1,    -1,   307,   308,   309,    -1,
      -1,  2661,    -1,   384,  1171,    -1,    -1,   157,   307,   308,
     309,     8,   162,    -1,    11,    -1,    -1,   167,    15,    16,
      -1,    -1,    19,    20,    21,    -1,   176,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,  1101,    -1,    -1,  1104,    36,
      -1,   285,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,  1118,  1119,    19,    20,    21,    -1,  2718,  1125,
      -1,   372,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1147,    -1,   233,    -1,  1832,    -1,    -1,   684,    -1,
      -1,  1157,  1158,    -1,    -1,    -1,  2105,    -1,   409,    -1,
    2043,  2044,    -1,    -1,  1170,    -1,    40,    -1,   489,    -1,
     409,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,  1187,    -1,    -1,    -1,  1191,    -1,    -1,    -1,  1195,
     280,   442,  1879,   283,   515,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   453,   442,  1891,    -1,    -1,  2268,    -1,    -1,
      -1,    -1,    -1,    -1,   453,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2825,  1333,    -1,   467,   103,
      -1,   105,    -1,   107,  1921,  2268,    -1,    -1,   328,    -1,
     491,  1928,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   491,    -1,   505,    -1,  1363,  1364,    -1,  2859,
      -1,   351,    -1,    -1,    -1,    -1,   505,    -1,    37,    -1,
      -1,    -1,  1379,    42,  2157,    -1,    -1,  1964,    -1,    -1,
     217,  1968,    -1,    -1,    -1,    -1,    -1,  1974,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   564,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   564,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,  1324,   409,
    1326,  1327,    -1,    -1,    -1,    -1,  1332,    -1,  1334,  2278,
      99,    -1,    -1,    -1,    -1,    -1,    -1,  2937,    -1,  1345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   437,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1376,    -1,    -1,    -1,   464,  1381,   466,   467,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2455,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,    -1,  1412,    -1,    -1,  1415,
      -1,  1417,  1418,   503,  1420,  1421,   506,   507,   508,    -1,
      -1,    -1,  2455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     966,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,
      -1,    -1,  1448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   220,    -1,   989,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,  1470,  1471,    -1,    -1,    -1,    -1,
    1476,    -1,  1478,  1580,    -1,  3075,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1491,    -1,  1493,  1494,    -1,
      -1,    -1,    -1,   262,    -1,  1501,    -1,  2558,  1504,    -1,
      -1,  1507,    -1,    -1,    -1,    -1,  1512,    -1,    -1,  1515,
      -1,    -1,    -1,    -1,  1520,    -1,  1522,    -1,  1524,    -1,
    1056,    -1,    -1,    -1,    -1,  2558,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,    -1,
      -1,    -1,   808,  1549,    -1,   314,    -1,    -1,  1554,    -1,
     808,    -1,    -1,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
    2519,  2520,    -1,    -1,    -1,  2636,  2459,  2460,    -1,    -1,
      -1,  2268,  1118,  1119,    -1,   354,  1592,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,  2547,    -1,
    2661,    -1,    -1,  2636,   373,    -1,    -1,    -1,    -1,  1716,
      -1,    -1,    -1,  2562,  2563,  2564,  2565,  2566,  2567,  2568,
    2569,  2570,  2571,    -1,    -1,    -1,    -1,    -1,  2661,    -1,
      -1,    -1,    -1,    -1,    -1,  1641,    -1,  1643,    -1,  1645,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,
    1656,  1657,   526,    -1,    -1,    -1,   530,  2718,    -1,    -1,
      -1,    -1,    -1,  1669,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2718,    -1,    -1,  1694,    -1,
    1696,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1710,  1711,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1721,  1722,  1723,  1724,    -1,
    1726,    -1,    -1,    -1,    -1,  1832,  1732,    -1,  1734,    -1,
      -1,    -1,  3332,   999,    -1,    -1,    -1,    -1,    -1,  1745,
    1746,   999,   616,    -1,  1750,  1751,    -1,    -1,    -1,  1755,
    1756,  1757,  1758,    -1,  1760,  1761,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2825,    -1,    -1,    -1,  2455,    -1,
      -1,    -1,  1879,    -1,    -1,  2658,    -1,  1783,  1784,  1785,
    1786,  1787,    -1,    -1,  1891,    -1,    -1,    -1,  1794,  1795,
      -1,    40,  2825,    -1,    -1,    -1,    -1,    -1,  2859,  1805,
    2683,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,  1921,    -1,     8,    -1,    -1,    11,
     694,  1928,    -1,    15,    16,    -1,  2859,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,  2796,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,  1964,    -1,    -1,
      -1,  1968,    -1,    -1,   113,    -1,    -1,  1974,    -1,    -1,
      -1,  2558,   746,   747,   748,   749,  2937,    -1,    -1,    -1,
      -1,  1417,  1418,    -1,  1420,    -1,  1892,  1893,  1894,  1895,
    1896,  1897,    -1,    -1,  1900,  1901,  1902,  1903,  1904,  1905,
    1906,  1907,  1908,  1909,  2937,  1171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1171,  2797,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   171,    -1,  1930,    26,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    -1,  1942,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,  1951,    -1,    -1,   197,  2636,
      -1,  1957,    -1,    -1,    -1,    -1,  1962,  1493,    -1,    60,
      -1,  1967,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2661,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1522,    -1,  1524,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,    -1,
      -1,    -1,    -1,   104,    -1,   254,  2012,    -1,    -1,    -1,
    2016,    -1,    -1,    -1,  3075,  2021,    -1,   266,    -1,   268,
      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
      -1,  2718,   133,    -1,    -1,    -1,    -1,  2043,  2044,    -1,
      -1,    -1,  3075,    -1,    -1,    -1,    -1,    -1,    -1,   298,
      -1,    -1,    -1,  2936,  2060,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1333,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1333,    -1,   951,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2093,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   197,  1363,  1364,  2105,
     349,    -1,    -1,    -1,  2110,  1363,  1364,  3056,  2114,    -1,
      -1,    -1,    -1,  1379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1379,    -1,    -1,    -1,   374,    -1,  3076,  3077,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2825,    -1,
      -1,    -1,    -1,    -1,   393,   246,   395,    -1,  2154,   398,
    3099,  2157,    -1,   254,  2160,    -1,    -1,    26,    -1,    -1,
    1696,  2268,    -1,    32,    -1,   266,    -1,    -1,    -1,    -1,
    2176,    40,  2859,    -1,    -1,  1711,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1721,   287,  1723,    -1,    -1,
    1726,    60,    -1,    -1,    -1,    -1,  1732,   298,  1734,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
    1746,    -1,    -1,    -1,    -1,  1751,    -1,    -1,    -1,  1755,
    1756,  1757,  1758,    -1,  1760,  1761,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2240,   104,    -1,    -1,    46,    -1,
    2246,  2247,   343,    -1,    -1,    53,   347,    -1,   349,    -1,
    2937,    -1,    -1,  3136,    -1,  2261,   505,    -1,  2264,  2265,
    2266,  2267,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      78,  3332,  2278,   374,  2280,    -1,    -1,  2283,   379,    -1,
      -1,    -1,  2288,  1157,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,  2301,  1170,    -1,    -1,  3332,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,  2318,    -1,  1580,    -1,    -1,  1191,    -1,    -1,
      -1,    -1,  1580,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    2336,  2337,    -1,  2339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2455,   450,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2368,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,  3328,
      -1,   189,  2388,    -1,    -1,   254,   194,    -1,  3075,    -1,
    2396,  2397,  2398,    -1,  1930,    -1,    -1,   266,    -1,  2405,
      -1,  2407,  2408,    -1,    -1,    -1,    -1,    -1,  2414,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
      -1,    -1,    -1,  2429,   232,    -1,  1962,    -1,    -1,   298,
      -1,  1967,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1716,  2558,  1326,  2459,  2460,    -1,    -1,    -1,  1716,    -1,
    1334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   343,    -1,  2012,   285,   347,    -1,
     349,    -1,  2488,     8,    -1,  2021,    11,    -1,  2494,    -1,
      15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2510,   374,    -1,    -1,  2514,    -1,
     379,    -1,  2518,  2519,  2520,    -1,    -1,    -1,  2524,  2525,
    2526,    46,  2528,    -1,   393,    -1,    -1,    -1,    53,  2636,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2547,    -1,  2549,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,  2661,    -1,  2562,  2563,  2564,  2565,
    2566,  2567,  2568,  2569,  2570,  2571,  1832,    -1,    -1,  2105,
      -1,    -1,     8,    -1,  1832,    11,   384,    -1,    -1,    15,
      16,   450,    -1,    -1,    -1,  2591,    -1,    -1,    -1,    -1,
      -1,  2597,  2598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2612,    -1,    -1,    -1,
      46,  2718,    -1,  1879,    -1,    -1,   141,    53,  2154,    -1,
      -1,  1879,  2628,    -1,  2160,  1891,    -1,  1501,    -1,    -1,
      -1,    -1,    -1,  1891,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2647,    78,    -1,    -1,  3332,    -1,   172,    -1,    -1,
      -1,    -1,  2658,    -1,    -1,  1921,    -1,    -1,  2664,    -1,
      -1,    -1,  1928,  1921,   189,  2671,  2672,  2673,  2674,   194,
    1928,    -1,    -1,    -1,    -1,    -1,    -1,  2683,    -1,    -1,
    2686,   489,    -1,    -1,  2690,  2691,    -1,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,  1964,    -1,
    2706,    -1,  1968,    -1,    -1,   141,  1964,   232,  1974,    -1,
    1968,    -1,    -1,    -1,    -1,    -1,  1974,    -1,  2825,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2736,    -1,  2738,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,  2278,    -1,    -1,    -1,  2752,    -1,    -1,    -1,
    2756,    -1,  2859,   189,    -1,    -1,  2762,    -1,   194,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1643,
    2776,  1645,    -1,    -1,    -1,    -1,  2782,    -1,    -1,    -1,
      -1,    -1,  1656,    -1,    -1,    -1,    -1,    -1,    -1,  2795,
    2796,  2797,    -1,   660,   661,    -1,   232,  2803,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2820,    -1,    -1,    -1,    -1,    -1,
    1694,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2937,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   725,   384,
      -1,    -1,   729,    36,    -1,    -1,    -1,    -1,    -1,  2405,
      -1,    -1,  2408,    46,    -1,    -1,    -1,    -1,  2414,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,  2913,    -1,  1783,
    1784,  1785,  1786,  1787,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2936,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2962,    -1,    -1,    -1,
      -1,    -1,  2968,    -1,   489,    -1,    -1,    -1,  3075,    -1,
    2976,   496,   497,   498,   499,   500,   501,    -1,  2514,   846,
      -1,    -1,  2518,  2519,  2520,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3003,    -1,   172,
      -1,    -1,  2268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2268,  2547,    -1,    -1,    -1,    -1,   189,    -1,    -1,  3025,
      -1,   194,    -1,    -1,  3030,    -1,  2562,  2563,  2564,  2565,
    2566,  2567,  2568,  2569,  2570,  2571,    -1,    -1,    -1,    -1,
     938,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
    3056,    -1,    -1,   489,    -1,    -1,    -1,    -1,    -1,   232,
     496,   497,   498,   499,   500,   501,    -1,    -1,  1942,    -1,
    3076,  3077,    -1,    -1,    -1,    -1,    -1,   944,    -1,    -1,
      -1,    -1,    -1,   950,    -1,  3091,   953,  3093,    -1,   956,
     957,   958,   959,  3099,    -1,   268,    -1,    -1,   271,   997,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3113,    -1,    -1,
    3116,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2664,    -1,
    3136,   998,    -1,    -1,  3140,  3141,    -1,    -1,  3144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1018,    -1,    -1,  2690,    -1,    -1,    -1,    -1,    -1,
      -1,  3167,    -1,    -1,    -1,    -1,    -1,    -1,  3174,  1036,
      -1,    -1,  1070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1047,  1048,  1049,    -1,  1051,  1052,    -1,    -1,    -1,  2455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2455,  3204,  1097,
      -1,  1099,  1100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,    -1,    -1,    -1,  1082,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3332,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3265,
    2796,    -1,    -1,    -1,    -1,    -1,  1133,    -1,    -1,    -1,
    1137,  1138,    -1,    -1,  1172,    -1,    -1,  1175,  1176,    -1,
      -1,  1148,  1149,    -1,    -1,    -1,  3292,    -1,    -1,    -1,
      -1,    -1,  2558,    -1,    -1,    -1,    -1,    -1,  3304,  3305,
    2558,  3307,  3308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3316,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,  3328,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   509,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3350,    -1,    -1,    -1,    -1,    -1,
      -1,  3357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2636,    -1,    -1,  2247,    -1,    -1,    -1,    -1,  2636,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3395,
      -1,  2265,  2266,  2267,    -1,  2661,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2661,  3410,    -1,  2280,    -1,    -1,  2283,
      -1,    -1,    -1,  1280,  2288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1289,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  2968,    15,    16,    -1,    -1,    19,    20,    21,
    2976,    -1,    -1,    -1,    -1,    -1,  1313,    -1,    -1,    -1,
      -1,    -1,  2718,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2718,    -1,    -1,  1361,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,  1372,    -1,  1374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1384,    -1,    -1,  3025,
      -1,    -1,    -1,    -1,  3030,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,  1401,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,
    3056,    -1,  2396,  2397,  2398,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1433,  1434,    -1,    -1,    -1,
    3076,  3077,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,  2825,
      -1,    -1,    -1,  3099,    -1,    -1,    -1,  2825,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,  1451,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,  2859,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2859,    -1,    -1,  3140,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,  1483,    -1,  1485,  1486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1498,  1499,    -1,    -1,    -1,  2510,    -1,    -1,    -1,
      -1,   141,    -1,    -1,    -1,    -1,    -1,  1514,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2937,   172,    -1,    -1,    -1,    -1,    -1,  1545,  2937,
    1547,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   189,
      -1,    15,    16,    -1,   194,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,  1575,    -1,
      -1,    -1,    -1,    -1,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,  1588,    46,  2597,    -1,    -1,  1593,  1594,    -1,    53,
      -1,  1598,   232,    -1,    -1,  1602,    -1,    -1,  1605,  1606,
    1607,  1608,  1609,  1610,  1611,  1612,  1613,    -1,    -1,  1616,
      -1,    -1,    -1,    -1,    78,    -1,  1623,    -1,  1625,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1646,
      -1,    -1,  1680,  1681,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,  3328,    -1,    -1,    -1,    -1,  2671,  2672,  2673,
    2674,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,  3075,
      -1,    -1,    -1,  1680,  1681,    -1,    -1,  3075,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1739,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,  1749,    -1,    -1,  1752,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,  1765,    -1,
      -1,    -1,  1769,    -1,    -1,  1772,  1773,   489,   232,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2803,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1836,  1837,
      -1,   954,    -1,    -1,  1811,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,  1862,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1853,  1854,    -1,   489,
      -1,    -1,    -1,    -1,    -1,    22,   496,   497,   498,   499,
     500,   501,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1883,  1884,    -1,  1886,
      47,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,  1915,  1916,
      -1,    -1,  1919,    -1,    -1,    -1,    -1,    84,  1071,    -1,
     384,    -1,    -1,    -1,    -1,    -1,  3332,    -1,    -1,    96,
      -1,    98,  1970,    -1,  3332,    -1,    -1,    -1,    -1,    -1,
      -1,  1948,   109,    -1,    -1,    -1,  1953,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,  1114,    -1,    -1,    -1,  1972,   133,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,  1983,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1147,    -1,   163,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,  2014,    -1,    -1,
      -1,     8,  2019,  2020,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    -1,    -1,    -1,   489,   193,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,   209,    -1,  1197,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,  2062,    53,    -1,  2065,  2097,
    2067,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2083,  3091,    -1,    -1,
       8,    78,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    -1,  2130,  2131,    -1,    -1,    -1,    -1,    -1,  3113,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,  2123,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    36,
      -1,    -1,    -1,  2140,  2141,    -1,    -1,    -1,    -1,    46,
     307,   308,   309,    -1,   141,    -1,    53,    -1,   315,    -1,
      78,   318,  2159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3174,  2168,    -1,    -1,    -1,  1318,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
    3204,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   141,    -1,    -1,   383,  2224,    -1,    -1,
      -1,    -1,    -1,  2230,    -1,    -1,   393,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,   405,    -1,
      -1,    -1,   409,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2294,    -1,    -1,    -1,
      -1,   189,   429,    -1,    -1,   172,   194,    -1,    -1,    -1,
      -1,  1424,    -1,    -1,    -1,   442,    -1,    -1,   445,  2286,
      -1,   448,   189,    -1,    -1,    -1,   453,   194,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1449,    -1,    -1,    -1,
     467,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,  1466,    -1,  1468,    -1,  1470,  1471,    -1,
    1473,    -1,    -1,  1476,   491,   232,  1479,    -1,    -1,  1482,
      -1,    -1,    -1,    -1,  1487,    -1,    -1,  1490,   505,    -1,
      -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
    1543,    -1,    -1,    -1,    -1,  1548,    -1,    -1,  1551,  1552,
    1553,    -1,    -1,    -1,  1557,    -1,    -1,    -1,  1561,    -1,
      -1,    -1,    -1,    -1,    -1,  2422,    -1,    -1,    -1,  2426,
    2427,    -1,    -1,    -1,    -1,    -1,  2433,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,    -1,  2446,
      -1,  2448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2456,
      -1,    -1,    -1,    -1,    -1,    -1,   384,  2464,  2465,    -1,
      -1,    -1,    -1,    -1,  2471,    -1,    -1,    -1,    -1,  1622,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,  2486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2496,
      -1,    -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,  2516,
    1663,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2558,    -1,    -1,    -1,    -1,    -1,  1679,    -1,    -1,    -1,
      -1,  1684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1701,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,    -1,  2572,    -1,  2574,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,  2678,  2679,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
    2707,    -1,    -1,    -1,    -1,  2712,  2713,    -1,    -1,    -1,
    2717,    -1,    -1,    -1,    -1,  2722,    -1,    -1,  2725,  2726,
      -1,    -1,    -1,  2730,  2731,    -1,    -1,  2734,  1881,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1889,  1890,  2745,  1892,
    1893,  1894,  1895,  1896,  1897,    -1,    -1,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,    -1,    -1,
      -1,  2819,  2789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2816,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2866,  2867,
      -1,    -1,    -1,  1986,  1987,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2026,    -1,    -1,    -1,  2030,  2031,  2032,
    2033,  2034,  2035,  2036,  2037,    -1,    -1,    -1,    -1,   268,
    2043,  2044,   271,  2046,  2047,  2902,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2058,   285,    -1,  2061,   288,
      -1,    -1,    -1,    -1,    -1,    -1,  2069,  2070,  2071,  2072,
    2073,  2074,  2075,  2076,  2077,  2078,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2952,    -1,    -1,    -1,    -1,
      -1,  2104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    24,    -1,    -1,  2972,    -1,    -1,    -1,    -1,
      -1,    -1,  2979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2990,  2991,    -1,    -1,  2994,    -1,  2996,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2157,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3021,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3064,  3065,    -1,    -1,
      -1,    -1,    -1,    95,    -1,    -1,    -1,  3075,  3045,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,  2225,    -1,    -1,    -1,    -1,    46,    -1,    -1,
     142,    -1,  2235,  2236,    53,    -1,    -1,    -1,    -1,    -1,
     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   164,    -1,    -1,  3112,    -1,   169,    -1,    78,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,  3130,    -1,    -1,    -1,  3134,    -1,    -1,
      -1,  3138,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,  3148,    -1,    -1,    -1,    -1,  3153,    -1,  3155,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3163,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2321,    -1,
      -1,    -1,    -1,    -1,  3181,    -1,    -1,    -1,    -1,   241,
      -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,
    2343,  2344,  2345,    -1,    -1,  2348,  2349,  2350,  2351,  2352,
    2353,    -1,    -1,   172,  2357,  2358,  2359,  2360,  2361,  2362,
    2363,  2364,  2365,  2366,    -1,    -1,    -1,    -1,  2371,  2372,
     189,  3228,    -1,    -1,    -1,   194,     8,    -1,    -1,    11,
      -1,  3238,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,  3251,    -1,  2399,    -1,   217,   218,
     312,  2404,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    46,   327,    -1,    -1,  2421,    -1,
      -1,    53,    -1,    -1,    -1,    -1,  3283,    -1,    -1,    -1,
      -1,  2434,    -1,    -1,  2437,  2438,    -1,    -1,    -1,    -1,
      -1,  2444,  2445,    -1,  3332,    -1,    78,    -1,   360,   268,
      -1,   363,   271,    -1,    -1,  2458,  2459,  2460,  2461,    -1,
    2463,    -1,   374,    -1,  2467,   377,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,   416,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   426,  3372,  3373,  3374,  2521,    -1,
     432,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
     172,    -1,  3399,    -1,    -1,    -1,    -1,   459,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    46,
      -1,    -1,   194,    -1,    -1,   384,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3440,    -1,   217,   218,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,  2627,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,   285,    -1,  2658,   288,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,   172,    -1,   506,    -1,    78,
      -1,    -1,    -1,  2696,    -1,  2698,    -1,    -1,    -1,  2702,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,  2711,    -1,
      -1,  2714,    -1,  2716,    -1,    -1,    -1,  2720,    -1,    -1,
    2723,  2724,    -1,    -1,  2727,  2728,    -1,    -1,    -1,    -1,
     217,   218,  2735,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      -1,  2744,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,  2759,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,   172,   271,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,  2797,    -1,    -1,    -1,   285,    -1,
     189,   288,    -1,    -1,    -1,   194,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   142,    -1,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   152,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,   506,   164,    -1,    -1,    -1,   268,
     169,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   384,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2935,  2936,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   241,    -1,    -1,    -1,   245,  2960,  2961,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2978,    -1,    -1,    -1,  2982,
      -1,  2984,  2985,  2986,    -1,    -1,  2989,    -1,    -1,  2992,
    2993,    -1,    -1,    -1,    -1,   384,    -1,    -1,  3001,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,  3042,
      -1,    -1,    -1,    -1,    -1,  3048,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3061,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,    -1,   374,    -1,  3090,   377,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,   395,   496,   497,   498,
     499,   500,   501,    -1,    -1,  3118,    -1,   506,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,
      -1,    -1,    -1,   432,    -1,    -1,    -1,  3150,  3151,  3152,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3170,    -1,    -1,
     459,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,  3278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
    3303,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,  3347,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,  3402,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,    -1,   515,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,   515,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,   491,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,   506,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,   491,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
     128,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,   228,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,   506,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
     491,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
      -1,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,    -1,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,     3,     4,     5,   503,    -1,
     505,     9,    -1,    -1,    -1,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,     3,     4,     5,     6,     7,   505,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,    -1,     9,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,    -1,   285,   286,   287,    -1,   289,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   506,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,   506,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,     3,   491,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,     3,   491,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
     167,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,   409,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,     3,
     491,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    15,    16,   503,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,    -1,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,   488,    -1,     3,    -1,   492,   493,
     494,     8,   496,   497,   498,   499,   500,   501,    15,    16,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,
      53,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,
      -1,   194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,   384,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    -1,
      -1,   384,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    36,
      -1,   384,    -1,   506,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    36,
      -1,    78,    -1,   506,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    36,
      -1,    78,    -1,   506,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    36,
      -1,    78,    -1,   506,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,   172,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    36,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
      -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,   384,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    36,    -1,   384,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    36,    -1,    78,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    36,    -1,    78,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,     8,    -1,
      -1,    11,    53,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    36,    78,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,   172,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,   189,
     271,   232,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,     4,     5,    -1,    -1,    -1,     9,   496,   497,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,     4,     5,    -1,
      -1,    -1,     9,   496,   497,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,    -1,     8,    -1,    -1,    11,    -1,   496,
     497,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    36,    -1,    78,    -1,    -1,    -1,   162,    -1,
      -1,    -1,    46,   167,    -1,    -1,    -1,    -1,   172,    53,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,
     194,    -1,    -1,    -1,    78,    -1,    -1,   161,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
     384,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,
      -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   447,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,    -1,    -1,    -1,    -1,    -1,   310,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    -1,    -1,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    36,    -1,
     384,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    36,    -1,
      78,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,     8,    -1,   194,    11,    -1,    -1,
      78,    15,    16,    17,    18,    19,    20,    21,    -1,   167,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    46,    -1,   232,    -1,   194,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   162,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,   232,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    78,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   417,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    36,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,   489,    -1,    -1,   492,   493,
     494,   172,   496,   497,   498,   499,   500,   501,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    46,
      -1,    -1,    -1,   194,    -1,    -1,    53,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   172,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,   268,    -1,    78,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     217,   218,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   384,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,   285,    -1,    -1,   288,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   189,    -1,    -1,   268,    -1,   194,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,   409,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,    -1,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,    -1,   314,   315,   316,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,    -1,   426,    -1,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,   488,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
      -1,   172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,    -1,   426,    -1,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    -1,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,    -1,   269,
     270,   271,   272,    -1,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,    -1,   293,   294,   295,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,    -1,   314,   315,   316,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,    -1,   426,    -1,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,   487,   488,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    -1,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,   294,   295,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,    -1,   314,   315,   316,    -1,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,    -1,   426,    -1,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    -1,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
      -1,   269,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,    -1,   426,    -1,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,    -1,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
      -1,   172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,    -1,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,    -1,   426,    -1,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    22,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,    32,    -1,    34,    35,    -1,    -1,    -1,
      22,    -1,    -1,    -1,   485,   486,   487,   488,    -1,    -1,
      32,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,    -1,    -1,    96,    -1,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,   123,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,
      -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    -1,   163,   147,    -1,    -1,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   163,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,   308,
     309,    -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,   318,
      -1,    -1,    -1,    -1,    -1,   307,   308,   309,    -1,    -1,
      -1,    -1,    -1,   315,    -1,    -1,   318,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,   356,    -1,    -1,    -1,    -1,    -1,
     379,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,
     372,    -1,    -1,    -1,   393,    -1,    -1,   379,    -1,    -1,
      -1,   383,    -1,    -1,    -1,    -1,   405,    -1,    -1,    -1,
     409,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   405,    -1,    -1,    -1,   409,    -1,    -1,
     429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   429,    -1,   448,
      -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,   457,    -1,
     442,    -1,    -1,    -1,    -1,    -1,   448,    -1,   467,    -1,
      -1,   453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   307,   308,   309,   315,   318,
     347,   356,   372,   379,   383,   393,   405,   409,   429,   442,
     445,   448,   453,   467,   491,   505,   517,   518,   519,   520,
     521,   528,   539,   540,   541,   544,   545,   555,   572,   620,
     630,   633,   636,   642,   644,   647,   648,   652,   659,   660,
     664,   671,   675,   676,   677,   684,   689,   705,   708,   709,
     712,   714,   715,   716,   717,   719,   721,   722,   726,   779,
     780,   941,   943,   944,   945,   950,   953,   959,   960,   964,
     423,   470,   942,   198,   363,   374,   409,   459,   106,   542,
     942,     3,    22,    23,    24,    25,    26,    27,    28,    29,
      31,    32,    33,    42,    43,    44,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    59,    60,
      61,    62,    63,    64,    67,    68,    69,    70,    71,    73,
      74,    75,    76,    77,    79,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    92,    93,    94,    95,    96,
      97,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   114,   116,   117,   118,   119,
     120,   121,   123,   124,   125,   126,   127,   130,   131,   132,
     133,   134,   136,   137,   138,   140,   141,   142,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   156,
     158,   159,   160,   161,   163,   165,   166,   168,   169,   170,
     171,   172,   173,   175,   177,   178,   179,   180,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     195,   196,   197,   198,   199,   200,   201,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   214,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   229,
     230,   231,   232,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   269,   270,   271,
     272,   274,   275,   276,   277,   278,   279,   281,   282,   285,
     286,   287,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   322,
     323,   324,   325,   326,   327,   329,   330,   331,   332,   333,
     334,   335,   336,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   407,   408,   410,
     411,   412,   413,   414,   415,   416,   418,   419,   420,   423,
     424,   425,   426,   427,   429,   430,   431,   432,   433,   434,
     435,   436,   439,   440,   441,   443,   444,   445,   446,   448,
     449,   450,   451,   452,   453,   454,   456,   457,   458,   459,
     460,   461,   462,   465,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   548,   623,   624,   625,   850,
     930,   934,     3,   171,   242,   402,   546,   548,   623,   942,
      55,   505,   567,   173,   236,   288,   363,   370,   413,   415,
     432,   438,   441,   618,   683,     5,    30,   318,   548,   549,
     929,   106,   542,    24,    79,    95,   142,   152,   164,   169,
     198,   241,   245,   312,   327,   360,   363,   370,   374,   377,
     395,   409,   416,   426,   432,   459,   653,   654,   657,   942,
     929,    98,   133,   457,   505,   520,   521,   528,   544,   545,
     555,   572,   620,   630,   633,   642,   644,   647,   648,   652,
     660,   667,   671,   677,   684,   705,   708,   709,   712,   714,
     941,   943,   945,   950,   953,   959,   964,   106,    73,   209,
      66,    77,    79,   154,   227,   274,   284,   296,   313,   359,
     404,   425,   427,   431,   453,   505,   547,   548,   549,   715,
     780,   782,   784,   794,   801,   802,   850,   852,   853,   106,
       5,   548,   550,   706,   706,   548,   929,    30,   173,   236,
     378,   419,   423,   548,   951,   952,   962,   942,    30,   128,
     735,   736,   173,   236,   363,   378,   419,   954,   955,   962,
     942,   548,   714,   726,   963,   548,   801,   409,   732,   547,
     168,   505,   947,   505,   335,   727,   728,   929,   727,   715,
     716,     0,   508,   457,   665,   118,   208,   444,   143,   213,
     289,   437,   738,   739,   784,   784,   715,   717,   719,   509,
      30,   419,   423,   714,   963,   187,   547,   929,   187,   547,
     187,   801,   187,   547,   550,   503,   507,   551,   552,   505,
     714,   547,   413,   415,   413,   415,   345,   187,   547,   187,
     548,   637,   547,   169,   241,   335,   374,   409,   459,   631,
     198,    30,   929,   187,     3,   247,   426,   105,   409,   409,
     459,   548,   367,     3,    37,    42,    49,    54,    55,    56,
      57,    69,    70,    79,    81,    87,    99,   110,   111,   132,
     160,   166,   168,   172,   187,   189,   204,   211,   212,   214,
     217,   218,   220,   230,   232,   242,   261,   262,   263,   271,
     276,   293,   295,   314,   332,   354,   358,   373,   380,   384,
     387,   402,   411,   419,   420,   431,   437,   454,   457,   623,
     626,   658,   812,   814,   816,   818,   820,   822,   824,   825,
     826,   828,   829,   830,   832,   833,   935,   187,   548,   655,
     936,   187,   926,   929,   187,   929,   505,   663,   288,   667,
       3,    37,    42,    49,    53,    54,    55,    56,    57,    69,
      70,    77,    79,    81,    87,    99,   110,   111,   148,   154,
     160,   166,   168,   171,   172,   177,   178,   189,   204,   205,
     211,   212,   214,   217,   218,   220,   230,   232,   242,   261,
     262,   263,   267,   271,   274,   276,   292,   293,   295,   296,
     313,   314,   317,   332,   354,   358,   373,   380,   384,   387,
     402,   404,   411,   419,   420,   425,   427,   431,   453,   454,
     457,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   623,   627,   668,   670,   671,   673,   674,   665,
     548,   550,   546,   706,   505,   505,   162,   505,   715,   802,
     505,   505,   547,   505,   505,   167,   505,   505,   505,   505,
     715,   780,   784,   794,   498,   551,    40,   548,   795,   796,
     795,   372,   509,   718,    37,    42,    99,   168,   204,   220,
     230,   262,   307,   314,   354,   373,   442,   798,   796,    40,
     548,   795,   797,   491,   806,   550,   167,   494,   505,   505,
     710,   952,   952,   952,   488,   219,   507,   283,     4,     6,
       7,     8,     9,    10,    39,    54,    56,    57,    65,    69,
      70,    81,   110,   111,   113,   148,   155,   160,   177,   178,
     211,   212,   214,   242,   261,   263,   268,   273,   276,   285,
     332,   358,   387,   419,   420,   428,   454,   489,   496,   497,
     498,   503,   505,   510,   511,   512,   513,   548,   550,   715,
     769,   817,   820,   823,   824,   825,   827,   828,   829,   832,
     833,   844,   846,   847,   848,   849,   850,   851,   853,   854,
     869,   870,   881,   903,   908,   916,   917,   918,   930,   931,
     932,   915,   917,   954,   954,   550,   954,   488,   167,   421,
     494,   507,   551,   649,   801,     3,   166,   168,   457,   671,
     946,   948,   166,   949,   844,   887,   888,   727,   509,   505,
     938,   506,   506,   519,   547,   167,   288,   692,   649,    30,
     128,   733,   733,    59,   733,   157,   162,   233,   280,   744,
     746,   747,   772,   774,   775,   776,   176,   283,   447,   283,
     738,   739,   505,   410,   961,   488,   219,   148,    26,    32,
     133,   287,   343,   347,   379,   450,   533,   536,   537,   343,
     148,    40,    60,   104,   197,   246,   254,   266,   298,   343,
     349,   374,   379,   393,   522,   525,   536,   148,   343,   379,
     536,   148,   343,   379,   536,    40,   543,   844,   909,     3,
      30,    34,    35,    36,    38,    39,    40,    41,    45,    58,
      65,    66,    72,    78,    80,    91,    98,   113,   115,   122,
     128,   129,   135,   139,   143,   155,   157,   162,   164,   167,
     174,   176,   181,   194,   202,   213,   215,   227,   228,   233,
     268,   273,   280,   283,   284,   288,   289,   307,   308,   309,
     310,   321,   328,   337,   351,   372,   389,   406,   409,   417,
     421,   422,   428,   437,   438,   442,   447,   453,   455,   463,
     464,   466,   467,   553,   554,   623,   627,   629,   552,     3,
      30,    37,    42,    49,    55,    79,    81,    87,    99,   128,
     166,   168,   171,   172,   189,   204,   217,   218,   220,   230,
     232,   242,   262,   271,   293,   295,   314,   354,   373,   384,
     402,   411,   431,   455,   457,   506,   623,   628,   844,   890,
     891,   933,   939,   506,   505,   607,   363,   370,   618,   268,
     634,   268,   505,    40,   459,   187,   547,   187,   547,   622,
     187,   547,   187,   547,    87,   680,   148,   471,   187,    88,
     125,   301,   414,   456,   831,   831,   831,   505,   819,   819,
     317,   505,   821,   148,   505,    69,    70,   831,   819,   816,
     469,   491,   505,   834,   505,   834,   505,    63,   350,   509,
     656,   505,    39,   815,   505,   107,   108,   184,   185,   248,
     249,   250,   251,   252,   253,   256,   257,   368,   369,   485,
     486,   505,   835,   836,   837,   838,   839,   840,   841,   842,
     843,   819,   148,   507,   937,   509,   656,   148,   509,   656,
     148,   283,   661,   662,   844,   939,   345,   506,   509,     4,
     155,   283,   428,   496,   497,   524,   527,   550,   666,   668,
     669,   672,   932,   667,   421,   505,   562,   566,   167,   844,
     888,   505,     3,   550,   835,   836,   837,   838,   839,   840,
     841,   842,   893,   894,   796,   797,   844,   547,   844,   895,
     496,   497,   548,   845,   846,   870,   881,   897,   505,   844,
     887,   898,   844,    58,   167,   228,   422,   844,   888,   901,
     844,   506,   549,   505,   411,   752,   753,   753,   735,   736,
     784,   215,   730,    37,   220,   373,   798,   220,   293,   799,
     784,   799,   220,   798,   505,   220,   799,   144,   195,   786,
     220,   753,   505,   549,   505,   753,   290,   548,   550,   707,
     524,   672,   956,   958,   890,   814,   892,    40,   231,   548,
     505,   503,   715,   844,   907,   505,   715,   513,   844,   505,
     505,   844,   844,   844,   144,   919,   920,   844,   888,   889,
     715,   844,   887,     9,   554,   549,   871,   872,   873,   507,
     551,   910,   551,   505,   550,   505,   550,   932,     3,     8,
      11,    15,    16,    17,    18,    19,    20,    21,    36,    40,
      46,    53,    78,   172,   189,   194,   217,   218,   232,   268,
     271,   285,   288,   384,   489,   492,   493,   494,   496,   497,
     498,   499,   500,   501,   879,   880,   881,   883,   913,   468,
     855,   295,   844,   509,   730,   505,   550,   730,     3,   113,
     236,   524,   550,   833,   957,   102,   113,   958,   113,   958,
     548,    40,   548,   506,   509,   665,   509,   506,   728,   926,
     927,    40,   938,   649,   188,   345,   215,   379,   717,   717,
      30,   740,   741,   844,    59,   717,   734,   159,   265,   760,
     222,   266,   331,   382,   444,     4,     9,    30,   755,   844,
     496,   497,   756,   757,   844,   846,   772,   773,   747,   746,
     744,   745,   162,   775,   278,   777,    59,   723,   724,   725,
     787,   845,   917,   917,   744,   772,   888,   231,   547,    72,
      80,    91,   164,   187,   321,   438,   548,   589,   599,   614,
      80,    91,   713,    91,   713,   505,   421,   505,   587,   240,
     441,   587,    91,   509,   421,   547,   816,   524,    59,   526,
     524,   524,   104,   246,   254,    59,   421,   467,   491,   523,
     259,   363,   523,   525,   801,    91,   421,   713,   363,   547,
     421,   363,   548,   562,   504,   515,   890,   890,   891,   509,
     738,   739,    13,    14,   421,   548,   606,   611,   467,   565,
     547,   637,   335,   374,   409,   459,   631,   148,    98,   572,
     635,   642,   677,   964,   148,   548,   638,   639,   140,   814,
     547,   268,   522,   643,   268,   505,   607,    40,   268,   607,
     268,   505,   632,   187,   548,   601,   681,     3,   148,   505,
     889,   932,   658,   892,   831,   831,    39,   815,   419,   419,
     932,   932,   548,   811,   814,   811,   503,   503,   932,   932,
     421,   421,   421,   421,   655,   553,   507,   936,   926,   929,
     929,   936,   506,   509,    13,   667,   673,     4,   932,     4,
     932,   550,   554,   564,   571,    55,   100,   119,   137,   141,
     163,   166,   182,   273,   281,   303,   329,   568,   707,    40,
     506,   844,   506,   167,   509,   506,   310,   896,   506,   845,
     845,    11,    15,    16,    19,    20,    21,   194,   217,   285,
     492,   493,   494,   496,   497,   498,   499,   500,   501,   881,
     845,   506,   803,   804,   852,   162,   167,   899,   900,   509,
     506,    40,   901,   888,   901,   901,   167,   506,    40,   795,
     505,   927,     4,     9,   548,   748,   750,   751,   917,   915,
     173,   236,   409,   413,   415,   441,   547,   731,   464,   807,
     784,   220,   784,   283,   447,   800,   784,   220,   917,   784,
     275,   275,   505,   784,   549,   808,   809,   505,   549,   808,
     509,   506,   509,   506,   509,   555,   648,   684,   711,   714,
     943,   888,   889,   463,   904,   905,   844,   844,   874,   875,
     876,   877,     8,    15,    16,    19,    20,    21,   492,   493,
     494,   496,   497,   498,   499,   500,   501,   548,   879,   884,
     506,   888,   505,   548,   345,   924,   162,   504,   506,   509,
     515,   509,   514,   498,   552,   888,   844,   843,   843,   814,
     844,   844,   844,   844,   844,   844,   844,   844,     5,   554,
     940,   419,    45,   406,   914,   936,   844,   844,   505,   715,
     902,   128,   155,   268,   273,   278,   428,   439,   844,   273,
     505,   844,   421,    53,   172,   189,   194,   232,   384,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,    30,
      38,   389,   878,   503,   507,   912,   176,   158,   856,   358,
     505,   870,   918,   167,   781,   890,   781,   505,   550,   548,
     547,   946,   539,   547,   844,   509,   506,   245,   268,   729,
     447,   651,   547,   686,   505,   548,   691,   701,   702,   704,
      41,   122,   742,   509,   447,   742,   259,   717,   358,   359,
     496,   497,   757,   759,   846,   382,   222,   284,   306,   306,
     509,   500,     4,   758,   932,   758,   358,   359,   759,   547,
     925,   272,   386,   778,   505,   927,   928,   509,   176,   447,
     194,   176,   215,   773,   745,   506,   343,   536,   505,   187,
     599,   929,   222,   268,   222,   447,   505,   592,   813,   814,
     929,   548,   187,   929,   187,   548,    26,   133,   379,   532,
     535,   554,   583,   597,   929,   554,   591,   610,   929,   533,
     929,   343,   379,   522,   536,   524,   936,   929,   524,   936,
     929,   524,   343,   379,   536,   929,   929,   929,   929,   343,
     379,   536,   929,   929,   497,   844,   909,   738,   738,   738,
     455,   891,   188,   348,   737,   844,   844,   326,   561,   506,
     509,   281,   167,   421,   556,   634,   505,   459,   547,   547,
     622,   547,   547,   547,   288,   618,   637,     5,   503,   548,
     506,   509,   505,   715,   505,   148,   148,   232,   548,   589,
     599,   602,   605,   615,   617,   467,   469,   594,   147,   714,
     148,   467,   682,   148,   506,   890,    40,   268,   283,   888,
     506,   506,   656,   506,   503,   488,   488,   506,   506,   814,
     506,   509,   506,   932,   504,   932,   506,   506,   836,   838,
     839,   840,   839,   840,   840,   656,   553,   656,   283,   656,
     661,   844,   562,   498,   505,   524,   563,   672,   849,   506,
     509,    40,   560,   550,   560,   268,   273,   329,   560,    59,
     560,   814,   506,   844,   844,   844,   899,   814,   845,   845,
     845,   845,   845,   845,   128,   268,   278,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   506,   509,    40,
     805,   844,   844,   900,   899,   814,   506,   506,   506,   888,
     814,   927,   506,   306,   500,   306,   359,   500,   505,   505,
     730,   413,   415,   413,   415,   547,   732,   732,   732,   844,
     176,   761,   800,   784,   844,   505,   784,   162,   505,   549,
     791,   800,   814,   506,   509,   808,   506,   956,   814,   506,
     504,   844,   135,   905,   906,   506,   515,   509,   514,   507,
     506,   506,   927,   505,   844,   921,   548,   844,   844,   871,
     920,   506,   506,   488,   845,   845,   141,   888,   167,   128,
     155,   273,   278,   428,   439,   505,   141,   884,   844,   406,
     914,   844,   902,   844,   421,   505,   715,   844,   909,   553,
     505,   505,   151,   857,   782,   783,   807,   738,   807,   932,
     843,   938,   938,   245,   505,   783,   464,   650,    40,    59,
     687,   697,   704,   910,   509,   781,   494,   490,   743,   741,
     285,   879,   882,   743,     4,   932,   759,   284,   444,   756,
     509,   239,   927,   723,    59,   917,   505,   549,    59,   259,
     421,   844,   268,   614,   505,   148,   505,   592,   198,   611,
     612,   573,    40,   171,   582,   608,   573,    26,   133,   347,
     349,   379,   529,   530,   531,   537,   538,   148,   656,   148,
     656,   583,   597,   583,   506,   509,   550,   576,   494,   507,
     506,   509,   421,   363,    91,   421,   713,   363,   421,   421,
     421,   363,   515,   504,   515,   737,   737,   737,   891,   275,
     275,   506,   396,   397,   550,   570,   606,   561,   639,   547,
     643,   505,    40,   607,   632,   634,   345,   409,   505,     5,
     640,   641,   638,   550,   645,   646,   611,   547,   547,   622,
     547,   506,   509,   281,   587,   281,   283,   586,   929,   467,
     621,   547,   587,    40,   547,   506,   409,   844,   148,   547,
     506,   815,   932,   834,   834,   815,   548,   815,   504,   504,
     936,   558,   569,   672,   564,   550,   550,   273,   611,   498,
     611,   550,   498,   611,   550,   506,   506,   900,   167,   128,
     278,   505,   806,   803,   505,   506,   506,   506,   548,   748,
     807,   732,   732,   732,   732,   547,   547,   547,    59,   181,
     770,   800,   927,   505,   788,   789,   790,   847,   930,   927,
     162,    78,   810,   809,   506,   417,   844,   139,   844,   874,
     884,   506,   844,   921,   922,   923,    40,   194,   506,   924,
     843,   844,    36,    36,   844,   506,   844,   167,   505,   892,
     844,   506,   141,   845,   845,   141,   141,   844,   844,   504,
     515,   505,   911,   739,   464,   844,   294,   861,   509,   761,
     737,   761,   506,   711,   844,   351,   695,   548,   259,   313,
     113,   297,   505,   685,   714,   506,   509,   691,   650,   844,
     159,   226,   505,   743,   284,   547,   506,   928,   176,   715,
     716,   917,   928,   929,   929,   506,   148,   612,   599,   612,
     573,   601,   509,   506,   115,   202,   266,   268,   598,   505,
      33,    59,   619,   608,    72,    78,    91,   113,   115,   202,
     268,   273,   321,   337,   438,   447,   578,   579,   593,   171,
     113,   186,   268,   587,   523,   105,   113,   171,   268,   395,
     398,   525,   587,   379,   531,   432,   929,   548,   535,     3,
      37,    42,    49,    55,    79,    81,    87,    99,   166,   168,
     171,   172,   189,   204,   217,   218,   220,   230,   232,   242,
     262,   267,   271,   285,   293,   295,   314,   354,   373,   380,
     384,   402,   411,   431,   437,   457,   496,   497,   524,   550,
     574,   613,   623,   629,   814,   882,   933,   554,   610,   929,
     929,   929,   929,   929,   929,   929,   929,   929,   929,   909,
     909,   506,   506,   506,   738,   523,   570,   506,   505,   605,
     714,   682,    40,   618,   187,   547,   639,   504,   509,   506,
     509,   506,   643,   505,    40,   596,   594,   602,    84,   663,
     105,   266,   607,   714,   632,   714,   601,   447,   679,   504,
     814,   656,   506,   509,   611,   845,   167,   505,   892,   808,
     506,   509,   506,   761,   547,   547,   547,   547,    30,   101,
     177,   357,   505,   762,   763,   764,   765,   766,   767,   768,
     844,   844,   466,   858,   506,   846,   885,   886,   194,   176,
     785,   789,   505,   506,   791,   792,   793,   936,   844,   509,
     506,   548,   844,   846,   844,   844,   844,   892,   506,   844,
      36,    36,   844,   844,   141,   506,   497,   909,   506,   890,
     506,   844,   506,   505,   548,   862,   770,   506,   770,   550,
     506,   916,   453,   408,   446,   696,   548,   690,   700,   283,
     693,   494,   704,   695,   884,    59,   506,   506,   452,   453,
     720,   573,   599,   506,   506,   467,   604,   116,   190,   200,
     115,   449,   844,   113,    40,   505,   936,   929,   845,   116,
     190,   115,   273,   222,   547,   604,    86,   619,   187,   273,
     524,   844,   619,   273,   496,   497,   527,   548,   814,   656,
     656,   242,   402,   933,   937,   494,   421,   421,   504,   504,
     737,   562,   447,   557,   559,   611,   506,   621,    40,   409,
     844,   409,   268,   505,   506,   640,   550,   682,   605,   147,
     714,   145,   196,   586,   118,   133,   320,   621,   105,   682,
     467,   965,    40,   283,   548,   678,   505,   569,   845,   892,
     506,   506,     9,   344,   754,   770,   505,   381,   505,   506,
     509,   548,   859,   860,   328,   771,   509,   506,   505,   549,
      59,   506,   890,   194,   506,   792,   921,   504,   187,   506,
     844,   844,   844,   515,   504,   515,   506,   506,   548,   863,
     858,   550,   858,   509,   452,   910,   506,   509,    89,   695,
     844,   506,   928,   928,   337,   604,   505,   595,   573,   506,
     186,   505,   844,   268,   579,   604,   607,   929,    40,   148,
     810,   937,   500,   574,   929,   929,   506,   523,   120,   506,
     594,   714,   714,   547,   148,    40,   506,   929,   621,    30,
      83,    92,   114,   186,   199,   395,   398,   590,   590,   359,
     359,    40,    64,    72,   236,   409,   844,   547,   505,   548,
     694,   703,   852,   506,   506,   505,   858,   888,   505,   888,
     764,    40,   509,   844,   447,   749,   846,   917,   927,   796,
     738,   505,   796,   844,   909,   909,   303,   864,   771,   771,
     714,   297,   714,   690,   283,   505,   688,   547,   573,   554,
     600,   603,   399,   461,   580,   581,   505,   575,   844,   506,
     244,   616,   186,   447,   534,   500,   432,   562,   550,   682,
     586,   965,   505,   547,   714,   594,   663,   714,    72,   286,
      72,   714,   679,   844,    78,   698,   506,   509,   698,     9,
     771,   506,   763,   506,   862,   860,   361,   506,   737,   917,
     504,   504,   504,    59,   738,   749,   749,   696,    91,   703,
     129,   607,   494,   506,   509,   522,   506,   266,   588,   168,
     302,   385,   283,   584,   585,   609,   575,   844,   432,    40,
     505,   965,   586,   621,   965,   286,   286,   505,   506,   936,
     699,   936,   682,   694,   699,   506,   749,   506,   751,   506,
     506,   887,   179,   330,   359,   865,   452,   929,   506,   269,
     444,   616,   574,   603,   506,   581,   200,   118,   444,   283,
     609,   283,   584,   714,   703,   698,   742,   807,   742,    53,
     102,   434,   844,   866,   867,   866,   866,   506,   714,   807,
     379,   585,    63,   266,   350,   379,   577,   577,   965,   506,
     699,   743,   743,   867,   358,   161,   316,   161,   316,   144,
     868,   868,   868,   702,   573,    25,   113,   273,   682,   742,
      36,   102,   176,   266,   418,   807,   807,   743,   867,   358,
     291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   516,   517,   518,   518,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   528,   528,   528,   528,   528,
     528,   528,   528,   529,   529,   530,   530,   531,   531,   531,
     531,   532,   532,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   534,   534,   535,   535,   535,   535,   536,   536,
     537,   538,   538,   538,   647,   647,   647,   647,   547,   547,
     548,   548,   548,   549,   549,   550,   551,   551,   552,   553,
     554,   554,   554,   554,   712,   712,   712,   712,   712,   712,
     712,   712,   712,   712,   712,   712,   712,   713,   713,   684,
     685,   685,   685,   685,   685,   686,   686,   687,   687,   687,
     688,   688,   688,   689,   689,   690,   691,   691,   692,   692,
     692,   693,   693,   693,   694,   694,   694,   695,   695,   696,
     696,   697,   697,   698,   698,   699,   699,   700,   700,   701,
     701,   702,   702,   703,   703,   704,   644,   644,   644,   645,
     645,   646,   646,   708,   708,   708,   642,   642,   642,   643,
     643,   636,   636,   636,   637,   637,   638,   638,   638,   639,
     639,   640,   641,   641,   660,   660,   660,   661,   661,   662,
     662,   663,   663,   521,   521,   522,   522,   523,   523,   523,
     524,   524,   524,   524,   525,   525,   525,   525,   525,   525,
     525,   525,   525,   525,   525,   525,   525,   525,   526,   526,
     527,   527,   527,   659,   659,   941,   941,   941,   941,   941,
     941,   942,   942,   942,   944,   572,   572,   572,   573,   573,
     574,   574,   574,   574,   574,   574,   575,   575,   576,   577,
     577,   577,   577,   577,   578,   578,   578,   578,   579,   579,
     579,   579,   579,   579,   579,   579,   580,   580,   581,   581,
     582,   582,   582,   583,   584,   585,   585,   585,   585,   585,
     586,   586,   586,   586,   587,   588,   588,   589,   589,   590,
     590,   590,   590,   590,   590,   590,   590,   591,   591,   592,
     593,   593,   593,   593,   594,   594,   594,   594,   595,   596,
     596,   596,   597,   598,   598,   598,   598,   598,   598,   599,
     599,   600,   600,   601,   602,   602,   602,   603,   603,   604,
     604,   605,   605,   605,   606,   607,   607,   608,   608,   609,
     610,   610,   610,   610,   611,   611,   612,   612,   613,   613,
     613,   614,   614,   614,   614,   614,   614,   615,   615,   616,
     616,   616,   616,   617,   618,   618,   618,   618,   618,   618,
     618,   618,   619,   619,   652,   652,   652,   652,   652,   652,
     652,   652,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   654,
     654,   654,   654,   654,   654,   655,   655,   656,   656,   656,
     657,   657,   657,   658,   658,   630,   630,   630,   630,   630,
     630,   631,   631,   632,   632,   943,   555,   555,   556,   556,
     557,   557,   558,   558,   559,   559,   560,   560,   561,   561,
     562,   562,   563,   563,   563,   563,   563,   563,   564,   565,
     565,   566,   566,   567,   567,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   569,   570,   570,   570,   571,   571,   714,   714,   715,
     715,   716,   716,   716,   716,   716,   716,   716,   716,   717,
     717,   718,   718,   719,   719,   719,   719,   719,   719,   719,
     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
     719,   719,   720,   720,   721,   721,   722,   722,   723,   723,
     723,   724,   724,   725,   725,   726,   726,   726,   727,   727,
     728,   729,   729,   729,   730,   730,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   732,   732,   733,   733,   733,
     734,   735,   735,   736,   736,   737,   737,   737,   738,   738,
     739,   739,   740,   740,   741,   741,   742,   742,   742,   743,
     743,   743,   744,   744,   744,   744,   745,   745,   746,   746,
     746,   746,   747,   747,   748,   748,   748,   748,   748,   748,
     749,   749,   750,   750,   751,   751,   751,   751,   752,   753,
     753,   754,   754,   755,   755,   755,   755,   755,   756,   757,
     757,   757,   758,   758,   759,   759,   760,   760,   761,   761,
     761,   762,   762,   763,   763,   764,   764,   764,   764,   764,
     765,   766,   767,   768,   769,   769,   770,   770,   771,   771,
     772,   772,   773,   773,   774,   774,   775,   776,   776,   776,
     776,   777,   777,   778,   778,   778,   779,   779,   780,   780,
     781,   781,   782,   782,   783,   783,   784,   784,   784,   784,
     784,   784,   784,   784,   784,   784,   785,   785,   786,   786,
     786,   787,   787,   788,   788,   789,   789,   790,   790,   791,
     791,   792,   793,   793,   794,   794,   794,   794,   794,   794,
     794,   794,   794,   794,   794,   795,   795,   795,   795,   796,
     796,   797,   797,   797,   797,   797,   798,   798,   798,   798,
     798,   798,   799,   799,   800,   800,   801,   801,   801,   801,
     802,   802,   803,   804,   804,   805,   805,   806,   806,   807,
     807,   808,   808,   809,   810,   810,   811,   811,   812,   812,
     813,   813,   814,   814,   814,   814,   814,   814,   814,   814,
     814,   815,   815,   815,   816,   816,   816,   816,   816,   816,
     816,   817,   817,   817,   817,   818,   819,   819,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   821,
     821,   822,   822,   823,   823,   824,   825,   826,   826,   827,
     827,   828,   829,   830,   830,   830,   830,   830,   830,   831,
     831,   832,   832,   832,   832,   833,   834,   834,   834,   835,
     835,   836,   836,   837,   837,   838,   838,   839,   839,   840,
     840,   841,   841,   842,   842,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   846,   846,   846,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   848,   848,   848,   848,   848,   848,   849,   850,
     850,   850,   850,   850,   850,   851,   851,   852,   852,   853,
     853,   853,   853,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   853,   854,   854,   855,   855,   856,   856,   856,
     857,   857,   858,   858,   859,   859,   860,   861,   861,   861,
     862,   863,   863,   864,   864,   865,   865,   865,   865,   866,
     866,   867,   867,   867,   867,   867,   868,   868,   868,   868,
     868,   869,   869,   870,   870,   871,   872,   872,   873,   873,
     874,   875,   875,   876,   876,   877,   877,   878,   878,   878,
     879,   879,   880,   880,   880,   880,   880,   880,   880,   880,
     880,   880,   880,   880,   880,   880,   881,   881,   882,   882,
     883,   883,   883,   883,   883,   883,   883,   883,   884,   884,
     885,   885,   886,   886,   887,   887,   888,   888,   889,   889,
     890,   890,   891,   891,   891,   892,   892,   893,   893,   894,
     894,   894,   894,   894,   894,   894,   894,   894,   894,   895,
     895,   896,   897,   897,   898,   898,   898,   898,   898,   898,
     899,   900,   901,   901,   901,   902,   902,   903,   904,   904,
     905,   906,   906,   907,   907,   908,   908,   552,   552,   552,
     552,   909,   909,   910,   910,   911,   911,   911,   912,   912,
     912,   912,   912,   913,   913,   914,   914,   915,   915,   916,
     916,   917,   917,   918,   918,   918,   919,   919,   920,   920,
     921,   922,   922,   923,   923,   924,   924,   924,   925,   925,
     926,   926,   927,   927,   928,   928,   929,   930,   930,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   931,
     931,   931,   931,   932,   933,   933,   933,   934,   934,   934,
     935,   935,   935,   936,   936,   937,   937,   938,   938,   939,
     940,   940,   709,   710,   710,   711,   711,   711,   711,   711,
     633,   633,   633,   634,   634,   635,   635,   635,   635,   677,
     677,   678,   679,   679,   680,   680,   681,   681,   682,   682,
     683,   683,   520,   520,   520,   520,   520,   520,   545,   545,
     546,   546,   675,   675,   676,   664,   664,   664,   664,   665,
     665,   666,   666,   666,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   668,   668,   668,   669,   669,   670,
     670,   671,   671,   672,   672,   672,   672,   673,   674,   674,
     953,   953,   953,   953,   954,   954,   954,   954,   955,   955,
     955,   955,   956,   956,   957,   957,   957,   957,   957,   957,
     957,   958,   958,   705,   705,   705,   705,   705,   706,   706,
     707,   707,   945,   945,   945,   945,   945,   946,   946,   946,
     946,   946,   947,   947,   948,   948,   949,   949,   648,   648,
     649,   649,   649,   650,   650,   651,   651,   539,   539,   540,
     541,   541,   542,   542,   543,   543,   950,   950,   950,   950,
     951,   951,   952,   952,   952,   959,   959,   959,   959,   959,
     959,   959,   959,   960,   960,   961,   961,   962,   962,   963,
     963,   544,   964,   964,   964,   964,   964,   965,   965,   965,
     965,   620,   620,   620,   621,   621,   621,   622,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     1,     0,     2,     3,     2,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,     9,
       1,     4,     4,     7,     2,     1,     3,     2,     2,     0,
       4,     3,     0,     1,     0,     2,     3,     5,     2,     2,
       0,     8,     5,     0,     5,     5,     7,     2,     0,     1,
       1,     1,     3,     2,     0,     1,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     2,     6,     8,     5,     1,
       0,     1,     3,     2,     4,     5,     5,     8,     7,     1,
       0,     6,     9,     8,     0,     1,     2,     2,     4,     1,
       3,     1,     1,     3,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     3,     5,     2,     2,     2,     2,     2,
       2,     1,     1,     0,     2,     9,    12,    11,     0,     2,
       1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
       2,     3,     5,     3,     2,     5,     1,     1,     1,     0,
       5,     7,     5,     2,     3,     1,     1,     2,     2,     0,
       3,     4,     4,     0,     3,     2,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     0,     3,     3,
       3,     0,     1,     2,     1,     2,     2,     2,     2,     3,
       4,     1,     3,     1,     1,     1,     1,     3,     1,     2,
       0,     1,     2,     0,     1,     3,     0,     2,     0,     3,
       3,     1,     5,     3,     1,     3,     1,     2,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     6,     4,     6,     4,     6,     8,
       4,     6,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     2,
       2,     1,     3,     1,     1,     1,     3,     1,     1,     0,
       1,     1,     1,     1,     3,     8,    11,    10,     7,    10,
       9,     1,     1,     2,     3,     8,    11,     9,     1,     1,
       3,     0,     1,     3,     1,     0,     1,     0,     1,     0,
       1,     3,     1,     1,     1,     3,     1,     0,     2,     2,
       0,     2,     0,     1,     0,     1,     1,     1,     3,     3,
       1,     1,     3,     3,     3,     3,     3,     3,     4,     3,
       2,     1,     1,     1,     1,     1,     3,     1,     1,     3,
       3,     1,     2,     4,     4,     2,     3,     5,     5,     1,
       1,     3,     0,    11,    11,    10,    12,     1,     2,     5,
       4,     4,     4,     4,     7,     5,     4,     7,     6,     9,
       9,     4,     1,     1,     1,     1,     1,     1,     1,     5,
       1,     1,     3,     1,     2,     2,     2,     3,     1,     3,
       7,     1,     2,     0,     2,     0,     3,     3,     4,     4,
       4,     4,     3,     2,     1,     1,     0,     1,     1,     0,
       2,     1,     5,     1,     0,     2,     2,     0,     1,     0,
       3,     5,     1,     3,     4,     3,     1,     1,     0,     2,
       2,     0,     2,     2,     1,     1,     1,     0,     2,     4,
       5,     4,     2,     3,     2,     2,     2,     2,     1,     2,
       3,     0,     1,     0,     5,     1,     4,     6,     2,     1,
       0,     4,     0,     1,     1,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     3,
       0,     1,     3,     1,     2,     1,     1,     1,     1,     1,
       2,     4,     4,     5,     1,     1,     2,     0,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     1,     2,
       2,     0,     1,     3,     1,     2,     3,     3,     3,     3,
       3,     3,     1,     4,     9,     9,     3,     0,     2,     2,
       0,     5,     3,     1,     3,     5,     3,     1,     2,     1,
       3,     5,     1,     2,     3,     4,     5,     4,     5,     4,
       6,     5,     4,     5,     5,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       1,     0,     2,     3,     5,     6,     2,     3,     5,     5,
       5,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     1,     3,
       0,     1,     1,     1,     1,     5,     2,     1,     1,     1,
       1,     4,     1,     2,     2,     1,     3,     3,     2,     1,
       0,     5,     2,     5,     2,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       0,     1,     3,     3,     5,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     3,     2,     2,     3,     3,
       5,     4,     6,     3,     5,     4,     6,     4,     6,     5,
       7,     3,     2,     4,     3,     2,     3,     3,     3,     3,
       4,     3,     4,     3,     4,     5,     6,     6,     7,     6,
       7,     6,     7,     3,     4,     4,     6,     1,     4,     3,
       5,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     5,     6,     6,     7,     1,     1,     2,     1,
       1,     2,     2,     3,     1,     2,     4,     1,     1,     2,
       2,     4,     1,     1,     3,     1,     4,     1,     3,     3,
       6,     7,     9,     7,     7,     5,     1,     1,     1,     5,
       6,     6,     4,     4,     4,     4,     6,     5,     5,     5,
       4,     6,     4,     7,     9,     5,     0,     5,     4,     0,
       1,     0,     2,     0,     1,     3,     3,     2,     2,     0,
       6,     1,     0,     3,     0,     3,     3,     3,     0,     1,
       4,     2,     2,     2,     2,     2,     3,     2,     2,     3,
       0,     4,     3,     1,     5,     3,     1,     3,     1,     2,
       3,     1,     3,     1,     2,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     2,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     2,     1,     0,
       1,     3,     1,     3,     3,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       3,     2,     3,     0,     3,     3,     2,     2,     1,     0,
       2,     2,     3,     2,     1,     1,     3,     5,     1,     2,
       4,     2,     0,     1,     0,     1,     2,     3,     5,     7,
       7,     1,     0,     0,     2,     0,     2,     3,     3,     3,
       5,     7,     7,     0,     2,     1,     0,     1,     0,     1,
       3,     1,     2,     3,     2,     1,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     1,     2,     1,
       1,     2,     1,     1,     2,     7,     2,     5,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     3,     3,     0,     1,
       1,     1,     5,     3,     0,     1,     1,     1,     1,     1,
       4,     7,     6,     2,     0,     1,     1,     1,     1,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     6,     8,     6,     8,     6,     8,     3,     2,
       1,     0,     4,     6,     3,     2,     4,     3,     5,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     2,     2,     3,     4,     5,     1,     1,
       1,     1,     4,     6,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     7,     3,
       1,     2,     3,     2,     0,     2,     0,     2,     4,     5,
       3,     5,     1,     0,     2,     0,     2,     3,     3,     3,
       1,     1,     1,     2,     3,     2,     2,     2,     2,     3,
       4,     3,     1,     1,     1,     1,     0,     1,     3,     1,
       3,     2,     9,    12,    11,    12,    14,     3,     4,     4,
       0,     7,    10,     9,     2,     3,     0,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 499 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 515 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 527 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* stmt: %empty  */
#line 575 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P SECRET opt_secret_name '(' secret_key_val ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P SECRET IF_P NOT EXISTS opt_secret_name '(' secret_key_val ')'  */
#line 16 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P OR REPLACE SECRET opt_secret_name '(' secret_key_val ')'  */
#line 24 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_secret_name: %empty  */
#line 34 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_secret_name: ColId  */
#line 35 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* secret_key: ColId SCONST  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* secret_key: ColId ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 20109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* secret_key: ColId '[' scope_list_val ']'  */
#line 42 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                        { (yyval.list) = list_make2((yyvsp[-3].str), (yyvsp[-1].list)); }
#line 20115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* secret_key_val: secret_key  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* secret_key_val: secret_key_val ',' secret_key  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* scope_list_val_item: SCONST  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.value) = makeString((yyvsp[0].str)); }
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* scope_list_val: scope_list_val_item  */
#line 56 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].value)); }
#line 20139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* scope_list_val: scope_list_val ',' scope_list_val_item  */
#line 57 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].value)); }
#line 20145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* DropSecretStmt: DROP SECRET ColId  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->secret_name = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* DropSecretStmt: DROP SECRET ColId IF_P EXISTS  */
#line 15 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->secret_name = (yyvsp[-2].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 23958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 23976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 23982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 23988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 24970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 24976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 25958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 27953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 27982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* opt_slice_bound: a_expr  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* opt_slice_bound: %empty  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* opt_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* opt_indirection: opt_indirection indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_func_arguments: %empty  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_func_arguments: '(' ')'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* extended_indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_extended_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* opt_target_list_opt_comma: %empty  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* target_list: target_el  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* target_list: target_list ',' target_el  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* target_list_opt_comma: target_list  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* target_list_opt_comma: target_list ','  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* target_el: a_expr AS ColLabelOrString  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* target_el: a_expr IDENT  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* target_el: a_expr  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* except_list: EXCLUDE ColId  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_except_list: except_list  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_except_list: %empty  */
#line 3842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* replace_list_el: a_expr AS ColId  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* replace_list: replace_list_el  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* replace_list: replace_list ',' replace_list_el  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* replace_list_opt_comma: replace_list  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* replace_list_opt_comma: replace_list ','  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_replace_list: REPLACE replace_list_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* opt_replace_list: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* qualified_name_list: qualified_name  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* name_list: name  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* name_list: name_list ',' name  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* name_list_opt_comma: name_list  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* name_list_opt_comma: name_list ','  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* name: ColIdOrString  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* func_name: function_name_token  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* func_name: ColId indirection  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* AexprConst: Iconst  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* AexprConst: FCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* AexprConst: Sconst opt_indirection  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* AexprConst: BCONST  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* AexprConst: XCONST  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* AexprConst: func_name Sconst  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* AexprConst: ConstTypename Sconst  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* AexprConst: TRUE_P  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* AexprConst: FALSE_P  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* AexprConst: NULL_P  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* Iconst: ICONST  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* type_function_name: IDENT  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* type_function_name: unreserved_keyword  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* type_function_name: type_func_name_keyword  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* function_name_token: IDENT  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* function_name_token: unreserved_keyword  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* function_name_token: func_name_keyword  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* type_name_token: IDENT  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* type_name_token: unreserved_keyword  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* type_name_token: type_name_keyword  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* any_name: ColId  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* any_name: ColId attrs  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* attrs: '.' attr_name  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* attrs: attrs '.' attr_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* opt_name_list: %empty  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* ColLabelOrString: ColLabel  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* ColLabelOrString: SCONST  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 29958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 29969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 29980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30305 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
